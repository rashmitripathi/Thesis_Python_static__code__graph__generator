strict digraph "" {
_call_log_prob;
_log_prob;
_log_prob_with_logsf_and_logcdf;
log_survival_function;
_call_log_survival_function;
_log_survival_function;
survival_function;
_call_survival_function;
cdf;
_call_cdf;
_cdf;
range;
cast;
"ops.convert_to_tensor";
_forward_log_det_jacobian;
prob;
_call_prob;
_prob;
_prob_with_sf_and_cdf;
TODO;
log_prob;
"@distribution_util.AppendDocstring";
_name_scope;
_assert_valid_sample;
"math_ops.reduce_sum";
"math_ops.reduce_logsumexp";
"check_ops.assert_positive";
"control_flow_ops.with_dependencies";
"array_ops.ones";
log_cdf;
_call_log_cdf;
_log_cdf;
_log_prob_with_logcdf;
"array_ops.where";
before_run;
on_run_start;
_prepare_run_watch_config;
_prepare_run_debug_urls;
run;
_decorate_run_options;
op;
align;
expand_dims;
check_axis_order;
convert_to_labeled_tensor;
ValueError;
build;
_AddShardedSaveOps;
_AddShardedSaveOpsForV2;
save;
update_checkpoint_state;
generate_checkpoint_state_proto;
"logging.info";
split_fast;
materialize_to_memory;
run_one_epoch;
__init__;
_get_valid_axis_order;
get_axis_order;
"@tc.accepts";
NotImplementedError;
_prob_with_cdf;
"array_ops.ones_like";
"`sample_shape";
transformed_sample;
log;
add_to_tensor;
_add_to_tensor;
to_dense;
_to_dense;
apply;
__call__;
_attention;
reduce_sum;
_ReductionDims;
rank;
"ops.name_scope";
_update_run_calls_state;
_get_run_debug_urls;
after_run;
on_run_end;
_prep_cli_for_run_end;
_feed_fn;
_do_run;
_update_with_movers;
_on_textbox_keypress;
_redraw_output;
_display_output;
_scroll_output;
_compile_ui_status_summary;
_show_array_indices;
_show_array_index_at_line;
_toast;
_display_lines;
_screen_add_line_to_output_pad;
TypeError;
"@tc.returns";
testBasic;
_testAll;
_testTypes;
_test;
_GroupByDevices;
restore;
close;
checkedThread;
join;
request_stop;
_MaybeDeleteOldCheckpoints;
"logging.warning";
partial_run;
_register_dead_handle;
node_info;
testIntTypes;
_GetCheckpointFilename;
"os.path.join";
_survival_function;
_call_forward_log_det_jacobian;
inverse_log_det_jacobian;
_call_inverse_log_det_jacobian;
_inverse_log_det_jacobian;
det;
log_det;
_dispatch_based_on_batch;
get_shape;
"math_ops.exp";
_compute;
sigmoid;
tanh;
shape;
_shape;
inv_quadratic_form_on_vectors;
_inv_quadratic_form_on_vectors;
_iqfov_via_sqrt_solve;
flip_vector_to_matrix;
_flip_vector_to_matrix_static;
reduce_prod;
_flip_vector_to_matrix_dynamic;
_iqfov_via_solve;
_ValidateAndSliceInputs;
_AddSaveable;
_AddShardedRestoreOps;
"time.sleep";
"sess.run";
RuntimeError;
testEmpty;
_compareAll;
_compare;
_checkGrad;
func;
_assertAllClose;
assertAllClose;
_GetNdArray;
"np.array";
testFloat;
_testDtype;
testHalf;
testDouble;
testFillFloat;
testFillDouble;
testFillInt32;
testFillInt64;
testInfinity;
_create_variables;
_covariance;
_variance;
_mean;
get_event_shape;
_get_event_shape;
"tensor_shape.TensorShape";
"tensor_util.constant_value";
_find_consistent_ordering;
"time.time";
wait_for_stop;
should_stop;
_check_stop;
"_coord.should_stop";
testIdentity;
"array_ops.zeros_like";
sample;
_call_sample_n;
_sample_n;
batch_shape;
get_batch_shape;
log_normalizing_constant;
_multi_lgamma;
_multi_gamma_sequence;
batch_shape_tensor;
shape_tensor;
domain_dimension_tensor;
_shape_tensor;
sqrt_solve;
solve;
_batch_log_det;
_batch_sqrt_log_det;
_sqrt_log_det_core;
"array_ops.size";
_get_batch_shape;
event_shape;
_testCpu;
_compareShape;
assertShapeEqual;
assertAllEqual;
_compareShapeN;
_compareRank;
_compareSize;
_compareShapeSparse;
_compareRankSparse;
_compareSizeSparse;
_testGpu;
_testBasic;
_testBothArg;
_testArg;
_testBothReverseSequence;
_testReverseSequence;
score;
evaluate;
_evaluate_model;
input_fn;
GetColumnsToTensors;
setUp;
_add_op;
GetClassificationTargetsOrNone;
local_run;
train_and_evaluate;
_check_saver_def;
_close_internal;
"ops.get_default_graph";
_call_hook_before_run;
_merge_run_options;
"options.debug_options.debug_tensor_watch_opts.extend";
"\".join";
_AddRestoreOps;
_get_feature_ops_from_example;
fit;
_train_model;
testSimple;
"compat.as_bytes";
_compareCpu;
_compareGpu;
assertEqual;
_dispatch_command;
"debugger_cli_common.RichTextLines";
_error_toast;
_testDim;
testInt32;
_testBoth;
testInt64;
testTypes;
testSmallValues;
testScalar;
_compareBinary;
_computeTensorAndLiteral;
_computeLiteralAndTensor;
testFillComplex64;
testFillComplex128;
testEmptySerializedWithAllDefaults;
testDenseNotMatchingShapeShouldFail;
testDenseDefaultNoShapeShouldFail;
testSerializedContainingSparse;
testSerializedContainingSparseFeature;
testSerializedContainingSparseFeatureReuse;
testSerializedContainingDense;
testSerializedContainingDenseWithConcat;
testSerializedContainingDenseScalar;
testSerializedContainingDenseWithDefaults;
testSerializedContainingSparseAndSparseFeatureAndDenseWithNoDefault;
testSerializedContainingSparseAndSparseFeatureWithReuse;
testSingleExampleWithSparseAndSparseFeatureAndDense;
testSequenceExampleWithSparseAndDenseContext;
testSequenceExampleWithMultipleSizeFeatureLists;
testSequenceExampleWithoutDebugName;
testSequenceExampleWithSparseAndDenseFeatureLists;
testSequenceExampleWithEmptyFeatureInFeatureLists;
testSequenceExampleListWithInconsistentDataFails;
testSequenceExampleListWithWrongDataTypeFails;
testSequenceExampleListWithWrongSparseDataTypeFails;
testSequenceExampleListWithWrongShapeFails;
testSequenceExampleWithMissingFeatureListFails;
testFloatReduce1D;
"np.asarray";
testPartialShapes;
testBoolReduce1D;
_shuffle_batch;
_validate;
batch;
_batch;
batch_join;
_batch_join;
_store_sparse_tensors_join;
_store_sparse_tensors;
test_regular_exception_reported_to_coord_pass_through_run;
"shape=";
define_unary_op;
define_binary_op;
"collections.defaultdict";
NOTE;
"os.path.basename";
"os.path.dirname";
"gfile.IsDirectory";
"compat.as_str_any";
"file_io.file_exists";
"file_io.recursive_create_dir";
"`request_stop";
"sys.exc_info";
dynamic_run;
"array_ops.shape";
"array_ops.concat";
"bijector.inverse";
"math_ops.sigmoid";
"special_math.ndtr";
testGradient;
_compareGradientX;
_compareGradientY;
_call_inverse_and_inverse_log_det_jacobian;
sqrt_log_abs_det;
_set_sample_static_shape;
"math_ops.log";
"array_ops.expand_dims";
"math_ops.square";
_testBias;
assertAllCloseAccordingToType;
_testBiasNCHW;
_testPad;
_testSoftmax;
_testXent;
_verifyCholesky;
_verifyCholeskyBase;
_testOne;
_compareDeterminant;
_compareDeterminantBase;
_testBothOneHot;
_testOneHot;
RunMomentTestWithDynamicShape;
RunMomentTest;
export_savedmodel;
serving_input_fn;
_run_using_default_session;
"debug_utils.watch_graph";
_create_session;
_run;
"session.run";
"`run";
__setitem__;
assign;
read_value;
value;
_build_graph;
_infer_model;
_get_features_from_input_fn;
TestModel;
"random_seed.set_random_seed";
testPandasInputFn_ProducesExpectedOutputs;
callInputFnOnce;
test_session;
testPandasInputFn_OnlyX;
testPandasInputFn_ExcludesIndex;
testPandasInputFn_RespectsEpoch_NoShuffle;
assertInputsCallableNTimes;
testPandasInputFn_RespectsEpoch_WithShuffle;
testPandasInputFn_RespectsEpoch_WithShuffleAutosize;
testPandasInputFn_RespectsEpochUnevenBatches;
testBatch;
determinant;
_determinant;
log_abs_determinant;
_log_abs_determinant;
assertLabeledTensorsEqual;
assertTensorsEqual;
eval;
_eval_using_default_session;
funcall;
testEvaluatePerfectModel;
"constant_op.constant";
testEvalOpAndFinalOp;
testOnlyFinalOp;
testEvaluateWithEvalFeedDict;
"array_ops.placeholder";
testSummariesAreFlushedToDisk;
_AddSaveOps;
save_op;
_testEmpty;
testDumpUninitializedVariable;
testDebuggingDuringOpError;
placeholders;
_screen_display_output;
_display_main_menu;
_display_candidates;
_screen_scroll_output_pad;
"gfile.Open";
"f.write";
watch_fn;
write_markdown_to_file;
_write_module_markdown_to_file;
_write_docstring_markdown_to_file;
_write_member_markdown_to_file;
_print_function;
_generate_signature_for_function;
_compare_values;
_compare_cpu_gpu;
testString;
_VerifyValues;
_VerifyOneTest;
_VerifyOneType;
testRandom;
testNotInvertible;
testScalarCompareScalar;
testBasicDouble;
testOverflow;
testScatterOutOfRangeCpu;
_disabledTestScatterOutOfRangeGpu;
_add_variable;
variable_getter;
get_session_handle;
get_session_tensor;
_as_tensor_list_list;
_validate_join;
_validate_keep_input;
_shapes;
_dtypes;
"summary.scalar";
"queue.dequeue_up_to";
"queue.dequeue_many";
_restore_sparse_tensors;
_as_original_type;
entropy;
_entropy;
testVIMCOAdvantageFn;
advantage_fn;
_testScoreFunction;
inverse;
_call_inverse;
_inverse;
_gather_loc;
"array_ops.identity";
mean;
"ops.control_dependencies";
_inverse_and_inverse_log_det_jacobian;
_maybe_assert_valid_y;
"v.get_shape";
"check_ops.assert_less";
"math_ops.cast";
"ops.device";
start;
"errors.raise_exception_on_not_ok_status";
"`Session.run";
"_coord.wait_for_stop";
_check_integer;
"`TensorShape";
"contrib_tensor_util.assert_same_float_dtype";
testNumbers;
_testSoftplus;
_testRelu;
_testRelu6;
_testElu;
_testCrelu;
_testSoftsign;
testFiniteGradientAtDifficultPoints;
"x.get_shape";
_solve;
_batch_solve;
_batch_sqrt_solve;
_check_x;
_sqrt_solve;
_multi_digamma;
_kl_mvn_mvn_brute_force;
trace;
sqrt_to_dense;
_linear;
"math_ops.matmul";
testSolve;
_verifySolveAllWays;
_verifySolve;
_logsum_expbig_minus_expsmall;
_checkProperties;
_cast;
make_data;
make_data_from_centers;
_sparsify;
"np.vstack";
_testGradient;
_testOverflow;
_testScalarString;
_testVectorStrings;
_testMatrixStrings;
_testElementWisePosLen;
_testBroadcast;
_testCTCLoss;
_testCpuMatmul;
_testConfMatrix;
_testMatmul;
doTestBasic;
make_random_centers;
"np.random.rand";
xrange;
make_random_points;
"sparse_tensor.SparseTensor";
"np.random.seed";
_get_eval_ops;
_call_model_fn;
LabeledTensor;
test_unknown_size;
_get_handle_reader;
fn;
training_loss;
loss;
training_inference_graph;
_base_inference;
_do_layer_inference;
"math_ops.reduce_mean";
"ops.Graph";
"gfile.MakeDirs";
invoke_node_stepper;
"stepper.NodeStepper";
"config_pb2.RunOptions";
"errors_impl.AbortedError";
run_loop;
Summary;
"np.isnan";
"logging.error";
SessionLog;
_get_train_ops;
y_iter;
testNumpyInputFn;
testNumpyInputFnWithDifferentDimensionsOfFeatures;
testNumpyInputFnWithTargetKeyAlreadyInX;
"np.testing.assert_array_equal";
loop_fn;
_testScope;
factory;
_createStackBidirectionalDynamicRNN;
assertTrue;
"state_ops.assign_add";
_model_fn;
"variables.get_or_create_global_step";
"summary_lib.scalar";
_raise_if_feeds_intersects;
_verifyInverse;
"np.random.randn";
"test.main";
"np.zeros";
"np.empty";
_screen_draw_text_line;
"uuid.uuid4";
_launch_cli;
get_anchor;
"np.random.normal";
testComplex64;
testComplex128;
assertRaisesOpError;
assertRaisesWithPredicateMatch;
testExpand;
testEmptyTensor;
diagOp;
_testRoundTrip;
"np.where";
Test;
testFloatTypes;
testGradients;
_testGradientsType;
_testGradients;
_randomTensor;
take_grad;
_assertEqual_nparray;
_assertEqual_indexedslices;
_not;
testCTCGreedyDecoder;
_testCTCDecoder;
testCTCDecoderBeamSearch;
complex_sign;
_compareBothSparse;
_compareSparseCpu;
_check;
"np.abs";
_compareSparseGpu;
testRankOneIntTensor;
testRankOneFloatTensor;
testRankOneComplexTensor;
testRankTwoIntTensor;
testRankTwoFloatTensor;
diagPartOp;
testRankTwoComplexTensor;
testRankThreeFloatTensor;
testRankThreeComplexTensor;
testIntegerTensorInput;
_ValidateFractionalMaxPoolResult;
testNegative;
_testReduceJoin;
assertAllEqualUnicode;
testNonsymmetric;
testSymmetricPositiveDefinite;
testSolveBatch;
testComplexTypes;
test1DTesnorAsInput;
test3DTensorAsInput;
testAlongFirstDimension;
testAlongSecondDimension;
testSmallInput2x2Pad1x0;
apply_indexed_slices_grad;
testSimpleAndRandomInputs;
_compare_all;
main;
"`should_stop";
testWrapper;
_testXentWrapper;
_tensordot_axes;
_tensordot_reshape;
"array_ops.rank";
matmul;
delete_session_tensor;
sparse_tensor_dense_matmul;
create_session;
testApplyGradientDescent;
testApplyAdagrad;
_testTypesForAdagrad;
testApplyFtrl;
_testTypesForFtrl;
testSparseApplyAdagrad;
_testTypesForSparseAdagrad;
testSparseApplyAdagradDim1;
testSparseApplyFtrlDim1;
_testTypesForSparseFtrl;
rewrite;
eightbitize_nodes_recursively;
eightbitize_mat_mul_node;
add_eightbit_prologue_nodes;
add_common_quantization_nodes;
add_output_graph_node;
eightbitize_input_to_node;
eightbitize_conv_node;
eightbitize_bias_add_node;
eightbitize_single_input_tensor_node;
create_constant_node;
_call_log_prob -> _log_prob;
_log_prob -> _log_prob_with_logsf_and_logcdf;
_log_prob -> _log_prob_with_logcdf;
_log_prob -> log_normalizing_constant;
_log_prob -> batch_shape;
_log_prob -> event_shape;
_log_prob -> get_batch_shape;
_log_prob_with_logsf_and_logcdf -> log_survival_function;
_log_prob_with_logsf_and_logcdf -> log_cdf;
_log_prob_with_logsf_and_logcdf -> log_prob;
_log_prob_with_logsf_and_logcdf -> cdf;
log_survival_function -> _call_log_survival_function;
log_survival_function -> cdf;
log_survival_function -> "@distribution_util.AppendDocstring";
log_survival_function -> "`sample_shape";
_call_log_survival_function -> _log_survival_function;
_call_log_survival_function -> cdf;
_call_log_survival_function -> _name_scope;
_call_log_survival_function -> "ops.convert_to_tensor";
_call_log_survival_function -> "math_ops.log";
_log_survival_function -> survival_function;
_log_survival_function -> "@distribution_util.AppendDocstring";
_log_survival_function -> ValueError;
_log_survival_function -> "array_ops.ones_like";
_log_survival_function -> NotImplementedError;
survival_function -> _call_survival_function;
survival_function -> cdf;
survival_function -> "`sample_shape";
_call_survival_function -> cdf;
_call_survival_function -> _survival_function;
_call_survival_function -> _name_scope;
_call_survival_function -> "ops.convert_to_tensor";
cdf -> _call_cdf;
cdf -> "@distribution_util.AppendDocstring";
cdf -> "`sample_shape";
_call_cdf -> _cdf;
_call_cdf -> _name_scope;
_call_cdf -> "ops.convert_to_tensor";
_call_cdf -> "math_ops.exp";
_cdf -> range;
_cdf -> "@distribution_util.AppendDocstring";
_cdf -> _assert_valid_sample;
_cdf -> "array_ops.where";
_cdf -> ValueError;
_cdf -> NotImplementedError;
_cdf -> "control_flow_ops.with_dependencies";
_cdf -> "array_ops.ones_like";
_cdf -> "array_ops.ones";
_cdf -> log;
_cdf -> "math_ops.exp";
_cdf -> "array_ops.zeros_like";
_cdf -> "bijector.inverse";
_cdf -> "math_ops.sigmoid";
_cdf -> "special_math.ndtr";
range -> cast;
range -> _name_scope;
range -> "ops.convert_to_tensor";
cast -> "ops.convert_to_tensor";
cast -> TODO;
cast -> "sparse_tensor.SparseTensor";
_forward_log_det_jacobian -> prob;
_forward_log_det_jacobian -> det;
prob -> _call_prob;
_call_prob -> _prob;
_prob -> _prob_with_sf_and_cdf;
_prob -> _prob_with_cdf;
_prob -> range;
_prob -> _check_integer;
_prob_with_sf_and_cdf -> survival_function;
_prob_with_sf_and_cdf -> cdf;
_prob_with_sf_and_cdf -> "array_ops.where";
log_prob -> _call_log_prob;
_name_scope -> "ops.name_scope";
_assert_valid_sample -> "math_ops.reduce_sum";
_assert_valid_sample -> "math_ops.reduce_logsumexp";
_assert_valid_sample -> "check_ops.assert_positive";
_assert_valid_sample -> "control_flow_ops.with_dependencies";
_assert_valid_sample -> "array_ops.ones";
log_cdf -> _call_log_cdf;
log_cdf -> "@distribution_util.AppendDocstring";
log_cdf -> "`sample_shape";
_call_log_cdf -> _log_cdf;
_call_log_cdf -> _name_scope;
_call_log_cdf -> "ops.convert_to_tensor";
_call_log_cdf -> "math_ops.log";
_log_cdf -> cdf;
_log_cdf -> "array_ops.where";
_log_cdf -> "@distribution_util.AppendDocstring";
_log_cdf -> "math_ops.log";
_log_cdf -> ValueError;
_log_cdf -> "array_ops.ones_like";
_log_cdf -> NotImplementedError;
_log_cdf -> "control_flow_ops.with_dependencies";
_log_cdf -> "contrib_tensor_util.assert_same_float_dtype";
_log_prob_with_logcdf -> log_cdf;
_log_prob_with_logcdf -> _logsum_expbig_minus_expsmall;
before_run -> on_run_start;
before_run -> _prepare_run_watch_config;
before_run -> run;
on_run_start -> _prepare_run_watch_config;
on_run_start -> _update_run_calls_state;
on_run_start -> _get_run_debug_urls;
on_run_start -> run;
on_run_start -> "`run";
_prepare_run_watch_config -> _prepare_run_debug_urls;
_prepare_run_watch_config -> op;
_prepare_run_watch_config -> run;
_prepare_run_debug_urls -> run;
_prepare_run_debug_urls -> "os.path.join";
_prepare_run_debug_urls -> "`Session.run";
run -> _decorate_run_options;
run -> build;
run -> on_run_start;
run -> close;
run -> _call_hook_before_run;
run -> _run_using_default_session;
run -> _create_session;
run -> assertAllClose;
run -> _run;
run -> on_run_end;
run -> ValueError;
run -> invoke_node_stepper;
run -> "stepper.NodeStepper";
run -> "config_pb2.RunOptions";
run -> "ops.get_default_graph";
run -> "logging.info";
run -> "errors_impl.AbortedError";
run -> "session.run";
run -> "`run";
run -> run_loop;
_decorate_run_options -> op;
_decorate_run_options -> "debug_utils.watch_graph";
op -> align;
op -> convert_to_labeled_tensor;
op -> define_unary_op;
op -> define_binary_op;
op -> "ops.name_scope";
op -> "@tc.returns";
op -> "@tc.accepts";
align -> expand_dims;
align -> check_axis_order;
align -> convert_to_labeled_tensor;
align -> ValueError;
align -> _find_consistent_ordering;
align -> get_axis_order;
align -> "shape=";
align -> "ops.name_scope";
align -> "@tc.returns";
align -> "@tc.accepts";
expand_dims -> check_axis_order;
expand_dims -> convert_to_labeled_tensor;
expand_dims -> "ops.name_scope";
expand_dims -> "@tc.returns";
check_axis_order -> convert_to_labeled_tensor;
check_axis_order -> _get_valid_axis_order;
check_axis_order -> "@tc.returns";
check_axis_order -> "@tc.accepts";
convert_to_labeled_tensor -> ValueError;
convert_to_labeled_tensor -> TODO;
convert_to_labeled_tensor -> "ops.convert_to_tensor";
convert_to_labeled_tensor -> "@tc.returns";
convert_to_labeled_tensor -> "@tc.accepts";
convert_to_labeled_tensor -> LabeledTensor;
build -> _AddShardedSaveOps;
build -> _ValidateAndSliceInputs;
build -> _AddShardedRestoreOps;
build -> _GroupByDevices;
build -> _check_saver_def;
build -> ValueError;
build -> _AddRestoreOps;
build -> _AddSaveOps;
_AddShardedSaveOps -> _AddShardedSaveOpsForV2;
_AddShardedSaveOps -> _GroupByDevices;
_AddShardedSaveOpsForV2 -> save;
_AddShardedSaveOpsForV2 -> _GroupByDevices;
_AddShardedSaveOpsForV2 -> restore;
_AddShardedSaveOpsForV2 -> "array_ops.identity";
_AddShardedSaveOpsForV2 -> "ops.control_dependencies";
_AddShardedSaveOpsForV2 -> "constant_op.constant";
_AddShardedSaveOpsForV2 -> "ops.device";
_AddShardedSaveOpsForV2 -> "uuid.uuid4";
save -> update_checkpoint_state;
save -> ValueError;
save -> _MaybeDeleteOldCheckpoints;
save -> "logging.warning";
save -> "sess.run";
save -> TypeError;
save -> RuntimeError;
save -> "compat.as_bytes";
save -> "os.path.join";
save -> "os.path.basename";
save -> "os.path.dirname";
save -> "gfile.IsDirectory";
save -> "file_io.file_exists";
save -> "file_io.recursive_create_dir";
save -> "gfile.Open";
save -> "f.write";
update_checkpoint_state -> generate_checkpoint_state_proto;
update_checkpoint_state -> _GetCheckpointFilename;
update_checkpoint_state -> RuntimeError;
generate_checkpoint_state_proto -> "logging.info";
split_fast -> materialize_to_memory;
materialize_to_memory -> run_one_epoch;
run_one_epoch -> run;
__init__ -> run;
__init__ -> _create_variables;
__init__ -> op;
__init__ -> build;
__init__ -> inverse;
__init__ -> mean;
_get_valid_axis_order -> get_axis_order;
get_axis_order -> "@tc.accepts";
_prob_with_cdf -> cdf;
transformed_sample -> prob;
add_to_tensor -> _add_to_tensor;
_add_to_tensor -> to_dense;
to_dense -> _to_dense;
_to_dense -> apply;
_to_dense -> batch_shape_tensor;
_to_dense -> domain_dimension_tensor;
_to_dense -> sqrt_to_dense;
apply -> __call__;
apply -> "ops.name_scope";
apply -> "ops.convert_to_tensor";
__call__ -> _attention;
__call__ -> _compute;
__call__ -> shape;
__call__ -> sigmoid;
__call__ -> tanh;
__call__ -> "ops.convert_to_tensor";
__call__ -> "array_ops.expand_dims";
__call__ -> func;
__call__ -> assertLabeledTensorsEqual;
_attention -> reduce_sum;
_attention -> tanh;
_attention -> _linear;
reduce_sum -> _ReductionDims;
_ReductionDims -> rank;
_ReductionDims -> "x.get_shape";
_ReductionDims -> TODO;
_ReductionDims -> ValueError;
rank -> "ops.name_scope";
rank -> "array_ops.size";
rank -> "array_ops.rank";
_update_run_calls_state -> run;
_get_run_debug_urls -> run;
after_run -> on_run_end;
after_run -> run;
on_run_end -> _prep_cli_for_run_end;
on_run_end -> run;
on_run_end -> _launch_cli;
_prep_cli_for_run_end -> run;
_prep_cli_for_run_end -> TODO;
_feed_fn -> _do_run;
_feed_fn -> _update_with_movers;
_feed_fn -> run;
_do_run -> run;
_update_with_movers -> run;
_on_textbox_keypress -> _redraw_output;
_on_textbox_keypress -> _scroll_output;
_redraw_output -> _display_output;
_display_output -> _scroll_output;
_display_output -> _error_toast;
_display_output -> _screen_display_output;
_display_output -> _toast;
_scroll_output -> _compile_ui_status_summary;
_scroll_output -> _screen_draw_text_line;
_compile_ui_status_summary -> _show_array_indices;
_show_array_indices -> _show_array_index_at_line;
_show_array_index_at_line -> _toast;
_show_array_index_at_line -> TODO;
_toast -> _display_lines;
_toast -> "debugger_cli_common.RichTextLines";
_toast -> _screen_scroll_output_pad;
_display_lines -> _screen_add_line_to_output_pad;
_display_lines -> ValueError;
_screen_add_line_to_output_pad -> TypeError;
testBasic -> _testAll;
testBasic -> _testTypes;
testBasic -> _compare;
testBasic -> _testBasic;
testBasic -> _verifyCholesky;
testBasic -> _testOne;
testBasic -> _compareDeterminant;
testBasic -> RunMomentTestWithDynamicShape;
testBasic -> _testCTCLoss;
testBasic -> _testCpuMatmul;
testBasic -> RunMomentTest;
testBasic -> doTestBasic;
_testAll -> _testTypes;
_testAll -> _testCpu;
_testAll -> _testGpu;
_testAll -> _testBias;
_testAll -> _testBiasNCHW;
_testAll -> _testPad;
_testAll -> _testSoftmax;
_testAll -> _testXent;
_testAll -> _testGradient;
_testAll -> _testOverflow;
_testAll -> _testScalarString;
_testAll -> _testVectorStrings;
_testAll -> _testMatrixStrings;
_testAll -> _testElementWisePosLen;
_testAll -> _testBroadcast;
_testTypes -> _test;
_testTypes -> assertAllCloseAccordingToType;
_testTypes -> assertShapeEqual;
_testTypes -> setUp;
_testTypes -> assertAllEqual;
_test -> op;
_test -> assertAllEqual;
_test -> assertAllClose;
_test -> _checkProperties;
_test -> _cast;
_test -> cast;
_test -> assertRaisesOpError;
_GroupByDevices -> ValueError;
_GroupByDevices -> TODO;
_GroupByDevices -> "collections.defaultdict";
restore -> ValueError;
restore -> "logging.info";
restore -> "sess.run";
restore -> "gfile.Open";
close -> checkedThread;
close -> join;
close -> _close_internal;
close -> "time.sleep";
close -> assertEqual;
close -> "sess.run";
close -> TODO;
checkedThread -> join;
checkedThread -> start;
join -> request_stop;
join -> "time.sleep";
join -> wait_for_stop;
join -> "\".join";
join -> RuntimeError;
join -> "errors.raise_exception_on_not_ok_status";
join -> "`request_stop";
request_stop -> ValueError;
request_stop -> "logging.info";
request_stop -> NOTE;
request_stop -> "compat.as_str_any";
request_stop -> "`request_stop";
request_stop -> "sys.exc_info";
request_stop -> "`should_stop";
_MaybeDeleteOldCheckpoints -> "logging.warning";
_MaybeDeleteOldCheckpoints -> "time.time";
partial_run -> run;
_register_dead_handle -> run;
node_info -> run;
testIntTypes -> _testAll;
_GetCheckpointFilename -> "os.path.join";
_survival_function -> ValueError;
_survival_function -> NotImplementedError;
_survival_function -> "array_ops.where";
_survival_function -> "array_ops.ones_like";
_survival_function -> survival_function;
_survival_function -> "array_ops.zeros_like";
_call_forward_log_det_jacobian -> inverse_log_det_jacobian;
inverse_log_det_jacobian -> _call_inverse_log_det_jacobian;
_call_inverse_log_det_jacobian -> _inverse_log_det_jacobian;
_inverse_log_det_jacobian -> det;
det -> log_det;
log_det -> _dispatch_based_on_batch;
_dispatch_based_on_batch -> get_shape;
_dispatch_based_on_batch -> rank;
get_shape -> _name_scope;
get_shape -> "ops.convert_to_tensor";
get_shape -> TODO;
_compute -> sigmoid;
_compute -> tanh;
sigmoid -> "ops.name_scope";
sigmoid -> "ops.convert_to_tensor";
tanh -> "ops.name_scope";
shape -> _shape;
shape -> "ops.name_scope";
shape -> "`TensorShape";
_shape -> "ops.convert_to_tensor";
_shape -> "array_ops.shape";
_shape -> "array_ops.concat";
inv_quadratic_form_on_vectors -> _inv_quadratic_form_on_vectors;
_inv_quadratic_form_on_vectors -> _iqfov_via_sqrt_solve;
_inv_quadratic_form_on_vectors -> _iqfov_via_solve;
_inv_quadratic_form_on_vectors -> _check_x;
_iqfov_via_sqrt_solve -> flip_vector_to_matrix;
_iqfov_via_sqrt_solve -> batch_shape;
_iqfov_via_sqrt_solve -> sqrt_solve;
_iqfov_via_sqrt_solve -> get_batch_shape;
flip_vector_to_matrix -> _flip_vector_to_matrix_static;
flip_vector_to_matrix -> _flip_vector_to_matrix_dynamic;
_flip_vector_to_matrix_static -> reduce_prod;
_flip_vector_to_matrix_static -> "ops.convert_to_tensor";
reduce_prod -> _ReductionDims;
_flip_vector_to_matrix_dynamic -> reduce_prod;
_flip_vector_to_matrix_dynamic -> "ops.convert_to_tensor";
_iqfov_via_solve -> flip_vector_to_matrix;
_iqfov_via_solve -> batch_shape;
_iqfov_via_solve -> solve;
_iqfov_via_solve -> get_batch_shape;
_ValidateAndSliceInputs -> _AddSaveable;
_ValidateAndSliceInputs -> ValueError;
_ValidateAndSliceInputs -> TypeError;
_AddSaveable -> ValueError;
_AddShardedRestoreOps -> _GroupByDevices;
_AddShardedRestoreOps -> _AddRestoreOps;
testEmpty -> _compareAll;
testEmpty -> _testAll;
testEmpty -> _verifyCholesky;
testEmpty -> _compareDeterminant;
testEmpty -> _testEmpty;
testEmpty -> _verifyInverse;
testEmpty -> _testCpuMatmul;
testEmpty -> _testXent;
_compareAll -> _compare;
_compare -> _checkGrad;
_compare -> func;
_compare -> _compareCpu;
_compare -> _compareGpu;
_compare -> assertShapeEqual;
_compare -> assertAllClose;
_compare -> assertAllEqual;
_checkGrad -> func;
_checkGrad -> assertAllClose;
func -> _assertAllClose;
func -> assertAllClose;
func -> "math_ops.square";
func -> "np.array";
func -> test_session;
func -> "test.main";
func -> xrange;
func -> assertEqual;
func -> "np.empty";
func -> "constant_op.constant";
func -> "sess.run";
_assertAllClose -> assertAllClose;
assertAllClose -> _GetNdArray;
assertAllClose -> "np.array";
assertAllClose -> assertEqual;
assertAllClose -> "np.asarray";
assertAllClose -> "np.isnan";
assertAllClose -> "np.where";
assertAllClose -> "np.abs";
_GetNdArray -> "np.array";
testFloat -> _testDtype;
testFloat -> _testBasic;
testFloat -> _testDim;
testFloat -> _testAll;
testFloat -> _compare_cpu_gpu;
testFloat -> _testXent;
_testDtype -> _compare;
_testDtype -> _compare_values;
testHalf -> _testDtype;
testHalf -> _testAll;
testHalf -> _compare;
testHalf -> _testXent;
testDouble -> _testDtype;
testDouble -> _testBasic;
testDouble -> _testDim;
testDouble -> _testAll;
testDouble -> _compare_cpu_gpu;
testDouble -> _testSoftmax;
testDouble -> _testXent;
testFillFloat -> _compareAll;
testFillDouble -> _compareAll;
testFillInt32 -> _compareAll;
testFillInt64 -> _compareAll;
testInfinity -> _compareAll;
_create_variables -> _covariance;
_covariance -> _variance;
_covariance -> _mean;
_variance -> _mean;
_mean -> get_event_shape;
_mean -> "array_ops.identity";
_mean -> "ops.control_dependencies";
_mean -> "check_ops.assert_less";
_mean -> "control_flow_ops.with_dependencies";
_mean -> "array_ops.ones";
_mean -> "np.array";
_mean -> NotImplementedError;
get_event_shape -> _get_event_shape;
_get_event_shape -> "tensor_shape.TensorShape";
_get_event_shape -> "tensor_util.constant_value";
_get_event_shape -> "@distribution_util.AppendDocstring";
_find_consistent_ordering -> "@tc.returns";
_find_consistent_ordering -> "@tc.accepts";
wait_for_stop -> should_stop;
wait_for_stop -> "_coord.wait_for_stop";
should_stop -> _check_stop;
should_stop -> "_coord.should_stop";
_check_stop -> "_coord.should_stop";
testIdentity -> _compare;
sample -> _call_sample_n;
_call_sample_n -> _sample_n;
_call_sample_n -> _set_sample_static_shape;
_sample_n -> batch_shape;
_sample_n -> event_shape;
_sample_n -> get_batch_shape;
_sample_n -> reduce_prod;
_sample_n -> get_event_shape;
batch_shape -> get_batch_shape;
batch_shape -> _name_scope;
get_batch_shape -> get_shape;
get_batch_shape -> _get_batch_shape;
log_normalizing_constant -> _multi_lgamma;
_multi_lgamma -> _multi_gamma_sequence;
_multi_gamma_sequence -> shape;
_multi_gamma_sequence -> _name_scope;
batch_shape_tensor -> shape_tensor;
batch_shape_tensor -> _name_scope;
shape_tensor -> _name_scope;
shape_tensor -> _shape_tensor;
domain_dimension_tensor -> shape_tensor;
domain_dimension_tensor -> _name_scope;
domain_dimension_tensor -> "ops.convert_to_tensor";
_shape_tensor -> "ops.convert_to_tensor";
sqrt_solve -> _dispatch_based_on_batch;
solve -> _dispatch_based_on_batch;
_batch_log_det -> _batch_sqrt_log_det;
_batch_sqrt_log_det -> _sqrt_log_det_core;
_sqrt_log_det_core -> det;
_get_batch_shape -> "@distribution_util.AppendDocstring";
event_shape -> get_event_shape;
event_shape -> _name_scope;
_testCpu -> _compareShape;
_testCpu -> _compareShapeN;
_testCpu -> _compareRank;
_testCpu -> _compareSize;
_testCpu -> _compareShapeSparse;
_testCpu -> _compareRankSparse;
_testCpu -> _compareSizeSparse;
_testCpu -> assertAllClose;
_testCpu -> assertAllEqual;
_compareShape -> assertShapeEqual;
_compareShape -> assertAllEqual;
assertShapeEqual -> assertAllEqual;
assertAllEqual -> _GetNdArray;
assertAllEqual -> assertEqual;
assertAllEqual -> "np.testing.assert_array_equal";
_compareShapeN -> assertShapeEqual;
_compareShapeN -> assertAllEqual;
_compareRank -> assertShapeEqual;
_compareRank -> assertAllEqual;
_compareSize -> assertShapeEqual;
_compareSize -> assertAllEqual;
_compareShapeSparse -> assertShapeEqual;
_compareShapeSparse -> assertAllEqual;
_compareShapeSparse -> _sparsify;
_compareRankSparse -> assertShapeEqual;
_compareRankSparse -> assertAllEqual;
_compareRankSparse -> _sparsify;
_compareSizeSparse -> assertShapeEqual;
_compareSizeSparse -> assertAllEqual;
_compareSizeSparse -> _sparsify;
_testGpu -> _compareShape;
_testGpu -> _compareShapeN;
_testGpu -> _compareRank;
_testGpu -> _compareSize;
_testGpu -> _compareShapeSparse;
_testGpu -> _compareRankSparse;
_testGpu -> _compareSizeSparse;
_testGpu -> assertAllClose;
_testGpu -> assertAllEqual;
_testBasic -> _testBothArg;
_testBasic -> _testBothReverseSequence;
_testBasic -> _testBothOneHot;
_testBasic -> _testConfMatrix;
_testBasic -> _testMatmul;
_testBothArg -> _testArg;
_testArg -> assertShapeEqual;
_testArg -> assertAllEqual;
_testArg -> assertRaisesOpError;
_testBothReverseSequence -> _testReverseSequence;
_testReverseSequence -> assertShapeEqual;
_testReverseSequence -> assertAllClose;
_testReverseSequence -> assertRaisesOpError;
score -> evaluate;
evaluate -> _evaluate_model;
_evaluate_model -> input_fn;
_evaluate_model -> _get_eval_ops;
input_fn -> GetColumnsToTensors;
input_fn -> GetClassificationTargetsOrNone;
input_fn -> TODO;
GetColumnsToTensors -> setUp;
setUp -> _add_op;
setUp -> TODO;
setUp -> TestModel;
setUp -> make_data;
setUp -> make_data_from_centers;
setUp -> make_random_centers;
setUp -> make_random_points;
setUp -> "logging.info";
setUp -> "os.path.join";
setUp -> "ops.Graph";
setUp -> "gfile.MakeDirs";
setUp -> "random_seed.set_random_seed";
setUp -> test_session;
setUp -> "constant_op.constant";
setUp -> assertTrue;
setUp -> "state_ops.assign_add";
setUp -> assertEqual;
setUp -> "variables.get_or_create_global_step";
setUp -> "array_ops.placeholder";
setUp -> "summary_lib.scalar";
_add_op -> ValueError;
GetClassificationTargetsOrNone -> setUp;
local_run -> train_and_evaluate;
train_and_evaluate -> evaluate;
_check_saver_def -> ValueError;
_close_internal -> "ops.get_default_graph";
_call_hook_before_run -> _merge_run_options;
_call_hook_before_run -> _raise_if_feeds_intersects;
_merge_run_options -> "options.debug_options.debug_tensor_watch_opts.extend";
_AddRestoreOps -> TODO;
_AddRestoreOps -> "ops.control_dependencies";
_AddRestoreOps -> "v.get_shape";
_AddRestoreOps -> "array_ops.shape";
_AddRestoreOps -> "ops.device";
_get_feature_ops_from_example -> fit;
fit -> _train_model;
_train_model -> input_fn;
_train_model -> _get_train_ops;
testSimple -> _test;
testSimple -> _compareCpu;
_compareCpu -> assertShapeEqual;
_compareCpu -> assertAllClose;
_compareCpu -> assertAllEqual;
_compareGpu -> assertShapeEqual;
_compareGpu -> assertAllClose;
_compareGpu -> assertAllEqual;
_dispatch_command -> _display_output;
_dispatch_command -> _scroll_output;
_error_toast -> _toast;
_testDim -> _testBothArg;
testInt32 -> _testBoth;
testInt32 -> _testBasic;
testInt32 -> _testDim;
testInt32 -> _testAll;
_testBoth -> _compare;
testInt64 -> _testBoth;
testInt64 -> _testBasic;
testInt64 -> _testDim;
testInt64 -> _testAll;
testTypes -> _testDtype;
testSmallValues -> _testAll;
testScalar -> _compareBinary;
testScalar -> _compare;
testScalar -> _not;
_compareBinary -> _computeTensorAndLiteral;
_compareBinary -> _computeLiteralAndTensor;
_compareBinary -> assertShapeEqual;
_computeTensorAndLiteral -> func;
_computeLiteralAndTensor -> func;
testFillComplex64 -> _compare;
testFillComplex128 -> _compare;
testEmptySerializedWithAllDefaults -> _test;
testDenseNotMatchingShapeShouldFail -> _test;
testDenseDefaultNoShapeShouldFail -> _test;
testSerializedContainingSparse -> _test;
testSerializedContainingSparseFeature -> _test;
testSerializedContainingSparseFeatureReuse -> _test;
testSerializedContainingDense -> _test;
testSerializedContainingDenseWithConcat -> _test;
testSerializedContainingDenseScalar -> _test;
testSerializedContainingDenseWithDefaults -> _test;
testSerializedContainingSparseAndSparseFeatureAndDenseWithNoDefault -> _test;
testSerializedContainingSparseAndSparseFeatureWithReuse -> _test;
testSingleExampleWithSparseAndSparseFeatureAndDense -> _test;
testSequenceExampleWithSparseAndDenseContext -> _test;
testSequenceExampleWithMultipleSizeFeatureLists -> _test;
testSequenceExampleWithoutDebugName -> _test;
testSequenceExampleWithSparseAndDenseFeatureLists -> _test;
testSequenceExampleWithEmptyFeatureInFeatureLists -> _test;
testSequenceExampleListWithInconsistentDataFails -> _test;
testSequenceExampleListWithWrongDataTypeFails -> _test;
testSequenceExampleListWithWrongSparseDataTypeFails -> _test;
testSequenceExampleListWithWrongShapeFails -> _test;
testSequenceExampleWithMissingFeatureListFails -> _test;
testFloatReduce1D -> _compareAll;
testPartialShapes -> _compareAll;
testBoolReduce1D -> _compareAll;
_shuffle_batch -> _validate;
_validate -> batch;
batch -> _batch;
_batch -> batch_join;
batch_join -> _batch_join;
_batch_join -> _store_sparse_tensors_join;
_batch_join -> _as_tensor_list_list;
_batch_join -> _validate_join;
_batch_join -> _validate_keep_input;
_batch_join -> _shapes;
_batch_join -> "ops.name_scope";
_batch_join -> _dtypes;
_batch_join -> "summary.scalar";
_batch_join -> "queue.dequeue_up_to";
_batch_join -> "queue.dequeue_many";
_batch_join -> _restore_sparse_tensors;
_batch_join -> _as_original_type;
_store_sparse_tensors_join -> _store_sparse_tensors;
_store_sparse_tensors_join -> ValueError;
test_regular_exception_reported_to_coord_pass_through_run -> run;
define_unary_op -> "@tc.returns";
define_unary_op -> "@tc.accepts";
define_binary_op -> "@tc.returns";
define_binary_op -> "@tc.accepts";
dynamic_run -> run;
testGradient -> _compareGradientX;
testGradient -> _compareGradientY;
testGradient -> _compareGpu;
_compareGradientX -> func;
_compareGradientY -> func;
_call_inverse_and_inverse_log_det_jacobian -> _inverse_log_det_jacobian;
sqrt_log_abs_det -> det;
_set_sample_static_shape -> get_batch_shape;
_set_sample_static_shape -> get_event_shape;
_testBias -> assertAllCloseAccordingToType;
assertAllCloseAccordingToType -> assertAllClose;
assertAllCloseAccordingToType -> _GetNdArray;
_testBiasNCHW -> assertAllCloseAccordingToType;
_testPad -> assertShapeEqual;
_testPad -> assertAllEqual;
_testSoftmax -> assertAllCloseAccordingToType;
_testSoftmax -> assertShapeEqual;
_testXent -> assertAllCloseAccordingToType;
_verifyCholesky -> _verifyCholeskyBase;
_verifyCholeskyBase -> assertShapeEqual;
_verifyCholeskyBase -> assertAllClose;
_testOne -> _testPad;
_compareDeterminant -> _compareDeterminantBase;
_compareDeterminantBase -> assertShapeEqual;
_compareDeterminantBase -> assertAllClose;
_testBothOneHot -> _testOneHot;
_testOneHot -> assertAllEqual;
_testOneHot -> assertRaisesOpError;
RunMomentTestWithDynamicShape -> RunMomentTest;
RunMomentTestWithDynamicShape -> assertAllCloseAccordingToType;
RunMomentTest -> assertAllCloseAccordingToType;
export_savedmodel -> serving_input_fn;
serving_input_fn -> input_fn;
_run_using_default_session -> ValueError;
_run_using_default_session -> "session.run";
_run_using_default_session -> "`run";
_create_session -> "logging.info";
_run -> "session.run";
_run -> _build_graph;
_run -> "logging.error";
_run -> "sess.run";
_run -> TODO;
__setitem__ -> assign;
assign -> read_value;
read_value -> value;
value -> assertAllEqual;
_build_graph -> TODO;
_infer_model -> _get_features_from_input_fn;
_get_features_from_input_fn -> input_fn;
TestModel -> "random_seed.set_random_seed";
TestModel -> test_session;
TestModel -> "constant_op.constant";
TestModel -> "array_ops.placeholder";
TestModel -> "np.random.seed";
testPandasInputFn_ProducesExpectedOutputs -> callInputFnOnce;
callInputFnOnce -> input_fn;
testPandasInputFn_OnlyX -> callInputFnOnce;
testPandasInputFn_ExcludesIndex -> callInputFnOnce;
testPandasInputFn_RespectsEpoch_NoShuffle -> assertInputsCallableNTimes;
assertInputsCallableNTimes -> input_fn;
testPandasInputFn_RespectsEpoch_WithShuffle -> assertInputsCallableNTimes;
testPandasInputFn_RespectsEpoch_WithShuffleAutosize -> assertInputsCallableNTimes;
testPandasInputFn_RespectsEpochUnevenBatches -> assertInputsCallableNTimes;
testBatch -> _verifyCholesky;
determinant -> _determinant;
_determinant -> det;
log_abs_determinant -> _log_abs_determinant;
_log_abs_determinant -> det;
assertLabeledTensorsEqual -> assertTensorsEqual;
assertTensorsEqual -> eval;
assertTensorsEqual -> assertAllEqual;
eval -> _eval_using_default_session;
eval -> _get_handle_reader;
eval -> TypeError;
_eval_using_default_session -> ValueError;
funcall -> op;
testEvaluatePerfectModel -> _train_model;
testEvalOpAndFinalOp -> _train_model;
testOnlyFinalOp -> _train_model;
testEvaluateWithEvalFeedDict -> _train_model;
testSummariesAreFlushedToDisk -> _train_model;
_AddSaveOps -> save_op;
save_op -> RuntimeError;
_testEmpty -> _testBothOneHot;
testDumpUninitializedVariable -> run;
testDebuggingDuringOpError -> run;
placeholders -> op;
_screen_display_output -> _display_main_menu;
_screen_display_output -> _display_lines;
_display_main_menu -> _screen_add_line_to_output_pad;
_display_candidates -> _scroll_output;
watch_fn -> run;
write_markdown_to_file -> _write_module_markdown_to_file;
_write_module_markdown_to_file -> _write_docstring_markdown_to_file;
_write_docstring_markdown_to_file -> _write_member_markdown_to_file;
_write_member_markdown_to_file -> _print_function;
_print_function -> _generate_signature_for_function;
_print_function -> get_anchor;
_generate_signature_for_function -> TODO;
_compare_values -> assertShapeEqual;
_compare_values -> assertAllEqual;
_compare_cpu_gpu -> _compareCpu;
_compare_cpu_gpu -> _compareGpu;
testString -> _testCpu;
testString -> _compareCpu;
testString -> _testBothOneHot;
_VerifyValues -> _VerifyOneTest;
_VerifyOneTest -> _VerifyOneType;
_VerifyOneType -> assertAllCloseAccordingToType;
_VerifyOneType -> assertShapeEqual;
testRandom -> _testAll;
testNotInvertible -> _verifyCholesky;
testScalarCompareScalar -> _compare;
testBasicDouble -> _compareDeterminant;
testOverflow -> _compareDeterminant;
testScatterOutOfRangeCpu -> op;
_disabledTestScatterOutOfRangeGpu -> op;
_add_variable -> variable_getter;
variable_getter -> build;
get_session_handle -> run;
get_session_tensor -> run;
_as_tensor_list_list -> ValueError;
_validate_join -> ValueError;
_validate_keep_input -> ValueError;
_shapes -> ValueError;
entropy -> _entropy;
_entropy -> batch_shape;
_entropy -> _multi_lgamma;
_entropy -> _multi_digamma;
testVIMCOAdvantageFn -> advantage_fn;
advantage_fn -> _testScoreFunction;
_testScoreFunction -> assertAllClose;
inverse -> _call_inverse;
_call_inverse -> _inverse;
_call_inverse -> _inverse_and_inverse_log_det_jacobian;
_inverse -> _gather_loc;
_gather_loc -> "ops.convert_to_tensor";
_gather_loc -> "math_ops.cast";
mean -> _mean;
_inverse_and_inverse_log_det_jacobian -> _maybe_assert_valid_y;
_maybe_assert_valid_y -> "check_ops.assert_positive";
_maybe_assert_valid_y -> "control_flow_ops.with_dependencies";
start -> "errors.raise_exception_on_not_ok_status";
_check_integer -> "control_flow_ops.with_dependencies";
testNumbers -> _testSoftplus;
testNumbers -> _testRelu;
testNumbers -> _testRelu6;
testNumbers -> _testElu;
testNumbers -> _testCrelu;
testNumbers -> _testSoftsign;
_testSoftplus -> assertAllCloseAccordingToType;
_testSoftplus -> assertShapeEqual;
_testRelu -> assertShapeEqual;
_testRelu6 -> assertShapeEqual;
_testElu -> assertShapeEqual;
_testCrelu -> assertShapeEqual;
_testSoftsign -> assertShapeEqual;
testFiniteGradientAtDifficultPoints -> func;
_solve -> _batch_solve;
_solve -> _sqrt_solve;
_batch_solve -> _batch_sqrt_solve;
_batch_sqrt_solve -> _check_x;
_check_x -> get_shape;
_sqrt_solve -> _batch_sqrt_solve;
_multi_digamma -> _multi_gamma_sequence;
_kl_mvn_mvn_brute_force -> trace;
trace -> reduce_sum;
sqrt_to_dense -> "ops.name_scope";
_linear -> "math_ops.matmul";
testSolve -> _verifySolveAllWays;
_verifySolveAllWays -> _verifySolve;
_verifySolve -> assertAllClose;
_checkProperties -> assertEqual;
_checkProperties -> "np.zeros";
_cast -> test_session;
_cast -> "constant_op.constant";
make_data -> "np.asarray";
make_data -> xrange;
make_data -> "np.random.normal";
make_data_from_centers -> "np.asarray";
make_data_from_centers -> xrange;
make_data_from_centers -> "np.random.normal";
_sparsify -> "np.vstack";
_sparsify -> "sparse_tensor.SparseTensor";
_testGradient -> assertAllClose;
_testOverflow -> assertAllClose;
_testScalarString -> assertAllEqual;
_testVectorStrings -> assertAllEqual;
_testMatrixStrings -> assertAllEqual;
_testElementWisePosLen -> assertAllEqual;
_testBroadcast -> assertAllEqual;
_testCTCLoss -> assertShapeEqual;
_testCpuMatmul -> assertAllCloseAccordingToType;
_testCpuMatmul -> assertShapeEqual;
_testConfMatrix -> assertAllClose;
_testMatmul -> assertAllClose;
doTestBasic -> assertAllCloseAccordingToType;
make_random_centers -> "np.random.rand";
make_random_points -> xrange;
make_random_points -> "np.random.randn";
_get_eval_ops -> _call_model_fn;
_call_model_fn -> ValueError;
_call_model_fn -> _model_fn;
test_unknown_size -> assertLabeledTensorsEqual;
_get_handle_reader -> "array_ops.placeholder";
fn -> assertLabeledTensorsEqual;
training_loss -> loss;
loss -> training_inference_graph;
training_inference_graph -> _base_inference;
_base_inference -> _do_layer_inference;
_do_layer_inference -> "math_ops.reduce_mean";
run_loop -> Summary;
run_loop -> SessionLog;
run_loop -> TODO;
_get_train_ops -> _call_model_fn;
y_iter -> func;
testNumpyInputFn -> input_fn;
testNumpyInputFnWithDifferentDimensionsOfFeatures -> input_fn;
testNumpyInputFnWithTargetKeyAlreadyInX -> input_fn;
loop_fn -> _testScope;
_testScope -> factory;
factory -> _createStackBidirectionalDynamicRNN;
_createStackBidirectionalDynamicRNN -> assertAllEqual;
_model_fn -> "state_ops.assign_add";
_raise_if_feeds_intersects -> RuntimeError;
_verifyInverse -> assertShapeEqual;
_screen_draw_text_line -> TypeError;
testComplex64 -> _testAll;
testComplex64 -> _testBoth;
testComplex128 -> _testAll;
testComplex128 -> _testBoth;
assertRaisesOpError -> assertRaisesWithPredicateMatch;
testExpand -> _compareAll;
testEmptyTensor -> diagOp;
testEmptyTensor -> _testRoundTrip;
diagOp -> assertShapeEqual;
_testRoundTrip -> assertShapeEqual;
Test -> _compare;
testFloatTypes -> _testAll;
testGradients -> _testGradientsType;
_testGradientsType -> _testGradients;
_testGradients -> _randomTensor;
_randomTensor -> _sparsify;
take_grad -> _assertEqual_nparray;
_assertEqual_nparray -> _assertEqual_indexedslices;
_assertEqual_indexedslices -> assertAllEqual;
_not -> assertShapeEqual;
testCTCGreedyDecoder -> _testCTCDecoder;
_testCTCDecoder -> assertShapeEqual;
testCTCDecoderBeamSearch -> _testCTCDecoder;
complex_sign -> _compareBothSparse;
_compareBothSparse -> _compareSparseCpu;
_compareBothSparse -> _compareSparseGpu;
_compareSparseCpu -> _check;
_check -> assertAllClose;
_compareSparseGpu -> _check;
testRankOneIntTensor -> diagOp;
testRankOneFloatTensor -> diagOp;
testRankOneComplexTensor -> diagOp;
testRankTwoIntTensor -> diagOp;
testRankTwoFloatTensor -> diagOp;
testRankTwoFloatTensor -> diagPartOp;
diagPartOp -> assertShapeEqual;
testRankTwoComplexTensor -> diagOp;
testRankThreeFloatTensor -> diagOp;
testRankThreeComplexTensor -> diagOp;
testIntegerTensorInput -> _ValidateFractionalMaxPoolResult;
_ValidateFractionalMaxPoolResult -> assertShapeEqual;
testNegative -> _testReduceJoin;
_testReduceJoin -> assertAllEqualUnicode;
assertAllEqualUnicode -> assertAllEqual;
testNonsymmetric -> _verifyInverse;
testSymmetricPositiveDefinite -> _verifyInverse;
testSolveBatch -> _verifySolveAllWays;
testComplexTypes -> _testAll;
test1DTesnorAsInput -> _testSoftmax;
test3DTensorAsInput -> _testSoftmax;
testAlongFirstDimension -> _testSoftmax;
testAlongSecondDimension -> _testSoftmax;
testSmallInput2x2Pad1x0 -> _testPad;
apply_indexed_slices_grad -> _assertEqual_nparray;
testSimpleAndRandomInputs -> _compare_all;
_compare_all -> _compare;
main -> close;
testWrapper -> _testXentWrapper;
_testXentWrapper -> assertAllCloseAccordingToType;
_tensordot_axes -> _tensordot_reshape;
_tensordot_axes -> matmul;
_tensordot_reshape -> reduce_prod;
matmul -> _dispatch_based_on_batch;
delete_session_tensor -> run;
sparse_tensor_dense_matmul -> matmul;
create_session -> run;
testApplyGradientDescent -> _testTypes;
testApplyAdagrad -> _testTypesForAdagrad;
_testTypesForAdagrad -> assertAllCloseAccordingToType;
_testTypesForAdagrad -> assertShapeEqual;
testApplyFtrl -> _testTypesForFtrl;
_testTypesForFtrl -> assertAllCloseAccordingToType;
_testTypesForFtrl -> assertShapeEqual;
testSparseApplyAdagrad -> _testTypesForSparseAdagrad;
_testTypesForSparseAdagrad -> assertAllCloseAccordingToType;
_testTypesForSparseAdagrad -> assertShapeEqual;
testSparseApplyAdagradDim1 -> _testTypesForSparseAdagrad;
testSparseApplyFtrlDim1 -> _testTypesForSparseFtrl;
_testTypesForSparseFtrl -> assertAllCloseAccordingToType;
_testTypesForSparseFtrl -> assertShapeEqual;
rewrite -> eightbitize_nodes_recursively;
eightbitize_nodes_recursively -> eightbitize_mat_mul_node;
eightbitize_nodes_recursively -> eightbitize_conv_node;
eightbitize_nodes_recursively -> eightbitize_bias_add_node;
eightbitize_nodes_recursively -> eightbitize_single_input_tensor_node;
eightbitize_mat_mul_node -> add_eightbit_prologue_nodes;
add_eightbit_prologue_nodes -> add_common_quantization_nodes;
add_eightbit_prologue_nodes -> eightbitize_input_to_node;
add_common_quantization_nodes -> add_output_graph_node;
add_common_quantization_nodes -> create_constant_node;
eightbitize_input_to_node -> add_output_graph_node;
eightbitize_conv_node -> add_eightbit_prologue_nodes;
eightbitize_bias_add_node -> add_eightbit_prologue_nodes;
eightbitize_single_input_tensor_node -> add_eightbit_prologue_nodes;
}
