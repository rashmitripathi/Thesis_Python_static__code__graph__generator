digraph tree {
    "tensorflow";
    "/setup.py";
    "Import:setup";
    "Import:find_packages";
    "/docs/autogen.py";
    "Import:print_function";
    "Import:unicode_literals";
    "Import:import";
    "Import:inspect";
    "Import:import";
    "Import:shutil";
    "Import:utils";
    "Import:layers";
    "Import:advanced_activations";
    "Import:noise";
    "Import:wrappers";
    "Import:initializers";
    "Import:optimizers";
    "Import:callbacks";
    "Import:models";
    "Import:losses";
    "Import:metrics";
    "Import:backend";
    "Import:activations";
    "Import:preprocessing";
    "Import:sys";
    "Fxn:get_earliest_class_that_defined_member";
    "Fxn:get_classes_ancestors";
    "Fxn:get_function_signature";
    "Fxn:get_class_signature";
    "Fxn:post_process_signature";
    "Fxn:class_to_docs_link";
    "Fxn:class_to_source_link";
    "Fxn:code_snippet";
    "Fxn:count_leading_spaces";
    "Fxn:process_docstring";
    "Fxn:read_file";
    "/examples/addition_rnn.py";
    "Import:print_function";
    "Import:Sequential";
    "Import:layers";
    "Import:numpy";
    "Import:range";
    "class:CharacterTable(object):";
    "Fxn:__init__";
    "Fxn:sorted(set(chars))";
    "Fxn:dict((c,";
    "Fxn:enumerate(self.chars))";
    "Fxn:dict((i,";
    "Fxn:enumerate(self.chars))";
    "Fxn:encode";
    "Fxn:np.zeros((num_rows,";
    "Fxn:len(self.chars)))";
    "Fxn:enumerate(C):";
    "Fxn:decode";
    "Fxn:x.argmax(axis=-1)";
    "Fxn:''.join(self.indices_char[x]";
    "/examples/antirectifier.py";
    "Import:print_function";
    "Import:keras";
    "Import:Sequential";
    "Import:layers";
    "Import:mnist";
    "Import:backend";
    "class:Antirectifier(layers.Layer):";
    "Fxn:compute_output_shape";
    "Fxn:list(input_shape)";
    "Fxn:len(shape)";
    "Fxn:tuple(shape)";
    "Fxn:call";
    "Fxn:K.mean(inputs,";
    "Fxn:K.l2_normalize(inputs,";
    "Fxn:K.relu(inputs)";
    "Fxn:K.relu(-inputs)";
    "Fxn:K.concatenate([pos,";
    "Fxn:mnist.load_data()";
    "Fxn:x_train.reshape(60000,";
    "Fxn:x_test.reshape(10000,";
    "Fxn:x_train.astype('float32')";
    "Fxn:x_test.astype('float32')";
    "Fxn:print(x_train.shape[0],";
    "Fxn:print(x_test.shape[0],";
    "/examples/babi_memnn.py";
    "Import:print_function";
    "Import:Sequential,";
    "Import:Embedding";
    "Import:Input,";
    "Import:LSTM";
    "Import:get_file";
    "Import:pad_sequences";
    "Import:reduce";
    "Import:tarfile";
    "Import:numpy";
    "Import:def";
    "Fxn:tokenize";
    "Fxn:parse_stories";
    "Fxn:get_stories";
    "Fxn:vectorize_stories";
    "/examples/babi_rnn.py";
    "Import:print_function";
    "Import:reduce";
    "Import:import";
    "Import:tarfile";
    "Import:numpy";
    "Import:get_file";
    "Import:Embedding";
    "Import:layers";
    "Import:recurrent";
    "Import:Model";
    "Import:pad_sequences";
    "Fxn:tokenize";
    "Fxn:parse_stories";
    "Fxn:get_stories";
    "Fxn:vectorize_stories";
    "/examples/cifar10_cnn.py";
    "Import:print_function";
    "Import:keras";
    "Import:cifar10";
    "Import:ImageDataGenerator";
    "Import:Sequential";
    "Import:Dense,";
    "Import:Conv2D,";
    "Import:batch_size";
    "/examples/cifar10_cnn_capsule.py";
    "Import:print_function";
    "Import:backend";
    "Import:Layer";
    "Import:activations";
    "Import:utils";
    "Import:cifar10";
    "Import:Model";
    "Import:keras.preprocessing.image";
    "Import:ImageDataGenerator";
    "Fxn:squash";
    "Fxn:softmax";
    "Fxn:margin_loss";
    "class:Capsule(Layer):";
    "Fxn:__init__";
    "Fxn:super(Capsule,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:activations.get(activation)";
    "Fxn:build";
    "Fxn:self.add_weight(";
    "Fxn:shape=(1,";
    "Fxn:self.add_weight(";
    "Fxn:shape=(input_num_capsule,";
    "Fxn:call";
    "Fxn:K.batch_dot(outputs,";
    "Fxn:K.batch_dot(outputs,";
    "Fxn:K.conv1d(inputs,";
    "Fxn:K.local_conv1d(inputs,";
    "Fxn:K.shape(inputs)[0]";
    "Fxn:K.shape(inputs)[1]";
    "Fxn:K.reshape(hat_inputs,";
    "Fxn:K.permute_dimensions(hat_inputs,";
    "Fxn:K.zeros_like(hat_inputs[:,";
    "Fxn:range(self.routings):";
    "Fxn:softmax(b,";
    "Fxn:K.backend()";
    "Fxn:K.sum(o,";
    "Fxn:self.activation(K.batch_dot(c,";
    "Fxn:K.batch_dot(o,";
    "Fxn:K.backend()";
    "Fxn:K.sum(o,";
    "Fxn:compute_output_shape";
    "Fxn:cifar10.load_data()";
    "Fxn:x_train.astype('float32')";
    "Fxn:x_test.astype('float32')";
    "Fxn:utils.to_categorical(y_train,";
    "Fxn:utils.to_categorical(y_test,";
    "Fxn:Input(shape=(None,";
    "Fxn:Conv2D(64,";
    "Fxn:activation='relu')(input_image)";
    "Fxn:Conv2D(64,";
    "Fxn:activation='relu')(x)";
    "Fxn:AveragePooling2D((2,";
    "Fxn:Conv2D(128,";
    "Fxn:activation='relu')(x)";
    "Fxn:Conv2D(128,";
    "Fxn:activation='relu')(x)";
    "Fxn:Reshape((-1,";
    "Fxn:Capsule(10,";
    "Fxn:True)(x)";
    "Fxn:Lambda(lambda";
    "Fxn:K.sqrt(K.sum(K.square(z),";
    "Fxn:Model(inputs=input_image,";
    "Fxn:model.compile(loss=margin_loss,";
    "Fxn:model.summary()";
    "Fxn:print('Not";
    "Fxn:model.fit(";
    "Fxn:validation_data=(x_test,";
    "Fxn:print('Using";
    "Fxn:ImageDataGenerator(";
    "Fxn:datagen.fit(x_train)";
    "Fxn:datagen.flow().";
    "Fxn:model.fit_generator(";
    "Fxn:datagen.flow(x_train,";
    "Fxn:validation_data=(x_test,";
    "/examples/cifar10_cnn_tfaugment2d.py";
    "Import:print_function";
    "Import:keras";
    "Import:cifar10";
    "Import:Sequential";
    "Import:Dense,";
    "Import:Conv2D,";
    "Import:backend";
    "Import:K.backend()";
    "Import:tensorflow";
    "Fxn:augment_2d";
    "/examples/cifar10_resnet.py";
    "Import:print_function";
    "Import:keras";
    "Import:Dense,";
    "Import:AveragePooling2D,";
    "Import:Adam";
    "Import:ModelCheckpoint,";
    "Import:ReduceLROnPlateau";
    "Import:ImageDataGenerator";
    "Import:keras";
    "Import:backend";
    "Import:Model";
    "Import:cifar10";
    "Import:numpy";
    "Import:Training";
    "Fxn:lr_schedule";
    "Fxn:resnet_layer";
    "Fxn:resnet_v1";
    "Fxn:resnet_v2";
    "/examples/conv_filter_visualization.py";
    "Import:print_function";
    "Import:imsave";
    "Import:numpy";
    "Import:time";
    "Import:vgg16";
    "Import:backend";
    "Fxn:deprocess_image";
    "Fxn:normalize";
    "/examples/conv_lstm.py";
    "Import:Sequential";
    "Import:Conv3D";
    "Import:ConvLSTM2D";
    "Import:BatchNormalization";
    "Import:numpy";
    "Import:pylab";
    "Fxn:generate_movies";
    "/examples/deep_dream.py";
    "Import:print_function";
    "Import:load_img,";
    "Import:numpy";
    "Import:scipy";
    "Import:argparse";
    "Import:inception_v3";
    "Import:backend";
    "Fxn:preprocess_image";
    "Fxn:deprocess_image";
    "Fxn:eval_loss_and_grads";
    "Fxn:resize_img";
    "Fxn:gradient_ascent";
    "Fxn:save_img";
    "/examples/image_ocr.py";
    "Import:import";
    "Import:itertools";
    "Import:codecs";
    "Import:import";
    "Import:datetime";
    "Import:cairocffi";
    "Import:editdistance";
    "Import:numpy";
    "Import:ndimage";
    "Import:pylab";
    "Import:backend";
    "Import:Conv2D,";
    "Import:Input,";
    "Import:Reshape,";
    "Import:add,";
    "Import:Model";
    "Import:GRU";
    "Import:SGD";
    "Import:get_file";
    "Import:image";
    "Import:keras.callbacks";
    "Fxn:speckle";
    "Fxn:paint_text";
    "Fxn:shuffle_mats_or_lists";
    "Fxn:text_to_labels";
    "Fxn:labels_to_text";
    "Fxn:is_valid_str";
    "class:TextImageGenerator(keras.callbacks.Callback):";
    "Fxn:__init__";
    "Fxn:self.get_output_size()";
    "Fxn:get_output_size";
    "Fxn:len(alphabet)";
    "Fxn:build_word_list";
    "Fxn:np.ones([self.num_words,";
    "Fxn:codecs.open(self.monogram_file,";
    "Fxn:len(tmp_string_list)";
    "Fxn:int(self.num_words";
    "Fxn:line.rstrip()";
    "Fxn:len(word)";
    "Fxn:tmp_string_list.append(word)";
    "Fxn:codecs.open(self.bigram_file,";
    "Fxn:f.readlines()";
    "Fxn:len(tmp_string_list)";
    "Fxn:line.lower().split()";
    "Fxn:is_valid_str(word)";
    "Fxn:len(word)";
    "Fxn:tmp_string_list.append(word)";
    "Fxn:len(tmp_string_list)";
    "Fxn:IOError('Could";
    "Fxn:enumerate(self.string_list):";
    "Fxn:len(word)";
    "Fxn:0:len(word)]";
    "Fxn:text_to_labels(word)";
    "Fxn:self.X_text.append(word)";
    "Fxn:np.expand_dims(np.array(self.Y_len),";
    "Fxn:get_batch";
    "Fxn:K.image_data_format()";
    "Fxn:np.ones([size,";
    "Fxn:np.ones([size,";
    "Fxn:np.ones([size,";
    "Fxn:np.zeros([size,";
    "Fxn:np.zeros([size,";
    "Fxn:range(size):";
    "Fxn:K.image_data_format()";
    "Fxn:self.paint_func('')[0,";
    "Fxn:self.paint_func('',)[0,";
    "Fxn:source_str.append('')";
    "Fxn:K.image_data_format()";
    "Fxn:self.paint_func(self.X_text[index";
    "Fxn:self.paint_func(self.X_text[index";
    "Fxn:source_str.append(self.X_text[index";
    "Fxn:np.zeros([size])}";
    "Fxn:next_train";
    "Fxn:self.get_batch(self.cur_train_index,";
    "Fxn:shuffle_mats_or_lists(";
    "Fxn:next_val";
    "Fxn:self.get_batch(self.cur_val_index,";
    "Fxn:on_train_begin";
    "Fxn:self.build_word_list(16000,";
    "Fxn:paint_text(text,";
    "Fxn:on_epoch_begin";
    "Fxn:paint_text(text,";
    "Fxn:paint_text(text,";
    "Fxn:paint_text(text,";
    "Fxn:self.build_word_list(32000,";
    "Fxn:ctc_lambda_func";
    "Fxn:K.ctc_batch_cost(labels,";
    "Fxn:decode_batch";
    "Fxn:test_func([word_batch])[0]";
    "Fxn:range(out.shape[0]):";
    "Fxn:list(np.argmax(out[j,";
    "Fxn:itertools.groupby(out_best)]";
    "Fxn:labels_to_text(out_best)";
    "Fxn:ret.append(outstr)";
    "class:VizCallback(keras.callbacks.Callback):";
    "Fxn:__init__";
    "Fxn:os.path.join(";
    "Fxn:os.path.exists(self.output_dir):";
    "Fxn:os.makedirs(self.output_dir)";
    "Fxn:show_edit_distance";
    "Fxn:next(self.text_img_gen)[0]";
    "Fxn:min(word_batch['the_input'].shape[0],";
    "Fxn:decode_batch(self.test_func,";
    "Fxn:range(num_proc):";
    "Fxn:editdistance.eval(decoded_res[j],";
    "Fxn:float(edit_dist)";
    "Fxn:float(edit_dist)";
    "Fxn:len(word_batch['source_str'][j])";
    "Fxn:print('\nOut";
    "Fxn:on_epoch_end";
    "Fxn:self.model.save_weights(os.path.join(self.output_dir,";
    "Fxn:self.show_edit_distance(256)";
    "Fxn:next(self.text_img_gen)[0]";
    "Fxn:decode_batch(self.test_func,";
    "Fxn:range(self.num_display_words):";
    "Fxn:pylab.subplot(self.num_display_words";
    "Fxn:K.image_data_format()";
    "Fxn:pylab.imshow(the_input.T,";
    "Fxn:pylab.xlabel('Truth";
    "Fxn:pylab.gcf()";
    "Fxn:fig.set_size_inches(10,";
    "Fxn:pylab.savefig(os.path.join(self.output_dir,";
    "Fxn:pylab.close()";
    "Fxn:train";
    "Fxn:int(words_per_epoch";
    "Fxn:K.image_data_format()";
    "Fxn:os.path.dirname(get_file('wordlists.tgz',";
    "Fxn:TextImageGenerator(monogram_file=os.path.join(fdir,";
    "Fxn:bigram_file=os.path.join(fdir,";
    "Fxn:downsample_factor=(pool_size";
    "Fxn:Input(name='the_input',";
    "Fxn:Conv2D(conv_filters,";
    "Fxn:name='conv1')(input_data)";
    "Fxn:MaxPooling2D(pool_size=(pool_size,";
    "Fxn:name='max1')(inner)";
    "Fxn:Conv2D(conv_filters,";
    "Fxn:name='conv2')(inner)";
    "Fxn:MaxPooling2D(pool_size=(pool_size,";
    "Fxn:name='max2')(inner)";
    "Fxn:Reshape(target_shape=conv_to_rnn_dims,";
    "Fxn:name='reshape')(inner)";
    "Fxn:Dense(time_dense_size,";
    "Fxn:name='dense1')(inner)";
    "Fxn:GRU(rnn_size,";
    "Fxn:name='gru1')(inner)";
    "Fxn:GRU(rnn_size,";
    "Fxn:name='gru1_b')(inner)";
    "Fxn:add([gru_1,";
    "Fxn:GRU(rnn_size,";
    "Fxn:name='gru2')(gru1_merged)";
    "Fxn:GRU(rnn_size,";
    "Fxn:name='gru2_b')(gru1_merged)";
    "Fxn:Dense(img_gen.get_output_size(),";
    "Fxn:name='dense2')(concatenate([gru_2,";
    "Fxn:Activation('softmax',";
    "Fxn:name='softmax')(inner)";
    "Fxn:Model(inputs=input_data,";
    "Fxn:outputs=y_pred).summary()";
    "Fxn:Input(name='the_labels',";
    "Fxn:Input(name='input_length',";
    "Fxn:Input(name='label_length',";
    "Fxn:Lambda(ctc_lambda_func,";
    "Fxn:output_shape=(1,),";
    "Fxn:name='ctc')([y_pred,";
    "Fxn:SGD(lr=0.02,";
    "Fxn:Model(inputs=[input_data,";
    "Fxn:model.compile(loss={'ctc':";
    "Fxn:os.path.join(OUTPUT_DIR,";
    "Fxn:os.path.join(run_name,";
    "Fxn:model.load_weights(weight_file)";
    "Fxn:K.function([input_data],";
    "Fxn:VizCallback(run_name,";
    "Fxn:img_gen.next_val())";
    "Fxn:model.fit_generator(generator=img_gen.next_train(),";
    "Fxn:steps_per_epoch=(words_per_epoch";
    "Fxn:validation_data=img_gen.next_val(),";
    "Fxn:datetime.datetime.now().strftime('%Y:%m:%d:%H:%M:%S')";
    "Fxn:train(run_name,";
    "Fxn:train(run_name,";
    "/examples/imdb_bidirectional_lstm.py";
    "Import:print_function";
    "Import:numpy";
    "Import:sequence";
    "Import:Sequential";
    "Import:Dense,";
    "Import:imdb";
    "/examples/imdb_cnn.py";
    "Import:print_function";
    "Import:sequence";
    "Import:Sequential";
    "Import:Dense,";
    "Import:Embedding";
    "Import:Conv1D,";
    "Import:imdb";
    "/examples/imdb_cnn_lstm.py";
    "Import:print_function";
    "Import:sequence";
    "Import:Sequential";
    "Import:Dense,";
    "Import:Embedding";
    "Import:LSTM";
    "Import:Conv1D,";
    "Import:imdb";
    "/examples/imdb_fasttext.py";
    "Import:print_function";
    "Import:numpy";
    "Import:sequence";
    "Import:Sequential";
    "Import:Dense";
    "Import:Embedding";
    "Import:GlobalAveragePooling1D";
    "Import:imdb";
    "Fxn:create_ngram_set";
    "Fxn:add_ngram";
    "/examples/imdb_lstm.py";
    "Import:print_function";
    "Import:sequence";
    "Import:Sequential";
    "Import:Dense,";
    "Import:LSTM";
    "Import:imdb";
    "/examples/lstm_seq2seq.py";
    "Import:print_function";
    "Import:Model";
    "Import:Input,";
    "Import:numpy";
    "Fxn:decode_sequence";
    "/examples/lstm_seq2seq_restore.py";
    "Import:print_function";
    "Import:Model,";
    "Import:Input";
    "Import:numpy";
    "Fxn:decode_sequence";
    "/examples/lstm_stateful.py";
    "Import:print_function";
    "Import:numpy";
    "Import:matplotlib.pyplot";
    "Import:pandas";
    "Import:Sequential";
    "Import:Dense,";
    "Fxn:gen_uniform_amp";
    "Fxn:create_model";
    "Fxn:split_data";
    "/examples/lstm_text_generation.py";
    "Import:print_function";
    "Import:LambdaCallback";
    "Import:Sequential";
    "Import:Dense,";
    "Import:LSTM";
    "Import:RMSprop";
    "Import:get_file";
    "Import:numpy";
    "Import:random";
    "Import:sys";
    "Import:path";
    "Fxn:sample";
    "Fxn:on_epoch_end";
    "/examples/mnist_acgan.py";
    "Import:print_function";
    "Import:defaultdict";
    "Import:cPickle";
    "Import:pickle";
    "Import:Image";
    "Import:range";
    "Import:mnist";
    "Import:layers";
    "Import:Input,";
    "Import:BatchNormalization";
    "Import:LeakyReLU";
    "Import:Conv2DTranspose,";
    "Import:Sequential,";
    "Import:Adam";
    "Import:Progbar";
    "Import:numpy";
    "Fxn:build_generator";
    "Fxn:build_discriminator";
    "/examples/mnist_cnn.py";
    "Import:print_function";
    "Import:keras";
    "Import:mnist";
    "Import:Sequential";
    "Import:Dense,";
    "Import:Conv2D,";
    "Import:backend";
    "/examples/mnist_dataset_api.py";
    "Import:numpy";
    "Import:import";
    "Import:tempfile";
    "Import:keras";
    "Import:backend";
    "Import:layers";
    "Import:mnist";
    "Import:tensorflow";
    "Import:Dataset";
    "Fxn:cnn_layers";
    "/examples/mnist_denoising_autoencoder.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:keras";
    "Import:Activation,";
    "Import:Conv2D,";
    "Import:Reshape,";
    "Import:Model";
    "Import:backend";
    "Import:mnist";
    "Import:numpy";
    "Import:matplotlib.pyplot";
    "Import:Image";
    "/examples/mnist_hierarchical_rnn.py";
    "Import:print_function";
    "Import:keras";
    "Import:mnist";
    "Import:Model";
    "Import:Input,";
    "Import:LSTM";
    "/examples/mnist_irnn.py";
    "Import:print_function";
    "Import:keras";
    "Import:mnist";
    "Import:Sequential";
    "Import:Dense,";
    "Import:SimpleRNN";
    "Import:initializers";
    "Import:RMSprop";
    "/examples/mnist_mlp.py";
    "Import:print_function";
    "Import:keras";
    "Import:mnist";
    "Import:Sequential";
    "Import:Dense,";
    "Import:RMSprop";
    "/examples/mnist_net2net.py";
    "Import:print_function";
    "Import:numpy";
    "Import:keras";
    "Import:backend";
    "Import:Sequential";
    "Import:Conv2D,";
    "Import:SGD";
    "Import:mnist";
    "Fxn:preprocess_input";
    "Fxn:preprocess_output";
    "Fxn:wider2net_conv2d";
    "Fxn:wider2net_fc";
    "Fxn:deeper2net_conv2d";
    "Fxn:copy_weights";
    "Fxn:make_teacher_model";
    "Fxn:make_wider_student_model";
    "Fxn:make_deeper_student_model";
    "Fxn:net2wider_experiment";
    "Fxn:net2deeper_experiment";
    "/examples/mnist_siamese.py";
    "Import:absolute_import";
    "Import:print_function";
    "Import:numpy";
    "Import:random";
    "Import:mnist";
    "Import:Model";
    "Import:Input,";
    "Import:RMSprop";
    "Import:backend";
    "Fxn:euclidean_distance";
    "Fxn:eucl_dist_output_shape";
    "Fxn:contrastive_loss";
    "Fxn:create_pairs";
    "Fxn:create_base_network";
    "Fxn:compute_accuracy";
    "Fxn:accuracy";
    "/examples/mnist_sklearn_wrapper.py";
    "Import:print_function";
    "Import:keras";
    "Import:mnist";
    "Import:Sequential";
    "Import:Dense,";
    "Import:Conv2D,";
    "Import:KerasClassifier";
    "Import:backend";
    "Import:GridSearchCV";
    "Fxn:make_model";
    "/examples/mnist_swwae.py";
    "Import:print_function";
    "Import:numpy";
    "Import:mnist";
    "Import:Model";
    "Import:Activation";
    "Import:UpSampling2D,";
    "Import:Input,";
    "Import:matplotlib.pyplot";
    "Import:keras.backend";
    "Import:layers";
    "Fxn:convresblock";
    "Fxn:getwhere";
    "Import:sys";
    "/examples/mnist_tfrecord.py";
    "Import:numpy";
    "Import:import";
    "Import:tensorflow";
    "Import:keras";
    "Import:backend";
    "Import:layers";
    "Import:Callback";
    "Import:mnist";
    "class:EvaluateInputTensor(Callback):";
    "Fxn:__init__";
    "Fxn:super(EvaluateInputTensor,";
    "Fxn:self).__init__()";
    "Fxn:on_epoch_end";
    "Fxn:self.val_model.set_weights(self.model.get_weights())";
    "Fxn:self.val_model.evaluate(None,";
    "Fxn:steps=int(self.num_steps),";
    "Fxn:zip(results,";
    "Fxn:str(result)";
    "Fxn:print(metrics_str)";
    "Fxn:cnn_layers";
    "Fxn:layers.Conv2D(32,";
    "Fxn:padding='valid')(x_train_input)";
    "Fxn:layers.MaxPooling2D(pool_size=(2,";
    "Fxn:layers.Conv2D(64,";
    "Fxn:activation='relu')(x)";
    "Fxn:layers.MaxPooling2D(pool_size=(2,";
    "Fxn:layers.Flatten()(x)";
    "Fxn:layers.Dense(512,";
    "Fxn:activation='relu')(x)";
    "Fxn:layers.Dropout(0.5)(x)";
    "Fxn:layers.Dense(num_classes,";
    "Fxn:name='x_train_out')(x)";
    "Fxn:K.get_session()";
    "Fxn:os.path.expanduser(";
    "Fxn:os.path.join('~',";
    "Fxn:mnist.read_data_sets(cache_dir,";
    "Fxn:tf.train.shuffle_batch(";
    "Fxn:data.train.labels.astype(np.int32)],";
    "Fxn:tf.cast(x_train_batch,";
    "Fxn:tf.reshape(x_train_batch,";
    "Fxn:tf.cast(y_train_batch,";
    "Fxn:tf.one_hot(y_train_batch,";
    "Fxn:x_train_batch.get_shape().as_list()";
    "Fxn:y_train_batch.get_shape().as_list()";
    "Fxn:layers.Input(tensor=x_train_batch)";
    "Fxn:cnn_layers(model_input)";
    "Fxn:keras.models.Model(inputs=model_input,";
    "Fxn:train_model.compile(optimizer=keras.optimizers.RMSprop(lr=2e-3,";
    "Fxn:train_model.summary()";
    "Fxn:tf.train.batch(";
    "Fxn:data.test.labels.astype(np.int32)],";
    "Fxn:tf.cast(x_test_batch,";
    "Fxn:tf.reshape(x_test_batch,";
    "Fxn:tf.cast(y_test_batch,";
    "Fxn:tf.one_hot(y_test_batch,";
    "Fxn:x_test_batch.get_shape().as_list()";
    "Fxn:y_test_batch.get_shape().as_list()";
    "Fxn:layers.Input(tensor=x_test_batch)";
    "Fxn:cnn_layers(test_model_input)";
    "Fxn:keras.models.Model(inputs=test_model_input,";
    "Fxn:test_model.compile(optimizer=keras.optimizers.RMSprop(lr=2e-3,";
    "Fxn:tf.train.Coordinator()";
    "Fxn:tf.train.start_queue_runners(sess,";
    "Fxn:train_model.fit(epochs=epochs,";
    "Fxn:steps_per_epoch=int(np.ceil(data.train.num_examples";
    "Fxn:float(batch_size))),";
    "Fxn:callbacks=[EvaluateInputTensor(test_model,";
    "Fxn:train_model.save_weights('saved_wt.h5')";
    "Fxn:coord.request_stop()";
    "Fxn:coord.join(threads)";
    "Fxn:K.clear_session()";
    "Fxn:np.reshape(data.test.images,";
    "Fxn:layers.Input(shape=(x_test.shape[1:]))";
    "Fxn:cnn_layers(x_test_inp)";
    "Fxn:keras.models.Model(inputs=x_test_inp,";
    "Fxn:test_model.load_weights('saved_wt.h5')";
    "Fxn:test_model.compile(optimizer='rmsprop',";
    "Fxn:test_model.summary()";
    "Fxn:test_model.evaluate(x_test,";
    "Fxn:keras.utils.to_categorical(y_test),";
    "Fxn:print('\nTest";
    "Fxn:{0}'.format(acc))";
    "/examples/mnist_transfer_cnn.py";
    "Import:print_function";
    "Import:datetime";
    "Import:keras";
    "Import:mnist";
    "Import:Sequential";
    "Import:Dense,";
    "Import:Conv2D,";
    "Import:backend";
    "Fxn:train_model";
    "/examples/neural_doodle.py";
    "Import:print_function";
    "Import:time";
    "Import:argparse";
    "Import:numpy";
    "Import:fmin_l_bfgs_b";
    "Import:imread,";
    "Import:backend";
    "Import:Input,";
    "Import:Model";
    "Import:load_img,";
    "Import:vgg19";
    "Fxn:preprocess_image";
    "Fxn:deprocess_image";
    "Fxn:kmeans";
    "Import:k_means";
    "Import:kmeans2";
    "Fxn:load_mask_labels";
    "Fxn:gram_matrix";
    "Fxn:region_style_loss";
    "Fxn:style_loss";
    "Fxn:content_loss";
    "Fxn:total_variation_loss";
    "Fxn:eval_loss_and_grads";
    "class:Evaluator(object):";
    "Fxn:__init__";
    "Fxn:loss";
    "Fxn:eval_loss_and_grads(x)";
    "Fxn:grads";
    "Fxn:np.copy(self.grad_values)";
    "Fxn:Evaluator()";
    "Fxn:K.image_data_format()";
    "Fxn:np.random.uniform(0,";
    "Fxn:np.random.uniform(0,";
    "Fxn:range(50):";
    "Fxn:print('Start";
    "Fxn:time.time()";
    "Fxn:fmin_l_bfgs_b(evaluator.loss,";
    "Fxn:x.flatten(),";
    "Fxn:print('Current";
    "Fxn:deprocess_image(x.copy())";
    "Fxn:imsave(fname,";
    "Fxn:time.time()";
    "Fxn:print('Image";
    "Fxn:print('Iteration";
    "/examples/neural_style_transfer.py";
    "Import:print_function";
    "Import:load_img,";
    "Import:imsave";
    "Import:numpy";
    "Import:fmin_l_bfgs_b";
    "Import:time";
    "Import:argparse";
    "Import:vgg19";
    "Import:backend";
    "Fxn:preprocess_image";
    "Fxn:deprocess_image";
    "Fxn:gram_matrix";
    "Fxn:style_loss";
    "Fxn:content_loss";
    "Fxn:total_variation_loss";
    "Fxn:eval_loss_and_grads";
    "class:Evaluator(object):";
    "Fxn:__init__";
    "Fxn:loss";
    "Fxn:eval_loss_and_grads(x)";
    "Fxn:grads";
    "Fxn:np.copy(self.grad_values)";
    "Fxn:Evaluator()";
    "Fxn:preprocess_image(base_image_path)";
    "Fxn:range(iterations):";
    "Fxn:print('Start";
    "Fxn:time.time()";
    "Fxn:fmin_l_bfgs_b(evaluator.loss,";
    "Fxn:x.flatten(),";
    "Fxn:print('Current";
    "Fxn:deprocess_image(x.copy())";
    "Fxn:imsave(fname,";
    "Fxn:time.time()";
    "Fxn:print('Image";
    "Fxn:print('Iteration";
    "/examples/pretrained_word_embeddings.py";
    "Import:print_function";
    "Import:import";
    "Import:sys";
    "Import:numpy";
    "Import:Tokenizer";
    "Import:pad_sequences";
    "Import:to_categorical";
    "Import:Dense,";
    "Import:Conv1D,";
    "Import:Model";
    "/examples/reuters_mlp.py";
    "Import:print_function";
    "Import:numpy";
    "Import:keras";
    "Import:reuters";
    "Import:Sequential";
    "Import:Dense,";
    "Import:Tokenizer";
    "/examples/reuters_mlp_relu_vs_selu.py";
    "Import:print_function";
    "Import:numpy";
    "Import:matplotlib.pyplot";
    "Import:keras";
    "Import:reuters";
    "Import:Sequential";
    "Import:Dense,";
    "Import:AlphaDropout";
    "Import:Tokenizer";
    "Fxn:create_network";
    "/examples/variational_autoencoder.py";
    "Import:print_function";
    "Import:numpy";
    "Import:matplotlib.pyplot";
    "Import:norm";
    "Import:Input,";
    "Import:Model";
    "Import:backend";
    "Import:metrics";
    "Import:mnist";
    "Fxn:sampling";
    "/examples/variational_autoencoder_deconv.py";
    "Import:print_function";
    "Import:numpy";
    "Import:matplotlib.pyplot";
    "Import:norm";
    "Import:Input,";
    "Import:Conv2D,";
    "Import:Model";
    "Import:backend";
    "Import:metrics";
    "Import:mnist";
    "Fxn:sampling";
    "/keras/activations.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:six";
    "Import:warnings";
    "Import:backend";
    "Import:deserialize_keras_object";
    "Import:Layer";
    "Fxn:softmax";
    "Fxn:elu";
    "Fxn:selu";
    "Fxn:softplus";
    "Fxn:softsign";
    "Fxn:relu";
    "Fxn:tanh";
    "Fxn:sigmoid";
    "Fxn:hard_sigmoid";
    "Fxn:linear";
    "Fxn:serialize";
    "Fxn:deserialize";
    "Fxn:get";
    "/keras/callbacks.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:import";
    "Import:csv";
    "Import:six";
    "Import:numpy";
    "Import:time";
    "Import:json";
    "Import:warnings";
    "Import:deque";
    "Import:OrderedDict";
    "Import:Iterable";
    "Import:Progbar";
    "Import:backend";
    "Import:Layer";
    "Import:requests";
    "class:CallbackList(object):";
    "Fxn:__init__";
    "Fxn:append";
    "Fxn:self.callbacks.append(callback)";
    "Fxn:set_params";
    "Fxn:callback.set_params(params)";
    "Fxn:set_model";
    "Fxn:callback.set_model(model)";
    "Fxn:on_epoch_begin";
    "Fxn:callback.on_epoch_begin(epoch,";
    "Fxn:deque([],";
    "Fxn:deque([],";
    "Fxn:on_epoch_end";
    "Fxn:callback.on_epoch_end(epoch,";
    "Fxn:on_batch_begin";
    "Fxn:time.time()";
    "Fxn:callback.on_batch_begin(batch,";
    "Fxn:self._delta_ts_batch_begin.append(time.time()";
    "Fxn:np.median(self._delta_ts_batch_begin)";
    "Fxn:warnings.warn('Method";
    "Fxn:on_batch_begin()";
    "Fxn:time.time()";
    "Fxn:on_batch_end";
    "Fxn:hasattr(self,";
    "Fxn:time.time()";
    "Fxn:time.time()";
    "Fxn:time.time()";
    "Fxn:callback.on_batch_end(batch,";
    "Fxn:self._delta_ts_batch_end.append(time.time()";
    "Fxn:np.median(self._delta_ts_batch_end)";
    "Fxn:warnings.warn('Method";
    "Fxn:on_batch_end()";
    "Fxn:on_train_begin";
    "Fxn:callback.on_train_begin(logs)";
    "Fxn:on_train_end";
    "Fxn:callback.on_train_end(logs)";
    "Fxn:__iter__";
    "Fxn:iter(self.callbacks)";
    "class:Callback(object):";
    "Fxn:__init__";
    "Fxn:set_params";
    "Fxn:set_model";
    "Fxn:on_epoch_begin";
    "Fxn:on_epoch_end";
    "Fxn:on_batch_begin";
    "Fxn:on_batch_end";
    "Fxn:on_train_begin";
    "Fxn:on_train_end";
    "class:BaseLogger(Callback):";
    "Fxn:__init__";
    "Fxn:set(stateful_metrics)";
    "Fxn:set()";
    "Fxn:on_epoch_begin";
    "Fxn:on_batch_end";
    "Fxn:logs.get('size',";
    "Fxn:logs.items():";
    "Fxn:on_epoch_end";
    "class:TerminateOnNaN(Callback):";
    "Fxn:__init__";
    "Fxn:super(TerminateOnNaN,";
    "Fxn:self).__init__()";
    "Fxn:on_batch_end";
    "Fxn:logs.get('loss')";
    "Fxn:np.isnan(loss)";
    "Fxn:np.isinf(loss):";
    "Fxn:print('Batch";
    "class:ProgbarLogger(Callback):";
    "Fxn:__init__";
    "Fxn:super(ProgbarLogger,";
    "Fxn:self).__init__()";
    "Fxn:ValueError('Unknown";
    "Fxn:str(count_mode))";
    "Fxn:set(stateful_metrics)";
    "Fxn:set()";
    "Fxn:on_train_begin";
    "Fxn:on_epoch_begin";
    "Fxn:print('Epoch";
    "Fxn:Progbar(target=self.target,";
    "Fxn:on_batch_begin";
    "Fxn:on_batch_end";
    "Fxn:logs.get('size',";
    "Fxn:self.log_values.append((k,";
    "Fxn:self.progbar.update(self.seen,";
    "Fxn:on_epoch_end";
    "Fxn:self.log_values.append((k,";
    "Fxn:self.progbar.update(self.seen,";
    "class:History(Callback):";
    "Fxn:on_train_begin";
    "Fxn:on_epoch_end";
    "Fxn:self.epoch.append(epoch)";
    "Fxn:logs.items():";
    "Fxn:self.history.setdefault(k,";
    "Fxn:[]).append(v)";
    "class:ModelCheckpoint(Callback):";
    "Fxn:__init__";
    "Fxn:super(ModelCheckpoint,";
    "Fxn:self).__init__()";
    "Fxn:warnings.warn('ModelCheckpoint";
    "Fxn:self.monitor.startswith('fmeasure'):";
    "Fxn:on_epoch_end";
    "Fxn:self.filepath.format(epoch=epoch";
    "Fxn:logs.get(self.monitor)";
    "Fxn:warnings.warn('Can";
    "Fxn:self.monitor_op(current,";
    "Fxn:print('\nEpoch";
    "Fxn:self.model.save_weights(filepath,";
    "Fxn:self.model.save(filepath,";
    "Fxn:print('\nEpoch";
    "Fxn:print('\nEpoch";
    "Fxn:self.model.save_weights(filepath,";
    "Fxn:self.model.save(filepath,";
    "class:EarlyStopping(Callback):";
    "Fxn:__init__";
    "Fxn:super(EarlyStopping,";
    "Fxn:self).__init__()";
    "Fxn:warnings.warn('EarlyStopping";
    "Fxn:on_train_begin";
    "Fxn:on_epoch_end";
    "Fxn:logs.get(self.monitor)";
    "Fxn:warnings.warn(";
    "Fxn:','.join(list(logs.keys()))),";
    "Fxn:self.monitor_op(current";
    "Fxn:on_train_end";
    "Fxn:print('Epoch";
    "class:RemoteMonitor(Callback):";
    "Fxn:__init__";
    "Fxn:super(RemoteMonitor,";
    "Fxn:self).__init__()";
    "Fxn:on_epoch_end";
    "Fxn:ImportError('RemoteMonitor";
    "Fxn:logs.items():";
    "Fxn:isinstance(v,";
    "Fxn:v.item()";
    "Fxn:requests.post(self.root";
    "Fxn:json.dumps(send)},";
    "Fxn:warnings.warn('Warning:";
    "Fxn:str(self.root))";
    "class:LearningRateScheduler(Callback):";
    "Fxn:__init__";
    "Fxn:super(LearningRateScheduler,";
    "Fxn:self).__init__()";
    "Fxn:on_epoch_begin";
    "Fxn:hasattr(self.model.optimizer,";
    "Fxn:ValueError('Optimizer";
    "Fxn:float(K.get_value(self.model.optimizer.lr))";
    "Fxn:self.schedule(epoch,";
    "Fxn:self.schedule(epoch)";
    "Fxn:isinstance(lr,";
    "Fxn:ValueError('The";
    "Fxn:K.set_value(self.model.optimizer.lr,";
    "Fxn:print('\nEpoch";
    "class:TensorBoard(Callback):";
    "Fxn:__init__";
    "Fxn:super(TensorBoard,";
    "Fxn:self).__init__()";
    "Fxn:ImportError('You";
    "Fxn:K.backend()";
    "Fxn:warnings.warn('You";
    "Fxn:warnings.warn('You";
    "Fxn:warnings.warn('You";
    "Fxn:warnings.warn('You";
    "Fxn:set_model";
    "Fxn:K.backend()";
    "Fxn:K.get_session()";
    "Fxn:weight.name.replace(':',";
    "Fxn:tf.summary.histogram(mapped_weight_name,";
    "Fxn:model.optimizer.get_gradients(model.total_loss,";
    "Fxn:is_indexed_slices";
    "Fxn:type(grad).__name__";
    "Fxn:is_indexed_slices(grad)";
    "Fxn:tf.summary.histogram('{}_grad'.format(mapped_weight_name),";
    "Fxn:tf.squeeze(weight)";
    "Fxn:K.int_shape(w_img)";
    "Fxn:len(shape)";
    "Fxn:tf.transpose(w_img)";
    "Fxn:K.int_shape(w_img)";
    "Fxn:tf.reshape(w_img,";
    "Fxn:len(shape)";
    "Fxn:K.image_data_format()";
    "Fxn:tf.transpose(w_img,";
    "Fxn:K.int_shape(w_img)";
    "Fxn:tf.reshape(w_img,";
    "Fxn:len(shape)";
    "Fxn:tf.reshape(w_img,";
    "Fxn:K.int_shape(w_img)";
    "Fxn:len(shape)";
    "Fxn:tf.summary.image(mapped_weight_name,";
    "Fxn:hasattr(layer,";
    "Fxn:tf.summary.histogram('{}_out'.format(layer.name),";
    "Fxn:tf.summary.merge_all()";
    "Fxn:tf.summary.FileWriter(self.log_dir,";
    "Fxn:tf.summary.FileWriter(self.log_dir)";
    "Fxn:type(layer).__name__";
    "Fxn:tf.train.Saver(list(embeddings.values()))";
    "Fxn:isinstance(self.embeddings_metadata,";
    "Fxn:embeddings.keys()}";
    "Fxn:projector.ProjectorConfig()";
    "Fxn:os.path.join(self.log_dir,";
    "Fxn:embeddings.items():";
    "Fxn:config.embeddings.add()";
    "Fxn:projector.visualize_embeddings(self.writer,";
    "Fxn:on_epoch_end";
    "Fxn:ValueError('If";
    "Fxn:[K.learning_phase()]";
    "Fxn:len(val_data)";
    "Fxn:len(tensors)";
    "Fxn:min(self.batch_size,";
    "Fxn:batch_val.append(val_data[-1])";
    "Fxn:len(batch_val)";
    "Fxn:len(tensors)";
    "Fxn:dict(zip(tensors,";
    "Fxn:self.sess.run([self.merged],";
    "Fxn:self.writer.add_summary(summary_str,";
    "Fxn:self.saver.save(self.sess,";
    "Fxn:logs.items():";
    "Fxn:tf.Summary()";
    "Fxn:summary.value.add()";
    "Fxn:value.item()";
    "Fxn:self.writer.add_summary(summary,";
    "Fxn:self.writer.flush()";
    "Fxn:on_train_end";
    "Fxn:self.writer.close()";
    "Import:tensorflow";
    "Import:projector";
    "class:ReduceLROnPlateau(Callback):";
    "Fxn:__init__";
    "Fxn:super(ReduceLROnPlateau,";
    "Fxn:self).__init__()";
    "Fxn:ValueError('ReduceLROnPlateau";
    "Fxn:self._reset()";
    "Fxn:_reset";
    "Fxn:warnings.warn('Learning";
    "Fxn:np.less(a,";
    "Fxn:np.greater(a,";
    "Fxn:on_train_begin";
    "Fxn:self._reset()";
    "Fxn:on_epoch_end";
    "Fxn:K.get_value(self.model.optimizer.lr)";
    "Fxn:logs.get(self.monitor)";
    "Fxn:warnings.warn(";
    "Fxn:','.join(list(logs.keys()))),";
    "Fxn:self.in_cooldown():";
    "Fxn:self.monitor_op(current,";
    "Fxn:self.in_cooldown():";
    "Fxn:float(K.get_value(self.model.optimizer.lr))";
    "Fxn:max(new_lr,";
    "Fxn:K.set_value(self.model.optimizer.lr,";
    "Fxn:print('\nEpoch";
    "Fxn:in_cooldown";
    "class:CSVLogger(Callback):";
    "Fxn:__init__";
    "Fxn:super(CSVLogger,";
    "Fxn:self).__init__()";
    "Fxn:on_train_begin";
    "Fxn:os.path.exists(self.filename):";
    "Fxn:open(self.filename,";
    "Fxn:bool(len(f.readline()))";
    "Fxn:open(self.filename,";
    "Fxn:open(self.filename,";
    "Fxn:on_epoch_end";
    "Fxn:handle_value";
    "Fxn:isinstance(k,";
    "Fxn:isinstance(k,";
    "Fxn:isinstance(k,";
    "Fxn:'.join(map(str,";
    "Fxn:sorted(logs.keys())";
    "Fxn:dict([(k,";
    "class:CustomDialect(csv.excel):";
    "Fxn:on_train_end";
    "Fxn:self.csv_file.close()";
    "class:LambdaCallback(Callback):";
    "Fxn:__init__";
    "Fxn:super(LambdaCallback,";
    "Fxn:self).__init__()";
    "Fxn:self.__dict__.update(kwargs)";
    "Import:json";
    "/keras/constraints.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:six";
    "Import:backend";
    "Import:serialize_keras_object";
    "Import:deserialize_keras_object";
    "class:Constraint(object):";
    "Fxn:__call__";
    "Fxn:get_config";
    "class:MaxNorm(Constraint):";
    "Fxn:__init__";
    "Fxn:__call__";
    "Fxn:K.sqrt(K.sum(K.square(w),";
    "Fxn:K.clip(norms,";
    "Fxn:get_config";
    "class:NonNeg(Constraint):";
    "Fxn:__call__";
    "Fxn:K.cast(K.greater_equal(w,";
    "Fxn:K.floatx())";
    "class:UnitNorm(Constraint):";
    "Fxn:__init__";
    "Fxn:__call__";
    "Fxn:K.sqrt(K.sum(K.square(w),";
    "Fxn:get_config";
    "class:MinMaxNorm(Constraint):";
    "Fxn:__init__";
    "Fxn:__call__";
    "Fxn:K.sqrt(K.sum(K.square(w),";
    "Fxn:K.clip(norms,";
    "Fxn:get_config";
    "Fxn:serialize";
    "Fxn:serialize_keras_object(constraint)";
    "Fxn:deserialize";
    "Fxn:deserialize_keras_object(config,";
    "Fxn:module_objects=globals(),";
    "Fxn:get";
    "Fxn:isinstance(identifier,";
    "Fxn:deserialize(identifier)";
    "Fxn:isinstance(identifier,";
    "Fxn:str(identifier),";
    "Fxn:deserialize(config)";
    "Fxn:callable(identifier):";
    "Fxn:ValueError('Could";
    "Fxn:str(identifier))";
    "/keras/initializers.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:numpy";
    "Import:six";
    "Import:backend";
    "Import:serialize_keras_object";
    "Import:deserialize_keras_object";
    "class:Initializer(object):";
    "Fxn:__call__";
    "Fxn:get_config";
    "Fxn:from_config";
    "Fxn:config.pop('dtype')";
    "Fxn:cls(**config)";
    "class:Zeros(Initializer):";
    "Fxn:__call__";
    "Fxn:K.constant(0,";
    "class:Ones(Initializer):";
    "Fxn:__call__";
    "Fxn:K.constant(1,";
    "class:Constant(Initializer):";
    "Fxn:__init__";
    "Fxn:__call__";
    "Fxn:K.constant(self.value,";
    "Fxn:get_config";
    "class:RandomNormal(Initializer):";
    "Fxn:__init__";
    "Fxn:__call__";
    "Fxn:K.random_normal(shape,";
    "Fxn:get_config";
    "class:RandomUniform(Initializer):";
    "Fxn:__init__";
    "Fxn:__call__";
    "Fxn:K.random_uniform(shape,";
    "Fxn:get_config";
    "class:TruncatedNormal(Initializer):";
    "Fxn:__init__";
    "Fxn:__call__";
    "Fxn:K.truncated_normal(shape,";
    "Fxn:get_config";
    "class:VarianceScaling(Initializer):";
    "Fxn:__init__";
    "Fxn:ValueError('`scale`";
    "Fxn:mode.lower()";
    "Fxn:ValueError('Invalid";
    "Fxn:distribution.lower()";
    "Fxn:ValueError('Invalid";
    "Fxn:__call__";
    "Fxn:_compute_fans(shape)";
    "Fxn:max(1.,";
    "Fxn:max(1.,";
    "Fxn:max(1.,";
    "Fxn:float(fan_in";
    "Fxn:np.sqrt(scale)";
    "Fxn:K.truncated_normal(shape,";
    "Fxn:np.sqrt(3.";
    "Fxn:K.random_uniform(shape,";
    "Fxn:get_config";
    "class:Orthogonal(Initializer):";
    "Fxn:__init__";
    "Fxn:__call__";
    "Fxn:np.random.seed(self.seed)";
    "Fxn:np.random.normal(0.0,";
    "Fxn:np.linalg.svd(a,";
    "Fxn:q.reshape(shape)";
    "Fxn:get_config";
    "class:Identity(Initializer):";
    "Fxn:__init__";
    "Fxn:__call__";
    "Fxn:len(shape)";
    "Fxn:ValueError('Identity";
    "Fxn:np.identity(shape[0])";
    "Fxn:get_config";
    "Fxn:lecun_uniform";
    "Fxn:`sqrt(3";
    "Fxn:VarianceScaling(scale=1.,";
    "Fxn:glorot_normal";
    "Fxn:sqrt(2";
    "Fxn:VarianceScaling(scale=1.,";
    "Fxn:glorot_uniform";
    "Fxn:`sqrt(6";
    "Fxn:VarianceScaling(scale=1.,";
    "Fxn:he_normal";
    "Fxn:sqrt(2";
    "Fxn:VarianceScaling(scale=2.,";
    "Fxn:lecun_normal";
    "Fxn:sqrt(1";
    "Fxn:Networks](https://arxiv.org/abs/1706.02515)";
    "Fxn:Backprop](http://yann.lecun.com/exdb/publis/pdf/lecun-98b.pdf)";
    "Fxn:VarianceScaling(scale=1.,";
    "Fxn:he_uniform";
    "Fxn:`sqrt(6";
    "Fxn:VarianceScaling(scale=2.,";
    "Fxn:_compute_fans";
    "Fxn:`(fan_in,";
    "Fxn:len(shape)";
    "Fxn:len(shape)";
    "Fxn:np.prod(shape[2:])";
    "Fxn:np.prod(shape[:-2])";
    "Fxn:ValueError('Invalid";
    "Fxn:np.sqrt(np.prod(shape))";
    "Fxn:np.sqrt(np.prod(shape))";
    "Fxn:serialize";
    "Fxn:serialize_keras_object(initializer)";
    "Fxn:deserialize";
    "Fxn:deserialize_keras_object(config,";
    "Fxn:module_objects=globals(),";
    "Fxn:get";
    "Fxn:isinstance(identifier,";
    "Fxn:deserialize(identifier)";
    "Fxn:isinstance(identifier,";
    "Fxn:str(identifier),";
    "Fxn:deserialize(config)";
    "Fxn:callable(identifier):";
    "Fxn:ValueError('Could";
    "Fxn:str(identifier))";
    "/keras/losses.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:six";
    "Import:backend";
    "Import:deserialize_keras_object";
    "Import:serialize_keras_object";
    "Fxn:mean_squared_error";
    "Fxn:mean_absolute_error";
    "Fxn:mean_absolute_percentage_error";
    "Fxn:mean_squared_logarithmic_error";
    "Fxn:squared_hinge";
    "Fxn:hinge";
    "Fxn:categorical_hinge";
    "Fxn:logcosh";
    "Fxn:_logcosh";
    "Fxn:categorical_crossentropy";
    "Fxn:sparse_categorical_crossentropy";
    "Fxn:binary_crossentropy";
    "Fxn:kullback_leibler_divergence";
    "Fxn:poisson";
    "Fxn:cosine_proximity";
    "Fxn:serialize";
    "Fxn:deserialize";
    "Fxn:get";
    "/keras/metrics.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:six";
    "Import:backend";
    "Import:mean_squared_error";
    "Import:mean_absolute_error";
    "Import:mean_absolute_percentage_error";
    "Import:mean_squared_logarithmic_error";
    "Import:hinge";
    "Import:logcosh";
    "Import:squared_hinge";
    "Import:categorical_crossentropy";
    "Import:sparse_categorical_crossentropy";
    "Import:binary_crossentropy";
    "Import:kullback_leibler_divergence";
    "Import:poisson";
    "Import:cosine_proximity";
    "Import:deserialize_keras_object";
    "Import:serialize_keras_object";
    "Fxn:binary_accuracy";
    "Fxn:categorical_accuracy";
    "Fxn:sparse_categorical_accuracy";
    "Fxn:top_k_categorical_accuracy";
    "Fxn:sparse_top_k_categorical_accuracy";
    "Fxn:serialize";
    "Fxn:deserialize";
    "Fxn:get";
    "/keras/models.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:warnings";
    "Import:copy";
    "Import:json";
    "Import:import";
    "Import:yaml";
    "Import:numpy";
    "Import:backend";
    "Import:optimizers";
    "Import:layers";
    "Import:ask_to_proceed_with_overwrite";
    "Import:has_arg";
    "Import:Model";
    "Import:topology";
    "Import:Layer";
    "Import:Input";
    "Import:InputLayer";
    "Import:layers";
    "Import:models";
    "Import:interfaces";
    "Import:h5py";
    "Fxn:save_model";
    "Fxn:get_json_type";
    "Import:__version__";
    "Fxn:load_model";
    "Fxn:convert_custom_objects";
    "Fxn:model_from_config";
    "Fxn:model_from_yaml";
    "Fxn:model_from_json";
    "class:Sequential(Model):";
    "Fxn:__init__";
    "Fxn:str(K.get_uid(prefix))";
    "Fxn:self.add(layer)";
    "Fxn:add";
    "Fxn:isinstance(layer,";
    "Fxn:TypeError('The";
    "Fxn:pop";
    "Fxn:TypeError('There";
    "Fxn:self.layers.pop()";
    "Fxn:get_layer";
    "Fxn:self.build()";
    "Fxn:self.model.get_layer(name,";
    "Fxn:call";
    "Fxn:self.build()";
    "Fxn:self.model.call(inputs,";
    "Fxn:build";
    "Fxn:TypeError('Sequential";
    "Fxn:Model(self.inputs,";
    "Fxn:uses_learning_phase";
    "Fxn:self.build()";
    "Fxn:_flattened_layers";
    "Fxn:isinstance(self.layers[0],";
    "Fxn:hasattr(layer,";
    "Fxn:layers.append(sublayer)";
    "Fxn:hasattr(layer,";
    "Fxn:layers.append(sublayer)";
    "Fxn:layers.append(layer)";
    "Fxn:layers.append(self.layers[0])";
    "Fxn:layers.append(layer)";
    "Fxn:_gather_list_attr";
    "Fxn:getattr(layer,";
    "Fxn:trainable";
    "Fxn:trainable";
    "Fxn:trainable_weights";
    "Fxn:self._gather_list_attr('trainable_weights')";
    "Fxn:non_trainable_weights";
    "Fxn:self._gather_list_attr('non_trainable_weights')";
    "Fxn:self._gather_list_attr('trainable_weights')";
    "Fxn:updates";
    "Fxn:self.build()";
    "Fxn:state_updates";
    "Fxn:self.build()";
    "Fxn:get_updates_for";
    "Fxn:self.build()";
    "Fxn:self.model.get_updates_for(inputs)";
    "Fxn:losses";
    "Fxn:self.build()";
    "Fxn:get_losses_for";
    "Fxn:self.build()";
    "Fxn:self.model.get_losses_for(inputs)";
    "Fxn:regularizers";
    "Fxn:self.build()";
    "Fxn:get_weights";
    "Fxn:legacy_models.needs_legacy_support(self):";
    "Fxn:legacy_models.legacy_sequential_layers(self)";
    "Fxn:weights.append(layer.get_weights())";
    "Fxn:self.build()";
    "Fxn:self.model.get_weights()";
    "Fxn:set_weights";
    "Fxn:`model.get_weights()`.";
    "Fxn:legacy_models.needs_legacy_support(self):";
    "Fxn:legacy_models.legacy_sequential_layers(self)";
    "Fxn:len(layer.weights)";
    "Fxn:layer.set_weights(weights[:nb_param])";
    "Fxn:self.build()";
    "Fxn:self.model.set_weights(weights)";
    "Fxn:load_weights";
    "Fxn:ImportError('`load_weights`";
    "Fxn:h5py.File(filepath,";
    "Fxn:legacy_models.needs_legacy_support(self):";
    "Fxn:legacy_models.legacy_sequential_layers(self)";
    "Fxn:topology.load_weights_from_hdf5_group_by_name(f,";
    "Fxn:topology.load_weights_from_hdf5_group(f,";
    "Fxn:save_weights";
    "Fxn:ImportError('`save_weights`";
    "Fxn:os.path.isfile(filepath):";
    "Fxn:ask_to_proceed_with_overwrite(filepath)";
    "Fxn:legacy_models.needs_legacy_support(self):";
    "Fxn:legacy_models.legacy_sequential_layers(self)";
    "Fxn:h5py.File(filepath,";
    "Fxn:topology.save_weights_to_hdf5_group(f,";
    "Fxn:f.flush()";
    "Fxn:compile";
    "Fxn:[optimizers](/optimizers).";
    "Fxn:[losses](/losses).";
    "Fxn:Sequential()";
    "Fxn:model.add(Dense(32,";
    "Fxn:input_shape=(500,)))";
    "Fxn:model.add(Dense(10,";
    "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:self.build()";
    "class:self.model.compile(optimizer,";
    "Fxn:fit";
    "Fxn:[callbacks](/callbacks).";
    "Fxn:`(x_val,";
    "Fxn:`(x_val,";
    "Fxn:evaluate";
    "Fxn:RuntimeError('The";
    "Fxn:self.model.evaluate(x,";
    "Fxn:predict";
    "Fxn:self.build()";
    "Fxn:self.model.predict(x,";
    "Fxn:predict_on_batch";
    "Fxn:self.build()";
    "Fxn:self.model.predict_on_batch(x)";
    "Fxn:train_on_batch";
    "Fxn:RuntimeError('The";
    "Fxn:self.model.train_on_batch(x,";
    "Fxn:test_on_batch";
    "Fxn:RuntimeError('The";
    "Fxn:self.model.test_on_batch(x,";
    "Fxn:predict_proba";
    "Fxn:predict_classes";
    "Fxn:fit_generator";
    "Fxn:`(inputs,";
    "Fxn:`(inputs,";
    "Fxn:`len(generator)`";
    "Fxn:[callbacks](/callbacks).";
    "Fxn:`(inputs,";
    "Fxn:`(inputs,";
    "Fxn:`len(validation_data)`";
    "Fxn:generate_arrays_from_file";
    "Fxn:open(path)";
    "Fxn:process_line(line)";
    "Fxn:model.fit_generator(generate_arrays_from_file('/my_file.txt'),";
    "Fxn:RuntimeError('The";
    "Fxn:self.model.fit_generator(generator,";
    "Fxn:evaluate_generator";
    "Fxn:`len(generator)`";
    "Fxn:RuntimeError('The";
    "Fxn:self.model.evaluate_generator(generator,";
    "Fxn:predict_generator";
    "Fxn:`len(generator)`";
    "Fxn:self.build()";
    "Fxn:self.model.predict_generator(generator,";
    "Fxn:get_config";
    "Fxn:isinstance(self.layers[0],";
    "Fxn:self.legacy_get_config()";
    "Fxn:config.append({'class_name':";
    "Fxn:layer.get_config()})";
    "Fxn:copy.deepcopy(config)";
    "Fxn:from_config";
    "Fxn:cls.legacy_from_config(config)";
    "Fxn:cls()";
    "Fxn:layer_module.deserialize(conf,";
    "Fxn:model.add(layer)";
    "Fxn:legacy_get_config";
    "Fxn:isinstance(self.layers[0],";
    "Fxn:hasattr(self.layers[0],";
    "Fxn:layer.get_config()}";
    "Fxn:layers.append(layer_config)";
    "Fxn:self.layers[0].get_config()";
    "Fxn:config.append({'class_name':";
    "Fxn:config.append({'class_name':";
    "Fxn:self.layers[0].get_config()})";
    "Fxn:config.append({'class_name':";
    "Fxn:layer.get_config()})";
    "Fxn:copy.deepcopy(config)";
    "Fxn:legacy_from_config";
    "Fxn:normalize_legacy_config";
    "Fxn:conf.get('custom_name')";
    "Fxn:cls()";
    "Fxn:get_or_create_layer";
    "Fxn:layer_data['config'].get('name')";
    "Fxn:layer_module.deserialize(layer_data)";
    "Fxn:normalize_legacy_config(first_layer)";
    "Fxn:first_layer_config.pop('layers'):";
    "Fxn:layer_module.deserialize(merge_input_config)";
    "Fxn:merge_inputs.append(merge_input)";
    "Fxn:legacy_layers.Merge.from_config(first_layer_config)";
    "Fxn:model.add(merge)";
    "Fxn:get_or_create_layer(first_layer)";
    "Fxn:model.add(layer)";
    "Fxn:normalize_legacy_config(conf)";
    "Fxn:get_or_create_layer(conf)";
    "Fxn:model.add(layer)";
    "Fxn:_clone_functional_model";
    "Fxn:isinstance(model,";
    "Fxn:ValueError('Expected";
    "Fxn:isinstance(model,";
    "Fxn:ValueError('Expected";
    "Fxn:Input(batch_shape=layer.batch_input_shape,";
    "Fxn:input_tensors.append(input_tensor)";
    "Fxn:zip(model.input_layers,";
    "Fxn:topology._to_list(input_tensors)";
    "Fxn:enumerate(input_tensors):";
    "Fxn:K.is_keras_tensor(x):";
    "Fxn:Input(tensor=x,";
    "Fxn:_input_tensors.append(input_tensor)";
    "Fxn:_input_tensors.append(x)";
    "Fxn:zip(model.inputs,";
    "Fxn:list(model._nodes_by_depth.keys())";
    "Fxn:depth_keys.sort(reverse=True)";
    "Fxn:layer.__class__.from_config(layer.get_config())";
    "Fxn:isinstance(layer,";
    "Fxn:computed_data.append(tensor_map[x])";
    "Fxn:len(computed_data)";
    "Fxn:len(reference_input_tensors):";
    "Fxn:len(computed_data)";
    "Fxn:has_arg(layer.call,";
    "Fxn:topology._to_list(";
    "Fxn:layer(computed_tensor,";
    "Fxn:topology._to_list(";
    "Fxn:layer.compute_mask(computed_tensor,";
    "Fxn:has_arg(layer.call,";
    "Fxn:topology._to_list(";
    "Fxn:layer(computed_tensors,";
    "Fxn:topology._to_list(";
    "Fxn:layer.compute_mask(computed_tensors,";
    "Fxn:zip(reference_output_tensors,";
    "Fxn:str(x)";
    "Fxn:output_tensors.append(tensor)";
    "Fxn:Model(input_tensors,";
    "Fxn:_clone_sequential_model";
    "Fxn:isinstance(model,";
    "Fxn:ValueError('Expected";
    "Fxn:clone";
    "Fxn:layer.__class__.from_config(layer.get_config())";
    "Fxn:[clone(layer)";
    "Fxn:Sequential(layers=layers,";
    "Fxn:len(topology._to_list(input_tensors))";
    "Fxn:ValueError('To";
    "Fxn:topology._to_list(input_tensors)[0]";
    "Fxn:K.is_keras_tensor(x):";
    "Fxn:isinstance(origin_layer,";
    "Fxn:Sequential(layers=[origin_layer]";
    "Fxn:ValueError('Cannot";
    "Fxn:Input(tensor=x,";
    "Fxn:str(x.name))";
    "Fxn:Sequential(layers=[input_layer]";
    "Fxn:clone_model";
    "Fxn:isinstance(model,";
    "Fxn:_clone_sequential_model(model,";
    "Fxn:_clone_functional_model(model,";
    "/keras/objectives.py";
    "Import:absolute_import";
    "/keras/optimizers.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:six";
    "Import:copy";
    "Import:zip";
    "Import:backend";
    "Import:serialize_keras_object";
    "Import:deserialize_keras_object";
    "Import:interfaces";
    "Import:tensorflow";
    "Fxn:clip_norm";
    "class:Optimizer(object):";
    "Fxn:__init__";
    "Fxn:TypeError('Unexpected";
    "Fxn:str(k))";
    "Fxn:self.__dict__.update(kwargs)";
    "Fxn:get_updates";
    "Fxn:get_gradients";
    "Fxn:K.gradients(loss,";
    "Fxn:ValueError('An";
    "Fxn:hasattr(self,";
    "Fxn:K.sqrt(sum([K.sum(K.square(g))";
    "Fxn:[clip_norm(g,";
    "Fxn:hasattr(self,";
    "Fxn:[K.clip(g,";
    "Fxn:set_weights";
    "Fxn:len(params)";
    "Fxn:len(weights):";
    "Fxn:ValueError('Length";
    "Fxn:str(len(weights))";
    "Fxn:str(len(params))";
    "Fxn:K.batch_get_value(params)";
    "Fxn:zip(param_values,";
    "Fxn:ValueError('Optimizer";
    "Fxn:str(pv.shape)";
    "Fxn:str(w.shape))";
    "Fxn:weight_value_tuples.append((p,";
    "Fxn:K.batch_set_value(weight_value_tuples)";
    "Fxn:get_weights";
    "Fxn:K.batch_get_value(self.weights)";
    "Fxn:get_config";
    "Fxn:hasattr(self,";
    "Fxn:hasattr(self,";
    "Fxn:from_config";
    "Fxn:cls(**config)";
    "class:SGD(Optimizer):";
    "Fxn:__init__";
    "Fxn:super(SGD,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:K.name_scope(self.__class__.__name__):";
    "Fxn:K.variable(0,";
    "Fxn:K.variable(lr,";
    "Fxn:K.variable(momentum,";
    "Fxn:K.variable(decay,";
    "Fxn:get_updates";
    "Fxn:self.get_gradients(loss,";
    "Fxn:[K.update_add(self.iterations,";
    "Fxn:K.cast(self.iterations,";
    "Fxn:K.dtype(self.decay))))";
    "Fxn:[K.int_shape(p)";
    "Fxn:[K.zeros(shape)";
    "Fxn:zip(params,";
    "Fxn:self.updates.append(K.update(m,";
    "Fxn:getattr(p,";
    "Fxn:p.constraint(new_p)";
    "Fxn:self.updates.append(K.update(p,";
    "Fxn:get_config";
    "Fxn:float(K.get_value(self.lr)),";
    "Fxn:float(K.get_value(self.momentum)),";
    "Fxn:float(K.get_value(self.decay)),";
    "Fxn:super(SGD,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:RMSprop(Optimizer):";
    "Fxn:__init__";
    "Fxn:super(RMSprop,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:K.name_scope(self.__class__.__name__):";
    "Fxn:K.variable(lr,";
    "Fxn:K.variable(rho,";
    "Fxn:K.variable(decay,";
    "Fxn:K.variable(0,";
    "Fxn:K.epsilon()";
    "Fxn:get_updates";
    "Fxn:self.get_gradients(loss,";
    "Fxn:[K.zeros(K.int_shape(p),";
    "Fxn:dtype=K.dtype(p))";
    "Fxn:[K.update_add(self.iterations,";
    "Fxn:K.cast(self.iterations,";
    "Fxn:K.dtype(self.decay))))";
    "Fxn:zip(params,";
    "Fxn:K.square(g)";
    "Fxn:self.updates.append(K.update(a,";
    "Fxn:getattr(p,";
    "Fxn:p.constraint(new_p)";
    "Fxn:self.updates.append(K.update(p,";
    "Fxn:get_config";
    "Fxn:float(K.get_value(self.lr)),";
    "Fxn:float(K.get_value(self.rho)),";
    "Fxn:float(K.get_value(self.decay)),";
    "Fxn:super(RMSprop,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:Adagrad(Optimizer):";
    "Fxn:__init__";
    "Fxn:super(Adagrad,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:K.name_scope(self.__class__.__name__):";
    "Fxn:K.variable(lr,";
    "Fxn:K.variable(decay,";
    "Fxn:K.variable(0,";
    "Fxn:K.epsilon()";
    "Fxn:get_updates";
    "Fxn:self.get_gradients(loss,";
    "Fxn:[K.int_shape(p)";
    "Fxn:[K.zeros(shape)";
    "Fxn:[K.update_add(self.iterations,";
    "Fxn:K.cast(self.iterations,";
    "Fxn:K.dtype(self.decay))))";
    "Fxn:zip(params,";
    "Fxn:K.square(g)";
    "Fxn:self.updates.append(K.update(a,";
    "Fxn:getattr(p,";
    "Fxn:p.constraint(new_p)";
    "Fxn:self.updates.append(K.update(p,";
    "Fxn:get_config";
    "Fxn:float(K.get_value(self.lr)),";
    "Fxn:float(K.get_value(self.decay)),";
    "Fxn:super(Adagrad,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:Adadelta(Optimizer):";
    "Fxn:__init__";
    "Fxn:super(Adadelta,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:K.name_scope(self.__class__.__name__):";
    "Fxn:K.variable(lr,";
    "Fxn:K.variable(decay,";
    "Fxn:K.variable(0,";
    "Fxn:K.epsilon()";
    "Fxn:get_updates";
    "Fxn:self.get_gradients(loss,";
    "Fxn:[K.int_shape(p)";
    "Fxn:[K.zeros(shape)";
    "Fxn:[K.zeros(shape)";
    "Fxn:[K.update_add(self.iterations,";
    "Fxn:K.cast(self.iterations,";
    "Fxn:K.dtype(self.decay))))";
    "Fxn:zip(params,";
    "Fxn:K.square(g)";
    "Fxn:self.updates.append(K.update(a,";
    "Fxn:K.sqrt(d_a";
    "Fxn:K.sqrt(new_a";
    "Fxn:getattr(p,";
    "Fxn:p.constraint(new_p)";
    "Fxn:self.updates.append(K.update(p,";
    "Fxn:K.square(update)";
    "Fxn:self.updates.append(K.update(d_a,";
    "Fxn:get_config";
    "Fxn:float(K.get_value(self.lr)),";
    "Fxn:float(K.get_value(self.decay)),";
    "Fxn:super(Adadelta,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:Adam(Optimizer):";
    "Fxn:__init__";
    "Fxn:super(Adam,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:K.name_scope(self.__class__.__name__):";
    "Fxn:K.variable(0,";
    "Fxn:K.variable(lr,";
    "Fxn:K.variable(beta_1,";
    "Fxn:K.variable(beta_2,";
    "Fxn:K.variable(decay,";
    "Fxn:K.epsilon()";
    "Fxn:get_updates";
    "Fxn:self.get_gradients(loss,";
    "Fxn:[K.update_add(self.iterations,";
    "Fxn:K.cast(self.iterations,";
    "Fxn:K.dtype(self.decay))))";
    "Fxn:K.cast(self.iterations,";
    "Fxn:K.floatx())";
    "Fxn:K.pow(self.beta_2,";
    "Fxn:K.pow(self.beta_1,";
    "Fxn:[K.zeros(K.int_shape(p),";
    "Fxn:dtype=K.dtype(p))";
    "Fxn:[K.zeros(K.int_shape(p),";
    "Fxn:dtype=K.dtype(p))";
    "Fxn:[K.zeros(K.int_shape(p),";
    "Fxn:dtype=K.dtype(p))";
    "Fxn:[K.zeros(1)";
    "Fxn:zip(params,";
    "Fxn:K.square(g)";
    "Fxn:K.maximum(vhat,";
    "Fxn:self.updates.append(K.update(vhat,";
    "Fxn:self.updates.append(K.update(m,";
    "Fxn:self.updates.append(K.update(v,";
    "Fxn:getattr(p,";
    "Fxn:p.constraint(new_p)";
    "Fxn:self.updates.append(K.update(p,";
    "Fxn:get_config";
    "Fxn:float(K.get_value(self.lr)),";
    "Fxn:float(K.get_value(self.beta_1)),";
    "Fxn:float(K.get_value(self.beta_2)),";
    "Fxn:float(K.get_value(self.decay)),";
    "Fxn:super(Adam,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:Adamax(Optimizer):";
    "Fxn:__init__";
    "Fxn:super(Adamax,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:K.name_scope(self.__class__.__name__):";
    "Fxn:K.variable(0,";
    "Fxn:K.variable(lr,";
    "Fxn:K.variable(beta_1,";
    "Fxn:K.variable(beta_2,";
    "Fxn:K.variable(decay,";
    "Fxn:K.epsilon()";
    "Fxn:get_updates";
    "Fxn:self.get_gradients(loss,";
    "Fxn:[K.update_add(self.iterations,";
    "Fxn:K.cast(self.iterations,";
    "Fxn:K.dtype(self.decay))))";
    "Fxn:K.cast(self.iterations,";
    "Fxn:K.floatx())";
    "Fxn:K.pow(self.beta_1,";
    "Fxn:[K.int_shape(p)";
    "Fxn:[K.zeros(shape)";
    "Fxn:[K.zeros(shape)";
    "Fxn:zip(params,";
    "Fxn:K.maximum(self.beta_2";
    "Fxn:K.abs(g))";
    "Fxn:self.updates.append(K.update(m,";
    "Fxn:self.updates.append(K.update(u,";
    "Fxn:getattr(p,";
    "Fxn:p.constraint(new_p)";
    "Fxn:self.updates.append(K.update(p,";
    "Fxn:get_config";
    "Fxn:float(K.get_value(self.lr)),";
    "Fxn:float(K.get_value(self.beta_1)),";
    "Fxn:float(K.get_value(self.beta_2)),";
    "Fxn:float(K.get_value(self.decay)),";
    "Fxn:super(Adamax,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:Nadam(Optimizer):";
    "Fxn:__init__";
    "Fxn:super(Nadam,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:K.name_scope(self.__class__.__name__):";
    "Fxn:K.variable(0,";
    "Fxn:K.variable(1.,";
    "Fxn:K.variable(lr,";
    "Fxn:K.variable(beta_1,";
    "Fxn:K.variable(beta_2,";
    "Fxn:K.epsilon()";
    "Fxn:get_updates";
    "Fxn:self.get_gradients(loss,";
    "Fxn:[K.update_add(self.iterations,";
    "Fxn:K.cast(self.iterations,";
    "Fxn:K.floatx())";
    "Fxn:self.updates.append((self.m_schedule,";
    "Fxn:[K.int_shape(p)";
    "Fxn:[K.zeros(shape)";
    "Fxn:[K.zeros(shape)";
    "Fxn:zip(params,";
    "Fxn:K.square(g)";
    "Fxn:K.pow(self.beta_2,";
    "Fxn:self.updates.append(K.update(m,";
    "Fxn:self.updates.append(K.update(v,";
    "Fxn:getattr(p,";
    "Fxn:p.constraint(new_p)";
    "Fxn:self.updates.append(K.update(p,";
    "Fxn:get_config";
    "Fxn:float(K.get_value(self.lr)),";
    "Fxn:float(K.get_value(self.beta_1)),";
    "Fxn:float(K.get_value(self.beta_2)),";
    "Fxn:super(Nadam,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:TFOptimizer(Optimizer):";
    "Fxn:__init__";
    "Fxn:K.name_scope(self.__class__.__name__):";
    "Fxn:K.variable(0,";
    "Fxn:get_updates";
    "Fxn:self.optimizer.compute_gradients(loss,";
    "Fxn:[K.update_add(self.iterations,";
    "Fxn:self.optimizer.apply_gradients(";
    "Fxn:self.updates.append(opt_update)";
    "Fxn:weights";
    "Fxn:get_config";
    "Fxn:from_config";
    "Fxn:serialize";
    "Fxn:serialize_keras_object(optimizer)";
    "Fxn:deserialize";
    "Fxn:config['class_name'].lower()";
    "Fxn:config['class_name'].lower()";
    "Fxn:deserialize_keras_object(config,";
    "Fxn:get";
    "Fxn:K.backend()";
    "Fxn:isinstance(identifier,";
    "Fxn:TFOptimizer(identifier)";
    "Fxn:isinstance(identifier,";
    "Fxn:deserialize(identifier)";
    "Fxn:isinstance(identifier,";
    "Fxn:str(identifier),";
    "Fxn:deserialize(config)";
    "Fxn:isinstance(identifier,";
    "Fxn:ValueError('Could";
    "Fxn:str(identifier))";
    "/keras/regularizers.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:six";
    "Import:backend";
    "Import:serialize_keras_object";
    "Import:deserialize_keras_object";
    "class:Regularizer(object):";
    "Fxn:__call__";
    "Fxn:from_config";
    "Fxn:cls(**config)";
    "class:L1L2(Regularizer):";
    "Fxn:__init__";
    "Fxn:K.cast_to_floatx(l1)";
    "Fxn:K.cast_to_floatx(l2)";
    "Fxn:__call__";
    "Fxn:K.sum(self.l1";
    "Fxn:K.abs(x))";
    "Fxn:K.sum(self.l2";
    "Fxn:K.square(x))";
    "Fxn:get_config";
    "Fxn:float(self.l1),";
    "Fxn:float(self.l2)}";
    "Fxn:l1";
    "Fxn:L1L2(l1=l)";
    "Fxn:l2";
    "Fxn:L1L2(l2=l)";
    "Fxn:l1_l2";
    "Fxn:L1L2(l1=l1,";
    "Fxn:serialize";
    "Fxn:serialize_keras_object(regularizer)";
    "Fxn:deserialize";
    "Fxn:deserialize_keras_object(config,";
    "Fxn:module_objects=globals(),";
    "Fxn:get";
    "Fxn:isinstance(identifier,";
    "Fxn:deserialize(identifier)";
    "Fxn:isinstance(identifier,";
    "Fxn:str(identifier),";
    "Fxn:deserialize(config)";
    "Fxn:callable(identifier):";
    "Fxn:ValueError('Could";
    "Fxn:str(identifier))";
    "/keras/__init__.py";
    "Import:absolute_import";
    "Import:utils";
    "Import:activations";
    "Import:applications";
    "Import:backend";
    "Import:datasets";
    "Import:engine";
    "Import:layers";
    "Import:preprocessing";
    "Import:wrappers";
    "Import:callbacks";
    "Import:constraints";
    "Import:initializers";
    "Import:metrics";
    "Import:models";
    "Import:losses";
    "Import:optimizers";
    "Import:regularizers";
    "Import:Input";
    "Import:Model";
    "Import:Sequential";
    "/keras/applications/densenet.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:import";
    "Import:backend";
    "Import:Model";
    "Import:Activation";
    "Import:AveragePooling2D";
    "Import:BatchNormalization";
    "Import:Concatenate";
    "Import:Conv2D";
    "Import:Dense";
    "Import:GlobalAveragePooling2D";
    "Import:GlobalMaxPooling2D";
    "Import:Input";
    "Import:MaxPooling2D";
    "Import:ZeroPadding2D";
    "Import:get_file";
    "Import:get_source_inputs";
    "Import:imagenet_utils";
    "Import:decode_predictions";
    "Import:_obtain_input_shape";
    "Fxn:dense_block";
    "Fxn:transition_block";
    "Fxn:conv_block";
    "Fxn:DenseNet";
    "Fxn:DenseNet121";
    "Fxn:DenseNet169";
    "Fxn:DenseNet201";
    "Fxn:preprocess_input";
    "/keras/applications/imagenet_utils.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:json";
    "Import:warnings";
    "Import:numpy";
    "Import:get_file";
    "Import:backend";
    "Fxn:_preprocess_numpy_input";
    "Fxn:_preprocess_symbolic_input";
    "Fxn:preprocess_input";
    "Fxn:decode_predictions";
    "Fxn:_obtain_input_shape";
    "/keras/applications/inception_resnet_v2.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:import";
    "Import:warnings";
    "Import:Model";
    "Import:Activation";
    "Import:AveragePooling2D";
    "Import:BatchNormalization";
    "Import:Concatenate";
    "Import:Conv2D";
    "Import:Dense";
    "Import:GlobalAveragePooling2D";
    "Import:GlobalMaxPooling2D";
    "Import:Input";
    "Import:Lambda";
    "Import:MaxPooling2D";
    "Import:get_file";
    "Import:get_source_inputs";
    "Import:imagenet_utils";
    "Import:_obtain_input_shape";
    "Import:decode_predictions";
    "Import:backend";
    "Fxn:preprocess_input";
    "Fxn:conv2d_bn";
    "Fxn:inception_resnet_block";
    "Fxn:InceptionResNetV2";
    "/keras/applications/inception_v3.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:import";
    "Import:warnings";
    "Import:Model";
    "Import:layers";
    "Import:Activation";
    "Import:Dense";
    "Import:Input";
    "Import:BatchNormalization";
    "Import:Conv2D";
    "Import:MaxPooling2D";
    "Import:AveragePooling2D";
    "Import:GlobalAveragePooling2D";
    "Import:GlobalMaxPooling2D";
    "Import:get_source_inputs";
    "Import:get_file";
    "Import:backend";
    "Import:imagenet_utils";
    "Import:decode_predictions";
    "Import:_obtain_input_shape";
    "Fxn:conv2d_bn";
    "Fxn:InceptionV3";
    "Fxn:preprocess_input";
    "/keras/applications/mobilenet.py";
    "Import:print_function";
    "Import:absolute_import";
    "Import:division";
    "Import:import";
    "Import:warnings";
    "Import:Model";
    "Import:Input";
    "Import:Activation";
    "Import:Dropout";
    "Import:Reshape";
    "Import:BatchNormalization";
    "Import:GlobalAveragePooling2D";
    "Import:GlobalMaxPooling2D";
    "Import:ZeroPadding2D";
    "Import:Conv2D";
    "Import:DepthwiseConv2D";
    "Import:initializers";
    "Import:regularizers";
    "Import:constraints";
    "Import:conv_utils";
    "Import:get_file";
    "Import:get_source_inputs";
    "Import:InputSpec";
    "Import:imagenet_utils";
    "Import:_obtain_input_shape";
    "Import:decode_predictions";
    "Import:backend";
    "Fxn:relu6";
    "Fxn:preprocess_input";
    "Fxn:MobileNet";
    "Import:custom";
    "Fxn:_conv_block";
    "Fxn:_depthwise_conv_block";
    "/keras/applications/nasnet.py";
    "Import:print_function";
    "Import:absolute_import";
    "Import:division";
    "Import:import";
    "Import:warnings";
    "Import:Model";
    "Import:Input";
    "Import:Activation";
    "Import:Dense";
    "Import:BatchNormalization";
    "Import:MaxPooling2D";
    "Import:AveragePooling2D";
    "Import:GlobalAveragePooling2D";
    "Import:GlobalMaxPooling2D";
    "Import:Conv2D";
    "Import:SeparableConv2D";
    "Import:ZeroPadding2D";
    "Import:Cropping2D";
    "Import:concatenate";
    "Import:add";
    "Import:get_file";
    "Import:get_source_inputs";
    "Import:_obtain_input_shape";
    "Import:preprocess_input";
    "Import:decode_predictions";
    "Import:backend";
    "Fxn:NASNet";
    "Fxn:NASNetLarge";
    "Fxn:NASNetMobile";
    "Fxn:_separable_conv_block";
    "Fxn:_adjust_block";
    "Fxn:_normal_a_cell";
    "Fxn:_reduction_a_cell";
    "/keras/applications/resnet50.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:import";
    "Import:warnings";
    "Import:Input";
    "Import:layers";
    "Import:Dense";
    "Import:Activation";
    "Import:Flatten";
    "Import:Conv2D";
    "Import:MaxPooling2D";
    "Import:AveragePooling2D";
    "Import:GlobalAveragePooling2D";
    "Import:GlobalMaxPooling2D";
    "Import:ZeroPadding2D";
    "Import:BatchNormalization";
    "Import:Model";
    "Import:backend";
    "Import:get_source_inputs";
    "Import:layer_utils";
    "Import:get_file";
    "Import:decode_predictions";
    "Import:preprocess_input";
    "Import:_obtain_input_shape";
    "Fxn:identity_block";
    "Fxn:conv_block";
    "Fxn:ResNet50";
    "/keras/applications/vgg16.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:import";
    "Import:warnings";
    "Import:Model";
    "Import:Flatten";
    "Import:Dense";
    "Import:Input";
    "Import:Conv2D";
    "Import:MaxPooling2D";
    "Import:GlobalAveragePooling2D";
    "Import:GlobalMaxPooling2D";
    "Import:get_source_inputs";
    "Import:layer_utils";
    "Import:get_file";
    "Import:backend";
    "Import:decode_predictions";
    "Import:preprocess_input";
    "Import:_obtain_input_shape";
    "Fxn:VGG16";
    "/keras/applications/vgg19.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:import";
    "Import:warnings";
    "Import:Model";
    "Import:Flatten";
    "Import:Dense";
    "Import:Input";
    "Import:Conv2D";
    "Import:MaxPooling2D";
    "Import:GlobalAveragePooling2D";
    "Import:GlobalMaxPooling2D";
    "Import:get_source_inputs";
    "Import:layer_utils";
    "Import:get_file";
    "Import:backend";
    "Import:decode_predictions";
    "Import:preprocess_input";
    "Import:_obtain_input_shape";
    "Fxn:VGG19";
    "/keras/applications/xception.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:import";
    "Import:warnings";
    "Import:Model";
    "Import:layers";
    "Import:Dense";
    "Import:Input";
    "Import:BatchNormalization";
    "Import:Activation";
    "Import:Conv2D";
    "Import:SeparableConv2D";
    "Import:MaxPooling2D";
    "Import:GlobalAveragePooling2D";
    "Import:GlobalMaxPooling2D";
    "Import:get_source_inputs";
    "Import:get_file";
    "Import:backend";
    "Import:imagenet_utils";
    "Import:decode_predictions";
    "Import:_obtain_input_shape";
    "Fxn:Xception";
    "Fxn:preprocess_input";
    "/keras/applications/__init__.py";
    "Import:VGG16";
    "Import:VGG19";
    "Import:ResNet50";
    "Import:InceptionV3";
    "Import:InceptionResNetV2";
    "Import:Xception";
    "Import:MobileNet";
    "Import:DenseNet121,";
    "Import:NASNetMobile,";
    "/keras/backend/cntk_backend.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:cntk";
    "Import:numpy";
    "Import:floatx,";
    "Import:defaultdict";
    "Import:contextmanager";
    "Import:warnings";
    "Fxn:name_scope";
    "Fxn:get_uid";
    "Fxn:learning_phase";
    "Fxn:set_learning_phase";
    "Fxn:in_train_phase";
    "Fxn:in_test_phase";
    "Fxn:_convert_string_dtype";
    "Fxn:_convert_dtype_string";
    "Fxn:variable";
    "Fxn:bias_add";
    "Fxn:eval";
    "Fxn:placeholder";
    "Fxn:is_placeholder";
    "Fxn:is_keras_tensor";
    "Fxn:shape";
    "Fxn:is_sparse";
    "Fxn:int_shape";
    "Fxn:ndim";
    "Fxn:_prepare_name";
    "Fxn:constant";
    "Fxn:random_binomial";
    "Fxn:random_uniform";
    "Fxn:random_uniform_variable";
    "Fxn:random_normal_variable";
    "Fxn:random_normal";
    "Fxn:truncated_normal";
    "Fxn:dtype";
    "Fxn:zeros";
    "Fxn:ones";
    "Fxn:eye";
    "Fxn:zeros_like";
    "Fxn:ones_like";
    "Fxn:count_params";
    "Fxn:cast";
    "Fxn:dot";
    "Fxn:batch_dot";
    "Fxn:transpose";
    "Fxn:gather";
    "Fxn:_remove_dims";
    "Fxn:max";
    "Fxn:min";
    "Fxn:sum";
    "Fxn:prod";
    "Fxn:logsumexp";
    "Fxn:var";
    "Fxn:std";
    "Fxn:expand_dims";
    "Fxn:squeeze";
    "Fxn:tile";
    "Fxn:_normalize_axis";
    "Fxn:_reshape_dummy_dim";
    "Fxn:mean";
    "Fxn:any";
    "Fxn:all";
    "Fxn:classification_error";
    "Fxn:argmax";
    "Fxn:argmin";
    "Fxn:square";
    "Fxn:abs";
    "Fxn:sqrt";
    "Fxn:exp";
    "Fxn:log";
    "Fxn:round";
    "Fxn:sigmoid";
    "Fxn:sign";
    "Fxn:pow";
    "Fxn:clip";
    "Fxn:binary_crossentropy";
    "Fxn:get_variable_shape";
    "Fxn:update";
    "Fxn:moving_average_update";
    "Fxn:update_add";
    "Fxn:gradients";
    "Fxn:equal";
    "Fxn:not_equal";
    "Fxn:greater";
    "Fxn:greater_equal";
    "Fxn:less";
    "Fxn:less_equal";
    "Fxn:maximum";
    "Fxn:minimum";
    "Fxn:sin";
    "Fxn:cos";
    "Fxn:normalize_batch_in_training";
    "Fxn:_moments";
    "Fxn:batch_normalization";
    "Fxn:concatenate";
    "Fxn:flatten";
    "Fxn:reshape";
    "Fxn:permute_dimensions";
    "Fxn:resize_images";
    "Fxn:resize_volumes";
    "Fxn:repeat_elements";
    "Fxn:repeat";
    "Fxn:tanh";
    "Fxn:_static_rnn";
    "Fxn:rnn";
    "Fxn:_recurrence";
    "Fxn:has_seq_axis";
    "Fxn:l2_normalize";
    "Fxn:hard_sigmoid";
    "Fxn:conv1d";
    "Fxn:conv2d";
    "Fxn:separable_conv1d";
    "Fxn:separable_conv2d";
    "Fxn:depthwise_conv2d";
    "Fxn:conv3d";
    "Fxn:conv3d_transpose";
    "Fxn:pool2d";
    "Fxn:pool3d";
    "Fxn:relu";
    "Fxn:dropout";
    "Fxn:batch_flatten";
    "Fxn:softmax";
    "Fxn:softplus";
    "Fxn:softsign";
    "Fxn:categorical_crossentropy";
    "Fxn:sparse_categorical_crossentropy";
    "class:Function(object):";
    "Fxn:__init__";
    "Fxn:len(updates)";
    "Fxn:len(outputs)";
    "Fxn:isinstance(update,";
    "Fxn:len(update)";
    "Fxn:C.assign(update[0],";
    "Fxn:len(u.arguments)";
    "Fxn:u_ops.append(u)";
    "Fxn:unrelated_updates.append(u)";
    "Fxn:C.combine([u.output";
    "Fxn:update_func.find_all_with_name('keras_grad_placeholder')";
    "Fxn:p_list.append(grad_parameter_dict[g])";
    "Fxn:u_list.append(g)";
    "Fxn:ValueError(";
    "Fxn:len(u_list)";
    "Fxn:C.cntk_py.universal_learner(p_list,";
    "Fxn:len(outputs)";
    "Fxn:C.trainer.Trainer(";
    "Fxn:tuple([f.output";
    "Fxn:len(u_ops)";
    "Fxn:unrelated_updates.extend(u_ops)";
    "Fxn:len(unrelated_updates)";
    "Fxn:C.combine([_.output";
    "Fxn:C.combine(self.metrics_outputs)";
    "Fxn:len(outputs)";
    "Fxn:C.combine(self.metrics_outputs)";
    "Fxn:_is_input_shape_compatible";
    "Fxn:hasattr(input,";
    "Fxn:hasattr(placeholder,";
    "Fxn:get_num_dynamic_axis(placeholder)";
    "Fxn:zip(input_shape,";
    "Fxn:__call__";
    "Fxn:isinstance(inputs,";
    "Fxn:zip(self.placeholders,";
    "Fxn:value.astype(np.float32)";
    "Fxn:np.asarray(value)";
    "Fxn:self._is_input_shape_compatible(value,";
    "Fxn:ValueError('CNTK";
    "Fxn:str(value.shape)))";
    "Fxn:ValueError(";
    "Fxn:self.trainer.train_minibatch(";
    "Fxn:assert(len(result)";
    "Fxn:updated.append(outputs[o])";
    "Fxn:ValueError('CNTK";
    "Fxn:self.metrics_func.forward(";
    "Fxn:self.metrics_func.eval(input_dict,";
    "Fxn:isinstance(output_values,";
    "Fxn:value.asarray()";
    "Fxn:updated.append(v)";
    "Fxn:output_values.asarray()";
    "Fxn:updated.append(v)";
    "Fxn:ValueError(";
    "Fxn:self.unrelated_updates.eval(input_dict,";
    "Fxn:function";
    "Fxn:Function(inputs,";
    "Fxn:temporal_padding";
    "Fxn:padding=(1,";
    "Fxn:len(padding)";
    "Fxn:_get_dynamic_axis_num(x)";
    "Fxn:len(base_shape)";
    "Fxn:hasattr(C,";
    "Fxn:C.pad(x,";
    "Fxn:_padding(x,";
    "Fxn:len(base_shape)";
    "Fxn:hasattr(C,";
    "Fxn:C.pad(x,";
    "Fxn:pattern=[(0,";
    "Fxn:_padding(x,";
    "Fxn:_padding";
    "Fxn:b_any([dim";
    "Fxn:ValueError('CNTK";
    "Fxn:list(base_shape)";
    "Fxn:tuple(prefix_shape)";
    "Fxn:C.splice(C.constant(value=0,";
    "Fxn:list(base_shape)";
    "Fxn:tuple(postfix_shape)";
    "Fxn:C.splice(x,";
    "Fxn:C.constant(value=0,";
    "Fxn:spatial_2d_padding";
    "Fxn:padding=((1,";
    "Fxn:len(padding)";
    "Fxn:len(padding[0])";
    "Fxn:len(padding[1])";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:str(data_format))";
    "Fxn:_get_dynamic_axis_num(x)";
    "Fxn:len(base_shape)";
    "Fxn:hasattr(C,";
    "Fxn:C.pad(x,";
    "Fxn:list(padding[0]),";
    "Fxn:list(padding[1])])";
    "Fxn:_padding(x,";
    "Fxn:_padding(x,";
    "Fxn:len(base_shape)";
    "Fxn:hasattr(C,";
    "Fxn:C.pad(x,";
    "Fxn:list(padding[0]),";
    "Fxn:list(padding[1])])";
    "Fxn:_padding(x,";
    "Fxn:_padding(x,";
    "Fxn:len(base_shape)";
    "Fxn:hasattr(C,";
    "Fxn:C.pad(x,";
    "Fxn:pattern=[list(padding[0]),";
    "Fxn:list(padding[1]),";
    "Fxn:_padding(x,";
    "Fxn:_padding(x,";
    "Fxn:len(base_shape)";
    "Fxn:hasattr(C,";
    "Fxn:C.pad(x,";
    "Fxn:list(padding[0]),";
    "Fxn:list(padding[1]),";
    "Fxn:_padding(x,";
    "Fxn:_padding(x,";
    "Fxn:spatial_3d_padding";
    "Fxn:padding=((1,";
    "Fxn:len(padding)";
    "Fxn:len(padding[0])";
    "Fxn:len(padding[1])";
    "Fxn:len(padding[2])";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:str(data_format))";
    "Fxn:_get_dynamic_axis_num(x)";
    "Fxn:len(base_shape)";
    "Fxn:hasattr(C,";
    "Fxn:C.pad(x,";
    "Fxn:list(padding[0]),";
    "Fxn:list(padding[1]),";
    "Fxn:list(padding[2])])";
    "Fxn:_padding(x,";
    "Fxn:_padding(x,";
    "Fxn:_padding(x,";
    "Fxn:len(base_shape)";
    "Fxn:hasattr(C,";
    "Fxn:C.pad(x,";
    "Fxn:list(padding[0]),";
    "Fxn:list(padding[1]),";
    "Fxn:list(padding[2])])";
    "Fxn:_padding(x,";
    "Fxn:_padding(x,";
    "Fxn:_padding(x,";
    "Fxn:len(base_shape)";
    "Fxn:hasattr(C,";
    "Fxn:C.pad(x,";
    "Fxn:pattern=[list(padding[0]),";
    "Fxn:list(padding[1]),";
    "Fxn:list(padding[2]),";
    "Fxn:_padding(x,";
    "Fxn:_padding(x,";
    "Fxn:_padding(x,";
    "Fxn:len(base_shape)";
    "Fxn:hasattr(C,";
    "Fxn:C.pad(x,";
    "Fxn:list(padding[0]),";
    "Fxn:list(padding[1]),";
    "Fxn:list(padding[2]),";
    "Fxn:_padding(x,";
    "Fxn:_padding(x,";
    "Fxn:_padding(x,";
    "Fxn:one_hot";
    "Fxn:C.one_hot(indices,";
    "Fxn:get_value";
    "Fxn:isinstance(";
    "Fxn:isinstance(";
    "Fxn:eval(x)";
    "Fxn:batch_get_value";
    "Fxn:isinstance(x,";
    "Fxn:result.append(x.value)";
    "Fxn:result.append(eval(x))";
    "Fxn:set_value";
    "Fxn:isinstance(x,";
    "Fxn:isinstance(value,";
    "Fxn:np.full(x.shape,";
    "Fxn:dtype=floatx())";
    "Fxn:print_tensor";
    "Fxn:C.user_function(";
    "Fxn:LambdaFunc(x,";
    "Fxn:print(message)))";
    "Fxn:batch_set_value";
    "Fxn:isinstance(value,";
    "Fxn:np.asarray(value)";
    "Fxn:isinstance(x,";
    "Fxn:stop_gradient";
    "Fxn:isinstance(variables,";
    "Fxn:map(C.stop_gradient,";
    "Fxn:C.stop_gradient(variables)";
    "Fxn:switch";
    "Fxn:ndim(condition)";
    "Fxn:ndim(then_expression)";
    "Fxn:ValueError('Rank";
    "Fxn:ndim(condition)='";
    "Fxn:str(ndim_cond)";
    "Fxn:ndim(then_expression)'";
    "Fxn:str(ndim_expr))";
    "Fxn:int_shape(then_expression)";
    "Fxn:range(ndim_diff):";
    "Fxn:expand_dims(condition)";
    "Fxn:tile(condition,";
    "Fxn:C.element_select(condition,";
    "Fxn:elu";
    "Fxn:C.elu(x)";
    "Fxn:C.element_select(C.greater(x,";
    "Fxn:in_top_k";
    "Fxn:C.one_hot(targets,";
    "Fxn:C.classification_error(predictions,";
    "Fxn:C.reshape(result,";
    "Fxn:shape=())";
    "Fxn:conv2d_transpose";
    "Fxn:strides=(1,";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:str(data_format))";
    "Fxn:_preprocess_conv2d_input(x,";
    "Fxn:_preprocess_conv2d_kernel(kernel,";
    "Fxn:_preprocess_border_mode(padding)";
    "Fxn:list(output_shape)";
    "Fxn:tuple(shape)";
    "Fxn:C.convolution_transpose(";
    "Fxn:_postprocess_conv2d_output(x,";
    "Fxn:identity";
    "Fxn:C.alias(x,";
    "Fxn:_preprocess_conv2d_input";
    "Fxn:C.transpose(x,";
    "Fxn:_preprocess_conv2d_kernel";
    "Fxn:`(rows,";
    "Fxn:`(depth,";
    "Fxn:C.transpose(kernel,";
    "Fxn:_preprocess_border_mode";
    "Fxn:ValueError('Invalid";
    "Fxn:str(padding))";
    "Fxn:_postprocess_conv2d_output";
    "Fxn:C.transpose(x,";
    "Fxn:_preprocess_conv3d_input";
    "Fxn:C.transpose(x,";
    "Fxn:_preprocess_conv3d_kernel";
    "Fxn:C.transpose(kernel,";
    "Fxn:_postprocess_conv3d_output";
    "Fxn:C.transpose(x,";
    "Fxn:_get_dynamic_axis_num";
    "Fxn:hasattr(x,";
    "Fxn:len(x.dynamic_axes)";
    "Fxn:_contain_seqence_axis";
    "Fxn:_get_dynamic_axis_num(x)";
    "Fxn:C.Axis.default_dynamic_axis()";
    "Fxn:get_num_dynamic_axis";
    "Fxn:_get_dynamic_axis_num(x)";
    "Fxn:_reduce_on_axis";
    "Fxn:isinstance(axis,";
    "Fxn:isinstance(a,";
    "Fxn:C.Axis.default_batch_axis()";
    "Fxn:hasattr(C.sequence,";
    "Fxn:getattr(C.sequence,";
    "Fxn:reduce_fun_name)(x,";
    "Fxn:getattr(C,";
    "Fxn:reduce_fun_name)(x,";
    "Fxn:getattr(C,";
    "Fxn:reduce_fun_name)(x,";
    "Fxn:_reshape_sequence";
    "Fxn:list(int_shape(x))";
    "Fxn:reshape(x,";
    "Fxn:local_conv1d";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:str(data_format))";
    "Fxn:int_shape(kernel)";
    "Fxn:range(output_length):";
    "Fxn:slice(i";
    "Fxn:xs.append(reshape(inputs[:,";
    "Fxn:concatenate(xs,";
    "Fxn:permute_dimensions(kernel,";
    "Fxn:sum(output,";
    "Fxn:permute_dimensions(output,";
    "Fxn:local_conv2d";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:str(data_format))";
    "Fxn:int_shape(kernel)";
    "Fxn:range(output_row):";
    "Fxn:range(output_col):";
    "Fxn:slice(i";
    "Fxn:slice(j";
    "Fxn:xs.append(reshape(inputs[:,";
    "Fxn:xs.append(reshape(inputs[:,";
    "Fxn:concatenate(xs,";
    "Fxn:permute_dimensions(kernel,";
    "Fxn:sum(output,";
    "Fxn:reshape(output,";
    "Fxn:permute_dimensions(output,";
    "Fxn:reverse";
    "Fxn:isinstance(axes,";
    "Fxn:_normalize_axis(axes,";
    "Fxn:C.slice(x,";
    "Fxn:_reshape_batch";
    "Fxn:hasattr(C,";
    "Fxn:_get_cntk_version()";
    "Fxn:C.unpack_batch(x)";
    "Fxn:C.reshape(const_a,";
    "Fxn:C.to_batch(const_a)";
    "Fxn:C.user_function(ReshapeBatch(x,";
    "Fxn:_get_cntk_version";
    "Fxn:version.endswith('+'):";
    "Fxn:len(version)";
    "Fxn:version[2:].replace('.',";
    "Fxn:float(version)";
    "Fxn:warnings.warn(";
    "Fxn:float(2.0)";
    "class:ReshapeBatch(C.ops.functions.UserFunction):";
    "Fxn:__init__";
    "Fxn:super(ReshapeBatch,";
    "Fxn:self).__init__([input],";
    "Fxn:infer_outputs";
    "Fxn:C.Axis.default_batch_axis()";
    "Fxn:C.output_variable(";
    "Fxn:forward";
    "Fxn:arguments.shape()[0]";
    "Fxn:np.prod(np.asarray(self.from_shape))";
    "Fxn:np.prod(np.asarray(self.target_shape))";
    "Fxn:int(num_element";
    "Fxn:arguments.data().as_shape((num_batch,)";
    "Fxn:C.cntk_py.Value(result)";
    "Fxn:backward";
    "Fxn:root_gradients.data()";
    "Fxn:root_gradients.shape()[0]";
    "Fxn:np.prod(np.asarray(self.target_shape))";
    "Fxn:np.prod(np.asarray(self.from_shape))";
    "Fxn:int(num_element";
    "Fxn:C.cntk_py.Value(";
    "Fxn:grad_array_view.as_shape(";
    "class:ConvertToBatch(C.ops.functions.UserFunction):";
    "Fxn:__init__";
    "Fxn:super(ConvertToBatch,";
    "Fxn:self).__init__([input],";
    "Fxn:infer_outputs";
    "Fxn:C.Axis.default_batch_axis()";
    "Fxn:C.output_variable(";
    "Fxn:forward";
    "Fxn:C.cntk_py.Value(arguments.data())";
    "Fxn:backward";
    "Fxn:C.cntk_py.Value(root_gradients.data())";
    "class:ConvertToStatic(C.ops.functions.UserFunction):";
    "Fxn:__init__";
    "Fxn:super(ConvertToStatic,";
    "Fxn:self).__init__([input],";
    "Fxn:infer_outputs";
    "Fxn:C.output_variable(";
    "Fxn:forward";
    "Fxn:C.cntk_py.Value(arguments.data())";
    "Fxn:backward";
    "Fxn:C.cntk_py.Value(root_gradients.data())";
    "class:LambdaFunc(C.ops.functions.UserFunction):";
    "Fxn:__init__";
    "Fxn:print(arg),";
    "Fxn:super(LambdaFunc,";
    "Fxn:self).__init__([arg],";
    "Fxn:infer_outputs";
    "Fxn:C.output_variable(";
    "Fxn:forward";
    "Fxn:self.when(argument):";
    "Fxn:self.execute(argument)";
    "Fxn:backward";
    "/keras/backend/common.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:numpy";
    "Fxn:epsilon";
    "Fxn:set_epsilon";
    "Import:backend";
    "Fxn:floatx";
    "Fxn:set_floatx";
    "Import:backend";
    "Fxn:cast_to_floatx";
    "Import:backend";
    "Fxn:image_data_format";
    "Fxn:set_image_data_format";
    "Import:backend";
    "Fxn:set_image_dim_ordering";
    "Import:backend";
    "Fxn:image_dim_ordering";
    "/keras/backend/tensorflow_backend.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:tensorflow";
    "Import:moving_averages";
    "Import:tensor_array_ops";
    "Import:control_flow_ops";
    "Import:functional_ops";
    "Import:ctc_ops";
    "Import:variables";
    "Import:device_lib";
    "Import:defaultdict";
    "Import:numpy";
    "Import:.common";
    "Import:floatx,";
    "Import:image_data_format";
    "Import:has_arg";
    "Import:set_image_dim_ordering";
    "Import:image_dim_ordering";
    "Fxn:get_uid";
    "Fxn:reset_uids";
    "Fxn:clear_session";
    "Fxn:manual_variable_initialization";
    "Fxn:learning_phase";
    "Fxn:set_learning_phase";
    "Fxn:get_session";
    "Fxn:set_session";
    "class:_TfDeviceCaptureOp(object):";
    "Fxn:__init__";
    "Fxn:_set_device";
    "Fxn:_get_current_tf_device";
    "Fxn:tf.get_default_graph()";
    "Fxn:_TfDeviceCaptureOp()";
    "Fxn:g._apply_device_functions(op)";
    "Fxn:_is_current_explicit_device";
    "Fxn:device_type.upper()";
    "Fxn:ValueError('`device_type`";
    "Fxn:_get_current_tf_device()";
    "Fxn:device_type.upper())";
    "Fxn:_get_available_gpus";
    "Fxn:get_session().list_devices()";
    "Fxn:_has_nchw_support";
    "Fxn:_is_current_explicit_device('CPU')";
    "Fxn:len(_get_available_gpus())";
    "Fxn:_to_tensor";
    "Fxn:tf.convert_to_tensor(x,";
    "Fxn:is_sparse";
    "Fxn:K.placeholder((2,";
    "Fxn:print(K.is_sparse(a))";
    "Fxn:K.placeholder((2,";
    "Fxn:print(K.is_sparse(b))";
    "Fxn:isinstance(tensor,";
    "Fxn:to_dense";
    "Fxn:K.placeholder((2,";
    "Fxn:print(K.is_sparse(b))";
    "Fxn:K.to_dense(b)";
    "Fxn:print(K.is_sparse(c))";
    "Fxn:is_sparse(tensor):";
    "Fxn:tf.sparse_tensor_to_dense(tensor)";
    "Fxn:variable";
    "Fxn:np.array([[1,";
    "Fxn:K.variable(value=val,";
    "Fxn:K.dtype(kvar)";
    "Fxn:print(kvar)";
    "Fxn:K.eval(kvar)";
    "Fxn:array([[";
    "Fxn:floatx()";
    "Fxn:hasattr(value,";
    "Fxn:value.tocoo()";
    "Fxn:np.concatenate((np.expand_dims(sparse_coo.row,";
    "Fxn:np.expand_dims(sparse_coo.col,";
    "Fxn:tf.SparseTensor(indices=indices,";
    "Fxn:tf.Variable(value,";
    "Fxn:dtype=tf.as_dtype(dtype),";
    "Fxn:isinstance(value,";
    "Fxn:hasattr(value,";
    "Fxn:int_shape(value)";
    "Fxn:constant";
    "Fxn:floatx()";
    "Fxn:tf.constant(value,";
    "Fxn:is_keras_tensor";
    "Fxn:numpy.array([1,";
    "Fxn:K.is_keras_tensor(np_var)";
    "Fxn:tf.placeholder('float32',";
    "Fxn:shape=(1,1))";
    "Fxn:K.is_keras_tensor(k_var)";
    "Fxn:K.variable(np_var)";
    "Fxn:K.is_keras_tensor(keras_var)";
    "Fxn:K.placeholder(shape=(2,";
    "Fxn:K.is_keras_tensor(keras_placeholder)";
    "Fxn:Input([10])";
    "Fxn:K.is_keras_tensor(keras_input)";
    "Fxn:Dense(10)(keras_input)";
    "Fxn:K.is_keras_tensor(keras_layer_output)";
    "Fxn:isinstance(x,";
    "Fxn:ValueError('Unexpectedly";
    "Fxn:str(type(x))";
    "Fxn:hasattr(x,";
    "Fxn:placeholder";
    "Fxn:K.placeholder(shape=(2,";
    "Fxn:shape=(2,";
    "Fxn:floatx()";
    "Fxn:tuple([None";
    "Fxn:range(ndim)])";
    "Fxn:tf.sparse_placeholder(dtype,";
    "Fxn:tf.placeholder(dtype,";
    "Fxn:is_placeholder";
    "Fxn:shape";
    "Fxn:K.get_session()";
    "Fxn:np.array([[1,";
    "Fxn:K.variable(value=val)";
    "Fxn:keras.backend.placeholder(shape=(2,";
    "Fxn:K.shape(kvar)";
    "Fxn:shape=(2,)";
    "Fxn:K.shape(inputs)";
    "Fxn:shape=(3,)";
    "Fxn:K.int_shape(x))";
    "Fxn:K.shape(kvar).eval(session=tf_session)";
    "Fxn:array([2,";
    "Fxn:K.shape(inputs).eval(session=tf_session)";
    "Fxn:array([2,";
    "Fxn:tf.shape(x)";
    "Fxn:int_shape";
    "Fxn:K.placeholder(shape=(2,";
    "Fxn:K.int_shape(inputs)";
    "Fxn:np.array([[1,";
    "Fxn:K.variable(value=val)";
    "Fxn:K.int_shape(kvar)";
    "Fxn:hasattr(x,";
    "Fxn:tuple(x.get_shape().as_list())";
    "Fxn:ndim";
    "Fxn:K.placeholder(shape=(2,";
    "Fxn:np.array([[1,";
    "Fxn:K.variable(value=val)";
    "Fxn:K.ndim(inputs)";
    "Fxn:K.ndim(kvar)";
    "Fxn:x.get_shape()._dims";
    "Fxn:len(dims)";
    "Fxn:dtype";
    "Fxn:K.dtype(K.placeholder(shape=(2,4,5)))";
    "Fxn:K.dtype(K.placeholder(shape=(2,4,5),";
    "Fxn:K.dtype(K.placeholder(shape=(2,4,5),";
    "Fxn:K.variable(np.array([[1,";
    "Fxn:K.dtype(kvar)";
    "Fxn:K.variable(np.array([[1,";
    "Fxn:K.dtype(kvar)";
    "Fxn:eval";
    "Fxn:K.variable(np.array([[1,";
    "Fxn:K.eval(kvar)";
    "Fxn:array([[";
    "Fxn:to_dense(x).eval(session=get_session())";
    "Fxn:zeros";
    "Fxn:K.zeros((3,4))";
    "Fxn:K.eval(kvar)";
    "Fxn:array([[";
    "Fxn:floatx()";
    "Fxn:tf.as_dtype(dtype)";
    "Fxn:tf.zeros(shape=shape,";
    "Fxn:py_all(v.get_shape().as_list()):";
    "Fxn:variable(v,";
    "Fxn:ones";
    "Fxn:K.ones((3,4))";
    "Fxn:K.eval(kvar)";
    "Fxn:array([[";
    "Fxn:floatx()";
    "Fxn:tf.as_dtype(dtype)";
    "Fxn:tf.ones(shape=shape,";
    "Fxn:py_all(v.get_shape().as_list()):";
    "Fxn:variable(v,";
    "Fxn:eye";
    "Fxn:K.eye(3)";
    "Fxn:K.eval(kvar)";
    "Fxn:array([[";
    "Fxn:floatx()";
    "Fxn:tf.as_dtype(dtype)";
    "Fxn:variable(tf.eye(size,";
    "Fxn:zeros_like";
    "Fxn:K.variable(np.random.random((2,3)))";
    "Fxn:K.zeros_like(kvar)";
    "Fxn:K.eval(kvar_zeros)";
    "Fxn:array([[";
    "Fxn:tf.zeros_like(x,";
    "Fxn:ones_like";
    "Fxn:K.variable(np.random.random((2,3)))";
    "Fxn:K.ones_like(kvar)";
    "Fxn:K.eval(kvar_ones)";
    "Fxn:array([[";
    "Fxn:tf.ones_like(x,";
    "Fxn:identity";
    "Fxn:tf.identity(x,";
    "Fxn:random_uniform_variable";
    "Fxn:K.random_uniform_variable((2,3),";
    "Fxn:K.eval(kvar)";
    "Fxn:array([[";
    "Fxn:floatx()";
    "Fxn:tf.as_dtype(dtype)";
    "Fxn:np.random.randint(10e8)";
    "Fxn:tf.random_uniform_initializer(";
    "Fxn:seed=seed)(shape)";
    "Fxn:variable(value,";
    "Fxn:random_normal_variable";
    "Fxn:K.random_normal_variable((2,3),";
    "Fxn:K.eval(kvar)";
    "Fxn:array([[";
    "Fxn:floatx()";
    "Fxn:tf.as_dtype(dtype)";
    "Fxn:np.random.randint(10e8)";
    "Fxn:tf.random_normal_initializer(";
    "Fxn:seed=seed)(shape)";
    "Fxn:variable(value,";
    "Fxn:count_params";
    "Fxn:K.zeros((2,3))";
    "Fxn:K.count_params(kvar)";
    "Fxn:K.eval(kvar)";
    "Fxn:array([[";
    "Fxn:np.prod(int_shape(x))";
    "Fxn:cast";
    "Fxn:K.placeholder((2,";
    "Fxn:shape=(2,";
    "Fxn:K.cast(input,";
    "Fxn:shape=(2,";
    "Fxn:shape=(2,";
    "Fxn:K.cast(input,";
    "Fxn:shape=(2,";
    "Fxn:tf.cast(x,";
    "Fxn:update";
    "Fxn:tf.assign(x,";
    "Fxn:update_add";
    "Fxn:tf.assign_add(x,";
    "Fxn:update_sub";
    "Fxn:tf.assign_sub(x,";
    "Fxn:moving_average_update";
    "Fxn:moving_averages.assign_moving_average(";
    "Fxn:dot";
    "Fxn:`(2,";
    "Fxn:K.placeholder(shape=(2,";
    "Fxn:K.placeholder(shape=(3,";
    "Fxn:K.dot(x,";
    "Fxn:shape=(2,";
    "Fxn:K.placeholder(shape=(32,";
    "Fxn:K.placeholder(shape=(3,";
    "Fxn:K.dot(x,";
    "Fxn:shape=(32,";
    "Fxn:K.random_uniform_variable(shape=(2,";
    "Fxn:K.ones((4,";
    "Fxn:K.dot(x,";
    "Fxn:K.int_shape(xy)";
    "Fxn:ndim(x)";
    "Fxn:ndim(y)";
    "Fxn:zip(int_shape(x),";
    "Fxn:tf.unstack(tf.shape(x))):";
    "Fxn:x_shape.append(i)";
    "Fxn:x_shape.append(s)";
    "Fxn:tuple(x_shape)";
    "Fxn:zip(int_shape(y),";
    "Fxn:tf.unstack(tf.shape(y))):";
    "Fxn:y_shape.append(i)";
    "Fxn:y_shape.append(s)";
    "Fxn:tuple(y_shape)";
    "Fxn:list(range(ndim(y)))";
    "Fxn:[y_permute_dim.pop(-2)]";
    "Fxn:tf.reshape(x,";
    "Fxn:tf.reshape(tf.transpose(y,";
    "Fxn:tf.reshape(tf.matmul(xt,";
    "Fxn:is_sparse(x):";
    "Fxn:tf.sparse_tensor_dense_matmul(x,";
    "Fxn:tf.matmul(x,";
    "Fxn:batch_dot";
    "Fxn:`(batch_size,";
    "Fxn:`(batch_size,";
    "Fxn:`batch_dot(x,";
    "Fxn:`x.dot(y.T)`,";
    "Fxn:`(100,";
    "Fxn:`(100,";
    "Fxn:`(100,";
    "Fxn:K.ones(shape=(32,";
    "Fxn:K.ones(shape=(32,";
    "Fxn:K.batch_dot(x_batch,";
    "Fxn:K.int_shape(xy_batch_dot)";
    "Fxn:isinstance(axes,";
    "Fxn:ndim(x)";
    "Fxn:ndim(y)";
    "Fxn:tf.reshape(y,";
    "Fxn:tf.concat([tf.shape(y),";
    "Fxn:tf.reshape(x,";
    "Fxn:tf.concat([tf.shape(x),";
    "Fxn:ndim(x)";
    "Fxn:ndim(y)";
    "Fxn:tf.reduce_sum(tf.multiply(x,";
    "Fxn:tf.reduce_sum(tf.multiply(tf.transpose(x,";
    "Fxn:ndim(x)";
    "Fxn:ndim(y)";
    "Fxn:tf.matmul(x,";
    "Fxn:tf.squeeze(out,";
    "Fxn:list(range(idx,";
    "Fxn:ndim(out)";
    "Fxn:expand_dims(out,";
    "Fxn:transpose";
    "Fxn:K.variable([[1,";
    "Fxn:K.eval(var)";
    "Fxn:array([[";
    "Fxn:K.transpose(var)";
    "Fxn:K.eval(var_transposed)";
    "Fxn:array([[";
    "Fxn:K.placeholder((2,";
    "Fxn:shape=(2,";
    "Fxn:K.transpose(inputs)";
    "Fxn:shape=(3,";
    "Fxn:tf.transpose(x)";
    "Fxn:gather";
    "Fxn:tf.gather(reference,";
    "Fxn:max";
    "Fxn:tf.reduce_max(x,";
    "Fxn:min";
    "Fxn:tf.reduce_min(x,";
    "Fxn:sum";
    "Fxn:tf.reduce_sum(x,";
    "Fxn:prod";
    "Fxn:tf.reduce_prod(x,";
    "Fxn:cumsum";
    "Fxn:tf.cumsum(x,";
    "Fxn:cumprod";
    "Fxn:tf.cumprod(x,";
    "Fxn:var";
    "Fxn:tf.cast(x,";
    "Fxn:floatx())";
    "Fxn:tf.reduce_mean(x,";
    "Fxn:tf.square(x";
    "Fxn:tf.reduce_mean(devs_squared,";
    "Fxn:std";
    "Fxn:tf.sqrt(var(x,";
    "Fxn:mean";
    "Fxn:tf.cast(x,";
    "Fxn:floatx())";
    "Fxn:tf.reduce_mean(x,";
    "Fxn:any";
    "Fxn:tf.cast(x,";
    "Fxn:tf.reduce_any(x,";
    "Fxn:all";
    "Fxn:tf.cast(x,";
    "Fxn:tf.reduce_all(x,";
    "Fxn:argmax";
    "Fxn:tf.argmax(x,";
    "Fxn:argmin";
    "Fxn:tf.argmin(x,";
    "Fxn:square";
    "Fxn:tf.square(x)";
    "Fxn:abs";
    "Fxn:tf.abs(x)";
    "Fxn:sqrt";
    "Fxn:_to_tensor(0.,";
    "Fxn:_to_tensor(np.inf,";
    "Fxn:tf.clip_by_value(x,";
    "Fxn:tf.sqrt(x)";
    "Fxn:exp";
    "Fxn:tf.exp(x)";
    "Fxn:log";
    "Fxn:tf.log(x)";
    "Fxn:logsumexp";
    "Fxn:log(sum(exp(elements";
    "Fxn:log(sum(exp(x))).";
    "Fxn:tf.reduce_logsumexp(x,";
    "Fxn:round";
    "Fxn:tf.round(x)";
    "Fxn:sign";
    "Fxn:tf.sign(x)";
    "Fxn:pow";
    "Fxn:tf.pow(x,";
    "Fxn:clip";
    "Fxn:_to_tensor(min_value,";
    "Fxn:_to_tensor(max_value,";
    "Fxn:tf.clip_by_value(x,";
    "Fxn:equal";
    "Fxn:tf.equal(x,";
    "Fxn:not_equal";
    "Fxn:tf.not_equal(x,";
    "Fxn:greater";
    "Fxn:tf.greater(x,";
    "Fxn:greater_equal";
    "Fxn:tf.greater_equal(x,";
    "Fxn:less";
    "Fxn:tf.less(x,";
    "Fxn:less_equal";
    "Fxn:tf.less_equal(x,";
    "Fxn:maximum";
    "Fxn:tf.maximum(x,";
    "Fxn:minimum";
    "Fxn:tf.minimum(x,";
    "Fxn:sin";
    "Fxn:tf.sin(x)";
    "Fxn:cos";
    "Fxn:tf.cos(x)";
    "Fxn:_regular_normalize_batch_in_training";
    "Fxn:`(normalized_tensor,";
    "Fxn:tf.nn.moments(x,";
    "Fxn:tf.nn.batch_normalization(x,";
    "Fxn:_broadcast_normalize_batch_in_training";
    "Fxn:`(normalized_tensor,";
    "Fxn:tf.nn.moments(x,";
    "Fxn:range(ndim(x)):";
    "Fxn:target_shape.append(1)";
    "Fxn:target_shape.append(tf.shape(x)[axis])";
    "Fxn:tf.stack(target_shape)";
    "Fxn:tf.reshape(mean,";
    "Fxn:tf.reshape(var,";
    "Fxn:tf.reshape(gamma,";
    "Fxn:tf.reshape(beta,";
    "Fxn:tf.nn.batch_normalization(";
    "Fxn:_fused_normalize_batch_in_training";
    "Fxn:`(normalized_tensor,";
    "Fxn:list(reduction_axes)";
    "Fxn:tf.constant(1.0,";
    "Fxn:shape=[x.get_shape()[normalization_axis]])";
    "Fxn:tf.constant(0.0,";
    "Fxn:shape=[x.get_shape()[normalization_axis]])";
    "Fxn:tf.nn.fused_batch_norm(";
    "Fxn:normalize_batch_in_training";
    "Fxn:`(normalized_tensor,";
    "Fxn:ndim(x)";
    "Fxn:list(reduction_axes)";
    "Fxn:_has_nchw_support()";
    "Fxn:list(reduction_axes)";
    "Fxn:_broadcast_normalize_batch_in_training(x,";
    "Fxn:_fused_normalize_batch_in_training(";
    "Fxn:sorted(reduction_axes)";
    "Fxn:list(range(ndim(x)))[:-1]:";
    "Fxn:_regular_normalize_batch_in_training(x,";
    "Fxn:_broadcast_normalize_batch_in_training(x,";
    "Fxn:batch_normalization";
    "Fxn:tf.nn.batch_normalization(x,";
    "Fxn:concatenate";
    "Fxn:ndim(tensors[0])";
    "Fxn:py_all([is_sparse(x)";
    "Fxn:tf.sparse_concat(axis,";
    "Fxn:tf.concat([to_dense(x)";
    "Fxn:reshape";
    "Fxn:tf.reshape(x,";
    "Fxn:permute_dimensions";
    "Fxn:`(0,";
    "Fxn:tf.transpose(x,";
    "Fxn:resize_images";
    "Fxn:int_shape(x)";
    "Fxn:tf.shape(x)[2:]";
    "Fxn:tf.constant(np.array([height_factor,";
    "Fxn:width_factor]).astype('int32'))";
    "Fxn:permute_dimensions(x,";
    "Fxn:tf.image.resize_nearest_neighbor(x,";
    "Fxn:permute_dimensions(x,";
    "Fxn:x.set_shape((None,";
    "Fxn:int_shape(x)";
    "Fxn:tf.shape(x)[1:3]";
    "Fxn:tf.constant(np.array([height_factor,";
    "Fxn:width_factor]).astype('int32'))";
    "Fxn:tf.image.resize_nearest_neighbor(x,";
    "Fxn:x.set_shape((None,";
    "Fxn:ValueError('Unknown";
    "Fxn:str(data_format))";
    "Fxn:resize_volumes";
    "Fxn:repeat_elements(x,";
    "Fxn:repeat_elements(output,";
    "Fxn:repeat_elements(output,";
    "Fxn:repeat_elements(x,";
    "Fxn:repeat_elements(output,";
    "Fxn:repeat_elements(output,";
    "Fxn:ValueError('Unknown";
    "Fxn:str(data_format))";
    "Fxn:repeat_elements";
    "Fxn:`(s1,";
    "Fxn:`(s1,";
    "Fxn:x.get_shape().as_list()";
    "Fxn:tf.split(value=x,";
    "Fxn:range(rep)]";
    "Fxn:concatenate(x_rep,";
    "Fxn:tf.shape(x)";
    "Fxn:tf.expand_dims(x,";
    "Fxn:np.ones(len(x.get_shape())";
    "Fxn:tf.tile(x_rep,";
    "Fxn:np.delete(reps,";
    "Fxn:tf.constant(reps,";
    "Fxn:tf.reshape(x_rep,";
    "Fxn:x.get_shape().as_list()";
    "Fxn:x_rep.set_shape(x_shape)";
    "Fxn:tuple(x_shape)";
    "Fxn:repeat";
    "Fxn:`(samples,";
    "Fxn:ndim(x)";
    "Fxn:tf.expand_dims(x,";
    "Fxn:tf.stack([1,";
    "Fxn:tf.tile(x,";
    "Fxn:arange";
    "Fxn:tf.cond(start";
    "Fxn:tf.constant(0,";
    "Fxn:tf.range(start,";
    "Fxn:cast(result,";
    "Fxn:tile";
    "Fxn:isinstance(n,";
    "Fxn:tf.tile(x,";
    "Fxn:flatten";
    "Fxn:tf.reshape(x,";
    "Fxn:batch_flatten";
    "Fxn:tf.reshape(x,";
    "Fxn:tf.stack([-1,";
    "Fxn:prod(shape(x)[1:])]))";
    "Fxn:expand_dims";
    "Fxn:tf.expand_dims(x,";
    "Fxn:squeeze";
    "Fxn:tf.squeeze(x,";
    "Fxn:temporal_padding";
    "Fxn:padding=(1,";
    "Fxn:len(padding)";
    "Fxn:tf.pad(x,";
    "Fxn:spatial_2d_padding";
    "Fxn:padding=((1,";
    "Fxn:len(padding)";
    "Fxn:len(padding[0])";
    "Fxn:len(padding[1])";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:str(data_format))";
    "Fxn:list(padding[0]),";
    "Fxn:list(padding[1])]";
    "Fxn:list(padding[0]),";
    "Fxn:list(padding[1]),";
    "Fxn:tf.pad(x,";
    "Fxn:spatial_3d_padding";
    "Fxn:padding=((1,";
    "Fxn:len(padding)";
    "Fxn:len(padding[0])";
    "Fxn:len(padding[1])";
    "Fxn:len(padding[2])";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:str(data_format))";
    "Fxn:tf.pad(x,";
    "Fxn:stack";
    "Fxn:tf.stack(x,";
    "Fxn:one_hot";
    "Fxn:`(batch_size,";
    "Fxn:dim(n-1))`";
    "Fxn:`(batch_size,";
    "Fxn:dim(n-1),";
    "Fxn:tf.one_hot(indices,";
    "Fxn:reverse";
    "Fxn:isinstance(axes,";
    "Fxn:tf.reverse(x,";
    "Fxn:get_value";
    "Fxn:x.eval(session=get_session())";
    "Fxn:batch_get_value";
    "Fxn:get_session().run(ops)";
    "Fxn:set_value";
    "Fxn:np.asarray(value,";
    "Fxn:dtype=dtype(x))";
    "Fxn:tf.as_dtype(x.dtype.name.split('_')[0])";
    "Fxn:hasattr(x,";
    "Fxn:tf.placeholder(tf_dtype,";
    "Fxn:x.assign(assign_placeholder)";
    "Fxn:get_session().run(assign_op,";
    "Fxn:batch_set_value";
    "Fxn:`(tensor,";
    "Fxn:np.asarray(value,";
    "Fxn:dtype=dtype(x))";
    "Fxn:tf.as_dtype(x.dtype.name.split('_')[0])";
    "Fxn:hasattr(x,";
    "Fxn:tf.placeholder(tf_dtype,";
    "Fxn:x.assign(assign_placeholder)";
    "Fxn:assign_ops.append(assign_op)";
    "Fxn:get_session().run(assign_ops,";
    "Fxn:get_variable_shape";
    "Fxn:int_shape(x)";
    "Fxn:print_tensor";
    "Fxn:K.print_tensor(x,";
    "Fxn:tf.Print(x,";
    "Import:backend";
    "Import:backend";
    "Import:backend";
    "Import:backend";
    "Import:Input,";
    "Import:backend";
    "Import:backend";
    "Import:backend";
    "Import:backend";
    "Import:backend";
    "Import:backend";
    "Import:backend";
    "Import:backend";
    "Import:backend";
    "Import:backend";
    "Import:backend";
    "Import:backend";
    "class:Function(object):";
    "Fxn:__init__";
    "Fxn:isinstance(inputs,";
    "Fxn:TypeError('`inputs`";
    "Fxn:isinstance(outputs,";
    "Fxn:TypeError('`outputs`";
    "Fxn:isinstance(updates,";
    "Fxn:TypeError('`updates`";
    "Fxn:list(inputs)";
    "Fxn:list(outputs)";
    "Fxn:tf.control_dependencies(self.outputs):";
    "Fxn:isinstance(update,";
    "Fxn:updates_ops.append(tf.assign(p,";
    "Fxn:updates_ops.append(update)";
    "Fxn:tf.group(*updates_ops)";
    "Fxn:session_kwargs.pop('feed_dict',";
    "Fxn:session_kwargs.pop('fetches',";
    "Fxn:isinstance(self.fetches,";
    "Fxn:__call__";
    "Fxn:isinstance(inputs,";
    "Fxn:TypeError('`inputs`";
    "Fxn:self.feed_dict.copy()";
    "Fxn:zip(self.inputs,";
    "Fxn:is_sparse(tensor):";
    "Fxn:value.tocoo()";
    "Fxn:np.concatenate((np.expand_dims(sparse_coo.row,";
    "Fxn:np.expand_dims(sparse_coo.col,";
    "Fxn:get_session()";
    "Fxn:session.run(fetches=fetches,";
    "Fxn:updated[:len(self.outputs)]";
    "Fxn:function";
    "Fxn:has_arg(Function.__init__,";
    "Fxn:ValueError(msg)";
    "Fxn:Function(inputs,";
    "Fxn:gradients";
    "Fxn:tf.gradients(loss,";
    "Fxn:stop_gradient";
    "Fxn:isinstance(variables,";
    "Fxn:map(tf.stop_gradient,";
    "Fxn:tf.stop_gradient(variables)";
    "Fxn:rnn";
    "Fxn:`(samples,";
    "Fxn:`(samples,";
    "Fxn:`(samples,";
    "Fxn:`(samples,";
    "Fxn:`(last_output,";
    "Fxn:`(samples,";
    "Fxn:`(samples,";
    "Fxn:`(samples,";
    "Fxn:len(inputs.get_shape())";
    "Fxn:ValueError('Input";
    "Fxn:list(range(2,";
    "Fxn:tf.transpose(inputs,";
    "Fxn:tf.cast(mask,";
    "Fxn:len(mask.get_shape())";
    "Fxn:expand_dims(mask)";
    "Fxn:tf.transpose(mask,";
    "Fxn:inputs.get_shape()[0]:";
    "Fxn:ValueError('Unrolling";
    "Fxn:tf.unstack(inputs)";
    "Fxn:input_list.reverse()";
    "Fxn:tf.unstack(mask)";
    "Fxn:mask_list.reverse()";
    "Fxn:zip(input_list,";
    "Fxn:step_function(inp,";
    "Fxn:getattr(output,";
    "Fxn:tf.tile(mask_t,";
    "Fxn:tf.stack([1,";
    "Fxn:tf.shape(output)[1]]))";
    "Fxn:zeros_like(output)";
    "Fxn:tf.where(tiled_mask_t,";
    "Fxn:zip(states,";
    "Fxn:tf.tile(mask_t,";
    "Fxn:tf.stack([1,";
    "Fxn:tf.shape(new_state)[1]]))";
    "Fxn:return_states.append(tf.where(tiled_mask_t,";
    "Fxn:successive_outputs.append(output)";
    "Fxn:successive_states.append(states)";
    "Fxn:tf.stack(successive_outputs)";
    "Fxn:step_function(inp,";
    "Fxn:getattr(output,";
    "Fxn:successive_outputs.append(output)";
    "Fxn:successive_states.append(states)";
    "Fxn:tf.stack(successive_outputs)";
    "Fxn:reverse(inputs,";
    "Fxn:tuple(initial_states)";
    "Fxn:tf.shape(inputs)[0]";
    "Fxn:step_function(inputs[0],";
    "Fxn:tensor_array_ops.TensorArray(";
    "Fxn:tensor_array_ops.TensorArray(";
    "Fxn:input_ta.unstack(inputs)";
    "Fxn:tf.constant(0,";
    "Fxn:ValueError('No";
    "Fxn:'(and";
    "Fxn:reverse(mask,";
    "Fxn:tensor_array_ops.TensorArray(";
    "Fxn:mask_ta.unstack(mask)";
    "Fxn:_step";
    "Fxn:`(time";
    "Fxn:tuple(new_states)`";
    "Fxn:input_ta.read(time)";
    "Fxn:mask_ta.read(time)";
    "Fxn:step_function(current_input,";
    "Fxn:tuple(states)";
    "Fxn:tuple(constants))";
    "Fxn:getattr(output,";
    "Fxn:zip(states,";
    "Fxn:new_state.set_shape(state.get_shape())";
    "Fxn:tf.tile(mask_t,";
    "Fxn:tf.stack([1,";
    "Fxn:tf.shape(output)[1]]))";
    "Fxn:tf.where(tiled_mask_t,";
    "Fxn:[tf.where(tiled_mask_t,";
    "Fxn:range(len(states))]";
    "Fxn:output_ta_t.write(time,";
    "Fxn:tuple(new_states)";
    "Fxn:_step";
    "Fxn:`(time";
    "Fxn:tuple(new_states)`";
    "Fxn:input_ta.read(time)";
    "Fxn:step_function(current_input,";
    "Fxn:tuple(states)";
    "Fxn:tuple(constants))";
    "Fxn:getattr(output,";
    "Fxn:zip(states,";
    "Fxn:new_state.set_shape(state.get_shape())";
    "Fxn:output_ta_t.write(time,";
    "Fxn:tuple(new_states)";
    "Fxn:control_flow_ops.while_loop(";
    "Fxn:loop_vars=(time,";
    "Fxn:output_ta.stack()";
    "Fxn:output_ta.read(last_time";
    "Fxn:list(range(2,";
    "Fxn:len(outputs.get_shape())))";
    "Fxn:tf.transpose(outputs,";
    "Fxn:switch";
    "Fxn:tf.cast(condition,";
    "Fxn:ndim(condition)";
    "Fxn:callable(then_expression):";
    "Fxn:then_expression_fn";
    "Fxn:callable(else_expression):";
    "Fxn:else_expression_fn";
    "Fxn:tf.cond(condition,";
    "Fxn:callable(then_expression):";
    "Fxn:then_expression()";
    "Fxn:callable(else_expression):";
    "Fxn:else_expression()";
    "Fxn:ndim(then_expression)";
    "Fxn:ValueError('Rank";
    "Fxn:ndim(condition)='";
    "Fxn:str(cond_ndim)";
    "Fxn:ndim(then_expression)'";
    "Fxn:str(expr_ndim))";
    "Fxn:tf.concat([tf.shape(condition),";
    "Fxn:tf.reshape(condition,";
    "Fxn:tf.shape(then_expression)";
    "Fxn:tf.where(shape_diff";
    "Fxn:tf.ones_like(expr_shape))";
    "Fxn:tf.tile(condition,";
    "Fxn:tf.where(condition,";
    "Fxn:in_train_phase";
    "Fxn:`K.learning_phase()`.";
    "Fxn:learning_phase()";
    "Fxn:callable(x):";
    "Fxn:x()";
    "Fxn:callable(alt):";
    "Fxn:alt()";
    "Fxn:switch(training,";
    "Fxn:in_test_phase";
    "Fxn:in_train_phase(alt,";
    "Fxn:relu";
    "Fxn:`max(x,";
    "Fxn:tf.nn.leaky_relu(x,";
    "Fxn:tf.nn.relu(x)";
    "Fxn:_to_tensor(max_value,";
    "Fxn:tf.minimum(x,";
    "Fxn:elu";
    "Fxn:tf.nn.elu(x)";
    "Fxn:tf.where(x";
    "Fxn:softmax";
    "Fxn:tf.nn.softmax(x,";
    "Fxn:softplus";
    "Fxn:tf.nn.softplus(x)";
    "Fxn:softsign";
    "Fxn:tf.nn.softsign(x)";
    "Fxn:categorical_crossentropy";
    "Fxn:sparse_categorical_crossentropy";
    "Fxn:_to_tensor(epsilon(),";
    "Fxn:tf.clip_by_value(output,";
    "Fxn:tf.log(output)";
    "Fxn:output.get_shape()";
    "Fxn:cast(flatten(target),";
    "Fxn:tf.reshape(output,";
    "Fxn:int(output_shape[-1])])";
    "Fxn:tf.nn.sparse_softmax_cross_entropy_with_logits(";
    "Fxn:len(output_shape)";
    "Fxn:tf.reshape(res,";
    "Fxn:tf.shape(output)[:-1])";
    "Fxn:binary_crossentropy";
    "Fxn:_to_tensor(epsilon(),";
    "Fxn:tf.clip_by_value(output,";
    "Fxn:tf.log(output";
    "Fxn:tf.nn.sigmoid_cross_entropy_with_logits(labels=target,";
    "Fxn:sigmoid";
    "Fxn:tf.nn.sigmoid(x)";
    "Fxn:hard_sigmoid";
    "Fxn:_to_tensor(0.,";
    "Fxn:_to_tensor(1.,";
    "Fxn:tf.clip_by_value(x,";
    "Fxn:tanh";
    "Fxn:tf.nn.tanh(x)";
    "Fxn:dropout";
    "Fxn:np.random.randint(10e6)";
    "Fxn:tf.nn.dropout(x";
    "Fxn:l2_normalize";
    "Fxn:tf.nn.l2_normalize(x,";
    "Fxn:in_top_k";
    "Fxn:`(batch_size,";
    "Fxn:tf.nn.in_top_k(predictions,";
    "Fxn:_preprocess_conv1d_input";
    "Fxn:dtype(x)";
    "Fxn:tf.cast(x,";
    "Fxn:_has_nchw_support():";
    "Fxn:tf.transpose(x,";
    "Fxn:_preprocess_conv2d_input";
    "Fxn:dtype(x)";
    "Fxn:tf.cast(x,";
    "Fxn:_has_nchw_support():";
    "Fxn:tf.transpose(x,";
    "Fxn:_preprocess_conv3d_input";
    "Fxn:dtype(x)";
    "Fxn:tf.cast(x,";
    "Fxn:_has_nchw_support():";
    "Fxn:tf.transpose(x,";
    "Fxn:_preprocess_padding";
    "Fxn:ValueError('Invalid";
    "Fxn:str(padding))";
    "Fxn:conv1d";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:str(data_format))";
    "Fxn:kernel.get_shape().as_list()";
    "Fxn:temporal_padding(x,";
    "Fxn:_preprocess_padding(padding)";
    "Fxn:tf.nn.convolution(";
    "Fxn:dilation_rate=(dilation_rate,),";
    "Fxn:strides=(strides,),";
    "Fxn:conv2d";
    "Fxn:strides=(1,";
    "Fxn:dilation_rate=(1,";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:str(data_format))";
    "Fxn:_preprocess_conv2d_input(x,";
    "Fxn:_preprocess_padding(padding)";
    "Fxn:tf.nn.convolution(";
    "Fxn:tf.transpose(x,";
    "Fxn:conv2d_transpose";
    "Fxn:strides=(1,";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:str(data_format))";
    "Fxn:isinstance(output_shape,";
    "Fxn:tf.stack(output_shape)";
    "Fxn:_preprocess_conv2d_input(x,";
    "Fxn:tuple(output_shape[1:])";
    "Fxn:tf.stack(list(output_shape))";
    "Fxn:_preprocess_padding(padding)";
    "Fxn:tf.nn.conv2d_transpose(x,";
    "Fxn:tf.transpose(x,";
    "Fxn:separable_conv1d";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:str(data_format))";
    "Fxn:_preprocess_conv1d_input(x,";
    "Fxn:_preprocess_padding(padding)";
    "Fxn:tf.expand_dims(x,";
    "Fxn:tf.expand_dims(depthwise_kernel,";
    "Fxn:tf.expand_dims(pointwise_kernel,";
    "Fxn:tf.nn.separable_conv2d(x,";
    "Fxn:tf.squeeze(x,";
    "Fxn:tf.transpose(x,";
    "Fxn:separable_conv2d";
    "Fxn:strides=(1,";
    "Fxn:dilation_rate=(1,";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:str(data_format))";
    "Fxn:_preprocess_conv2d_input(x,";
    "Fxn:_preprocess_padding(padding)";
    "Fxn:tf.nn.separable_conv2d(x,";
    "Fxn:tf.transpose(x,";
    "Fxn:depthwise_conv2d";
    "Fxn:strides=(1,";
    "Fxn:dilation_rate=(1,";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:str(data_format))";
    "Fxn:_preprocess_conv2d_input(x,";
    "Fxn:_preprocess_padding(padding)";
    "Fxn:tf.nn.depthwise_conv2d(x,";
    "Fxn:tf.transpose(x,";
    "Fxn:conv3d";
    "Fxn:strides=(1,";
    "Fxn:dilation_rate=(1,";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:str(data_format))";
    "Fxn:_preprocess_conv3d_input(x,";
    "Fxn:_preprocess_padding(padding)";
    "Fxn:tf.nn.convolution(";
    "Fxn:tf.transpose(x,";
    "Fxn:conv3d_transpose";
    "Fxn:strides=(1,";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:str(data_format))";
    "Fxn:isinstance(output_shape,";
    "Fxn:tf.stack(output_shape)";
    "Fxn:_preprocess_conv3d_input(x,";
    "Fxn:tuple(output_shape[1:])";
    "Fxn:tf.stack(list(output_shape))";
    "Fxn:_preprocess_padding(padding)";
    "Fxn:tf.nn.conv3d_transpose(x,";
    "Fxn:tf.transpose(x,";
    "Fxn:pool2d";
    "Fxn:strides=(1,";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:str(data_format))";
    "Fxn:_preprocess_conv2d_input(x,";
    "Fxn:_preprocess_padding(padding)";
    "Fxn:tf.nn.max_pool(x,";
    "Fxn:tf.nn.avg_pool(x,";
    "Fxn:ValueError('Invalid";
    "Fxn:str(pool_mode))";
    "Fxn:tf.transpose(x,";
    "Fxn:pool3d";
    "Fxn:strides=(1,";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:str(data_format))";
    "Fxn:_preprocess_conv3d_input(x,";
    "Fxn:_preprocess_padding(padding)";
    "Fxn:tf.nn.max_pool3d(x,";
    "Fxn:tf.nn.avg_pool3d(x,";
    "Fxn:ValueError('Invalid";
    "Fxn:str(pool_mode))";
    "Fxn:tf.transpose(x,";
    "Fxn:bias_add";
    "Fxn:ndim(x)";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:str(data_format))";
    "Fxn:int_shape(bias)";
    "Fxn:len(bias_shape)";
    "Fxn:len(bias_shape)";
    "Fxn:ndim(x)";
    "Fxn:ValueError('Unexpected";
    "Fxn:ndim(x)))";
    "Fxn:ndim(x)";
    "Fxn:len(bias_shape)";
    "Fxn:reshape(bias,";
    "Fxn:reshape(bias,";
    "Fxn:len(bias_shape)";
    "Fxn:reshape(bias,";
    "Fxn:reshape(bias,";
    "Fxn:ndim(x)";
    "Fxn:len(bias_shape)";
    "Fxn:_has_nchw_support():";
    "Fxn:tf.nn.bias_add(x,";
    "Fxn:reshape(bias,";
    "Fxn:reshape(bias,";
    "Fxn:len(bias_shape)";
    "Fxn:tf.nn.bias_add(x,";
    "Fxn:reshape(bias,";
    "Fxn:ndim(x)";
    "Fxn:len(bias_shape)";
    "Fxn:reshape(bias,";
    "Fxn:reshape(bias,";
    "Fxn:len(bias_shape)";
    "Fxn:reshape(bias,";
    "Fxn:reshape(bias,";
    "Fxn:tf.nn.bias_add(x,";
    "Fxn:random_normal";
    "Fxn:floatx()";
    "Fxn:np.random.randint(10e6)";
    "Fxn:tf.random_normal(shape,";
    "Fxn:random_uniform";
    "Fxn:floatx()";
    "Fxn:np.random.randint(10e6)";
    "Fxn:tf.random_uniform(shape,";
    "Fxn:random_binomial";
    "Fxn:floatx()";
    "Fxn:np.random.randint(10e6)";
    "Fxn:tf.where(tf.random_uniform(shape,";
    "Fxn:tf.ones(shape,";
    "Fxn:tf.zeros(shape,";
    "Fxn:truncated_normal";
    "Fxn:floatx()";
    "Fxn:np.random.randint(10e6)";
    "Fxn:tf.truncated_normal(shape,";
    "Fxn:ctc_label_dense_to_sparse";
    "Fxn:tf.shape(labels)";
    "Fxn:tf.stack([label_shape[0]])";
    "Fxn:tf.stack([label_shape[1]])";
    "Fxn:range_less_than";
    "Fxn:tf.expand_dims(tf.range(label_shape[1]),";
    "Fxn:tf.fill(";
    "Fxn:tf.cast(tf.fill([1,";
    "Fxn:functional_ops.scan(range_less_than,";
    "Fxn:tf.reshape(tf.tile(tf.range(label_shape[1]),";
    "Fxn:tf.boolean_mask(label_array,";
    "Fxn:tf.transpose(tf.reshape(tf.tile(tf.range(label_shape[0]),";
    "Fxn:reverse(label_shape,";
    "Fxn:tf.boolean_mask(batch_array,";
    "Fxn:tf.transpose(tf.reshape(concatenate([batch_ind,";
    "Fxn:tf.gather_nd(labels,";
    "Fxn:tf.SparseTensor(tf.to_int64(indices),";
    "Fxn:tf.to_int64(label_shape))";
    "Fxn:ctc_batch_cost";
    "Fxn:`(samples,";
    "Fxn:`(samples,";
    "Fxn:`(samples,";
    "Fxn:`(samples,";
    "Fxn:tf.to_int32(tf.squeeze(label_length))";
    "Fxn:tf.to_int32(tf.squeeze(input_length))";
    "Fxn:tf.to_int32(ctc_label_dense_to_sparse(y_true,";
    "Fxn:tf.log(tf.transpose(y_pred,";
    "Fxn:epsilon())";
    "Fxn:tf.expand_dims(ctc.ctc_loss(inputs=y_pred,";
    "Fxn:ctc_decode";
    "Fxn:`(samples,";
    "Fxn:`(samples,";
    "Fxn:`(top_paths,";
    "Fxn:tf.log(tf.transpose(y_pred,";
    "Fxn:epsilon())";
    "Fxn:tf.to_int32(input_length)";
    "Fxn:ctc.ctc_greedy_decoder(";
    "Fxn:ctc.ctc_beam_search_decoder(";
    "Fxn:[tf.sparse_to_dense(st.indices,";
    "Fxn:map_fn";
    "Fxn:tf.map_fn(fn,";
    "Fxn:foldl";
    "Fxn:tf.foldl(fn,";
    "Fxn:foldr";
    "Fxn:tf.foldr(fn,";
    "Fxn:local_conv1d";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:str(data_format))";
    "Fxn:int_shape(kernel)";
    "Fxn:range(output_length):";
    "Fxn:slice(i";
    "Fxn:xs.append(reshape(inputs[:,";
    "Fxn:concatenate(xs,";
    "Fxn:`(output_length,";
    "Fxn:batch_dot(x_aggregate,";
    "Fxn:permute_dimensions(output,";
    "Fxn:local_conv2d";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:str(data_format))";
    "Fxn:int_shape(kernel)";
    "Fxn:range(output_row):";
    "Fxn:range(output_col):";
    "Fxn:slice(i";
    "Fxn:slice(j";
    "Fxn:xs.append(reshape(inputs[:,";
    "Fxn:xs.append(reshape(inputs[:,";
    "Fxn:concatenate(xs,";
    "Fxn:batch_dot(x_aggregate,";
    "Fxn:reshape(output,";
    "Fxn:permute_dimensions(output,";
    "Fxn:permute_dimensions(output,";
    "/keras/backend/theano_backend.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:defaultdict";
    "Import:contextmanager";
    "Import:theano";
    "Import:tensor";
    "Import:MRG_RandomStreams";
    "Import:pool";
    "Import:Print";
    "Import:ifelse";
    "Import:theano.sparse";
    "Import:softsign";
    "Import:softsign";
    "Import:numpy";
    "Import:floatx,";
    "Import:has_arg";
    "Import:set_image_dim_ordering,";
    "Fxn:learning_phase";
    "Fxn:set_learning_phase";
    "Fxn:get_uid";
    "Fxn:reset_uids";
    "Fxn:_assert_sparse_module";
    "Import:theano.sparse\n"";
    "Fxn:is_sparse";
    "Fxn:to_dense";
    "Fxn:_is_explicit_shape";
    "Fxn:name_scope";
    "Fxn:_prepare_name";
    "Fxn:variable";
    "Fxn:constant";
    "Fxn:is_keras_tensor";
    "Import:backend";
    "Import:Input,";
    "Fxn:placeholder";
    "Fxn:is_placeholder";
    "Fxn:shape";
    "Fxn:int_shape";
    "Fxn:ndim";
    "Fxn:dtype";
    "Fxn:eval";
    "Fxn:zeros";
    "Fxn:ones";
    "Fxn:eye";
    "Fxn:ones_like";
    "Fxn:zeros_like";
    "Fxn:identity";
    "Fxn:random_uniform_variable";
    "Fxn:random_normal_variable";
    "Fxn:count_params";
    "Fxn:cast";
    "Fxn:update";
    "Fxn:update_add";
    "Fxn:update_sub";
    "Fxn:moving_average_update";
    "Fxn:dot";
    "Fxn:batch_dot";
    "Fxn:transpose";
    "Fxn:gather";
    "Fxn:max";
    "Fxn:min";
    "Fxn:sum";
    "Fxn:prod";
    "Fxn:cumsum";
    "Fxn:cumprod";
    "Fxn:mean";
    "Fxn:std";
    "Fxn:var";
    "Fxn:any";
    "Fxn:all";
    "Fxn:argmax";
    "Fxn:argmin";
    "Fxn:square";
    "Fxn:abs";
    "Fxn:sqrt";
    "Fxn:exp";
    "Fxn:log";
    "Fxn:logsumexp";
    "Fxn:round";
    "Fxn:sign";
    "Fxn:pow";
    "Fxn:clip";
    "Fxn:equal";
    "Fxn:not_equal";
    "Fxn:greater";
    "Fxn:greater_equal";
    "Fxn:less";
    "Fxn:less_equal";
    "Fxn:maximum";
    "Fxn:minimum";
    "Fxn:sin";
    "Fxn:cos";
    "Fxn:normalize_batch_in_training";
    "Fxn:batch_normalization";
    "Fxn:_old_normalize_batch_in_training";
    "Fxn:_old_batch_normalization";
    "Fxn:concatenate";
    "Fxn:reshape";
    "Fxn:permute_dimensions";
    "Fxn:repeat_elements";
    "Fxn:resize_images";
    "Fxn:resize_volumes";
    "Fxn:repeat";
    "Fxn:arange";
    "Fxn:tile";
    "Fxn:flatten";
    "Fxn:batch_flatten";
    "Fxn:expand_dims";
    "Fxn:squeeze";
    "Fxn:temporal_padding";
    "Fxn:spatial_2d_padding";
    "Fxn:spatial_3d_padding";
    "Fxn:stack";
    "Fxn:one_hot";
    "Fxn:reverse";
    "Fxn:pattern_broadcast";
    "Fxn:get_value";
    "Fxn:batch_get_value";
    "Fxn:set_value";
    "Fxn:batch_set_value";
    "Fxn:get_variable_shape";
    "Fxn:print_tensor";
    "class:Function(object):";
    "Fxn:__init__";
    "Fxn:unique_variables_to_update.items()";
    "Fxn:theano.function(inputs,";
    "Fxn:__call__";
    "Fxn:isinstance(inputs,";
    "Fxn:self.function(*inputs)";
    "Fxn:function";
    "Fxn:len(kwargs)";
    "Fxn:kwargs.keys():";
    "Fxn:has_arg(theano.function,";
    "Fxn:ValueError(msg)";
    "Fxn:Function(inputs,";
    "Fxn:gradients";
    "Fxn:T.grad(loss,";
    "Fxn:stop_gradient";
    "Fxn:isinstance(variables,";
    "Fxn:map(theano.gradient.disconnected_grad,";
    "Fxn:theano.gradient.disconnected_grad(variables)";
    "Fxn:rnn";
    "Fxn:ValueError('When";
    "Fxn:list(range(2,";
    "Fxn:inputs.dimshuffle(axes)";
    "Fxn:expand_dims(mask)";
    "Fxn:mask.dimshuffle(axes)";
    "Fxn:list(range(input_length))";
    "Fxn:step_function(inputs[i],";
    "Fxn:getattr(output,";
    "Fxn:len(successive_outputs)";
    "Fxn:zeros_like(output)";
    "Fxn:T.switch(mask[i],";
    "Fxn:zip(states,";
    "Fxn:kept_states.append(T.switch(mask[i],";
    "Fxn:successive_outputs.append(output)";
    "Fxn:successive_states.append(states)";
    "Fxn:T.stack(*successive_outputs)";
    "Fxn:range(len(successive_states[-1])):";
    "Fxn:states.append(T.stack(*[states_at_step[i]";
    "Fxn:step_function(inputs[0],";
    "Fxn:T.unbroadcast(initial_output,";
    "Fxn:len(initial_states)";
    "Fxn:T.unbroadcast(initial_states[0],";
    "Fxn:_step";
    "Fxn:step_function(inputs,";
    "Fxn:getattr(outputs,";
    "Fxn:T.switch(mask,";
    "Fxn:zip(states,";
    "Fxn:return_states.append(T.switch(mask,";
    "Fxn:theano.scan(";
    "Fxn:isinstance(results,";
    "Fxn:list(range(input_length))";
    "Fxn:step_function(inputs[i],";
    "Fxn:getattr(outputs,";
    "Fxn:successive_outputs.append(outputs)";
    "Fxn:successive_states.append(states)";
    "Fxn:T.stack(*successive_outputs)";
    "Fxn:range(len(successive_states[-1])):";
    "Fxn:states.append(T.stack(*[states_at_step[i]";
    "Fxn:_step";
    "Fxn:step_function(inputs,";
    "Fxn:getattr(outputs,";
    "Fxn:len(initial_states)";
    "Fxn:T.unbroadcast(initial_states[0],";
    "Fxn:theano.scan(";
    "Fxn:isinstance(results,";
    "Fxn:T.squeeze(outputs)";
    "Fxn:list(range(2,";
    "Fxn:outputs.dimshuffle(axes)";
    "Fxn:[T.squeeze(state[-1])";
    "Fxn:switch";
    "Fxn:callable(then_expression):";
    "Fxn:then_expression()";
    "Fxn:callable(else_expression):";
    "Fxn:else_expression()";
    "Fxn:ndim(condition)";
    "Fxn:ndim(then_expression)";
    "Fxn:range(ndim_diff):";
    "Fxn:expand_dims(condition)";
    "Fxn:T.switch(condition,";
    "Fxn:in_train_phase";
    "Fxn:`K.learning_phase()`.";
    "Fxn:learning_phase()";
    "Fxn:callable(x):";
    "Fxn:x()";
    "Fxn:callable(alt):";
    "Fxn:alt()";
    "Fxn:callable(x):";
    "Fxn:x()";
    "Fxn:callable(alt):";
    "Fxn:alt()";
    "Fxn:ifelse(training,";
    "Fxn:in_test_phase";
    "Fxn:in_train_phase(alt,";
    "Fxn:_assert_has_capability";
    "Fxn:hasattr(module,";
    "Fxn:EnvironmentError(";
    "Fxn:elu";
    "Fxn:_assert_has_capability(T.nnet,";
    "Fxn:T.nnet.elu(x,";
    "Fxn:relu";
    "Fxn:_assert_has_capability(T.nnet,";
    "Fxn:T.nnet.relu(x,";
    "Fxn:T.minimum(x,";
    "Fxn:softmax";
    "Fxn:T.nnet.softmax(x)";
    "Fxn:T.exp(x";
    "Fxn:x.max())";
    "Fxn:T.exp(";
    "Fxn:x.max()).sum(axis=axis,";
    "Fxn:softplus";
    "Fxn:T.nnet.softplus(x)";
    "Fxn:softsign";
    "Fxn:T_softsign(x)";
    "Fxn:categorical_crossentropy";
    "Fxn:T.nnet.softmax(output)";
    "Fxn:sparse_categorical_crossentropy";
    "Fxn:T.cast(T.flatten(target),";
    "Fxn:T.extra_ops.to_one_hot(target,";
    "Fxn:reshape(target,";
    "Fxn:shape(output))";
    "Fxn:categorical_crossentropy(target,";
    "Fxn:binary_crossentropy";
    "Fxn:T.nnet.sigmoid(output)";
    "Fxn:T.clip(output,";
    "Fxn:epsilon(),";
    "Fxn:epsilon())";
    "Fxn:T.nnet.binary_crossentropy(output,";
    "Fxn:sigmoid";
    "Fxn:T.nnet.sigmoid(x)";
    "Fxn:hard_sigmoid";
    "Fxn:T.nnet.hard_sigmoid(x)";
    "Fxn:tanh";
    "Fxn:T.tanh(x)";
    "Fxn:dropout";
    "Fxn:ValueError('Dropout";
    "Fxn:np.random.randint(1,";
    "Fxn:isinstance(noise_shape,";
    "Fxn:tuple(noise_shape)";
    "Fxn:RandomStreams(seed=seed)";
    "Fxn:rng.binomial(x.shape,";
    "Fxn:rng.binomial(noise_shape,";
    "Fxn:T.patternbroadcast(random_tensor,";
    "Fxn:l2_normalize";
    "Fxn:T.sum(T.square(x),";
    "Fxn:T.sqrt(T.maximum(square_sum,";
    "Fxn:epsilon()))";
    "Fxn:in_top_k";
    "Fxn:`(batch_size,";
    "Fxn:T.zeros_like(targets,";
    "Fxn:T.zeros_like(targets,";
    "Fxn:int_shape(predictions)[1]:";
    "Fxn:T.ones_like(targets,";
    "Fxn:T.ones_like(targets,";
    "Fxn:T.sort(predictions)[:,";
    "Fxn:predictions[T.arange(targets.shape[0]),";
    "Fxn:T.ge(targets_values,";
    "Fxn:_preprocess_conv2d_input";
    "Fxn:x.dimshuffle((0,";
    "Fxn:_preprocess_conv3d_input";
    "Fxn:x.dimshuffle((0,";
    "Fxn:_preprocess_conv2d_kernel";
    "Fxn:`(rows,";
    "Fxn:`(depth,";
    "Fxn:kernel.dimshuffle((3,";
    "Fxn:_preprocess_conv3d_kernel";
    "Fxn:`(space,";
    "Fxn:`(depth,";
    "Fxn:kernel.dimshuffle((4,";
    "Fxn:_preprocess_padding";
    "Fxn:ValueError('Border";
    "Fxn:str(padding))";
    "Fxn:_preprocess_conv2d_image_shape";
    "Fxn:int_or_none";
    "Fxn:int(value)";
    "Fxn:tuple(int_or_none(v)";
    "Fxn:_preprocess_conv3d_volume_shape";
    "Fxn:int_or_none";
    "Fxn:int(value)";
    "Fxn:tuple(int_or_none(v)";
    "Fxn:_preprocess_conv2d_filter_shape";
    "Fxn:int_or_none";
    "Fxn:int(value)";
    "Fxn:tuple(int_or_none(v)";
    "Fxn:_preprocess_conv3d_filter_shape";
    "Fxn:int_or_none";
    "Fxn:int(value)";
    "Fxn:tuple(int_or_none(v)";
    "Fxn:_postprocess_conv2d_output";
    "Fxn::(x.shape[2]";
    "Fxn::(x.shape[3]";
    "Fxn:conv_out.dimshuffle((0,";
    "Fxn:_postprocess_conv3d_output";
    "Fxn::(x.shape[2]";
    "Fxn::(x.shape[3]";
    "Fxn::(x.shape[4]";
    "Fxn:conv_out.dimshuffle((0,";
    "Fxn:conv1d";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:hasattr(kernel,";
    "Fxn:AttributeError('Causal";
    "Fxn:temporal_padding(x,";
    "Fxn:hasattr(x,";
    "Fxn:expand_dims(x,";
    "Fxn:expand_dims(x,";
    "Fxn:expand_dims(kernel,";
    "Fxn:conv2d(x,";
    "Fxn:squeeze(output,";
    "Fxn:squeeze(output,";
    "Fxn:conv2d";
    "Fxn:strides=(1,";
    "Fxn:dilation_rate=(1,";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:hasattr(x,";
    "Fxn:_preprocess_conv2d_image_shape(int_shape(x),";
    "Fxn:hasattr(kernel,";
    "Fxn:kernel.eval().shape";
    "Fxn:_preprocess_conv2d_filter_shape(kernel_shape,";
    "Fxn:_preprocess_conv2d_input(x,";
    "Fxn:_preprocess_conv2d_kernel(kernel,";
    "Fxn:_preprocess_padding(padding)";
    "Fxn:T.nnet.conv2d(x,";
    "Fxn:_postprocess_conv2d_output(conv_out,";
    "Fxn:conv2d_transpose";
    "Fxn:strides=(1,";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:hasattr(kernel,";
    "Fxn:kernel.eval().shape";
    "Fxn:ValueError('In";
    "Fxn:_preprocess_conv2d_filter_shape(kernel_shape,";
    "Fxn:_preprocess_conv2d_input(x,";
    "Fxn:_preprocess_conv2d_kernel(kernel,";
    "Fxn:_preprocess_padding(padding)";
    "Fxn:T.nnet.abstract_conv.AbstractConv2d_gradInputs(imshp=None,";
    "Fxn:op(kernel,";
    "Fxn:_postprocess_conv2d_output(conv_out,";
    "Fxn:separable_conv1d";
    "Fxn:separable_conv2d";
    "Fxn:strides=(1,";
    "Fxn:dilation_rate=(1,";
    "Fxn:depthwise_conv2d";
    "Fxn:strides=(1,";
    "Fxn:dilation_rate=(1,";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:hasattr(x,";
    "Fxn:_preprocess_conv2d_image_shape(int_shape(x),";
    "Fxn:hasattr(depthwise_kernel,";
    "Fxn:depthwise_kernel.eval().shape";
    "Fxn:_preprocess_conv2d_filter_shape(depthwise_kernel_shape,";
    "Fxn:_preprocess_conv2d_input(x,";
    "Fxn:_preprocess_conv2d_kernel(depthwise_kernel,";
    "Fxn:_preprocess_padding(padding)";
    "Fxn:depthwise_kernel.dimshuffle((1,";
    "Fxn:reshape(depthwise_kernel,";
    "Fxn:T.nnet.conv2d(x,";
    "Fxn:_postprocess_conv2d_output(conv_out,";
    "Fxn:conv3d";
    "Fxn:strides=(1,";
    "Fxn:dilation_rate=(1,";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:hasattr(x,";
    "Fxn:_preprocess_conv3d_volume_shape(int_shape(x),";
    "Fxn:hasattr(kernel,";
    "Fxn:kernel.eval().shape";
    "Fxn:_preprocess_conv3d_filter_shape(kernel_shape,";
    "Fxn:_preprocess_conv3d_input(x,";
    "Fxn:_preprocess_conv3d_kernel(kernel,";
    "Fxn:_preprocess_padding(padding)";
    "Fxn:T.nnet.conv3d(x,";
    "Fxn:_postprocess_conv3d_output(conv_out,";
    "Fxn:conv3d_transpose";
    "Fxn:strides=(1,";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:hasattr(kernel,";
    "Fxn:kernel.eval().shape";
    "Fxn:ValueError('In";
    "Fxn:_preprocess_conv3d_filter_shape(kernel_shape,";
    "Fxn:_preprocess_conv3d_input(x,";
    "Fxn:_preprocess_conv3d_kernel(kernel,";
    "Fxn:_preprocess_padding(padding)";
    "Fxn:T.nnet.abstract_conv.AbstractConv3d_gradInputs(imshp=None,";
    "Fxn:op(kernel,";
    "Fxn:_postprocess_conv3d_output(conv_out,";
    "Fxn:pool2d";
    "Fxn:strides=(1,";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:ValueError('Invalid";
    "Fxn:x.dimshuffle((0,";
    "Fxn:pool.pool_2d(x,";
    "Fxn:pool.pool_2d(x,";
    "Fxn:ValueError('Invalid";
    "Fxn:pool_out.dimshuffle((0,";
    "Fxn:pool3d";
    "Fxn:strides=(1,";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:ValueError('Invalid";
    "Fxn:x.dimshuffle((0,";
    "Fxn:pool.pool_3d(x,";
    "Fxn:pool.pool_3d(x,";
    "Fxn:ValueError('Invalid";
    "Fxn:pool_out.dimshuffle((0,";
    "Fxn:bias_add";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:str(data_format))";
    "Fxn:ndim(bias)";
    "Fxn:ndim(bias)";
    "Fxn:ndim(x)";
    "Fxn:ValueError('Unexpected";
    "Fxn:ndim(x)";
    "Fxn:tuple(bias.shape)";
    "Fxn:ndim(x)";
    "Fxn:ndim(bias)";
    "Fxn:reshape(bias,";
    "Fxn:reshape(bias,";
    "Fxn:ndim(bias)";
    "Fxn:reshape(bias,";
    "Fxn:reshape(bias,";
    "Fxn:ndim(x)";
    "Fxn:ndim(bias)";
    "Fxn:reshape(bias,";
    "Fxn:reshape(bias,";
    "Fxn:ndim(bias)";
    "Fxn:reshape(bias,";
    "Fxn:reshape(bias,";
    "Fxn:ndim(x)";
    "Fxn:ndim(bias)";
    "Fxn:reshape(bias,";
    "Fxn:reshape(bias,";
    "Fxn:ndim(bias)";
    "Fxn:reshape(bias,";
    "Fxn:reshape(bias,";
    "Fxn:random_normal";
    "Fxn:floatx()";
    "Fxn:np.random.randint(1,";
    "Fxn:RandomStreams(seed=seed)";
    "Fxn:rng.normal(size=shape,";
    "Fxn:random_uniform";
    "Fxn:floatx()";
    "Fxn:np.random.randint(1,";
    "Fxn:RandomStreams(seed=seed)";
    "Fxn:rng.uniform(shape,";
    "Fxn:random_binomial";
    "Fxn:floatx()";
    "Fxn:np.random.randint(1,";
    "Fxn:RandomStreams(seed=seed)";
    "Fxn:rng.binomial(shape,";
    "Fxn:truncated_normal";
    "Fxn:floatx()";
    "Fxn:np.random.randint(1,";
    "Fxn:RandomStreams(seed=seed)";
    "Fxn:rng.normal(size=shape,";
    "Fxn:T.clip(normal_tensor,";
    "Fxn:ctc_interleave_blanks";
    "Fxn:T.alloc(-1,";
    "Fxn:T.set_subtensor(Y_[T.arange(Y.shape[0])";
    "Fxn:ctc_create_skip_idxs";
    "Fxn:T.arange((Y.shape[0]";
    "Fxn:T.neq(Y[skip_idxs],";
    "Fxn:skip_idxs[non_repeats.nonzero()]";
    "Fxn:ctc_update_log_p";
    "Fxn:skip_idxs[(skip_idxs";
    "Fxn:active).nonzero()]";
    "Fxn:T.cast(T.minimum(";
    "Fxn:T.maximum(";
    "Fxn:T.max(T.concatenate([active_skip_idxs,";
    "Fxn:T.max(log_p_prev[:active])";
    "Fxn:T.exp(log_p_prev[:active]";
    "Fxn:T.set_subtensor(_p_prev[:active],";
    "Fxn:T.inc_subtensor(_p_prev[1:],";
    "Fxn:T.inc_subtensor(_p_prev[active_skip_idxs";
    "Fxn:T.log(_p_prev)";
    "Fxn:T.set_subtensor(";
    "Fxn:ctc_path_probs";
    "Fxn:np.float32(1.)";
    "Fxn:T.log(smoothed_predict)";
    "Fxn:T.zeros_like(L[0])";
    "Fxn:ctc_create_skip_idxs(Y)";
    "Fxn:ctc_create_skip_idxs(Y[::-1])";
    "Fxn:step";
    "Fxn:ctc_update_log_p(f_skip_idxs,";
    "Fxn:ctc_update_log_p(b_skip_idxs,";
    "Fxn:theano.scan(";
    "Fxn:outputs_info=[np.int32(1),";
    "Fxn:np.int32(1),";
    "Fxn:T.arange(L.shape[1]).dimshuffle('x',";
    "Fxn:f_active.dimshuffle(0,";
    "Fxn:b_active.dimshuffle(0,";
    "Fxn:ctc_cost";
    "Fxn:ctc_path_probs(predict,";
    "Fxn:ctc_interleave_blanks(Y))";
    "Fxn:T.max(log_probs)";
    "Fxn:T.log(T.sum(T.exp(log_probs";
    "Fxn:common_factor)[mask.nonzero()]))";
    "Fxn:ctc_batch_cost";
    "Fxn:ctc_step";
    "Fxn:ctc_cost(y_pred_step,";
    "Fxn:theano.scan(";
    "Fxn:ret.dimshuffle('x',";
    "Fxn:map_fn";
    "Fxn:theano.map(fn,";
    "Fxn:foldl";
    "Fxn:theano.foldl(lambda";
    "Fxn:fn(acc,";
    "Fxn:foldr";
    "Fxn:theano.foldr(lambda";
    "Fxn:fn(acc,";
    "Fxn:local_conv1d";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:str(data_format))";
    "Fxn:int_shape(kernel)";
    "Fxn:range(output_length):";
    "Fxn:slice(i";
    "Fxn:xs.append(reshape(inputs[:,";
    "Fxn:concatenate(xs,";
    "Fxn:`(output_length,";
    "Fxn:batch_dot(x_aggregate,";
    "Fxn:permute_dimensions(output,";
    "Fxn:local_conv2d";
    "Fxn:image_data_format()";
    "Fxn:ValueError('Unknown";
    "Fxn:str(data_format))";
    "Fxn:int_shape(kernel)";
    "Fxn:range(output_row):";
    "Fxn:range(output_col):";
    "Fxn:slice(i";
    "Fxn:slice(j";
    "Fxn:reshape(inputs[:,";
    "Fxn:output.append(dot(x_flatten,";
    "Fxn:concatenate(output,";
    "Fxn:reshape(output,";
    "Fxn:permute_dimensions(output,";
    "Fxn:range(output_row):";
    "Fxn:range(output_col):";
    "Fxn:slice(i";
    "Fxn:slice(j";
    "Fxn:xs.append(reshape(inputs[:,";
    "Fxn:concatenate(xs,";
    "Fxn:batch_dot(x_aggregate,";
    "Fxn:reshape(output,";
    "Fxn:permute_dimensions(output,";
    "/keras/backend/__init__.py";
    "Import:absolute_import";
    "Import:print_function";
    "Import:import";
    "Import:json";
    "Import:sys";
    "Import:epsilon";
    "Import:floatx";
    "Import:set_epsilon";
    "Import:set_floatx";
    "Import:cast_to_floatx";
    "Import:image_data_format";
    "Import:set_image_data_format";
    "Import:elif";
    "Import:elif";
    "Import:else:";
    "Fxn:backend";
    "/keras/datasets/boston_housing.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:get_file";
    "Import:numpy";
    "Fxn:load_data";
    "/keras/datasets/cifar.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:sys";
    "Import:cPickle";
    "Fxn:load_batch";
    "/keras/datasets/cifar10.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:load_batch";
    "Import:get_file";
    "Import:backend";
    "Import:numpy";
    "Import:def";
    "Fxn:load_data";
    "/keras/datasets/cifar100.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:load_batch";
    "Import:get_file";
    "Import:backend";
    "Import:numpy";
    "Import:def";
    "Fxn:load_data";
    "/keras/datasets/fashion_mnist.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:gzip";
    "Import:..utils.data_utils";
    "Import:get_file";
    "Import:numpy";
    "Fxn:load_data";
    "/keras/datasets/imdb.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:get_file";
    "Import:_remove_long_seq";
    "Import:numpy";
    "Import:json";
    "Import:warnings";
    "Fxn:load_data";
    "Fxn:get_word_index";
    "/keras/datasets/mnist.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:get_file";
    "Import:numpy";
    "Fxn:load_data";
    "/keras/datasets/reuters.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:get_file";
    "Import:_remove_long_seq";
    "Import:numpy";
    "Import:json";
    "Import:warnings";
    "Fxn:load_data";
    "Fxn:get_word_index";
    "/keras/datasets/__init__.py";
    "Import:absolute_import";
    "Import:mnist";
    "Import:imdb";
    "Import:reuters";
    "Import:cifar10";
    "Import:cifar100";
    "Import:boston_housing";
    "Import:fashion_mnist";
    "/keras/engine/topology.py";
    "Import:print_function";
    "Import:absolute_import";
    "Import:division";
    "Import:numpy";
    "Import:json";
    "Import:yaml";
    "Import:warnings";
    "Import:copy";
    "Import:import";
    "Import:six.moves";
    "Import:zip";
    "Import:backend";
    "Import:initializers";
    "Import:ask_to_proceed_with_overwrite";
    "Import:print_summary";
    "Import:count_params";
    "Import:has_arg";
    "Import:conv_utils";
    "Import:interfaces";
    "Import:h5py";
    "class:InputSpec(object):";
    "Fxn:__init__";
    "Fxn:len(shape)";
    "Fxn:__repr__";
    "Fxn:[('dtype='";
    "Fxn:str(self.dtype))";
    "Fxn:str(self.shape))";
    "Fxn:str(self.ndim))";
    "Fxn:str(self.max_ndim))";
    "Fxn:str(self.min_ndim))";
    "Fxn:str(self.axes))";
    "Fxn:'InputSpec(%s)'";
    "Fxn:'.join(x";
    "class:Node(object):";
    "Fxn:__init__";
    "Fxn:outbound_layer.call().";
    "Fxn:outbound_layer.compute_mask().";
    "Fxn:layer._outbound_nodes.append(self)";
    "Fxn:outbound_layer._inbound_nodes.append(self)";
    "Fxn:get_config";
    "Fxn:inbound_names.append(layer.name)";
    "Fxn:inbound_names.append(None)";
    "class:Layer(object):";
    "Fxn:__init__";
    "Fxn:self.build()";
    "Fxn:self._add_inbound_node().";
    "Fxn:TypeError('Keyword";
    "Fxn:kwargs.get('name')";
    "Fxn:_to_snake_case(prefix)";
    "Fxn:str(K.get_uid(prefix))";
    "Fxn:kwargs.get('trainable',";
    "Fxn:tuple(kwargs['batch_input_shape'])";
    "Fxn:tuple(kwargs['input_shape'])";
    "Fxn:kwargs.get('dtype')";
    "Fxn:kwargs.get('input_dtype')";
    "Fxn:K.floatx()";
    "Fxn:_node_key";
    "Fxn:str(node_index)";
    "Fxn:losses";
    "Fxn:updates";
    "Fxn:built";
    "Fxn:built";
    "Fxn:trainable_weights";
    "Fxn:getattr(self,";
    "Fxn:trainable_weights";
    "Fxn:non_trainable_weights";
    "Fxn:getattr(self,";
    "Fxn:non_trainable_weights";
    "Fxn:add_weight";
    "Fxn:initializers.get(initializer)";
    "Fxn:K.floatx()";
    "Fxn:K.variable(initializer(shape),";
    "Fxn:self.add_loss(regularizer(weight))";
    "Fxn:self._trainable_weights.append(weight)";
    "Fxn:self._non_trainable_weights.append(weight)";
    "Fxn:assert_input_compatibility";
    "Fxn:tensor(s)";
    "Fxn:_to_list(inputs)";
    "Fxn:K.is_keras_tensor(x)";
    "Fxn:ValueError('Layer";
    "Fxn:str(type(x))";
    "Fxn:str(inputs)";
    "Fxn:isinstance(self.input_spec,";
    "Fxn:_to_list(self.input_spec)";
    "Fxn:len(inputs)";
    "Fxn:len(input_spec):";
    "Fxn:ValueError('Layer";
    "Fxn:str(len(input_spec))";
    "Fxn:str(len(inputs))";
    "Fxn:str(inputs))";
    "Fxn:enumerate(zip(inputs,";
    "Fxn:K.ndim(x)";
    "Fxn:ValueError('Input";
    "Fxn:str(input_index)";
    "Fxn:str(spec.ndim)";
    "Fxn:str(K.ndim(x)))";
    "Fxn:K.ndim(x)";
    "Fxn:ValueError('Input";
    "Fxn:str(input_index)";
    "Fxn:str(spec.max_ndim)";
    "Fxn:str(K.ndim(x)))";
    "Fxn:K.ndim(x)";
    "Fxn:ValueError('Input";
    "Fxn:str(input_index)";
    "Fxn:str(spec.min_ndim)";
    "Fxn:str(K.ndim(x)))";
    "Fxn:K.dtype(x)";
    "Fxn:ValueError('Input";
    "Fxn:str(input_index)";
    "Fxn:str(spec.dtype)";
    "Fxn:str(K.dtype(x)))";
    "Fxn:K.int_shape(x)";
    "Fxn:spec.axes.items():";
    "Fxn:x_shape[int(axis)]";
    "Fxn:ValueError('Input";
    "Fxn:str(input_index)";
    "Fxn:str(axis)";
    "Fxn:str(value)";
    "Fxn:str(x_shape))";
    "Fxn:K.int_shape(x)";
    "Fxn:zip(spec.shape,";
    "Fxn:ValueError(";
    "Fxn:str(input_index)";
    "Fxn:str(spec.shape)";
    "Fxn:str(x_shape))";
    "Fxn:call";
    "Fxn:__call__";
    "Fxn:self.call(),";
    "Fxn:self._add_inbound_node().";
    "Fxn:input(s).";
    "Fxn:_add_inbound_node().";
    "Fxn:tensor(s)";
    "Fxn:_add_inbound_node().";
    "Fxn:`call()`.";
    "Fxn:isinstance(inputs,";
    "Fxn:K.name_scope(self.name):";
    "Fxn:self.assert_input_compatibility(inputs)";
    "Fxn:_to_list(inputs):";
    "Fxn:hasattr(x_elem,";
    "Fxn:input_shapes.append(x_elem._keras_shape)";
    "Fxn:hasattr(K,";
    "Fxn:input_shapes.append(K.int_shape(x_elem))";
    "Fxn:ValueError('You";
    "Fxn:'`layer.build(batch_input_shape)`')";
    "Fxn:len(input_shapes)";
    "Fxn:self.build(input_shapes[0])";
    "Fxn:self.build(input_shapes)";
    "Fxn:self.set_weights(self._initial_weights)";
    "Fxn:self.assert_input_compatibility(inputs)";
    "Fxn:_collect_previous_mask(inputs)";
    "Fxn:copy.copy(kwargs)";
    "Fxn:_is_all_none(previous_mask):";
    "Fxn:has_arg(self.call,";
    "Fxn:_collect_input_shape(inputs)";
    "Fxn:output(s),";
    "Fxn:mask(s),";
    "Fxn:shape(s).";
    "Fxn:self.call(inputs,";
    "Fxn:self.compute_mask(inputs,";
    "Fxn:_to_list(output)";
    "Fxn:_to_list(inputs)";
    "Fxn:K.identity(x)";
    "Fxn:output_ls_copy.append(x)";
    "Fxn:len(output_ls_copy)";
    "Fxn:all([s";
    "Fxn:_to_list(input_shape)]):";
    "Fxn:self.compute_output_shape(input_shape)";
    "Fxn:isinstance(input_shape,";
    "Fxn:isinstance(output_mask,";
    "Fxn:len(output_ls)";
    "Fxn:len(output_ls)";
    "Fxn:tensor(s).";
    "Fxn:tensor(s)";
    "Fxn:self._add_inbound_node(input_tensors=inputs,";
    "Fxn:hasattr(self,";
    "Fxn:[self.activity_regularizer(x)";
    "Fxn:_to_list(output)]";
    "Fxn:self.add_loss(regularization_losses,";
    "Fxn:_to_list(inputs))";
    "Fxn:_add_inbound_node";
    "Fxn:_to_list(input_tensors)";
    "Fxn:_to_list(output_tensors)";
    "Fxn:_to_list(input_masks)";
    "Fxn:_to_list(output_masks)";
    "Fxn:_to_list(input_shapes)";
    "Fxn:_to_list(output_shapes)";
    "Fxn:tensor(s)";
    "Fxn:hasattr(x,";
    "Fxn:inbound_layers.append(inbound_layer)";
    "Fxn:node_indices.append(node_index)";
    "Fxn:tensor_indices.append(tensor_index)";
    "Fxn:inbound_layers.append(None)";
    "Fxn:node_indices.append(None)";
    "Fxn:tensor_indices.append(None)";
    "Fxn:Node(";
    "Fxn:range(len(output_tensors)):";
    "Fxn:any([getattr(x,";
    "Fxn:getattr(self,";
    "Fxn:getattr(output_tensors[i],";
    "Fxn:len(self._inbound_nodes)";
    "Fxn:compute_output_shape";
    "Fxn:hasattr(self,";
    "Fxn:warnings.warn(msg.format(type(self).__module__,";
    "Fxn:type(self).__name__),";
    "Fxn:compute_mask";
    "Fxn:isinstance(mask,";
    "Fxn:any(m";
    "Fxn:TypeError('Layer";
    "Fxn:str(mask))";
    "Fxn:TypeError('Layer";
    "Fxn:str(mask))";
    "Fxn:build";
    "Fxn:_get_node_attribute_at_index";
    "Fxn:RuntimeError('The";
    "Fxn:len(self._inbound_nodes)";
    "Fxn:ValueError('Asked";
    "Fxn:str(node_index)";
    "Fxn:str(len(self._inbound_nodes))";
    "Fxn:getattr(self._inbound_nodes[node_index],";
    "Fxn:len(values)";
    "Fxn:get_input_shape_at";
    "Fxn:shape(s)";
    "Fxn:self._get_node_attribute_at_index(node_index,";
    "Fxn:get_output_shape_at";
    "Fxn:shape(s)";
    "Fxn:self._get_node_attribute_at_index(node_index,";
    "Fxn:get_input_at";
    "Fxn:tensor(s)";
    "Fxn:self._get_node_attribute_at_index(node_index,";
    "Fxn:get_output_at";
    "Fxn:tensor(s)";
    "Fxn:self._get_node_attribute_at_index(node_index,";
    "Fxn:get_input_mask_at";
    "Fxn:tensor(s)";
    "Fxn:self._get_node_attribute_at_index(node_index,";
    "Fxn:get_output_mask_at";
    "Fxn:tensor(s)";
    "Fxn:self._get_node_attribute_at_index(node_index,";
    "Fxn:input";
    "Fxn:tensor(s)";
    "Fxn:len(self._inbound_nodes)";
    "Fxn:AttributeError('Layer";
    "Fxn:`get_input_at(node_index)`";
    "Fxn:AttributeError('Layer";
    "Fxn:self._get_node_attribute_at_index(0,";
    "Fxn:output";
    "Fxn:tensor(s)";
    "Fxn:AttributeError('Layer";
    "Fxn:len(self._inbound_nodes)";
    "Fxn:AttributeError('Layer";
    "Fxn:`get_output_at(node_index)`";
    "Fxn:self._get_node_attribute_at_index(0,";
    "Fxn:input_mask";
    "Fxn:tensor(s)";
    "Fxn:len(self._inbound_nodes)";
    "Fxn:AttributeError('Layer";
    "Fxn:`get_input_mask_at(node_index)`";
    "Fxn:self._get_node_attribute_at_index(0,";
    "Fxn:output_mask";
    "Fxn:tensor(s)";
    "Fxn:len(self._inbound_nodes)";
    "Fxn:AttributeError('Layer";
    "Fxn:`get_output_mask_at(node_index)`";
    "Fxn:self._get_node_attribute_at_index(0,";
    "Fxn:input_shape";
    "Fxn:tuple(s)";
    "Fxn:AttributeError('The";
    "Fxn:set([str(node.input_shapes)";
    "Fxn:len(all_input_shapes)";
    "Fxn:len(input_shapes)";
    "Fxn:AttributeError('The";
    "Fxn:str(self.name)";
    "Fxn:`get_input_shape_at(node_index)`";
    "Fxn:output_shape";
    "Fxn:tuple(s)";
    "Fxn:AttributeError('The";
    "Fxn:set([str(node.output_shapes)";
    "Fxn:len(all_output_shapes)";
    "Fxn:len(output_shapes)";
    "Fxn:AttributeError('The";
    "Fxn:str(self.name)";
    "Fxn:`get_output_shape_at(node_index)`";
    "Fxn:add_loss";
    "Fxn:_to_list(losses)";
    "Fxn:hasattr(self,";
    "Fxn:isinstance(inputs,";
    "Fxn:_object_list_uid(inputs)";
    "Fxn:add_update";
    "Fxn:_to_list(updates)";
    "Fxn:hasattr(self,";
    "Fxn:isinstance(inputs,";
    "Fxn:_object_list_uid(inputs)";
    "Fxn:get_updates_for";
    "Fxn:_object_list_uid(inputs)";
    "Fxn:get_losses_for";
    "Fxn:_object_list_uid(inputs)";
    "Fxn:weights";
    "Fxn:set_weights";
    "Fxn:len(params)";
    "Fxn:len(weights):";
    "Fxn:ValueError('You";
    "Fxn:`set_weights(weights)`";
    "Fxn:str(len(weights))";
    "Fxn:str(len(params))";
    "Fxn:str(weights)[:50]";
    "Fxn:K.batch_get_value(params)";
    "Fxn:zip(param_values,";
    "Fxn:ValueError('Layer";
    "Fxn:str(pv.shape)";
    "Fxn:str(w.shape))";
    "Fxn:weight_value_tuples.append((p,";
    "Fxn:K.batch_set_value(weight_value_tuples)";
    "Fxn:get_weights";
    "Fxn:K.batch_get_value(params)";
    "Fxn:get_config";
    "Fxn:from_config";
    "Fxn:cls(**config)";
    "Fxn:count_params";
    "Fxn:self.build()";
    "Fxn:RuntimeError('You";
    "Fxn:'.build(batch_input_shape)`.')";
    "Fxn:count_params(self.weights)";
    "class:InputLayer(Layer):";
    "Fxn:__init__";
    "Fxn:str(K.get_uid(prefix))";
    "Fxn:super(InputLayer,";
    "Fxn:self).__init__(dtype=dtype,";
    "Fxn:ValueError('Only";
    "Fxn:K.int_shape(input_tensor)";
    "Fxn:ValueError('InputLayer";
    "Fxn:ValueError('An";
    "Fxn:tuple(input_shape)";
    "Fxn:tuple(batch_input_shape)";
    "Fxn:K.floatx()";
    "Fxn:K.dtype(input_tensor)";
    "Fxn:K.placeholder(shape=batch_input_shape,";
    "Fxn:Node(self,";
    "Fxn:get_config";
    "Fxn:Input";
    "Fxn:"""`Input()`";
    "Fxn:Model(input=[a,";
    "Fxn:`shape=(32,)`";
    "Fxn:`batch_shape=(10,";
    "Fxn:`batch_shape=(None,";
    "Fxn:Input(shape=(32,))";
    "Fxn:Dense(16,";
    "Fxn:activation='softmax')(x)";
    "Fxn:Model(x,";
    "Fxn:tuple(shape)";
    "Fxn:K.floatx()";
    "Fxn:InputLayer(batch_input_shape=batch_shape,";
    "Fxn:len(outputs)";
    "class:Container(Layer):";
    "Fxn:__init__";
    "Fxn:self.__class__.__name__.lower()";
    "Fxn:str(K.get_uid(prefix))";
    "Fxn:isinstance(inputs,";
    "Fxn:list(inputs)";
    "Fxn:isinstance(outputs,";
    "Fxn:list(outputs)";
    "Fxn:len(set(self.inputs))";
    "Fxn:len(self.inputs):";
    "Fxn:ValueError('The";
    "Fxn:str(self.inputs))";
    "Fxn:len(set(self.outputs))";
    "Fxn:len(self.outputs):";
    "Fxn:warnings.warn('The";
    "Fxn:str(self.outputs))";
    "Fxn:hasattr(x,";
    "Fxn:TypeError('Input";
    "Fxn:str(x)";
    "Fxn:len(layer._inbound_nodes)";
    "Fxn:warnings.warn(cls_name";
    "Fxn:Input(shape)`.\n'";
    "Fxn:str(x.name))";
    "Fxn:hasattr(x,";
    "Fxn:TypeError('Output";
    "Fxn:str(x))";
    "Fxn:self.output_layers.append(layer)";
    "Fxn:self.output_layers_node_indices.append(node_index)";
    "Fxn:self.output_layers_tensor_indices.append(tensor_index)";
    "Fxn:masks.append(mask)";
    "Fxn:','.join([str(id(x))";
    "Fxn:','.join([str(id(x))";
    "Fxn:masks.append(mask)";
    "Fxn:len(masks)";
    "Fxn:self.input_layers.append(layer)";
    "Fxn:self.input_layers_node_indices.append(node_index)";
    "Fxn:self.input_layers_tensor_indices.append(tensor_index)";
    "Fxn:enumerate(self.input_layers):";
    "Fxn:isinstance(layer,";
    "Fxn:TypeError(";
    "Fxn:`{}`.'.format(inputs,";
    "Fxn:self.input_names.append(layer.name)";
    "Fxn:self._feed_input_names.append(layer.name)";
    "Fxn:self._feed_inputs.append(layer.input)";
    "Fxn:self._feed_input_shapes.append(self.inputs[i]._keras_shape)";
    "Fxn:self.output_names.append(layer.name)";
    "Fxn:set()";
    "Fxn:build_map_of_graph";
    "Fxn:RuntimeError(";
    "Fxn:str(tensor)";
    "Fxn:container_nodes.add(self._node_key(layer,";
    "Fxn:len(layer_indices)";
    "Fxn:nodes_in_progress.add(node)";
    "Fxn:range(len(node.inbound_layers)):";
    "Fxn:build_map_of_graph(x,";
    "Fxn:finished_nodes.add(node)";
    "Fxn:nodes_in_progress.remove(node)";
    "Fxn:nodes_in_decreasing_depth.append(node)";
    "Fxn:set()";
    "Fxn:set()";
    "Fxn:build_map_of_graph(x,";
    "Fxn:reversed(nodes_in_decreasing_depth):";
    "Fxn:nodes_depths.setdefault(node,";
    "Fxn:layers_depths.get(node.outbound_layer,";
    "Fxn:max(depth,";
    "Fxn:range(len(node.inbound_layers)):";
    "Fxn:nodes_depths.get(inbound_node,";
    "Fxn:max(depth";
    "Fxn:nodes_depths.items():";
    "Fxn:nodes_by_depth[depth].append(node)";
    "Fxn:layers_depths.items():";
    "Fxn:layers_by_depth[depth].append(layer)";
    "Fxn:list(layers_by_depth.keys())";
    "Fxn:depth_keys.sort(reverse=True)";
    "Fxn:layers_for_depth.sort(key=lambda";
    "Fxn:layers.append(layer)";
    "Fxn:list(nodes_by_depth.keys())";
    "Fxn:depth_keys.sort(reverse=True)";
    "Fxn:computable_tensors.append(x)";
    "Fxn:RuntimeError(";
    "Fxn:str(x)";
    "Fxn:str(layers_with_complete_input))";
    "Fxn:computable_tensors.append(x)";
    "Fxn:layers_with_complete_input.append(layer.name)";
    "Fxn:all_names.count(name)";
    "Fxn:RuntimeError('The";
    "Fxn:str(all_names.count(name))";
    "Fxn:Node(outbound_layer=self,";
    "Fxn:get_layer";
    "Fxn:len(self.layers)";
    "Fxn:ValueError('Was";
    "Fxn:str(index)";
    "Fxn:str(len(self.layers))";
    "Fxn:ValueError('Provide";
    "Fxn:ValueError('No";
    "Fxn:updates";
    "Fxn:hasattr(layer,";
    "Fxn:enumerate(layer._inbound_nodes):";
    "Fxn:self._node_key(layer,";
    "Fxn:layer.get_updates_for(inputs)";
    "Fxn:layer.get_updates_for(None)";
    "Fxn:losses";
    "Fxn:hasattr(layer,";
    "Fxn:enumerate(layer._inbound_nodes):";
    "Fxn:self._node_key(layer,";
    "Fxn:layer.get_losses_for(inputs)";
    "Fxn:layer.get_losses_for(None)";
    "Fxn:self.get_losses_for(None)";
    "Fxn:list(set(x";
    "Fxn:isinstance(x,";
    "Fxn:isinstance(x,";
    "Fxn:uses_learning_phase";
    "Fxn:any([x._uses_learning_phase";
    "Fxn:stateful";
    "Fxn:any([(hasattr(layer,";
    "Fxn:reset_states";
    "Fxn:hasattr(layer,";
    "Fxn:getattr(layer,";
    "Fxn:layer.reset_states()";
    "Fxn:state_updates";
    "Fxn:trainable_weights";
    "Fxn:non_trainable_weights";
    "Fxn:get_weights";
    "Fxn:K.batch_get_value(weights)";
    "Fxn:set_weights";
    "Fxn:`model.get_weights()`.";
    "Fxn:len(layer.weights)";
    "Fxn:zip(layer.weights,";
    "Fxn:tuples.append((sw,";
    "Fxn:K.batch_set_value(tuples)";
    "Fxn:input_spec";
    "Fxn:getattr(self,";
    "Fxn:specs.append(None)";
    "Fxn:isinstance(layer.input_spec,";
    "Fxn:TypeError('Layer";
    "Fxn:str(layer.input_spec))";
    "Fxn:len(specs)";
    "Fxn:call";
    "Fxn:_to_list(inputs)";
    "Fxn:range(len(inputs))]";
    "Fxn:_to_list(mask)";
    "Fxn:','.join([str(id(x))";
    "Fxn:','.join([str(id(x))";
    "Fxn:self.run_internal_graph(inputs,";
    "Fxn:compute_mask";
    "Fxn:_to_list(inputs)";
    "Fxn:range(len(inputs))]";
    "Fxn:_to_list(mask)";
    "Fxn:','.join([str(id(x))";
    "Fxn:','.join([str(id(x))";
    "Fxn:self.run_internal_graph(inputs,";
    "Fxn:compute_output_shape";
    "Fxn:_to_list(input_shape)";
    "Fxn:len(input_shapes)";
    "Fxn:len(self.input_layers):";
    "Fxn:ValueError('Invalid";
    "Fxn:str(input_shape)";
    "Fxn:str(len(self.input_layers))";
    "Fxn:','.join([str(x)";
    "Fxn:isinstance(output_shapes,";
    "Fxn:len(output_shapes)";
    "Fxn:range(len(input_shapes)):";
    "Fxn:list(self._nodes_by_depth.keys())";
    "Fxn:depth_keys.sort(reverse=True)";
    "Fxn:len(depth_keys)";
    "Fxn:range(len(node.inbound_layers)):";
    "Fxn:input_shapes.append(input_shape)";
    "Fxn:len(input_shapes)";
    "Fxn:layer.compute_output_shape(input_shapes[0])";
    "Fxn:layer.compute_output_shape(input_shapes)";
    "Fxn:_to_list(output_shape)";
    "Fxn:layer._inbound_nodes.index(node)";
    "Fxn:range(len(output_shapes)):";
    "Fxn:range(len(self.output_layers)):";
    "Fxn:output_shape_keys.append(shape_key)";
    "Fxn:enumerate(output_shape_keys):";
    "Fxn:output_shapes.append(layers_to_output_shapes[key])";
    "Fxn:isinstance(output_shapes,";
    "Fxn:len(output_shapes)";
    "Fxn:run_internal_graph";
    "Fxn:range(len(inputs))]";
    "Fxn:`.compute_mask()`";
    "Fxn:zip(self.inputs,";
    "Fxn:tensor_map[str(id(x))]";
    "Fxn:list(self._nodes_by_depth.keys())";
    "Fxn:depth_keys.sort(reverse=True)";
    "Fxn:str(id(x))";
    "Fxn:computed_data.append(tensor_map[str(id(x))])";
    "Fxn:len(computed_data)";
    "Fxn:len(reference_input_tensors):";
    "Fxn:K.name_scope(layer.name):";
    "Fxn:len(computed_data)";
    "Fxn:has_arg(layer.call,";
    "Fxn:_to_list(layer.call(computed_tensor,";
    "Fxn:layer.compute_mask(computed_tensor,";
    "Fxn:_to_list(output_masks)";
    "Fxn:has_arg(layer.call,";
    "Fxn:_to_list(layer.call(computed_tensors,";
    "Fxn:layer.compute_mask(computed_tensors,";
    "Fxn:_to_list(output_masks)";
    "Fxn:hasattr(layer,";
    "Fxn:[layer.activity_regularizer(x)";
    "Fxn:layer.add_loss(regularization_losses,";
    "Fxn:len(output_masks)";
    "Fxn:len(output_tensors):";
    "Fxn:Exception('Layers";
    "Fxn:str(layer.name)";
    "Fxn:str(len(output_tensors))";
    "Fxn:str(len(output_masks))";
    "Fxn:self.add_update(layer.get_updates_for(computed_tensors),";
    "Fxn:self.add_update(layer.get_updates_for(None),";
    "Fxn:self.add_loss(layer.get_losses_for(computed_tensors),";
    "Fxn:self.add_loss(layer.get_losses_for(None),";
    "Fxn:all([hasattr(x,";
    "Fxn:len(computed_tensors)";
    "Fxn:_to_list(layer.compute_output_shape(computed_tensors[0]._keras_shape))";
    "Fxn:_to_list(layer.compute_output_shape([x._keras_shape";
    "Fxn:any([x._uses_learning_phase";
    "Fxn:zip(output_tensors,";
    "Fxn:getattr(x,";
    "Fxn:zip(reference_output_tensors,";
    "Fxn:tensor_map[str(id(x))]";
    "Fxn:str(id(x))";
    "Fxn:str(x)";
    "Fxn:tensor_map[str(id(x))]";
    "Fxn:hasattr(tensor,";
    "Fxn:output_shapes.append(shape)";
    "Fxn:output_tensors.append(tensor)";
    "Fxn:output_masks.append(mask)";
    "Fxn:','.join([str(id(x))";
    "Fxn:','.join([str(id(x))";
    "Fxn:len(output_tensors)";
    "Fxn:len(output_masks)";
    "Fxn:','.join([str(x)";
    "Fxn:len(output_shapes)";
    "Fxn:get_config";
    "Fxn:issubclass(layer.__class__,";
    "Fxn:enumerate(layer._inbound_nodes):";
    "Fxn:self._node_key(layer,";
    "Fxn:layer.get_config()";
    "Fxn:enumerate(layer._inbound_nodes):";
    "Fxn:self._node_key(layer,";
    "Fxn:json.dumps(node.arguments)";
    "Fxn:warnings.warn(";
    "Fxn:str(node.arguments)";
    "Fxn:range(len(node.inbound_layers)):";
    "Fxn:node_conversion_map.get(";
    "Fxn:self._node_key(inbound_layer,";
    "Fxn:node_data.append([inbound_layer.name,";
    "Fxn:filtered_inbound_nodes.append(node_data)";
    "Fxn:layer_configs.append({";
    "Fxn:range(len(self.input_layers)):";
    "Fxn:self._node_key(layer,";
    "Fxn:model_inputs.append([layer.name,";
    "Fxn:range(len(self.output_layers)):";
    "Fxn:self._node_key(layer,";
    "Fxn:model_outputs.append([layer.name,";
    "Fxn:copy.deepcopy(config)";
    "Fxn:from_config";
    "Fxn:`get_config()`).";
    "Fxn:add_unprocessed_node";
    "Fxn:unprocessed_nodes[layer].append(node_data)";
    "Fxn:process_node";
    "Fxn:len(input_data)";
    "Fxn:len(input_data)";
    "Fxn:ValueError('Improperly";
    "Fxn:add_unprocessed_node(layer,";
    "Fxn:len(inbound_layer._inbound_nodes)";
    "Fxn:add_unprocessed_node(layer,";
    "Fxn:input_tensors.append(inbound_node.output_tensors[inbound_tensor_index])";
    "Fxn:len(input_tensors)";
    "Fxn:layer(input_tensors[0],";
    "Fxn:layer(input_tensors,";
    "Fxn:process_layer";
    "Fxn:deserialize_layer(layer_data,";
    "Fxn:A(B(A(B(x)))))";
    "Fxn:add_unprocessed_node(layer,";
    "Fxn:process_layer(layer_data)";
    "Fxn:unprocessed_nodes.pop(layer):";
    "Fxn:process_node(layer,";
    "Fxn:config.get('name')";
    "Fxn:input_tensors.append(layer_output_tensors[tensor_index])";
    "Fxn:output_tensors.append(layer_output_tensors[tensor_index])";
    "Fxn:cls(inputs=input_tensors,";
    "Fxn:save";
    "Fxn:model.save('my_model.h5')";
    "Fxn:load_model('my_model.h5')";
    "Fxn:save_model(self,";
    "Fxn:save_weights";
    "Fxn:ImportError('`save_weights`";
    "Fxn:os.path.isfile(filepath):";
    "Fxn:ask_to_proceed_with_overwrite(filepath)";
    "Fxn:h5py.File(filepath,";
    "Fxn:save_weights_to_hdf5_group(f,";
    "Fxn:f.flush()";
    "Fxn:load_weights";
    "Fxn:ImportError('`load_weights`";
    "Fxn:h5py.File(filepath,";
    "Fxn:load_weights_from_hdf5_group_by_name(";
    "Fxn:load_weights_from_hdf5_group(";
    "Fxn:_updated_config";
    "Fxn:self.get_config()";
    "Fxn:K.backend()";
    "Fxn:to_json";
    "Fxn:`keras.models.model_from_json(json_string,";
    "Fxn:`json.dumps()`.";
    "Fxn:get_json_type";
    "Fxn:type(obj).__module__";
    "Fxn:obj.item()";
    "Fxn:type(obj).__name__";
    "Fxn:TypeError('Not";
    "Fxn:self._updated_config()";
    "Fxn:json.dumps(model_config,";
    "Fxn:to_yaml";
    "Fxn:`keras.models.model_from_yaml(yaml_string,";
    "Fxn:`yaml.dump()`.";
    "Fxn:yaml.dump(self._updated_config(),";
    "Fxn:summary";
    "Fxn:print_layer_summary(self,";
    "Fxn:get_source_inputs";
    "Fxn:hasattr(tensor,";
    "Fxn:range(len(node.inbound_layers)):";
    "Fxn:get_source_inputs(x,";
    "Fxn:source_tensors.append(x)";
    "Fxn:_to_list";
    "Fxn:isinstance(x,";
    "Fxn:_object_list_uid";
    "Fxn:_to_list(object_list)";
    "Fxn:'.join([str(abs(id(x)))";
    "Fxn:_is_all_none";
    "Fxn:isinstance(iterable_or_element,";
    "Fxn:_collect_previous_mask";
    "Fxn:mask(s)";
    "Fxn:_to_list(input_tensors)";
    "Fxn:hasattr(x,";
    "Fxn:masks.append(mask)";
    "Fxn:masks.append(None)";
    "Fxn:len(masks)";
    "Fxn:_to_snake_case";
    "Fxn:re.sub('(.)([A-Z][a-z0-9]+)',";
    "Fxn:re.sub('([a-z])([A-Z])',";
    "Fxn:intermediate).lower()";
    "Fxn:_collect_input_shape";
    "Fxn:shape(s)";
    "Fxn:_to_list(input_tensors)";
    "Fxn:shapes.append(K.int_shape(x))";
    "Fxn:shapes.append(None)";
    "Fxn:len(shapes)";
    "Fxn:_save_attributes_to_hdf5_group";
    "Fxn:len(x)";
    "Fxn:len(bad_attributes)";
    "Fxn:RuntimeError('The";
    "Fxn:'.join([x";
    "Fxn:np.asarray(data)";
    "Fxn:np.array_split(data_npy,";
    "Fxn:any(map(lambda";
    "Fxn:np.array_split(data_npy,";
    "Fxn:enumerate(chunked_data):";
    "Fxn:_load_attributes_from_hdf5_group";
    "Fxn:[n.decode('utf8')";
    "Fxn:data.extend([n.decode('utf8')";
    "Fxn:save_weights_to_hdf5_group";
    "Fxn:_save_attributes_to_hdf5_group(";
    "Fxn:[layer.name.encode('utf8')";
    "Fxn:K.backend().encode('utf8')";
    "Fxn:str(keras_version).encode('utf8')";
    "Fxn:f.create_group(layer.name)";
    "Fxn:K.batch_get_value(symbolic_weights)";
    "Fxn:enumerate(zip(symbolic_weights,";
    "Fxn:hasattr(w,";
    "Fxn:str(w.name)";
    "Fxn:str(i)";
    "Fxn:weight_names.append(name.encode('utf8'))";
    "Fxn:_save_attributes_to_hdf5_group(g,";
    "Fxn:zip(weight_names,";
    "Fxn:g.create_dataset(name,";
    "Fxn:param_dset[()]";
    "Fxn:preprocess_weights_for_loading";
    "Fxn:len(weights)";
    "Fxn:preprocess_weights_for_loading(layer.forward_layer,";
    "Fxn:preprocess_weights_for_loading(layer.backward_layer,";
    "Fxn:preprocess_weights_for_loading(layer.layer,";
    "Fxn:np.transpose(weights[0],";
    "Fxn:np.transpose(weights[0],";
    "Fxn:np.transpose(weights[0],";
    "Fxn:np.transpose(weights[0],";
    "Fxn:np.transpose(weights[0],";
    "Fxn:len(weights)";
    "Fxn:np.concatenate([weights[0],";
    "Fxn:np.concatenate([weights[1],";
    "Fxn:np.concatenate([weights[2],";
    "Fxn:len(weights)";
    "Fxn:np.concatenate([weights[0],";
    "Fxn:np.concatenate([weights[1],";
    "Fxn:np.concatenate([weights[2],";
    "Fxn:len(weights)";
    "Fxn:np.concatenate([weights[0],";
    "Fxn:np.concatenate([weights[1],";
    "Fxn:np.concatenate([weights[2],";
    "Fxn:np.transpose(kernel,";
    "Fxn:np.transpose(recurrent_kernel,";
    "Fxn:len(sublayer.trainable_weights)";
    "Fxn:new_weights.extend(preprocess_weights_for_loading(";
    "Fxn:len([l";
    "Fxn:new_weights.extend(preprocess_weights_for_loading(";
    "Fxn:K.int_shape(layer.weights[0])";
    "Fxn:_need_convert_kernel(original_backend):";
    "Fxn:conv_utils.convert_kernel(weights[0])";
    "Fxn:conv_utils.convert_kernel(weights[1])";
    "Fxn:np.prod(layer_weights_shape):";
    "Fxn:ValueError('Weights";
    "Fxn:str(layer_weights_shape)";
    "Fxn:str(np.prod(layer_weights_shape))";
    "Fxn:str(weights[0].shape)";
    "Fxn:str(weights[0].size)";
    "Fxn:np.reshape(weights[0],";
    "Fxn:np.transpose(weights[0],";
    "Fxn:np.transpose(weights[1],";
    "Fxn:_convert_rnn_weights(layer,";
    "Fxn:_convert_rnn_weights";
    "Fxn:`GRU(reset_after=True)`.";
    "Fxn:transform_kernels";
    "Fxn:np.hstack([func(k)";
    "Fxn:np.hsplit(kernels,";
    "Fxn:transpose_input";
    "Fxn:`transform_kernels()`.";
    "Fxn:transform";
    "Fxn:kernel.T.reshape(kernel.shape,";
    "Fxn:len(weights)";
    "Fxn:ValueError('Invalid";
    "Fxn:str(bias_shape))";
    "Fxn:convert_weights";
    "Fxn:transform_kernels(weights[0],";
    "Fxn:transpose_input(from_cudnn),";
    "Fxn:transform_kernels(weights[1],";
    "Fxn:np.sum(np.split(weights[2],";
    "Fxn:np.tile(0.5";
    "Fxn:convert_weights(weights,";
    "Fxn:GRU(reset_after=True)";
    "Fxn:len(weights)";
    "Fxn:convert_weights";
    "Fxn:transform_kernels(weights[0],";
    "Fxn:transpose_input(from_cudnn),";
    "Fxn:transform_kernels(weights[1],";
    "Fxn:weights[2].reshape((2,";
    "Fxn:'GRU(reset_after=True)'";
    "Fxn:'GRU(reset_after=False)'";
    "Fxn:ValueError('Invalid";
    "Fxn:str(bias_shape))";
    "Fxn:'GRU(reset_after=True)'";
    "Fxn:'GRU(reset_after=False)'";
    "Fxn:'GRU(reset_after=False)'";
    "Fxn:ValueError('%s";
    "Fxn:convert_weights(weights,";
    "Fxn:'GRU(reset_after=True)':";
    "Fxn:convert_weights(weights,";
    "Fxn:_need_convert_kernel";
    "Fxn:uses_correlation[K.backend()]";
    "Fxn:load_weights_from_hdf5_group";
    "Fxn:f.attrs['keras_version'].decode('utf8')";
    "Fxn:f.attrs['backend'].decode('utf8')";
    "Fxn:filtered_layers.append(layer)";
    "Fxn:_load_attributes_from_hdf5_group(f,";
    "Fxn:_load_attributes_from_hdf5_group(g,";
    "Fxn:filtered_layer_names.append(name)";
    "Fxn:len(layer_names)";
    "Fxn:len(filtered_layers):";
    "Fxn:ValueError('You";
    "Fxn:str(len(layer_names))";
    "Fxn:str(len(filtered_layers))";
    "Fxn:enumerate(layer_names):";
    "Fxn:_load_attributes_from_hdf5_group(g,";
    "Fxn:preprocess_weights_for_loading(layer,";
    "Fxn:len(weight_values)";
    "Fxn:len(symbolic_weights):";
    "Fxn:ValueError('Layer";
    "Fxn:str(k)";
    "Fxn:str(len(symbolic_weights))";
    "Fxn:str(len(weight_values))";
    "Fxn:zip(symbolic_weights,";
    "Fxn:K.batch_set_value(weight_value_tuples)";
    "Fxn:load_weights_from_hdf5_group_by_name";
    "Fxn:f.attrs['keras_version'].decode('utf8')";
    "Fxn:f.attrs['backend'].decode('utf8')";
    "Fxn:_load_attributes_from_hdf5_group(f,";
    "Fxn:index.setdefault(layer.name,";
    "Fxn:[]).append(layer)";
    "Fxn:enumerate(layer_names):";
    "Fxn:_load_attributes_from_hdf5_group(g,";
    "Fxn:index.get(name,";
    "Fxn:preprocess_weights_for_loading(";
    "Fxn:len(weight_values)";
    "Fxn:len(symbolic_weights):";
    "Fxn:warnings.warn('Skipping";
    "Fxn:{}'.format(layer.name)";
    "Fxn:{}).'.format(len(symbolic_weights),";
    "Fxn:len(weight_values)))";
    "Fxn:ValueError('Layer";
    "Fxn:str(k)";
    "Fxn:str(len(symbolic_weights))";
    "Fxn:weight(s),";
    "Fxn:str(len(weight_values))";
    "Fxn:element(s).')";
    "Fxn:range(len(weight_values)):";
    "Fxn:K.int_shape(symbolic_weights[i])";
    "Fxn:warnings.warn('Skipping";
    "Fxn:{}'.format(layer.name)";
    "Fxn:{}).'.format(";
    "Fxn:weight_value_tuples.append((symbolic_weights[i],";
    "Fxn:K.batch_set_value(weight_value_tuples)";
    "Import:deserialize";
    "Import:load_model";
    "Import:save_model";
    "Import:__version__";
    "Import:__version__";
    "/keras/engine/training.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:warnings";
    "Import:copy";
    "Import:numpy";
    "Import:issparse";
    "Import:Container";
    "Import:Layer";
    "Import:backend";
    "Import:optimizers";
    "Import:losses";
    "Import:metrics";
    "Import:Sequence";
    "Import:GeneratorEnqueuer";
    "Import:OrderedEnqueuer";
    "Import:Progbar";
    "Import:callbacks";
    "Import:interfaces";
    "Fxn:_standardize_input_data";
    "Fxn:_standardize_sample_or_class_weights";
    "Fxn:_standardize_class_weights";
    "Fxn:_standardize_sample_weights";
    "Fxn:_check_array_lengths";
    "Fxn:set_of_lengths";
    "Fxn:_check_loss_and_target_compatibility";
    "Import:to_categorical\n'";
    "Fxn:_collect_metrics";
    "Fxn:_batch_shuffle";
    "Fxn:_make_batches";
    "Fxn:_slice_arrays";
    "Fxn:_weighted_masked_objective";
    "Fxn:weighted";
    "Fxn:_standardize_weights";
    "class:Model(Container):";
    "Fxn:compile";
    "Fxn:[optimizers](/optimizers).";
    "Fxn:[losses](/losses).";
    "Fxn:optimizers.get(optimizer)";
    "Fxn:isinstance(loss,";
    "Fxn:ValueError('Unknown";
    "Fxn:str(self.output_names))";
    "Fxn:warnings.warn('Output";
    "Fxn:loss_functions.append(losses.get(loss.get(name)))";
    "Fxn:isinstance(loss,";
    "Fxn:len(loss)";
    "Fxn:len(self.outputs):";
    "Fxn:ValueError('When";
    "Fxn:str(len(self.outputs))";
    "Fxn:str(loss))";
    "Fxn:[losses.get(l)";
    "Fxn:losses.get(loss)";
    "Fxn:range(len(self.outputs))]";
    "Fxn:[_weighted_masked_objective(fn)";
    "Fxn:range(len(weighted_losses)):";
    "Fxn:skip_target_indices.append(i)";
    "Fxn:skip_target_weighing_indices.append(i)";
    "Fxn:self.compute_mask(self.inputs,";
    "Fxn:isinstance(masks,";
    "Fxn:range(len(self.outputs))]";
    "Fxn:isinstance(loss_weights,";
    "Fxn:ValueError('Unknown";
    "Fxn:str(self.output_names))";
    "Fxn:loss_weights_list.append(loss_weights.get(name,";
    "Fxn:isinstance(loss_weights,";
    "Fxn:len(loss_weights)";
    "Fxn:len(self.outputs):";
    "Fxn:ValueError('When";
    "Fxn:str(len(self.outputs))";
    "Fxn:str(loss_weights))";
    "Fxn:TypeError('Could";
    "Fxn:str(loss_weights)";
    "Fxn:isinstance(target_tensors,";
    "Fxn:len(target_tensors)";
    "Fxn:len(self.outputs):";
    "Fxn:ValueError(";
    "Fxn:str(len(self.outputs))";
    "Fxn:str(target_tensors))";
    "Fxn:isinstance(target_tensors,";
    "Fxn:ValueError('Unknown";
    "Fxn:str(self.output_names))";
    "Fxn:tmp_target_tensors.append(target_tensors.get(name,";
    "Fxn:TypeError('Expected";
    "Fxn:range(len(self.outputs)):";
    "Fxn:self.targets.append(None)";
    "Fxn:K.is_placeholder(target):";
    "Fxn:K.placeholder(ndim=len(shape),";
    "Fxn:sparse=K.is_sparse(self.outputs[i]),";
    "Fxn:dtype=K.dtype(self.outputs[i]))";
    "Fxn:self._feed_targets.append(target)";
    "Fxn:self._feed_outputs.append(self.outputs[i])";
    "Fxn:self._feed_output_names.append(name)";
    "Fxn:self._feed_output_shapes.append(shape)";
    "Fxn:self._feed_loss_fns.append(self.loss_functions[i])";
    "Fxn:skip_target_weighing_indices.append(i)";
    "Fxn:self.targets.append(target)";
    "Fxn:isinstance(sample_weight_mode,";
    "Fxn:ValueError('Unknown";
    "Fxn:str(self.output_names))";
    "Fxn:enumerate(self.output_names):";
    "Fxn:sample_weight_modes.append(None)";
    "Fxn:ValueError('Output";
    "Fxn:sample_weight_mode.get(name)";
    "Fxn:K.placeholder(ndim=2,";
    "Fxn:sample_weight_modes.append('temporal')";
    "Fxn:K.placeholder(ndim=1,";
    "Fxn:sample_weight_modes.append(None)";
    "Fxn:sample_weights.append(weight)";
    "Fxn:isinstance(sample_weight_mode,";
    "Fxn:len(sample_weight_mode)";
    "Fxn:len(self.outputs):";
    "Fxn:ValueError('When";
    "Fxn:str(len(self.outputs))";
    "Fxn:str(sample_weight_mode))";
    "Fxn:range(len(self.output_names)):";
    "Fxn:sample_weight_modes.append(None)";
    "Fxn:K.placeholder(ndim=2,";
    "Fxn:sample_weight_modes.append('temporal')";
    "Fxn:K.placeholder(ndim=1,";
    "Fxn:sample_weight_modes.append(None)";
    "Fxn:sample_weights.append(weight)";
    "Fxn:enumerate(self.output_names):";
    "Fxn:sample_weight_modes.append(None)";
    "Fxn:sample_weights.append(None)";
    "Fxn:sample_weights.append(";
    "Fxn:K.placeholder(ndim=2,";
    "Fxn:sample_weight_modes.append('temporal')";
    "Fxn:sample_weights.append(";
    "Fxn:K.placeholder(ndim=1,";
    "Fxn:sample_weight_modes.append(None)";
    "Fxn:range(len(self.outputs)):";
    "Fxn:self._feed_sample_weight_modes.append(self.sample_weight_modes[i])";
    "Fxn:K.name_scope('loss'):";
    "Fxn:range(len(self.outputs)):";
    "Fxn:K.name_scope(self.output_names[i]";
    "Fxn:weighted_loss(y_true,";
    "Fxn:len(self.outputs)";
    "Fxn:self.metrics_tensors.append(output_loss)";
    "Fxn:self.metrics_names.append(self.output_names[i]";
    "Fxn:ValueError('The";
    "Fxn:_collect_metrics(metrics,";
    "Fxn:_collect_metrics(weighted_metrics,";
    "Fxn:K.name_scope('metrics'):";
    "Fxn:range(len(self.outputs)):";
    "Fxn:handle_metrics";
    "Fxn:_check_trainable_weights_consistency";
    "Fxn:hasattr(self,";
    "Fxn:len(self._collected_trainable_weights)):";
    "Fxn:warnings.warn(UserWarning(";
    "Fxn:_make_train_function";
    "Fxn:hasattr(self,";
    "Fxn:RuntimeError('You";
    "Fxn:self._check_trainable_weights_consistency()";
    "Fxn:isinstance(K.learning_phase(),";
    "Fxn:[K.learning_phase()]";
    "Fxn:K.name_scope('training'):";
    "Fxn:K.name_scope(self.optimizer.__class__.__name__):";
    "Fxn:self.optimizer.get_updates(";
    "Fxn:K.function(inputs,";
    "Fxn:_make_test_function";
    "Fxn:hasattr(self,";
    "Fxn:RuntimeError('You";
    "Fxn:isinstance(K.learning_phase(),";
    "Fxn:[K.learning_phase()]";
    "Fxn:K.function(inputs,";
    "Fxn:_make_predict_function";
    "Fxn:hasattr(self,";
    "Fxn:isinstance(K.learning_phase(),";
    "Fxn:[K.learning_phase()]";
    "Fxn:getattr(self,";
    "Fxn:K.function(inputs,";
    "Fxn:_check_num_samples";
    "Fxn:ValueError('If";
    "Fxn:hasattr(ins[0],";
    "Fxn:ValueError('Either";
    "Fxn:_fit_loop";
    "Fxn:`f(ins)`.";
    "Fxn:hasattr(ins[0],";
    "Fxn:hasattr(val_ins[0],";
    "Fxn:print('Train";
    "Fxn:ValueError('Can";
    "Fxn:self._check_num_samples(ins,";
    "Fxn:np.arange(num_train_samples)";
    "Fxn:cbks.History()";
    "Fxn:[cbks.BaseLogger(";
    "Fxn:_callbacks.append(";
    "Fxn:cbks.ProgbarLogger(";
    "Fxn:cbks.CallbackList(_callbacks)";
    "Fxn:hasattr(self,";
    "Fxn:callbacks.set_model(callback_model)";
    "Fxn:callbacks.set_params({";
    "Fxn:callbacks.on_train_begin()";
    "Fxn:range(len(feed)):";
    "Fxn:issparse(ins[i])";
    "Fxn:K.is_sparse(feed[i]):";
    "Fxn:indices_for_conversion_to_dense.append(i)";
    "Fxn:range(initial_epoch,";
    "Fxn:isinstance(m,";
    "Fxn:m.reset_states()";
    "Fxn:callbacks.on_epoch_begin(epoch)";
    "Fxn:range(steps_per_epoch):";
    "Fxn:callbacks.on_batch_begin(step_index,";
    "Fxn:f(ins)";
    "Fxn:isinstance(outs,";
    "Fxn:zip(out_labels,";
    "Fxn:callbacks.on_batch_end(step_index,";
    "Fxn:self._test_loop(val_f,";
    "Fxn:isinstance(val_outs,";
    "Fxn:zip(out_labels,";
    "Fxn:_batch_shuffle(index_array,";
    "Fxn:np.random.shuffle(index_array)";
    "Fxn:_make_batches(num_train_samples,";
    "Fxn:enumerate(batches):";
    "Fxn:isinstance(ins[-1],";
    "Fxn:_slice_arrays(ins[:-1],";
    "Fxn:_slice_arrays(ins,";
    "Fxn:TypeError('TypeError";
    "Fxn:len(batch_ids)";
    "Fxn:callbacks.on_batch_begin(batch_index,";
    "Fxn:ins_batch[i].toarray()";
    "Fxn:f(ins_batch)";
    "Fxn:isinstance(outs,";
    "Fxn:zip(out_labels,";
    "Fxn:callbacks.on_batch_end(batch_index,";
    "Fxn:len(batches)";
    "Fxn:self._test_loop(val_f,";
    "Fxn:isinstance(val_outs,";
    "Fxn:zip(out_labels,";
    "Fxn:callbacks.on_epoch_end(epoch,";
    "Fxn:callbacks.on_train_end()";
    "Fxn:_predict_loop";
    "Fxn:self._check_num_samples(ins,";
    "Fxn:Progbar(target=steps)";
    "Fxn:Progbar(target=num_samples)";
    "Fxn:range(len(self._feed_inputs)):";
    "Fxn:issparse(ins[i])";
    "Fxn:K.is_sparse(self._feed_inputs[i]):";
    "Fxn:indices_for_conversion_to_dense.append(i)";
    "Fxn:range(steps):";
    "Fxn:f(ins)";
    "Fxn:isinstance(batch_outs,";
    "Fxn:unconcatenated_outs.append([])";
    "Fxn:enumerate(batch_outs):";
    "Fxn:unconcatenated_outs[i].append(batch_out)";
    "Fxn:progbar.update(step";
    "Fxn:len(unconcatenated_outs)";
    "Fxn:np.concatenate(unconcatenated_outs[0],";
    "Fxn:[np.concatenate(unconcatenated_outs[i],";
    "Fxn:range(len(unconcatenated_outs))]";
    "Fxn:_make_batches(num_samples,";
    "Fxn:np.arange(num_samples)";
    "Fxn:enumerate(batches):";
    "Fxn:isinstance(ins[-1],";
    "Fxn:_slice_arrays(ins[:-1],";
    "Fxn:_slice_arrays(ins,";
    "Fxn:ins_batch[i].toarray()";
    "Fxn:f(ins_batch)";
    "Fxn:isinstance(batch_outs,";
    "Fxn:outs.append(np.zeros(shape,";
    "Fxn:enumerate(batch_outs):";
    "Fxn:progbar.update(batch_end)";
    "Fxn:len(outs)";
    "Fxn:_test_loop";
    "Fxn:hasattr(self,";
    "Fxn:isinstance(m,";
    "Fxn:m.reset_states()";
    "Fxn:enumerate(self.metrics_names)";
    "Fxn:str(name)";
    "Fxn:self._check_num_samples(ins,";
    "Fxn:Progbar(target=steps)";
    "Fxn:Progbar(target=num_samples)";
    "Fxn:range(len(feed)):";
    "Fxn:issparse(ins[i])";
    "Fxn:K.is_sparse(feed[i]):";
    "Fxn:indices_for_conversion_to_dense.append(i)";
    "Fxn:range(steps):";
    "Fxn:f(ins)";
    "Fxn:isinstance(batch_outs,";
    "Fxn:enumerate(batch_outs):";
    "Fxn:outs.append(0.)";
    "Fxn:enumerate(batch_outs):";
    "Fxn:outs.append(0.)";
    "Fxn:progbar.update(step";
    "Fxn:range(len(outs)):";
    "Fxn:_make_batches(num_samples,";
    "Fxn:np.arange(num_samples)";
    "Fxn:enumerate(batches):";
    "Fxn:isinstance(ins[-1],";
    "Fxn:_slice_arrays(ins[:-1],";
    "Fxn:_slice_arrays(ins,";
    "Fxn:ins_batch[i].toarray()";
    "Fxn:f(ins_batch)";
    "Fxn:isinstance(batch_outs,";
    "Fxn:enumerate(batch_outs):";
    "Fxn:outs.append(0.)";
    "Fxn:enumerate(batch_outs):";
    "Fxn:len(batch_ids)";
    "Fxn:outs.append(0.)";
    "Fxn:len(batch_ids)";
    "Fxn:progbar.update(batch_end)";
    "Fxn:range(len(outs)):";
    "Fxn:len(outs)";
    "Fxn:_standardize_user_data";
    "Fxn:hasattr(self,";
    "Fxn:RuntimeError('You";
    "Fxn:`model.compile(optimizer,";
    "Fxn:zip(self._feed_output_shapes,";
    "Fxn:output_shapes.append(output_shape[:-1]";
    "Fxn:hasattr(loss_fn,";
    "Fxn:getattr(losses,";
    "Fxn:output_shapes.append(None)";
    "Fxn:output_shapes.append(output_shape)";
    "Fxn:_standardize_input_data(x,";
    "Fxn:_standardize_input_data(y,";
    "Fxn:_standardize_sample_weights(sample_weight,";
    "Fxn:_standardize_class_weights(class_weight,";
    "Fxn:[_standardize_weights(ref,";
    "Fxn:zip(y,";
    "Fxn:_check_array_lengths(x,";
    "Fxn:_check_loss_and_target_compatibility(y,";
    "Fxn:ValueError('In";
    "Fxn:str(x[0].shape[0])";
    "Fxn:fit";
    "Fxn:[callbacks](/callbacks).";
    "Fxn:`(x_val,";
    "Fxn:`(x_val,";
    "Fxn:evaluate";
    "Fxn:`(samples,";
    "Fxn:`compile()`.";
    "Fxn:ValueError('If";
    "Fxn:self._standardize_user_data(";
    "Fxn:isinstance(K.learning_phase(),";
    "Fxn:self._make_test_function()";
    "Fxn:self._test_loop(f,";
    "Fxn:predict";
    "Fxn:array(s)";
    "Fxn:ValueError('If";
    "Fxn:_standardize_input_data(x,";
    "Fxn:ValueError('In";
    "Fxn:str(x[0].shape[0])";
    "Fxn:str(batch_size)";
    "Fxn:isinstance(K.learning_phase(),";
    "Fxn:self._make_predict_function()";
    "Fxn:self._predict_loop(f,";
    "Fxn:train_on_batch";
    "Fxn:compile().";
    "Fxn:test_on_batch";
    "Fxn:compile().";
    "Fxn:self._standardize_user_data(";
    "Fxn:isinstance(K.learning_phase(),";
    "Fxn:self._make_test_function()";
    "Fxn:self.test_function(ins)";
    "Fxn:len(outputs)";
    "Fxn:predict_on_batch";
    "Fxn:array(s)";
    "Fxn:_standardize_input_data(x,";
    "Fxn:isinstance(K.learning_phase(),";
    "Fxn:self._make_predict_function()";
    "Fxn:self.predict_function(ins)";
    "Fxn:len(outputs)";
    "Fxn:fit_generator";
    "Fxn:`(inputs,";
    "Fxn:`(inputs,";
    "Fxn:`len(generator)`";
    "Fxn:[callbacks](/callbacks).";
    "Fxn:`(x_val,";
    "Fxn:`(x_val,";
    "Fxn:`len(validation_data)`";
    "Fxn:generate_arrays_from_file";
    "Fxn:open(path)";
    "Fxn:process_line(line)";
    "Fxn:model.fit_generator(generate_arrays_from_file('/my_file.txt'),";
    "Fxn:bool(validation_data)";
    "Fxn:self._make_train_function()";
    "Fxn:self._make_test_function()";
    "Fxn:isinstance(generator,";
    "Fxn:warnings.warn(";
    "Fxn:UserWarning('Using";
    "Fxn:len(generator)";
    "Fxn:ValueError('`steps_per_epoch=None`";
    "Fxn:hasattr(validation_data,";
    "Fxn:isinstance(validation_data,";
    "Fxn:isinstance(validation_data,";
    "Fxn:ValueError('`validation_steps=None`";
    "Fxn:cbks.History()";
    "Fxn:[cbks.BaseLogger(";
    "Fxn:_callbacks.append(";
    "Fxn:cbks.ProgbarLogger(";
    "Fxn:cbks.CallbackList(_callbacks)";
    "Fxn:hasattr(self,";
    "Fxn:callbacks.set_model(callback_model)";
    "Fxn:callbacks.set_params({";
    "Fxn:callbacks.on_train_begin()";
    "Fxn:len(validation_data)";
    "Fxn:len(validation_data)";
    "Fxn:ValueError('`validation_data`";
    "Fxn:'`(val_x,";
    "Fxn:`(val_x,";
    "Fxn:str(validation_data))";
    "Fxn:self._standardize_user_data(";
    "Fxn:isinstance(K.learning_phase(),";
    "Fxn:OrderedEnqueuer(generator,";
    "Fxn:GeneratorEnqueuer(generator,";
    "Fxn:enqueuer.start(workers=workers,";
    "Fxn:enqueuer.get()";
    "Fxn:iter(generator)";
    "Fxn:callbacks.on_epoch_begin(epoch)";
    "Fxn:next(output_generator)";
    "Fxn:hasattr(generator_output,";
    "Fxn:ValueError('Output";
    "Fxn:`(x,";
    "Fxn:`(x,";
    "Fxn:str(generator_output))";
    "Fxn:len(generator_output)";
    "Fxn:len(generator_output)";
    "Fxn:ValueError('Output";
    "Fxn:`(x,";
    "Fxn:`(x,";
    "Fxn:str(generator_output))";
    "Fxn:isinstance(x,";
    "Fxn:isinstance(x,";
    "Fxn:list(x.values())[0].shape[0]";
    "Fxn:callbacks.on_batch_begin(batch_index,";
    "Fxn:self.train_on_batch(x,";
    "Fxn:isinstance(outs,";
    "Fxn:zip(out_labels,";
    "Fxn:callbacks.on_batch_end(batch_index,";
    "Fxn:self.evaluate_generator(";
    "Fxn:self.evaluate(";
    "Fxn:isinstance(val_outs,";
    "Fxn:zip(out_labels,";
    "Fxn:callbacks.on_epoch_end(epoch,";
    "Fxn:enqueuer.stop()";
    "Fxn:val_enqueuer.stop()";
    "Fxn:callbacks.on_train_end()";
    "Fxn:evaluate_generator";
    "Fxn:`len(generator)`";
    "Fxn:self._make_test_function()";
    "Fxn:isinstance(generator,";
    "Fxn:warnings.warn(";
    "Fxn:UserWarning('Using";
    "Fxn:len(generator)";
    "Fxn:ValueError('`steps=None`";
    "Fxn:OrderedEnqueuer(generator,";
    "Fxn:GeneratorEnqueuer(generator,";
    "Fxn:enqueuer.start(workers=workers,";
    "Fxn:enqueuer.get()";
    "Fxn:iter(generator)";
    "Fxn:next(output_generator)";
    "Fxn:hasattr(generator_output,";
    "Fxn:ValueError('Output";
    "Fxn:'(x,";
    "Fxn:str(generator_output))";
    "Fxn:len(generator_output)";
    "Fxn:len(generator_output)";
    "Fxn:ValueError('Output";
    "Fxn:'(x,";
    "Fxn:str(generator_output))";
    "Fxn:self.test_on_batch(x,";
    "Fxn:isinstance(x,";
    "Fxn:isinstance(x,";
    "Fxn:list(x.values())[0].shape[0]";
    "Fxn:ValueError('Received";
    "Fxn:all_outs.append(outs)";
    "Fxn:batch_sizes.append(batch_size)";
    "Fxn:enqueuer.stop()";
    "Fxn:isinstance(outs,";
    "Fxn:np.average(np.asarray(all_outs),";
    "Fxn:range(len(outs)):";
    "Fxn:averages.append(np.average([out[i]";
    "Fxn:predict_generator";
    "Fxn:`len(generator)`";
    "Fxn:array(s)";
    "Fxn:self._make_predict_function()";
    "Fxn:isinstance(generator,";
    "Fxn:warnings.warn(";
    "Fxn:UserWarning('Using";
    "Fxn:len(generator)";
    "Fxn:ValueError('`steps=None`";
    "Fxn:OrderedEnqueuer(generator,";
    "Fxn:GeneratorEnqueuer(generator,";
    "Fxn:enqueuer.start(workers=workers,";
    "Fxn:enqueuer.get()";
    "Fxn:iter(generator)";
    "Fxn:Progbar(target=steps)";
    "Fxn:next(output_generator)";
    "Fxn:isinstance(generator_output,";
    "Fxn:len(generator_output)";
    "Fxn:len(generator_output)";
    "Fxn:ValueError('Output";
    "Fxn:`(x,";
    "Fxn:`(x,";
    "Fxn:str(generator_output))";
    "Fxn:self.predict_on_batch(x)";
    "Fxn:isinstance(outs,";
    "Fxn:all_outs.append([])";
    "Fxn:enumerate(outs):";
    "Fxn:all_outs[i].append(out)";
    "Fxn:progbar.update(steps_done)";
    "Fxn:enqueuer.stop()";
    "Fxn:len(all_outs)";
    "Fxn:np.concatenate(all_outs[0])";
    "Fxn:[np.concatenate(out)";
    "/keras/engine/__init__.py";
    "Import:InputSpec";
    "Import:Input";
    "Import:InputLayer";
    "Import:Layer";
    "Import:get_source_inputs";
    "Import:Model";
    "/keras/layers/advanced_activations.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:activations";
    "Import:initializers";
    "Import:regularizers";
    "Import:constraints";
    "Import:Layer";
    "Import:InputSpec";
    "Import:backend";
    "Import:interfaces";
    "class:LeakyReLU(Layer):";
    "Fxn:__init__";
    "Fxn:super(LeakyReLU,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:K.cast_to_floatx(alpha)";
    "Fxn:call";
    "Fxn:K.relu(inputs,";
    "Fxn:get_config";
    "Fxn:float(self.alpha)}";
    "Fxn:super(LeakyReLU,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Fxn:compute_output_shape";
    "class:PReLU(Layer):";
    "Fxn:__init__";
    "Fxn:super(PReLU,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:initializers.get(alpha_initializer)";
    "Fxn:regularizers.get(alpha_regularizer)";
    "Fxn:constraints.get(alpha_constraint)";
    "Fxn:isinstance(shared_axes,";
    "Fxn:list(shared_axes)";
    "Fxn:build";
    "Fxn:list(input_shape[1:])";
    "Fxn:len(param_shape)";
    "Fxn:self.add_weight(shape=param_shape,";
    "Fxn:range(1,";
    "Fxn:len(input_shape)):";
    "Fxn:InputSpec(ndim=len(input_shape),";
    "Fxn:call";
    "Fxn:K.relu(inputs)";
    "Fxn:K.backend()";
    "Fxn:K.abs(inputs))";
    "Fxn:K.relu(-inputs)";
    "Fxn:get_config";
    "Fxn:initializers.serialize(self.alpha_initializer),";
    "Fxn:regularizers.serialize(self.alpha_regularizer),";
    "Fxn:constraints.serialize(self.alpha_constraint),";
    "Fxn:super(PReLU,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Fxn:compute_output_shape";
    "class:ELU(Layer):";
    "Fxn:__init__";
    "Fxn:super(ELU,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:K.cast_to_floatx(alpha)";
    "Fxn:call";
    "Fxn:K.elu(inputs,";
    "Fxn:get_config";
    "Fxn:float(self.alpha)}";
    "Fxn:super(ELU,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Fxn:compute_output_shape";
    "class:ThresholdedReLU(Layer):";
    "Fxn:__init__";
    "Fxn:super(ThresholdedReLU,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:K.cast_to_floatx(theta)";
    "Fxn:call";
    "Fxn:K.cast(K.greater(inputs,";
    "Fxn:K.floatx())";
    "Fxn:get_config";
    "Fxn:float(self.theta)}";
    "Fxn:super(ThresholdedReLU,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Fxn:compute_output_shape";
    "class:Softmax(Layer):";
    "Fxn:__init__";
    "Fxn:super(Softmax,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:call";
    "Fxn:activations.softmax(inputs,";
    "Fxn:get_config";
    "Fxn:super(Softmax,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Fxn:compute_output_shape";
    "/keras/layers/convolutional.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:backend";
    "Import:activations";
    "Import:initializers";
    "Import:regularizers";
    "Import:constraints";
    "Import:Layer";
    "Import:InputSpec";
    "Import:conv_utils";
    "Import:interfaces";
    "Import:AveragePooling1D";
    "Import:AveragePooling2D";
    "Import:AveragePooling3D";
    "Import:MaxPooling1D";
    "Import:MaxPooling2D";
    "Import:MaxPooling3D";
    "Import:AtrousConvolution1D";
    "Import:AtrousConvolution2D";
    "class:_Conv(Layer):";
    "Fxn:__init__";
    "Fxn:super(_Conv,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:conv_utils.normalize_tuple(kernel_size,";
    "Fxn:conv_utils.normalize_tuple(strides,";
    "Fxn:conv_utils.normalize_padding(padding)";
    "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:conv_utils.normalize_tuple(dilation_rate,";
    "Fxn:activations.get(activation)";
    "Fxn:initializers.get(kernel_initializer)";
    "Fxn:initializers.get(bias_initializer)";
    "Fxn:regularizers.get(kernel_regularizer)";
    "Fxn:regularizers.get(bias_regularizer)";
    "Fxn:regularizers.get(activity_regularizer)";
    "Fxn:constraints.get(kernel_constraint)";
    "Fxn:constraints.get(bias_constraint)";
    "Fxn:InputSpec(ndim=self.rank";
    "Fxn:build";
    "Fxn:ValueError('The";
    "Fxn:self.add_weight(shape=kernel_shape,";
    "Fxn:self.add_weight(shape=(self.filters,),";
    "Fxn:InputSpec(ndim=self.rank";
    "Fxn:call";
    "Fxn:K.conv1d(";
    "Fxn:K.conv2d(";
    "Fxn:K.conv3d(";
    "Fxn:K.bias_add(";
    "Fxn:self.activation(outputs)";
    "Fxn:compute_output_shape";
    "Fxn:range(len(space)):";
    "Fxn:conv_utils.conv_output_length(";
    "Fxn:new_space.append(new_dim)";
    "Fxn:tuple(new_space)";
    "Fxn:range(len(space)):";
    "Fxn:conv_utils.conv_output_length(";
    "Fxn:new_space.append(new_dim)";
    "Fxn:tuple(new_space)";
    "Fxn:get_config";
    "Fxn:activations.serialize(self.activation),";
    "Fxn:initializers.serialize(self.kernel_initializer),";
    "Fxn:initializers.serialize(self.bias_initializer),";
    "Fxn:regularizers.serialize(self.kernel_regularizer),";
    "Fxn:regularizers.serialize(self.bias_regularizer),";
    "Fxn:regularizers.serialize(self.activity_regularizer),";
    "Fxn:constraints.serialize(self.kernel_constraint),";
    "Fxn:constraints.serialize(self.bias_constraint)";
    "Fxn:super(_Conv,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:Conv1D(_Conv):";
    "Fxn:__init__";
    "Fxn:super(Conv1D,";
    "Fxn:self).__init__(";
    "Fxn:InputSpec(ndim=3)";
    "Fxn:get_config";
    "Fxn:super(Conv1D,";
    "Fxn:self).get_config()";
    "Fxn:config.pop('rank')";
    "Fxn:config.pop('data_format')";
    "class:Conv2D(_Conv):";
    "Fxn:__init__";
    "Fxn:strides=(1,";
    "Fxn:dilation_rate=(1,";
    "Fxn:super(Conv2D,";
    "Fxn:self).__init__(";
    "Fxn:InputSpec(ndim=4)";
    "Fxn:get_config";
    "Fxn:super(Conv2D,";
    "Fxn:self).get_config()";
    "Fxn:config.pop('rank')";
    "class:Conv3D(_Conv):";
    "Fxn:__init__";
    "Fxn:strides=(1,";
    "Fxn:dilation_rate=(1,";
    "Fxn:super(Conv3D,";
    "Fxn:self).__init__(";
    "Fxn:InputSpec(ndim=5)";
    "Fxn:get_config";
    "Fxn:super(Conv3D,";
    "Fxn:self).get_config()";
    "Fxn:config.pop('rank')";
    "class:Conv2DTranspose(Conv2D):";
    "Fxn:__init__";
    "Fxn:strides=(1,";
    "Fxn:super(Conv2DTranspose,";
    "Fxn:self).__init__(";
    "Fxn:InputSpec(ndim=4)";
    "Fxn:build";
    "Fxn:len(input_shape)";
    "Fxn:ValueError('Inputs";
    "Fxn:str(4)";
    "Fxn:str(input_shape))";
    "Fxn:ValueError('The";
    "Fxn:self.add_weight(shape=kernel_shape,";
    "Fxn:self.add_weight(shape=(self.filters,),";
    "Fxn:InputSpec(ndim=4,";
    "Fxn:call";
    "Fxn:K.shape(inputs)";
    "Fxn:conv_utils.deconv_length(height,";
    "Fxn:conv_utils.deconv_length(width,";
    "Fxn:K.conv2d_transpose(";
    "Fxn:K.bias_add(";
    "Fxn:self.activation(outputs)";
    "Fxn:compute_output_shape";
    "Fxn:list(input_shape)";
    "Fxn:conv_utils.deconv_length(";
    "Fxn:conv_utils.deconv_length(";
    "Fxn:tuple(output_shape)";
    "Fxn:get_config";
    "Fxn:super(Conv2DTranspose,";
    "Fxn:self).get_config()";
    "Fxn:config.pop('dilation_rate')";
    "class:Conv3DTranspose(Conv3D):";
    "Fxn:__init__";
    "Fxn:strides=(1,";
    "Fxn:super(Conv3DTranspose,";
    "Fxn:self).__init__(";
    "Fxn:InputSpec(ndim=5)";
    "Fxn:build";
    "Fxn:len(input_shape)";
    "Fxn:ValueError('Inputs";
    "Fxn:str(5)";
    "Fxn:str(input_shape))";
    "Fxn:ValueError('The";
    "Fxn:self.add_weight(shape=kernel_shape,";
    "Fxn:self.add_weight(shape=(self.filters,),";
    "Fxn:InputSpec(ndim=5,";
    "Fxn:call";
    "Fxn:K.shape(inputs)";
    "Fxn:conv_utils.deconv_length(depth,";
    "Fxn:conv_utils.deconv_length(height,";
    "Fxn:conv_utils.deconv_length(width,";
    "Fxn:K.conv3d_transpose(inputs,";
    "Fxn:K.bias_add(";
    "Fxn:self.activation(outputs)";
    "Fxn:compute_output_shape";
    "Fxn:list(input_shape)";
    "Fxn:conv_utils.deconv_length(output_shape[d_axis],";
    "Fxn:conv_utils.deconv_length(output_shape[h_axis],";
    "Fxn:conv_utils.deconv_length(output_shape[w_axis],";
    "Fxn:tuple(output_shape)";
    "Fxn:get_config";
    "Fxn:super(Conv3DTranspose,";
    "Fxn:self).get_config()";
    "Fxn:config.pop('dilation_rate')";
    "class:_SeparableConv(_Conv):";
    "Fxn:__init__";
    "Fxn:super(_SeparableConv,";
    "Fxn:self).__init__(";
    "Fxn:initializers.get(depthwise_initializer)";
    "Fxn:initializers.get(pointwise_initializer)";
    "Fxn:regularizers.get(depthwise_regularizer)";
    "Fxn:regularizers.get(pointwise_regularizer)";
    "Fxn:constraints.get(depthwise_constraint)";
    "Fxn:constraints.get(pointwise_constraint)";
    "Fxn:build";
    "Fxn:len(input_shape)";
    "Fxn:ValueError('Inputs";
    "Fxn:str(self.rank)";
    "Fxn:str(self.rank";
    "Fxn:str(input_shape))";
    "Fxn:ValueError('The";
    "Fxn:int(input_shape[channel_axis])";
    "Fxn:self.add_weight(";
    "Fxn:self.add_weight(";
    "Fxn:self.add_weight(shape=(self.filters,),";
    "Fxn:InputSpec(ndim=self.rank";
    "Fxn:call";
    "Fxn:K.separable_conv1d(";
    "Fxn:K.separable_conv2d(";
    "Fxn:K.bias_add(";
    "Fxn:self.activation(outputs)";
    "Fxn:get_config";
    "Fxn:super(_SeparableConv,";
    "Fxn:self).get_config()";
    "Fxn:config.pop('rank')";
    "Fxn:config.pop('kernel_initializer')";
    "Fxn:config.pop('kernel_regularizer')";
    "Fxn:config.pop('kernel_constraint')";
    "Fxn:initializers.serialize(self.depthwise_initializer)";
    "Fxn:initializers.serialize(self.pointwise_initializer)";
    "Fxn:regularizers.serialize(self.depthwise_regularizer)";
    "Fxn:regularizers.serialize(self.pointwise_regularizer)";
    "Fxn:constraints.serialize(self.depthwise_constraint)";
    "Fxn:constraints.serialize(self.pointwise_constraint)";
    "class:SeparableConv1D(_SeparableConv):";
    "Fxn:__init__";
    "Fxn:super(SeparableConv1D,";
    "Fxn:self).__init__(";
    "class:SeparableConv2D(_SeparableConv):";
    "Fxn:__init__";
    "Fxn:strides=(1,";
    "Fxn:super(SeparableConv2D,";
    "Fxn:self).__init__(";
    "class:DepthwiseConv2D(Conv2D):";
    "Fxn:__init__";
    "Fxn:strides=(1,";
    "Fxn:super(DepthwiseConv2D,";
    "Fxn:self).__init__(";
    "Fxn:initializers.get(depthwise_initializer)";
    "Fxn:regularizers.get(depthwise_regularizer)";
    "Fxn:constraints.get(depthwise_constraint)";
    "Fxn:initializers.get(bias_initializer)";
    "Fxn:build";
    "Fxn:len(input_shape)";
    "Fxn:ValueError('Inputs";
    "Fxn:str(input_shape))";
    "Fxn:ValueError('The";
    "Fxn:int(input_shape[channel_axis])";
    "Fxn:self.add_weight(";
    "Fxn:self.add_weight(shape=(input_dim";
    "Fxn:InputSpec(ndim=4,";
    "Fxn:call";
    "Fxn:K.depthwise_conv2d(";
    "Fxn:K.bias_add(";
    "Fxn:self.activation(outputs)";
    "Fxn:compute_output_shape";
    "Fxn:conv_utils.conv_output_length(rows,";
    "Fxn:conv_utils.conv_output_length(cols,";
    "Fxn:get_config";
    "Fxn:super(DepthwiseConv2D,";
    "Fxn:self).get_config()";
    "Fxn:config.pop('filters')";
    "Fxn:config.pop('kernel_initializer')";
    "Fxn:config.pop('kernel_regularizer')";
    "Fxn:config.pop('kernel_constraint')";
    "Fxn:initializers.serialize(self.depthwise_initializer)";
    "Fxn:regularizers.serialize(self.depthwise_regularizer)";
    "Fxn:constraints.serialize(self.depthwise_constraint)";
    "class:UpSampling1D(Layer):";
    "Fxn:__init__";
    "Fxn:super(UpSampling1D,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:int(size)";
    "Fxn:InputSpec(ndim=3)";
    "Fxn:compute_output_shape";
    "Fxn:call";
    "Fxn:K.repeat_elements(inputs,";
    "Fxn:get_config";
    "Fxn:super(UpSampling1D,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:UpSampling2D(Layer):";
    "Fxn:__init__";
    "Fxn:size=(2,";
    "Fxn:super(UpSampling2D,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:conv_utils.normalize_tuple(size,";
    "Fxn:InputSpec(ndim=4)";
    "Fxn:compute_output_shape";
    "Fxn:call";
    "Fxn:K.resize_images(inputs,";
    "Fxn:get_config";
    "Fxn:super(UpSampling2D,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:UpSampling3D(Layer):";
    "Fxn:__init__";
    "Fxn:size=(2,";
    "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:conv_utils.normalize_tuple(size,";
    "Fxn:InputSpec(ndim=5)";
    "Fxn:super(UpSampling3D,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:compute_output_shape";
    "Fxn:call";
    "Fxn:K.resize_volumes(inputs,";
    "Fxn:get_config";
    "Fxn:super(UpSampling3D,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:ZeroPadding1D(Layer):";
    "Fxn:__init__";
    "Fxn:super(ZeroPadding1D,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:conv_utils.normalize_tuple(padding,";
    "Fxn:InputSpec(ndim=3)";
    "Fxn:compute_output_shape";
    "Fxn:call";
    "Fxn:K.temporal_padding(inputs,";
    "Fxn:get_config";
    "Fxn:super(ZeroPadding1D,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:ZeroPadding2D(Layer):";
    "Fxn:__init__";
    "Fxn:padding=(1,";
    "Fxn:super(ZeroPadding2D,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:isinstance(padding,";
    "Fxn:hasattr(padding,";
    "Fxn:len(padding)";
    "Fxn:ValueError('`padding`";
    "Fxn:str(padding))";
    "Fxn:conv_utils.normalize_tuple(padding[0],";
    "Fxn:conv_utils.normalize_tuple(padding[1],";
    "Fxn:ValueError('`padding`";
    "Fxn:'(symmetric_height_pad,";
    "Fxn:'((top_pad,";
    "Fxn:str(padding))";
    "Fxn:InputSpec(ndim=4)";
    "Fxn:compute_output_shape";
    "Fxn:call";
    "Fxn:K.spatial_2d_padding(inputs,";
    "Fxn:get_config";
    "Fxn:super(ZeroPadding2D,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:ZeroPadding3D(Layer):";
    "Fxn:__init__";
    "Fxn:padding=(1,";
    "Fxn:super(ZeroPadding3D,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:isinstance(padding,";
    "Fxn:hasattr(padding,";
    "Fxn:len(padding)";
    "Fxn:ValueError('`padding`";
    "Fxn:str(padding))";
    "Fxn:conv_utils.normalize_tuple(padding[0],";
    "Fxn:conv_utils.normalize_tuple(padding[1],";
    "Fxn:conv_utils.normalize_tuple(padding[2],";
    "Fxn:ValueError('`padding`";
    "Fxn:'(symmetric_dim1_pad,";
    "Fxn:'((left_dim1_pad,";
    "Fxn:str(padding))";
    "Fxn:InputSpec(ndim=5)";
    "Fxn:compute_output_shape";
    "Fxn:call";
    "Fxn:K.spatial_3d_padding(inputs,";
    "Fxn:get_config";
    "Fxn:super(ZeroPadding3D,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:Cropping1D(Layer):";
    "Fxn:__init__";
    "Fxn:cropping=(1,";
    "Fxn:super(Cropping1D,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:conv_utils.normalize_tuple(cropping,";
    "Fxn:InputSpec(ndim=3)";
    "Fxn:compute_output_shape";
    "Fxn:call";
    "Fxn:get_config";
    "Fxn:super(Cropping1D,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:Cropping2D(Layer):";
    "Fxn:__init__";
    "Fxn:cropping=((0,";
    "Fxn:super(Cropping2D,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:isinstance(cropping,";
    "Fxn:hasattr(cropping,";
    "Fxn:len(cropping)";
    "Fxn:ValueError('`cropping`";
    "Fxn:str(cropping))";
    "Fxn:conv_utils.normalize_tuple(";
    "Fxn:conv_utils.normalize_tuple(";
    "Fxn:ValueError('`cropping`";
    "Fxn:'(symmetric_height_crop,";
    "Fxn:'((top_crop,";
    "Fxn:str(cropping))";
    "Fxn:InputSpec(ndim=4)";
    "Fxn:compute_output_shape";
    "Fxn:call";
    "Fxn:get_config";
    "Fxn:super(Cropping2D,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:Cropping3D(Layer):";
    "Fxn:__init__";
    "Fxn:cropping=((1,";
    "Fxn:super(Cropping3D,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:isinstance(cropping,";
    "Fxn:hasattr(cropping,";
    "Fxn:len(cropping)";
    "Fxn:ValueError('`cropping`";
    "Fxn:str(cropping))";
    "Fxn:conv_utils.normalize_tuple(cropping[0],";
    "Fxn:conv_utils.normalize_tuple(cropping[1],";
    "Fxn:conv_utils.normalize_tuple(cropping[2],";
    "Fxn:ValueError('`cropping`";
    "Fxn:'(symmetric_dim1_crop,";
    "Fxn:'((left_dim1_crop,";
    "Fxn:str(cropping))";
    "Fxn:InputSpec(ndim=5)";
    "Fxn:compute_output_shape";
    "Fxn:call";
    "Fxn:get_config";
    "Fxn:super(Cropping3D,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "/keras/layers/convolutional_recurrent.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:backend";
    "Import:activations";
    "Import:initializers";
    "Import:regularizers";
    "Import:constraints";
    "Import:_generate_dropout_mask";
    "Import:numpy";
    "Import:warnings";
    "Import:InputSpec,";
    "Import:conv_utils";
    "Import:interfaces";
    "Import:Recurrent,";
    "Import:RNN";
    "Import:has_arg";
    "class:ConvRNN2D(RNN):";
    "Fxn:__init__";
    "Fxn:TypeError('Unrolling";
    "Fxn:isinstance(cell,";
    "Fxn:TypeError('It";
    "Fxn:super(ConvRNN2D,";
    "Fxn:self).__init__(cell,";
    "Fxn:[InputSpec(ndim=5)]";
    "Fxn:compute_output_shape";
    "Fxn:isinstance(input_shape,";
    "Fxn:conv_utils.conv_output_length(rows,";
    "Fxn:conv_utils.conv_output_length(cols,";
    "Fxn:[(input_shape[0],";
    "Fxn:range(2)]";
    "Fxn:[(input_shape[0],";
    "Fxn:range(2)]";
    "Fxn:build";
    "Fxn:isinstance(input_shape,";
    "Fxn:InputSpec(shape=(batch_size,";
    "Fxn:isinstance(self.cell,";
    "Fxn:self.cell.build([step_input_shape]";
    "Fxn:self.cell.build(step_input_shape)";
    "Fxn:hasattr(self.cell.state_size,";
    "Fxn:list(self.cell.state_size)";
    "Fxn:ValueError(";
    "Fxn:'{}'.format([spec.shape";
    "Fxn:[InputSpec(shape=(None,";
    "Fxn:[InputSpec(shape=(None,";
    "Fxn:self.reset_states()";
    "Fxn:get_initial_state";
    "Fxn:K.zeros_like(inputs)";
    "Fxn:K.sum(initial_state,";
    "Fxn:list(self.cell.kernel_shape)";
    "Fxn:self.cell.input_conv(initial_state,";
    "Fxn:K.zeros(tuple(shape)),";
    "Fxn:call()";
    "Fxn:list(K.int_shape(inputs))";
    "Fxn:keras_shape.pop(1)";
    "Fxn:K.image_data_format()";
    "Fxn:enumerate(indices):";
    "Fxn:conv_utils.conv_output_length(";
    "Fxn:hasattr(self.cell.state_size,";
    "Fxn:__call__";
    "Fxn:self._standardize_args(";
    "Fxn:super(ConvRNN2D,";
    "Fxn:self).__call__(inputs,";
    "Fxn:K.int_shape(state)";
    "Fxn:tuple(None";
    "Fxn:range(K.ndim(state)))";
    "Fxn:self.state_spec.append(InputSpec(shape=shape))";
    "Fxn:[InputSpec(shape=K.int_shape(constant))";
    "Fxn:len(constants)";
    "Fxn:K.is_keras_tensor(tensor)";
    "Fxn:K.is_keras_tensor(additional_inputs[0]):";
    "Fxn:ValueError('The";
    "Fxn:K.is_keras_tensor(additional_inputs[0]):";
    "Fxn:super(ConvRNN2D,";
    "Fxn:self).__call__(full_input,";
    "Fxn:super(ConvRNN2D,";
    "Fxn:self).__call__(inputs,";
    "Fxn:call";
    "Fxn:.build()";
    "Fxn:isinstance(inputs,";
    "Fxn:self.get_initial_state(inputs)";
    "Fxn:isinstance(mask,";
    "Fxn:len(initial_state)";
    "Fxn:len(self.states):";
    "Fxn:ValueError('Layer";
    "Fxn:str(len(self.states))";
    "Fxn:str(len(initial_state))";
    "Fxn:K.int_shape(inputs)[1]";
    "Fxn:has_arg(self.cell.call,";
    "Fxn:has_arg(self.cell.call,";
    "Fxn:ValueError('RNN";
    "Fxn:step";
    "Fxn:self.cell.call(inputs,";
    "Fxn:step";
    "Fxn:self.cell.call(inputs,";
    "Fxn:K.rnn(step,";
    "Fxn:range(len(states)):";
    "Fxn:updates.append((self.states[i],";
    "Fxn:self.add_update(updates,";
    "Fxn:getattr(last_output,";
    "Fxn:isinstance(states,";
    "Fxn:list(states)";
    "Fxn:reset_states";
    "Fxn:AttributeError('Layer";
    "Fxn:self.compute_output_shape(input_shape)";
    "Fxn:ValueError('If";
    "Fxn:get_tuple_shape";
    "Fxn:list(state_shape)";
    "Fxn:tuple(result)";
    "Fxn:hasattr(self.cell.state_size,";
    "Fxn:[K.zeros(get_tuple_shape(dim))";
    "Fxn:[K.zeros(get_tuple_shape(self.cell.state_size))]";
    "Fxn:hasattr(self.cell.state_size,";
    "Fxn:zip(self.states,";
    "Fxn:K.set_value(state,";
    "Fxn:np.zeros(get_tuple_shape(dim)))";
    "Fxn:K.set_value(self.states[0],";
    "Fxn:np.zeros(get_tuple_shape(self.cell.state_size)))";
    "Fxn:isinstance(states,";
    "Fxn:len(states)";
    "Fxn:len(self.states):";
    "Fxn:ValueError('Layer";
    "Fxn:str(len(self.states))";
    "Fxn:str(len(states))";
    "Fxn:str(states))";
    "Fxn:enumerate(zip(states,";
    "Fxn:hasattr(self.cell.state_size,";
    "Fxn:get_tuple_shape(dim):";
    "Fxn:ValueError('State";
    "Fxn:str(index)";
    "Fxn:str(get_tuple_shape(dim))";
    "Fxn:str(value.shape))";
    "Fxn:K.set_value(state,";
    "class:ConvLSTM2DCell(Layer):";
    "Fxn:__init__";
    "Fxn:strides=(1,";
    "Fxn:dilation_rate=(1,";
    "Fxn:super(ConvLSTM2DCell,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:conv_utils.normalize_tuple(kernel_size,";
    "Fxn:conv_utils.normalize_tuple(strides,";
    "Fxn:conv_utils.normalize_padding(padding)";
    "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:conv_utils.normalize_tuple(dilation_rate,";
    "Fxn:activations.get(activation)";
    "Fxn:activations.get(recurrent_activation)";
    "Fxn:initializers.get(kernel_initializer)";
    "Fxn:initializers.get(recurrent_initializer)";
    "Fxn:initializers.get(bias_initializer)";
    "Fxn:regularizers.get(kernel_regularizer)";
    "Fxn:regularizers.get(recurrent_regularizer)";
    "Fxn:regularizers.get(bias_regularizer)";
    "Fxn:constraints.get(kernel_constraint)";
    "Fxn:constraints.get(recurrent_constraint)";
    "Fxn:constraints.get(bias_constraint)";
    "Fxn:K.backend()";
    "Fxn:warnings.warn(";
    "Fxn:min(1.,";
    "Fxn:max(0.,";
    "Fxn:min(1.,";
    "Fxn:max(0.,";
    "Fxn:build";
    "Fxn:ValueError('The";
    "Fxn:self.add_weight(shape=kernel_shape,";
    "Fxn:self.add_weight(";
    "Fxn:self.add_weight(shape=(self.filters";
    "Fxn:np.zeros((self.filters";
    "Fxn:K.set_value(self.bias,";
    "Fxn:call";
    "Fxn:_generate_dropout_mask(";
    "Fxn:K.ones_like(inputs),";
    "Fxn:_generate_dropout_mask(";
    "Fxn:K.ones_like(states[1]),";
    "Fxn:self.input_conv(inputs_i,";
    "Fxn:self.input_conv(inputs_f,";
    "Fxn:self.input_conv(inputs_c,";
    "Fxn:self.input_conv(inputs_o,";
    "Fxn:self.recurrent_conv(h_tm1_i,";
    "Fxn:self.recurrent_conv(h_tm1_f,";
    "Fxn:self.recurrent_conv(h_tm1_c,";
    "Fxn:self.recurrent_conv(h_tm1_o,";
    "Fxn:self.recurrent_activation(x_i";
    "Fxn:self.recurrent_activation(x_f";
    "Fxn:self.activation(x_c";
    "Fxn:self.recurrent_activation(x_o";
    "Fxn:self.activation(c)";
    "Fxn:input_conv";
    "Fxn:K.conv2d(x,";
    "Fxn:K.bias_add(conv_out,";
    "Fxn:recurrent_conv";
    "Fxn:K.conv2d(x,";
    "Fxn:strides=(1,";
    "Fxn:get_config";
    "Fxn:activations.serialize(self.activation),";
    "Fxn:activations.serialize(self.recurrent_activation),";
    "Fxn:initializers.serialize(self.kernel_initializer),";
    "Fxn:initializers.serialize(self.recurrent_initializer),";
    "Fxn:initializers.serialize(self.bias_initializer),";
    "Fxn:regularizers.serialize(self.kernel_regularizer),";
    "Fxn:regularizers.serialize(self.recurrent_regularizer),";
    "Fxn:regularizers.serialize(self.bias_regularizer),";
    "Fxn:constraints.serialize(self.kernel_constraint),";
    "Fxn:constraints.serialize(self.recurrent_constraint),";
    "Fxn:constraints.serialize(self.bias_constraint),";
    "Fxn:super(ConvLSTM2DCell,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:ConvLSTM2D(ConvRNN2D):";
    "Fxn:__init__";
    "Fxn:strides=(1,";
    "Fxn:dilation_rate=(1,";
    "Fxn:ConvLSTM2DCell(filters=filters,";
    "Fxn:super(ConvLSTM2D,";
    "Fxn:self).__init__(cell,";
    "Fxn:regularizers.get(activity_regularizer)";
    "Fxn:call";
    "Fxn:super(ConvLSTM2D,";
    "Fxn:self).call(inputs,";
    "Fxn:filters";
    "Fxn:kernel_size";
    "Fxn:strides";
    "Fxn:padding";
    "Fxn:data_format";
    "Fxn:dilation_rate";
    "Fxn:activation";
    "Fxn:recurrent_activation";
    "Fxn:use_bias";
    "Fxn:kernel_initializer";
    "Fxn:recurrent_initializer";
    "Fxn:bias_initializer";
    "Fxn:unit_forget_bias";
    "Fxn:kernel_regularizer";
    "Fxn:recurrent_regularizer";
    "Fxn:bias_regularizer";
    "Fxn:kernel_constraint";
    "Fxn:recurrent_constraint";
    "Fxn:bias_constraint";
    "Fxn:dropout";
    "Fxn:recurrent_dropout";
    "Fxn:get_config";
    "Fxn:activations.serialize(self.activation),";
    "Fxn:activations.serialize(self.recurrent_activation),";
    "Fxn:initializers.serialize(self.kernel_initializer),";
    "Fxn:initializers.serialize(self.recurrent_initializer),";
    "Fxn:initializers.serialize(self.bias_initializer),";
    "Fxn:regularizers.serialize(self.kernel_regularizer),";
    "Fxn:regularizers.serialize(self.recurrent_regularizer),";
    "Fxn:regularizers.serialize(self.bias_regularizer),";
    "Fxn:regularizers.serialize(self.activity_regularizer),";
    "Fxn:constraints.serialize(self.kernel_constraint),";
    "Fxn:constraints.serialize(self.recurrent_constraint),";
    "Fxn:constraints.serialize(self.bias_constraint),";
    "Fxn:super(ConvLSTM2D,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Fxn:from_config";
    "Fxn:cls(**config)";
    "/keras/layers/core.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:numpy";
    "Import:copy";
    "Import:types";
    "Import:warnings";
    "Import:backend";
    "Import:activations";
    "Import:initializers";
    "Import:regularizers";
    "Import:constraints";
    "Import:InputSpec";
    "Import:Layer";
    "Import:func_dump";
    "Import:func_load";
    "Import:deserialize_keras_object";
    "Import:has_arg";
    "Import:interfaces";
    "class:Masking(Layer):";
    "Fxn:__init__";
    "Fxn:super(Masking,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:compute_mask";
    "Fxn:K.any(K.not_equal(inputs,";
    "Fxn:call";
    "Fxn:K.any(K.not_equal(inputs,";
    "Fxn:K.cast(boolean_mask,";
    "Fxn:K.dtype(inputs))";
    "Fxn:get_config";
    "Fxn:super(Masking,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Fxn:compute_output_shape";
    "class:Dropout(Layer):";
    "Fxn:__init__";
    "Fxn:super(Dropout,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:min(1.,";
    "Fxn:max(0.,";
    "Fxn:_get_noise_shape";
    "Fxn:K.shape(inputs)";
    "Fxn:enumerate(self.noise_shape)]";
    "Fxn:tuple(noise_shape)";
    "Fxn:call";
    "Fxn:self._get_noise_shape(inputs)";
    "Fxn:dropped_inputs";
    "Fxn:K.dropout(inputs,";
    "Fxn:K.in_train_phase(dropped_inputs,";
    "Fxn:get_config";
    "Fxn:super(Dropout,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Fxn:compute_output_shape";
    "class:SpatialDropout1D(Dropout):";
    "Fxn:__init__";
    "Fxn:super(SpatialDropout1D,";
    "Fxn:self).__init__(rate,";
    "Fxn:InputSpec(ndim=3)";
    "Fxn:_get_noise_shape";
    "Fxn:K.shape(inputs)";
    "class:SpatialDropout2D(Dropout):";
    "Fxn:__init__";
    "Fxn:super(SpatialDropout2D,";
    "Fxn:self).__init__(rate,";
    "Fxn:K.image_data_format()";
    "Fxn:ValueError('`data_format`";
    "Fxn:InputSpec(ndim=4)";
    "Fxn:_get_noise_shape";
    "Fxn:K.shape(inputs)";
    "class:SpatialDropout3D(Dropout):";
    "Fxn:__init__";
    "Fxn:super(SpatialDropout3D,";
    "Fxn:self).__init__(rate,";
    "Fxn:K.image_data_format()";
    "Fxn:ValueError('`data_format`";
    "Fxn:InputSpec(ndim=5)";
    "Fxn:_get_noise_shape";
    "Fxn:K.shape(inputs)";
    "class:Activation(Layer):";
    "Fxn:__init__";
    "Fxn:super(Activation,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:activations.get(activation)";
    "Fxn:call";
    "Fxn:self.activation(inputs)";
    "Fxn:get_config";
    "Fxn:activations.serialize(self.activation)}";
    "Fxn:super(Activation,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Fxn:compute_output_shape";
    "class:Reshape(Layer):";
    "Fxn:__init__";
    "Fxn:super(Reshape,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:tuple(target_shape)";
    "Fxn:_fix_unknown_dimension";
    "Fxn:list(output_shape)";
    "Fxn:enumerate(output_shape):";
    "Fxn:ValueError('Can";
    "Fxn:np.prod(input_shape,";
    "Fxn:ValueError(msg)";
    "Fxn:ValueError(msg)";
    "Fxn:tuple(output_shape)";
    "Fxn:compute_output_shape";
    "Fxn:tuple(s";
    "Fxn:self._fix_unknown_dimension(";
    "Fxn:call";
    "Fxn:K.reshape(inputs,";
    "Fxn:get_config";
    "Fxn:super(Reshape,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:Permute(Layer):";
    "Fxn:__init__";
    "Fxn:super(Permute,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:tuple(dims)";
    "Fxn:InputSpec(ndim=len(self.dims)";
    "Fxn:compute_output_shape";
    "Fxn:list(input_shape)";
    "Fxn:copy.copy(input_shape)";
    "Fxn:enumerate(self.dims):";
    "Fxn:tuple(output_shape)";
    "Fxn:call";
    "Fxn:K.permute_dimensions(inputs,";
    "Fxn:get_config";
    "Fxn:super(Permute,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:Flatten(Layer):";
    "Fxn:__init__";
    "Fxn:super(Flatten,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:InputSpec(min_ndim=3)";
    "Fxn:compute_output_shape";
    "Fxn:all(input_shape[1:]):";
    "Fxn:ValueError('The";
    "Fxn:'(got";
    "Fxn:str(input_shape[1:])";
    "Fxn:np.prod(input_shape[1:]))";
    "Fxn:call";
    "Fxn:K.batch_flatten(inputs)";
    "class:RepeatVector(Layer):";
    "Fxn:__init__";
    "Fxn:super(RepeatVector,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:InputSpec(ndim=2)";
    "Fxn:compute_output_shape";
    "Fxn:call";
    "Fxn:K.repeat(inputs,";
    "Fxn:get_config";
    "Fxn:super(RepeatVector,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:Lambda(Layer):";
    "Fxn:antirectifier";
    "Fxn:K.mean(x,";
    "Fxn:K.l2_normalize(x,";
    "Fxn:K.relu(x)";
    "Fxn:K.relu(-x)";
    "Fxn:K.concatenate([pos,";
    "Fxn:antirectifier_output_shape";
    "Fxn:list(input_shape)";
    "Fxn:len(shape)";
    "Fxn:tuple(shape)";
    "Fxn:model.add(Lambda(antirectifier,";
    "Fxn:f(input_shape)`";
    "Fxn:__init__";
    "Fxn:super(Lambda,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:isinstance(output_shape,";
    "Fxn:tuple(output_shape)";
    "Fxn:callable(output_shape):";
    "Fxn:TypeError('In";
    "Fxn:compute_output_shape";
    "Fxn:K.backend()";
    "Fxn:isinstance(input_shape,";
    "Fxn:[K.placeholder(shape=shape)";
    "Fxn:self.call(xs)";
    "Fxn:K.placeholder(shape=input_shape)";
    "Fxn:self.call(x)";
    "Fxn:isinstance(x,";
    "Fxn:[K.int_shape(x_elem)";
    "Fxn:K.int_shape(x)";
    "Fxn:warnings.warn('`output_shape`";
    "Fxn:'(same";
    "Fxn:.format(self.name,";
    "Fxn:isinstance(self._output_shape,";
    "Fxn:isinstance(input_shape,";
    "Fxn:tuple(self._output_shape)";
    "Fxn:self._output_shape(input_shape)";
    "Fxn:isinstance(shape,";
    "Fxn:ValueError('`output_shape`";
    "Fxn:isinstance(shape,";
    "Fxn:isinstance(shape[0],";
    "Fxn:tuple(shape)";
    "Fxn:call";
    "Fxn:has_arg(self.function,";
    "Fxn:self.function(inputs,";
    "Fxn:compute_mask";
    "Fxn:callable(self.mask):";
    "Fxn:self.mask(inputs,";
    "Fxn:get_config";
    "Fxn:isinstance(self.function,";
    "Fxn:func_dump(self.function)";
    "Fxn:isinstance(self._output_shape,";
    "Fxn:func_dump(self._output_shape)";
    "Fxn:callable(self._output_shape):";
    "Fxn:super(Lambda,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Fxn:from_config";
    "Fxn:config.copy()";
    "Fxn:globals()";
    "Fxn:dict(list(globs.items())";
    "Fxn:list(custom_objects.items()))";
    "Fxn:config.pop('function_type')";
    "Fxn:deserialize_keras_object(";
    "Fxn:func_load(config['function'],";
    "Fxn:TypeError('Unknown";
    "Fxn:config.pop('output_shape_type')";
    "Fxn:deserialize_keras_object(";
    "Fxn:func_load(config['output_shape'],";
    "Fxn:isinstance(config['arguments'][key],";
    "Fxn:np.array(arg_dict['value'])";
    "Fxn:cls(**config)";
    "class:Dense(Layer):";
    "Fxn:__init__";
    "Fxn:super(Dense,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:activations.get(activation)";
    "Fxn:initializers.get(kernel_initializer)";
    "Fxn:initializers.get(bias_initializer)";
    "Fxn:regularizers.get(kernel_regularizer)";
    "Fxn:regularizers.get(bias_regularizer)";
    "Fxn:regularizers.get(activity_regularizer)";
    "Fxn:constraints.get(kernel_constraint)";
    "Fxn:constraints.get(bias_constraint)";
    "Fxn:InputSpec(min_ndim=2)";
    "Fxn:build";
    "Fxn:len(input_shape)";
    "Fxn:self.add_weight(shape=(input_dim,";
    "Fxn:self.add_weight(shape=(self.units,),";
    "Fxn:InputSpec(min_ndim=2,";
    "Fxn:call";
    "Fxn:K.dot(inputs,";
    "Fxn:K.bias_add(output,";
    "Fxn:self.activation(output)";
    "Fxn:compute_output_shape";
    "Fxn:len(input_shape)";
    "Fxn:list(input_shape)";
    "Fxn:tuple(output_shape)";
    "Fxn:get_config";
    "Fxn:activations.serialize(self.activation),";
    "Fxn:initializers.serialize(self.kernel_initializer),";
    "Fxn:initializers.serialize(self.bias_initializer),";
    "Fxn:regularizers.serialize(self.kernel_regularizer),";
    "Fxn:regularizers.serialize(self.bias_regularizer),";
    "Fxn:regularizers.serialize(self.activity_regularizer),";
    "Fxn:constraints.serialize(self.kernel_constraint),";
    "Fxn:constraints.serialize(self.bias_constraint)";
    "Fxn:super(Dense,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:ActivityRegularization(Layer):";
    "Fxn:__init__";
    "Fxn:super(ActivityRegularization,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:regularizers.L1L2(l1=l1,";
    "Fxn:get_config";
    "Fxn:super(ActivityRegularization,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Fxn:compute_output_shape";
    "/keras/layers/cudnn_recurrent.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:backend";
    "Import:initializers";
    "Import:regularizers";
    "Import:constraints";
    "Import:RNN";
    "Import:InputSpec";
    "Import:namedtuple";
    "class:_CuDNNRNN(RNN):";
    "Fxn:__init__";
    "Fxn:K.backend()";
    "Fxn:RuntimeError('CuDNN";
    "Fxn:super(RNN,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:[InputSpec(ndim=3)]";
    "Fxn:hasattr(self.cell.state_size,";
    "Fxn:[InputSpec(shape=(None,";
    "Fxn:_canonical_to_params";
    "Fxn:[tf.reshape(x,";
    "Fxn:[tf.reshape(x,";
    "Fxn:tf.concat(weights";
    "Fxn:call";
    "Fxn:isinstance(mask,";
    "Fxn:ValueError('Masking";
    "Fxn:`(samples,";
    "Fxn:.build()";
    "Fxn:isinstance(inputs,";
    "Fxn:self.get_initial_state(inputs)";
    "Fxn:len(initial_state)";
    "Fxn:len(self.states):";
    "Fxn:ValueError('Layer";
    "Fxn:str(len(self.states))";
    "Fxn:str(len(initial_state))";
    "Fxn:K.reverse(inputs,";
    "Fxn:self._process_batch(inputs,";
    "Fxn:range(len(states)):";
    "Fxn:updates.append((self.states[i],";
    "Fxn:self.add_update(updates,";
    "Fxn:get_config";
    "Fxn:super(RNN,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Fxn:from_config";
    "Fxn:cls(**config)";
    "Fxn:trainable_weights";
    "Fxn:non_trainable_weights";
    "Fxn:losses";
    "Fxn:super(RNN,";
    "Fxn:get_losses_for";
    "Fxn:super(RNN,";
    "Fxn:self).get_losses_for(inputs=inputs)";
    "Import:tensorflow";
    "class:CuDNNGRU(_CuDNNRNN):";
    "Fxn:__init__";
    "Fxn:super(CuDNNGRU,";
    "Fxn:self).__init__(";
    "Fxn:initializers.get(kernel_initializer)";
    "Fxn:initializers.get(recurrent_initializer)";
    "Fxn:initializers.get(bias_initializer)";
    "Fxn:regularizers.get(kernel_regularizer)";
    "Fxn:regularizers.get(recurrent_regularizer)";
    "Fxn:regularizers.get(bias_regularizer)";
    "Fxn:regularizers.get(activity_regularizer)";
    "Fxn:constraints.get(kernel_constraint)";
    "Fxn:constraints.get(recurrent_constraint)";
    "Fxn:constraints.get(bias_constraint)";
    "Fxn:cell";
    "Fxn:namedtuple('cell',";
    "Fxn:Cell(state_size=self.units)";
    "Fxn:build";
    "Fxn:super(CuDNNGRU,";
    "Fxn:self).build(input_shape)";
    "Fxn:isinstance(input_shape,";
    "Fxn:cudnn_rnn_ops.CudnnGRU(";
    "Fxn:self.add_weight(shape=(input_dim,";
    "Fxn:self.add_weight(";
    "Fxn:shape=(self.units,";
    "Fxn:self.add_weight(shape=(self.units";
    "Fxn:_process_batch";
    "Fxn:tf.transpose(inputs,";
    "Fxn:tf.expand_dims(input_h,";
    "Fxn:self._canonical_to_params(";
    "Fxn:self._cudnn_gru(";
    "Fxn:tf.transpose(outputs,";
    "Fxn:get_config";
    "Fxn:initializers.serialize(self.kernel_initializer),";
    "Fxn:initializers.serialize(self.recurrent_initializer),";
    "Fxn:initializers.serialize(self.bias_initializer),";
    "Fxn:regularizers.serialize(self.kernel_regularizer),";
    "Fxn:regularizers.serialize(self.recurrent_regularizer),";
    "Fxn:regularizers.serialize(self.bias_regularizer),";
    "Fxn:regularizers.serialize(self.activity_regularizer),";
    "Fxn:constraints.serialize(self.kernel_constraint),";
    "Fxn:constraints.serialize(self.recurrent_constraint),";
    "Fxn:constraints.serialize(self.bias_constraint)}";
    "Fxn:super(CuDNNGRU,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Import:cudnn_rnn_ops";
    "Import:tensorflow";
    "class:CuDNNLSTM(_CuDNNRNN):";
    "Fxn:__init__";
    "Fxn:super(CuDNNLSTM,";
    "Fxn:self).__init__(";
    "Fxn:initializers.get(kernel_initializer)";
    "Fxn:initializers.get(recurrent_initializer)";
    "Fxn:initializers.get(bias_initializer)";
    "Fxn:regularizers.get(kernel_regularizer)";
    "Fxn:regularizers.get(recurrent_regularizer)";
    "Fxn:regularizers.get(bias_regularizer)";
    "Fxn:regularizers.get(activity_regularizer)";
    "Fxn:constraints.get(kernel_constraint)";
    "Fxn:constraints.get(recurrent_constraint)";
    "Fxn:constraints.get(bias_constraint)";
    "Fxn:cell";
    "Fxn:namedtuple('cell',";
    "Fxn:Cell(state_size=(self.units,";
    "Fxn:build";
    "Fxn:super(CuDNNLSTM,";
    "Fxn:self).build(input_shape)";
    "Fxn:isinstance(input_shape,";
    "Fxn:cudnn_rnn_ops.CudnnLSTM(";
    "Fxn:self.add_weight(shape=(input_dim,";
    "Fxn:self.add_weight(";
    "Fxn:shape=(self.units,";
    "Fxn:bias_initializer";
    "Fxn:K.concatenate([";
    "Fxn:self.bias_initializer((self.units";
    "Fxn:initializers.Ones()((self.units,),";
    "Fxn:self.bias_initializer((self.units";
    "Fxn:self.add_weight(shape=(self.units";
    "Fxn:_process_batch";
    "Fxn:tf.transpose(inputs,";
    "Fxn:tf.expand_dims(input_h,";
    "Fxn:tf.expand_dims(input_c,";
    "Fxn:self._canonical_to_params(";
    "Fxn:self._cudnn_lstm(";
    "Fxn:tf.transpose(outputs,";
    "Fxn:get_config";
    "Fxn:initializers.serialize(self.kernel_initializer),";
    "Fxn:initializers.serialize(self.recurrent_initializer),";
    "Fxn:initializers.serialize(self.bias_initializer),";
    "Fxn:regularizers.serialize(self.kernel_regularizer),";
    "Fxn:regularizers.serialize(self.recurrent_regularizer),";
    "Fxn:regularizers.serialize(self.bias_regularizer),";
    "Fxn:regularizers.serialize(self.activity_regularizer),";
    "Fxn:constraints.serialize(self.kernel_constraint),";
    "Fxn:constraints.serialize(self.recurrent_constraint),";
    "Fxn:constraints.serialize(self.bias_constraint)}";
    "Fxn:super(CuDNNLSTM,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Import:cudnn_rnn_ops";
    "Import:tensorflow";
    "/keras/layers/embeddings.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:backend";
    "Import:initializers";
    "Import:regularizers";
    "Import:constraints";
    "Import:Layer";
    "Import:interfaces";
    "class:Embedding(Layer):";
    "Fxn:__init__";
    "Fxn:super(Embedding,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:initializers.get(embeddings_initializer)";
    "Fxn:regularizers.get(embeddings_regularizer)";
    "Fxn:regularizers.get(activity_regularizer)";
    "Fxn:constraints.get(embeddings_constraint)";
    "Fxn:build";
    "Fxn:self.add_weight(";
    "Fxn:shape=(self.input_dim,";
    "Fxn:compute_mask";
    "Fxn:K.not_equal(inputs,";
    "Fxn:compute_output_shape";
    "Fxn:isinstance(self.input_length,";
    "Fxn:list(self.input_length)";
    "Fxn:len(in_lens)";
    "Fxn:len(input_shape)";
    "Fxn:ValueError('"input_length"";
    "Fxn:str(input_shape)))";
    "Fxn:enumerate(zip(in_lens,";
    "Fxn:ValueError('"input_length"";
    "Fxn:str(input_shape)))";
    "Fxn:tuple(in_lens)";
    "Fxn:call";
    "Fxn:K.dtype(inputs)";
    "Fxn:K.cast(inputs,";
    "Fxn:K.gather(self.embeddings,";
    "Fxn:get_config";
    "Fxn:initializers.serialize(self.embeddings_initializer),";
    "Fxn:regularizers.serialize(self.embeddings_regularizer),";
    "Fxn:regularizers.serialize(self.activity_regularizer),";
    "Fxn:constraints.serialize(self.embeddings_constraint),";
    "Fxn:super(Embedding,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "/keras/layers/local.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:backend";
    "Import:activations";
    "Import:initializers";
    "Import:regularizers";
    "Import:constraints";
    "Import:Layer";
    "Import:InputSpec";
    "Import:conv_utils";
    "Import:interfaces";
    "class:LocallyConnected1D(Layer):";
    "Fxn:__init__";
    "Fxn:super(LocallyConnected1D,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:conv_utils.normalize_tuple(kernel_size,";
    "Fxn:conv_utils.normalize_tuple(strides,";
    "Fxn:conv_utils.normalize_padding(padding)";
    "Fxn:ValueError('Invalid";
    "Fxn:'(only";
    "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:activations.get(activation)";
    "Fxn:initializers.get(kernel_initializer)";
    "Fxn:initializers.get(bias_initializer)";
    "Fxn:regularizers.get(kernel_regularizer)";
    "Fxn:regularizers.get(bias_regularizer)";
    "Fxn:regularizers.get(activity_regularizer)";
    "Fxn:constraints.get(kernel_constraint)";
    "Fxn:constraints.get(bias_constraint)";
    "Fxn:InputSpec(ndim=3)";
    "Fxn:build";
    "Fxn:ValueError('Axis";
    "Fxn:conv_utils.conv_output_length(input_shape[1],";
    "Fxn:self.add_weight(";
    "Fxn:self.add_weight(";
    "Fxn:shape=(output_length,";
    "Fxn:InputSpec(ndim=3,";
    "Fxn:compute_output_shape";
    "Fxn:conv_utils.conv_output_length(input_shape[1],";
    "Fxn:call";
    "Fxn:K.local_conv1d(inputs,";
    "Fxn:K.bias_add(output,";
    "Fxn:self.activation(output)";
    "Fxn:get_config";
    "Fxn:activations.serialize(self.activation),";
    "Fxn:initializers.serialize(self.kernel_initializer),";
    "Fxn:initializers.serialize(self.bias_initializer),";
    "Fxn:regularizers.serialize(self.kernel_regularizer),";
    "Fxn:regularizers.serialize(self.bias_regularizer),";
    "Fxn:regularizers.serialize(self.activity_regularizer),";
    "Fxn:constraints.serialize(self.kernel_constraint),";
    "Fxn:constraints.serialize(self.bias_constraint)";
    "Fxn:super(LocallyConnected1D,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:LocallyConnected2D(Layer):";
    "Fxn:__init__";
    "Fxn:strides=(1,";
    "Fxn:super(LocallyConnected2D,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:conv_utils.normalize_tuple(kernel_size,";
    "Fxn:conv_utils.normalize_tuple(strides,";
    "Fxn:conv_utils.normalize_padding(padding)";
    "Fxn:ValueError('Invalid";
    "Fxn:'(only";
    "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:activations.get(activation)";
    "Fxn:initializers.get(kernel_initializer)";
    "Fxn:initializers.get(bias_initializer)";
    "Fxn:regularizers.get(kernel_regularizer)";
    "Fxn:regularizers.get(bias_regularizer)";
    "Fxn:regularizers.get(activity_regularizer)";
    "Fxn:constraints.get(kernel_constraint)";
    "Fxn:constraints.get(bias_constraint)";
    "Fxn:InputSpec(ndim=4)";
    "Fxn:build";
    "Fxn:ValueError('The";
    "Fxn:str(input_shape))";
    "Fxn:conv_utils.conv_output_length(input_row,";
    "Fxn:conv_utils.conv_output_length(input_col,";
    "Fxn:self.add_weight(shape=self.kernel_shape,";
    "Fxn:self.add_weight(shape=(output_row,";
    "Fxn:InputSpec(ndim=4,";
    "Fxn:InputSpec(ndim=4,";
    "Fxn:compute_output_shape";
    "Fxn:conv_utils.conv_output_length(rows,";
    "Fxn:conv_utils.conv_output_length(cols,";
    "Fxn:call";
    "Fxn:K.local_conv2d(inputs,";
    "Fxn:K.bias_add(output,";
    "Fxn:self.activation(output)";
    "Fxn:get_config";
    "Fxn:activations.serialize(self.activation),";
    "Fxn:initializers.serialize(self.kernel_initializer),";
    "Fxn:initializers.serialize(self.bias_initializer),";
    "Fxn:regularizers.serialize(self.kernel_regularizer),";
    "Fxn:regularizers.serialize(self.bias_regularizer),";
    "Fxn:regularizers.serialize(self.activity_regularizer),";
    "Fxn:constraints.serialize(self.kernel_constraint),";
    "Fxn:constraints.serialize(self.bias_constraint)";
    "Fxn:super(LocallyConnected2D,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "/keras/layers/merge.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:Layer";
    "Import:backend";
    "class:_Merge(Layer):";
    "Fxn:__init__";
    "Fxn:super(_Merge,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:_merge_function";
    "Fxn:_compute_elemwise_op_output_shape";
    "Fxn:len(shape1)";
    "Fxn:len(shape2):";
    "Fxn:self._compute_elemwise_op_output_shape(shape2,";
    "Fxn:list(shape1[:-len(shape2)])";
    "Fxn:zip(shape1[-len(shape2):],";
    "Fxn:output_shape.append(None)";
    "Fxn:output_shape.append(j)";
    "Fxn:output_shape.append(i)";
    "Fxn:ValueError('Operands";
    "Fxn:str(shape1)";
    "Fxn:str(shape2))";
    "Fxn:output_shape.append(i)";
    "Fxn:tuple(output_shape)";
    "Fxn:build";
    "Fxn:isinstance(input_shape,";
    "Fxn:ValueError('A";
    "Fxn:len(input_shape)";
    "Fxn:ValueError('A";
    "Fxn:str(len(input_shape))";
    "Fxn:set(batch_sizes)";
    "Fxn:set([None])";
    "Fxn:len(batch_sizes)";
    "Fxn:ValueError('Can";
    "Fxn:str(input_shape))";
    "Fxn:range(1,";
    "Fxn:len(input_shape)):";
    "Fxn:self._compute_elemwise_op_output_shape(output_shape,";
    "Fxn:len(set(map(len,";
    "Fxn:call";
    "Fxn:isinstance(inputs,";
    "Fxn:ValueError('A";
    "Fxn:list(map(K.ndim,";
    "Fxn:max(input_ndims)";
    "Fxn:K.ndim(x)";
    "Fxn:range(max_ndim";
    "Fxn:K.expand_dims(x,";
    "Fxn:reshaped_inputs.append(x)";
    "Fxn:self._merge_function(reshaped_inputs)";
    "Fxn:K.ndim(x)";
    "Fxn:K.shape(x)";
    "Fxn:K.concatenate([x_shape[1:],";
    "Fxn:K.expand_dims(batch_size)])";
    "Fxn:K.reshape(x,";
    "Fxn:K.stack([batch_size,";
    "Fxn:K.prod(x_shape[1:])]))";
    "Fxn:K.permute_dimensions(x_transposed,";
    "Fxn:K.reshape(x_transposed,";
    "Fxn:reshaped_inputs.append(x_transposed)";
    "Fxn:list(range(1,";
    "Fxn:reshaped_inputs.append(K.permute_dimensions(x,";
    "Fxn:reshaped_inputs.append(x)";
    "Fxn:self._merge_function(reshaped_inputs)";
    "Fxn:K.ndim(y)";
    "Fxn:K.shape(y)";
    "Fxn:K.shape(y_shape)[0]";
    "Fxn:K.concatenate([K.expand_dims(batch_size),";
    "Fxn:K.reshape(y,";
    "Fxn:K.permute_dimensions(y,";
    "Fxn:K.reshape(y,";
    "Fxn:list(range(y_ndim";
    "Fxn:K.permute_dimensions(y,";
    "Fxn:self._merge_function(inputs)";
    "Fxn:compute_output_shape";
    "Fxn:range(1,";
    "Fxn:len(input_shape)):";
    "Fxn:self._compute_elemwise_op_output_shape(output_shape,";
    "Fxn:set(batch_sizes)";
    "Fxn:set([None])";
    "Fxn:len(batch_sizes)";
    "Fxn:compute_mask";
    "Fxn:isinstance(mask,";
    "Fxn:ValueError('`mask`";
    "Fxn:isinstance(inputs,";
    "Fxn:ValueError('`inputs`";
    "Fxn:len(mask)";
    "Fxn:len(inputs):";
    "Fxn:ValueError('The";
    "Fxn:all([m";
    "Fxn:[K.expand_dims(m,";
    "Fxn:K.all(K.concatenate(masks,";
    "class:Add(_Merge):";
    "Fxn:_merge_function";
    "Fxn:range(1,";
    "Fxn:len(inputs)):";
    "Import:keras";
    "class:Subtract(_Merge):";
    "Fxn:build";
    "Fxn:super(Subtract,";
    "Fxn:self).build(input_shape)";
    "Fxn:len(input_shape)";
    "Fxn:ValueError('A";
    "Fxn:_merge_function";
    "Fxn:len(inputs)";
    "Fxn:ValueError('A";
    "Import:keras";
    "class:Multiply(_Merge):";
    "Fxn:_merge_function";
    "Fxn:range(1,";
    "Fxn:len(inputs)):";
    "class:Average(_Merge):";
    "Fxn:_merge_function";
    "Fxn:range(1,";
    "Fxn:len(inputs)):";
    "Fxn:len(inputs)";
    "class:Maximum(_Merge):";
    "Fxn:_merge_function";
    "Fxn:range(1,";
    "Fxn:len(inputs)):";
    "Fxn:K.maximum(output,";
    "class:Minimum(_Merge):";
    "Fxn:_merge_function";
    "Fxn:range(1,";
    "Fxn:len(inputs)):";
    "Fxn:K.minimum(output,";
    "class:Concatenate(_Merge):";
    "Fxn:__init__";
    "Fxn:super(Concatenate,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:build";
    "Fxn:isinstance(input_shape,";
    "Fxn:len(input_shape)";
    "Fxn:ValueError('A";
    "Fxn:all([shape";
    "Fxn:[list(shape)";
    "Fxn:set()";
    "Fxn:range(len(reduced_inputs_shapes)):";
    "Fxn:shape_set.add(tuple(reduced_inputs_shapes[i]))";
    "Fxn:len(shape_set)";
    "Fxn:ValueError('A";
    "Fxn:_merge_function";
    "Fxn:K.concatenate(inputs,";
    "Fxn:compute_output_shape";
    "Fxn:isinstance(input_shape,";
    "Fxn:ValueError('A";
    "Fxn:list(input_shapes[0])";
    "Fxn:tuple(output_shape)";
    "Fxn:compute_mask";
    "Fxn:isinstance(mask,";
    "Fxn:ValueError('`mask`";
    "Fxn:isinstance(inputs,";
    "Fxn:ValueError('`inputs`";
    "Fxn:len(mask)";
    "Fxn:len(inputs):";
    "Fxn:ValueError('The";
    "Fxn:all([m";
    "Fxn:zip(inputs,";
    "Fxn:masks.append(K.ones_like(input_i,";
    "Fxn:K.ndim(mask_i)";
    "Fxn:K.ndim(input_i):";
    "Fxn:masks.append(K.expand_dims(mask_i))";
    "Fxn:masks.append(mask_i)";
    "Fxn:K.concatenate(masks,";
    "Fxn:K.all(concatenated,";
    "Fxn:get_config";
    "Fxn:super(Concatenate,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:Dot(_Merge):";
    "Fxn:__init__";
    "Fxn:super(Dot,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:isinstance(axes,";
    "Fxn:isinstance(axes,";
    "Fxn:TypeError('Invalid";
    "Fxn:len(axes)";
    "Fxn:ValueError('Invalid";
    "Fxn:isinstance(axes[0],";
    "Fxn:isinstance(axes[1],";
    "Fxn:ValueError('Invalid";
    "Fxn:build";
    "Fxn:isinstance(input_shape,";
    "Fxn:len(input_shape)";
    "Fxn:ValueError('A";
    "Fxn:isinstance(self.axes,";
    "Fxn:len(shape1),";
    "Fxn:len(shape2)]";
    "Fxn:ValueError(";
    "Fxn:_merge_function";
    "Fxn:len(inputs)";
    "Fxn:ValueError('A";
    "Fxn:isinstance(self.axes,";
    "Fxn:K.ndim(x1),";
    "Fxn:K.ndim(x2)]";
    "Fxn:range(len(self.axes)):";
    "Fxn:axes.append(self.axes[i]";
    "Fxn:K.ndim(inputs[i]))";
    "Fxn:axes.append(self.axes[i])";
    "Fxn:K.l2_normalize(x1,";
    "Fxn:K.l2_normalize(x2,";
    "Fxn:K.batch_dot(x1,";
    "Fxn:compute_output_shape";
    "Fxn:isinstance(input_shape,";
    "Fxn:len(input_shape)";
    "Fxn:ValueError('A";
    "Fxn:list(input_shape[0])";
    "Fxn:list(input_shape[1])";
    "Fxn:isinstance(self.axes,";
    "Fxn:len(shape1),";
    "Fxn:len(shape2)]";
    "Fxn:shape1.pop(axes[0])";
    "Fxn:shape2.pop(axes[1])";
    "Fxn:shape2.pop(0)";
    "Fxn:len(output_shape)";
    "Fxn:tuple(output_shape)";
    "Fxn:compute_mask";
    "Fxn:get_config";
    "Fxn:super(Dot,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Fxn:add";
    "Fxn:keras.layers.Input(shape=(16,))";
    "Fxn:keras.layers.Dense(8,";
    "Fxn:activation='relu')(input1)";
    "Fxn:keras.layers.Input(shape=(32,))";
    "Fxn:keras.layers.Dense(8,";
    "Fxn:activation='relu')(input2)";
    "Fxn:keras.layers.add([x1,";
    "Fxn:keras.layers.Dense(4)(added)";
    "Fxn:keras.models.Model(inputs=[input1,";
    "Fxn:Add(**kwargs)(inputs)";
    "Fxn:subtract";
    "Fxn:keras.layers.Input(shape=(16,))";
    "Fxn:keras.layers.Dense(8,";
    "Fxn:activation='relu')(input1)";
    "Fxn:keras.layers.Input(shape=(32,))";
    "Fxn:keras.layers.Dense(8,";
    "Fxn:activation='relu')(input2)";
    "Fxn:keras.layers.subtract([x1,";
    "Fxn:keras.layers.Dense(4)(subtracted)";
    "Fxn:keras.models.Model(inputs=[input1,";
    "Fxn:Subtract(**kwargs)(inputs)";
    "Fxn:multiply";
    "Fxn:Multiply(**kwargs)(inputs)";
    "Fxn:average";
    "Fxn:Average(**kwargs)(inputs)";
    "Fxn:maximum";
    "Fxn:Maximum(**kwargs)(inputs)";
    "Fxn:minimum";
    "Fxn:Minimum(**kwargs)(inputs)";
    "Fxn:concatenate";
    "Fxn:Concatenate(axis=axis,";
    "Fxn:**kwargs)(inputs)";
    "Fxn:dot";
    "Fxn:Dot(axes=axes,";
    "Fxn:**kwargs)(inputs)";
    "Import:keras";
    "Import:keras";
    "/keras/layers/noise.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:Layer";
    "Import:backend";
    "Import:numpy";
    "Import:interfaces";
    "class:GaussianNoise(Layer):";
    "Fxn:__init__";
    "Fxn:super(GaussianNoise,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:call";
    "Fxn:noised";
    "Fxn:K.random_normal(shape=K.shape(inputs),";
    "Fxn:K.in_train_phase(noised,";
    "Fxn:get_config";
    "Fxn:super(GaussianNoise,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Fxn:compute_output_shape";
    "class:GaussianDropout(Layer):";
    "Fxn:__init__";
    "Fxn:super(GaussianDropout,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:call";
    "Fxn:noised";
    "Fxn:np.sqrt(self.rate";
    "Fxn:K.random_normal(shape=K.shape(inputs),";
    "Fxn:K.in_train_phase(noised,";
    "Fxn:get_config";
    "Fxn:super(GaussianDropout,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Fxn:compute_output_shape";
    "class:AlphaDropout(Layer):";
    "Fxn:__init__";
    "Fxn:super(AlphaDropout,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:_get_noise_shape";
    "Fxn:K.shape(inputs)";
    "Fxn:call";
    "Fxn:self._get_noise_shape(inputs)";
    "Fxn:dropped_inputs";
    "Fxn:K.greater_equal(K.random_uniform(noise_shape,";
    "Fxn:K.cast(kept_idx,";
    "Fxn:K.floatx())";
    "Fxn:K.in_train_phase(dropped_inputs,";
    "Fxn:get_config";
    "Fxn:super(AlphaDropout,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Fxn:compute_output_shape";
    "/keras/layers/normalization.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:Layer,";
    "Import:initializers";
    "Import:regularizers";
    "Import:constraints";
    "Import:backend";
    "Import:interfaces";
    "class:BatchNormalization(Layer):";
    "Fxn:__init__";
    "Fxn:super(BatchNormalization,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:initializers.get(beta_initializer)";
    "Fxn:initializers.get(gamma_initializer)";
    "Fxn:initializers.get(moving_mean_initializer)";
    "Fxn:initializers.get(moving_variance_initializer)";
    "Fxn:regularizers.get(beta_regularizer)";
    "Fxn:regularizers.get(gamma_regularizer)";
    "Fxn:constraints.get(beta_constraint)";
    "Fxn:constraints.get(gamma_constraint)";
    "Fxn:build";
    "Fxn:ValueError('Axis";
    "Fxn:str(self.axis)";
    "Fxn:str(input_shape)";
    "Fxn:InputSpec(ndim=len(input_shape),";
    "Fxn:self.add_weight(shape=shape,";
    "Fxn:self.add_weight(shape=shape,";
    "Fxn:self.add_weight(";
    "Fxn:self.add_weight(";
    "Fxn:call";
    "Fxn:K.int_shape(inputs)";
    "Fxn:len(input_shape)";
    "Fxn:list(range(len(input_shape)))";
    "Fxn:len(input_shape)";
    "Fxn:list(range(ndim))[:-1])";
    "Fxn:normalize_inference";
    "Fxn:K.reshape(self.moving_mean,";
    "Fxn:K.reshape(self.moving_variance,";
    "Fxn:K.reshape(self.beta,";
    "Fxn:K.reshape(self.gamma,";
    "Fxn:K.batch_normalization(";
    "Fxn:K.batch_normalization(";
    "Fxn:normalize_inference()";
    "Fxn:K.normalize_batch_in_training(";
    "Fxn:K.backend()";
    "Fxn:K.prod([K.shape(inputs)[axis]";
    "Fxn:K.cast(sample_size,";
    "Fxn:dtype=K.dtype(inputs))";
    "Fxn:self.add_update([K.moving_average_update(self.moving_mean,";
    "Fxn:K.moving_average_update(self.moving_variance,";
    "Fxn:K.in_train_phase(normed_training,";
    "Fxn:get_config";
    "Fxn:initializers.serialize(self.beta_initializer),";
    "Fxn:initializers.serialize(self.gamma_initializer),";
    "Fxn:initializers.serialize(self.moving_mean_initializer),";
    "Fxn:initializers.serialize(self.moving_variance_initializer),";
    "Fxn:regularizers.serialize(self.beta_regularizer),";
    "Fxn:regularizers.serialize(self.gamma_regularizer),";
    "Fxn:constraints.serialize(self.beta_constraint),";
    "Fxn:constraints.serialize(self.gamma_constraint)";
    "Fxn:super(BatchNormalization,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Fxn:compute_output_shape";
    "/keras/layers/pooling.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:backend";
    "Import:Layer";
    "Import:InputSpec";
    "Import:conv_utils";
    "Import:interfaces";
    "class:_Pooling1D(Layer):";
    "Fxn:__init__";
    "Fxn:super(_Pooling1D,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:conv_utils.normalize_tuple(pool_size,";
    "Fxn:conv_utils.normalize_tuple(strides,";
    "Fxn:conv_utils.normalize_padding(padding)";
    "Fxn:InputSpec(ndim=3)";
    "Fxn:compute_output_shape";
    "Fxn:conv_utils.conv_output_length(input_shape[1],";
    "Fxn:_pooling_function";
    "Fxn:call";
    "Fxn:K.expand_dims(inputs,";
    "Fxn:self._pooling_function(inputs=inputs,";
    "Fxn:K.squeeze(output,";
    "Fxn:get_config";
    "Fxn:super(_Pooling1D,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:MaxPooling1D(_Pooling1D):";
    "Fxn:__init__";
    "Fxn:super(MaxPooling1D,";
    "Fxn:self).__init__(pool_size,";
    "Fxn:_pooling_function";
    "Fxn:K.pool2d(inputs,";
    "class:AveragePooling1D(_Pooling1D):";
    "Fxn:__init__";
    "Fxn:super(AveragePooling1D,";
    "Fxn:self).__init__(pool_size,";
    "Fxn:_pooling_function";
    "Fxn:K.pool2d(inputs,";
    "class:_Pooling2D(Layer):";
    "Fxn:__init__";
    "Fxn:pool_size=(2,";
    "Fxn:super(_Pooling2D,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:conv_utils.normalize_tuple(pool_size,";
    "Fxn:conv_utils.normalize_tuple(strides,";
    "Fxn:conv_utils.normalize_padding(padding)";
    "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:InputSpec(ndim=4)";
    "Fxn:compute_output_shape";
    "Fxn:conv_utils.conv_output_length(rows,";
    "Fxn:conv_utils.conv_output_length(cols,";
    "Fxn:_pooling_function";
    "Fxn:call";
    "Fxn:self._pooling_function(inputs=inputs,";
    "Fxn:get_config";
    "Fxn:super(_Pooling2D,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:MaxPooling2D(_Pooling2D):";
    "Fxn:__init__";
    "Fxn:pool_size=(2,";
    "Fxn:super(MaxPooling2D,";
    "Fxn:self).__init__(pool_size,";
    "Fxn:_pooling_function";
    "Fxn:K.pool2d(inputs,";
    "class:AveragePooling2D(_Pooling2D):";
    "Fxn:__init__";
    "Fxn:pool_size=(2,";
    "Fxn:super(AveragePooling2D,";
    "Fxn:self).__init__(pool_size,";
    "Fxn:_pooling_function";
    "Fxn:K.pool2d(inputs,";
    "class:_Pooling3D(Layer):";
    "Fxn:__init__";
    "Fxn:pool_size=(2,";
    "Fxn:super(_Pooling3D,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:conv_utils.normalize_tuple(pool_size,";
    "Fxn:conv_utils.normalize_tuple(strides,";
    "Fxn:conv_utils.normalize_padding(padding)";
    "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:InputSpec(ndim=5)";
    "Fxn:compute_output_shape";
    "Fxn:conv_utils.conv_output_length(len_dim1,";
    "Fxn:conv_utils.conv_output_length(len_dim2,";
    "Fxn:conv_utils.conv_output_length(len_dim3,";
    "Fxn:_pooling_function";
    "Fxn:call";
    "Fxn:self._pooling_function(inputs=inputs,";
    "Fxn:get_config";
    "Fxn:super(_Pooling3D,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:MaxPooling3D(_Pooling3D):";
    "Fxn:__init__";
    "Fxn:pool_size=(2,";
    "Fxn:super(MaxPooling3D,";
    "Fxn:self).__init__(pool_size,";
    "Fxn:_pooling_function";
    "Fxn:K.pool3d(inputs,";
    "class:AveragePooling3D(_Pooling3D):";
    "Fxn:__init__";
    "Fxn:pool_size=(2,";
    "Fxn:super(AveragePooling3D,";
    "Fxn:self).__init__(pool_size,";
    "Fxn:_pooling_function";
    "Fxn:K.pool3d(inputs,";
    "class:_GlobalPooling1D(Layer):";
    "Fxn:__init__";
    "Fxn:super(_GlobalPooling1D,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:InputSpec(ndim=3)";
    "Fxn:compute_output_shape";
    "Fxn:call";
    "class:GlobalAveragePooling1D(_GlobalPooling1D):";
    "Fxn:call";
    "Fxn:K.mean(inputs,";
    "class:GlobalMaxPooling1D(_GlobalPooling1D):";
    "Fxn:call";
    "Fxn:K.max(inputs,";
    "class:_GlobalPooling2D(Layer):";
    "Fxn:__init__";
    "Fxn:super(_GlobalPooling2D,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:InputSpec(ndim=4)";
    "Fxn:compute_output_shape";
    "Fxn:call";
    "Fxn:get_config";
    "Fxn:super(_GlobalPooling2D,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:GlobalAveragePooling2D(_GlobalPooling2D):";
    "Fxn:call";
    "Fxn:K.mean(inputs,";
    "Fxn:K.mean(inputs,";
    "class:GlobalMaxPooling2D(_GlobalPooling2D):";
    "Fxn:call";
    "Fxn:K.max(inputs,";
    "Fxn:K.max(inputs,";
    "class:_GlobalPooling3D(Layer):";
    "Fxn:__init__";
    "Fxn:super(_GlobalPooling3D,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:InputSpec(ndim=5)";
    "Fxn:compute_output_shape";
    "Fxn:call";
    "Fxn:get_config";
    "Fxn:super(_GlobalPooling3D,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:GlobalAveragePooling3D(_GlobalPooling3D):";
    "Fxn:call";
    "Fxn:K.mean(inputs,";
    "Fxn:K.mean(inputs,";
    "class:GlobalMaxPooling3D(_GlobalPooling3D):";
    "Fxn:call";
    "Fxn:K.max(inputs,";
    "Fxn:K.max(inputs,";
    "/keras/layers/recurrent.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:numpy";
    "Import:warnings";
    "Import:backend";
    "Import:activations";
    "Import:initializers";
    "Import:regularizers";
    "Import:constraints";
    "Import:Layer";
    "Import:InputSpec";
    "Import:has_arg";
    "Import:Recurrent";
    "Import:interfaces";
    "class:StackedRNNCells(Layer):";
    "Fxn:__init__";
    "Fxn:hasattr(cell,";
    "Fxn:ValueError('All";
    "Fxn:hasattr(cell,";
    "Fxn:ValueError('All";
    "Fxn:super(StackedRNNCells,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:state_size";
    "Fxn:hasattr(cell.state_size,";
    "Fxn:list(cell.state_size)";
    "Fxn:state_size.append(cell.state_size)";
    "Fxn:tuple(state_size)";
    "Fxn:call";
    "Fxn:hasattr(cell.state_size,";
    "Fxn:nested_states.append(states[:len(cell.state_size)])";
    "Fxn:states[len(cell.state_size):]";
    "Fxn:nested_states.append([states[0]])";
    "Fxn:zip(self.cells,";
    "Fxn:has_arg(cell.call,";
    "Fxn:cell.call(inputs,";
    "Fxn:cell.call(inputs,";
    "Fxn:new_nested_states.append(states)";
    "Fxn:build";
    "Fxn:isinstance(input_shape,";
    "Fxn:isinstance(cell,";
    "Fxn:has_arg(cell.call,";
    "Fxn:cell.build([input_shape]";
    "Fxn:cell.build(input_shape)";
    "Fxn:hasattr(cell.state_size,";
    "Fxn:get_config";
    "Fxn:cells.append({'class_name':";
    "Fxn:cell.get_config()})";
    "Fxn:super(StackedRNNCells,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Fxn:from_config";
    "Fxn:config.pop('cells'):";
    "Fxn:cells.append(deserialize_layer(cell_config,";
    "Fxn:cls(cells,";
    "Fxn:trainable_weights";
    "Fxn:isinstance(cell,";
    "Fxn:non_trainable_weights";
    "Fxn:isinstance(cell,";
    "Fxn:isinstance(cell,";
    "Fxn:get_weights";
    "Fxn:isinstance(cell,";
    "Fxn:K.batch_get_value(weights)";
    "Fxn:set_weights";
    "Fxn:`model.get_weights()`.";
    "Fxn:isinstance(cell,";
    "Fxn:len(cell.weights)";
    "Fxn:zip(cell.weights,";
    "Fxn:tuples.append((sw,";
    "Fxn:K.batch_set_value(tuples)";
    "Fxn:losses";
    "Fxn:isinstance(cell,";
    "Fxn:get_losses_for";
    "Fxn:isinstance(cell,";
    "Fxn:cell.get_losses_for(inputs)";
    "Import:deserialize";
    "class:RNN(Layer):";
    "class:MinimalRNNCell(keras.layers.Layer):";
    "Fxn:__init__";
    "Fxn:super(MinimalRNNCell,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:build";
    "Fxn:self.add_weight(shape=(input_shape[-1],";
    "Fxn:self.add_weight(";
    "Fxn:shape=(self.units,";
    "Fxn:call";
    "Fxn:K.dot(inputs,";
    "Fxn:K.dot(prev_output,";
    "Fxn:MinimalRNNCell(32)";
    "Fxn:keras.Input((None,";
    "Fxn:RNN(cell)";
    "Fxn:layer(x)";
    "Fxn:[MinimalRNNCell(32),";
    "Fxn:MinimalRNNCell(64)]";
    "Fxn:keras.Input((None,";
    "Fxn:RNN(cells)";
    "Fxn:layer(x)";
    "Fxn:__init__";
    "Fxn:isinstance(cell,";
    "Fxn:StackedRNNCells(cell)";
    "Fxn:hasattr(cell,";
    "Fxn:ValueError('`cell`";
    "Fxn:hasattr(cell,";
    "Fxn:ValueError('The";
    "Fxn:'(tuple";
    "Fxn:super(RNN,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:[InputSpec(ndim=3)]";
    "Fxn:states";
    "Fxn:isinstance(self.cell.state_size,";
    "Fxn:len(self.cell.state_size)";
    "Fxn:range(num_states)]";
    "Fxn:states";
    "Fxn:compute_output_shape";
    "Fxn:isinstance(input_shape,";
    "Fxn:hasattr(self.cell.state_size,";
    "Fxn:[(input_shape[0],";
    "Fxn:compute_mask";
    "Fxn:isinstance(mask,";
    "Fxn:build";
    "Fxn:isinstance(input_shape,";
    "Fxn:InputSpec(shape=(batch_size,";
    "Fxn:isinstance(self.cell,";
    "Fxn:self.cell.build([step_input_shape]";
    "Fxn:self.cell.build(step_input_shape)";
    "Fxn:hasattr(self.cell.state_size,";
    "Fxn:list(self.cell.state_size)";
    "Fxn:ValueError(";
    "Fxn:'{}'.format(self.state_spec,";
    "Fxn:[InputSpec(shape=(None,";
    "Fxn:self.reset_states()";
    "Fxn:get_initial_state";
    "Fxn:K.zeros_like(inputs)";
    "Fxn:K.sum(initial_state,";
    "Fxn:axis=(1,";
    "Fxn:K.expand_dims(initial_state)";
    "Fxn:hasattr(self.cell.state_size,";
    "Fxn:[K.tile(initial_state,";
    "Fxn:[K.tile(initial_state,";
    "Fxn:__call__";
    "Fxn:self._standardize_args(";
    "Fxn:super(RNN,";
    "Fxn:self).__call__(inputs,";
    "Fxn:[InputSpec(shape=K.int_shape(state))";
    "Fxn:[InputSpec(shape=K.int_shape(constant))";
    "Fxn:len(constants)";
    "Fxn:K.is_keras_tensor(additional_inputs[0])";
    "Fxn:K.is_keras_tensor(tensor)";
    "Fxn:ValueError('The";
    "Fxn:super(RNN,";
    "Fxn:self).__call__(full_input,";
    "Fxn:super(RNN,";
    "Fxn:self).__call__(inputs,";
    "Fxn:call";
    "Fxn:`(samples,";
    "Fxn:.build()";
    "Fxn:isinstance(inputs,";
    "Fxn:self.get_initial_state(inputs)";
    "Fxn:isinstance(mask,";
    "Fxn:len(initial_state)";
    "Fxn:len(self.states):";
    "Fxn:ValueError('Layer";
    "Fxn:str(len(self.states))";
    "Fxn:str(len(initial_state))";
    "Fxn:K.int_shape(inputs)";
    "Fxn:ValueError('Cannot";
    "Fxn:has_arg(self.cell.call,";
    "Fxn:has_arg(self.cell.call,";
    "Fxn:ValueError('RNN";
    "Fxn:step";
    "Fxn:self.cell.call(inputs,";
    "Fxn:step";
    "Fxn:self.cell.call(inputs,";
    "Fxn:K.rnn(step,";
    "Fxn:range(len(states)):";
    "Fxn:updates.append((self.states[i],";
    "Fxn:self.add_update(updates,";
    "Fxn:getattr(last_output,";
    "Fxn:isinstance(states,";
    "Fxn:list(states)";
    "Fxn:_standardize_args";
    "Fxn:isinstance(inputs,";
    "Fxn:len(inputs)";
    "Fxn:to_list_or_none";
    "Fxn:isinstance(x,";
    "Fxn:isinstance(x,";
    "Fxn:list(x)";
    "Fxn:to_list_or_none(initial_state)";
    "Fxn:to_list_or_none(constants)";
    "Fxn:reset_states";
    "Fxn:AttributeError('Layer";
    "Fxn:ValueError('If";
    "Fxn:hasattr(self.cell.state_size,";
    "Fxn:[K.zeros((batch_size,";
    "Fxn:[K.zeros((batch_size,";
    "Fxn:hasattr(self.cell.state_size,";
    "Fxn:zip(self.states,";
    "Fxn:K.set_value(state,";
    "Fxn:np.zeros((batch_size,";
    "Fxn:K.set_value(self.states[0],";
    "Fxn:np.zeros((batch_size,";
    "Fxn:isinstance(states,";
    "Fxn:len(states)";
    "Fxn:len(self.states):";
    "Fxn:ValueError('Layer";
    "Fxn:str(len(self.states))";
    "Fxn:str(len(states))";
    "Fxn:str(states))";
    "Fxn:enumerate(zip(states,";
    "Fxn:hasattr(self.cell.state_size,";
    "Fxn:ValueError('State";
    "Fxn:str(index)";
    "Fxn:str((batch_size,";
    "Fxn:str(value.shape))";
    "Fxn:K.set_value(state,";
    "Fxn:get_config";
    "Fxn:self.cell.get_config()";
    "Fxn:super(RNN,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Fxn:from_config";
    "Fxn:deserialize_layer(config.pop('cell'),";
    "Fxn:config.pop('num_constants',";
    "Fxn:cls(cell,";
    "Fxn:trainable_weights";
    "Fxn:isinstance(self.cell,";
    "Fxn:non_trainable_weights";
    "Fxn:isinstance(self.cell,";
    "Fxn:losses";
    "Fxn:super(RNN,";
    "Fxn:isinstance(self.cell,";
    "Fxn:get_losses_for";
    "Fxn:isinstance(self.cell,";
    "Fxn:self.cell.get_losses_for(inputs)";
    "Fxn:super(RNN,";
    "Fxn:self).get_losses_for(inputs)";
    "Fxn:super(RNN,";
    "Fxn:self).get_losses_for(inputs)";
    "Import:deserialize";
    "class:SimpleRNNCell(Layer):";
    "Fxn:__init__";
    "Fxn:super(SimpleRNNCell,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:activations.get(activation)";
    "Fxn:initializers.get(kernel_initializer)";
    "Fxn:initializers.get(recurrent_initializer)";
    "Fxn:initializers.get(bias_initializer)";
    "Fxn:regularizers.get(kernel_regularizer)";
    "Fxn:regularizers.get(recurrent_regularizer)";
    "Fxn:regularizers.get(bias_regularizer)";
    "Fxn:constraints.get(kernel_constraint)";
    "Fxn:constraints.get(recurrent_constraint)";
    "Fxn:constraints.get(bias_constraint)";
    "Fxn:min(1.,";
    "Fxn:max(0.,";
    "Fxn:min(1.,";
    "Fxn:max(0.,";
    "Fxn:build";
    "Fxn:self.add_weight(shape=(input_shape[-1],";
    "Fxn:self.add_weight(";
    "Fxn:shape=(self.units,";
    "Fxn:self.add_weight(shape=(self.units,),";
    "Fxn:call";
    "Fxn:_generate_dropout_mask(";
    "Fxn:_generate_dropout_ones(inputs,";
    "Fxn:K.shape(inputs)[-1]),";
    "Fxn:_generate_dropout_mask(";
    "Fxn:_generate_dropout_ones(inputs,";
    "Fxn:K.dot(inputs";
    "Fxn:K.dot(inputs,";
    "Fxn:K.bias_add(h,";
    "Fxn:K.dot(prev_output,";
    "Fxn:self.activation(output)";
    "Fxn:get_config";
    "Fxn:activations.serialize(self.activation),";
    "Fxn:initializers.serialize(self.kernel_initializer),";
    "Fxn:initializers.serialize(self.recurrent_initializer),";
    "Fxn:initializers.serialize(self.bias_initializer),";
    "Fxn:regularizers.serialize(self.kernel_regularizer),";
    "Fxn:regularizers.serialize(self.recurrent_regularizer),";
    "Fxn:regularizers.serialize(self.bias_regularizer),";
    "Fxn:constraints.serialize(self.kernel_constraint),";
    "Fxn:constraints.serialize(self.recurrent_constraint),";
    "Fxn:constraints.serialize(self.bias_constraint),";
    "Fxn:super(SimpleRNNCell,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:SimpleRNN(RNN):";
    "Fxn:__init__";
    "Fxn:kwargs.pop('implementation')";
    "Fxn:warnings.warn('The";
    "Fxn:K.backend()";
    "Fxn:warnings.warn(";
    "Fxn:SimpleRNNCell(units,";
    "Fxn:super(SimpleRNN,";
    "Fxn:self).__init__(cell,";
    "Fxn:regularizers.get(activity_regularizer)";
    "Fxn:call";
    "Fxn:super(SimpleRNN,";
    "Fxn:self).call(inputs,";
    "Fxn:units";
    "Fxn:activation";
    "Fxn:use_bias";
    "Fxn:kernel_initializer";
    "Fxn:recurrent_initializer";
    "Fxn:bias_initializer";
    "Fxn:kernel_regularizer";
    "Fxn:recurrent_regularizer";
    "Fxn:bias_regularizer";
    "Fxn:kernel_constraint";
    "Fxn:recurrent_constraint";
    "Fxn:bias_constraint";
    "Fxn:dropout";
    "Fxn:recurrent_dropout";
    "Fxn:get_config";
    "Fxn:activations.serialize(self.activation),";
    "Fxn:initializers.serialize(self.kernel_initializer),";
    "Fxn:initializers.serialize(self.recurrent_initializer),";
    "Fxn:initializers.serialize(self.bias_initializer),";
    "Fxn:regularizers.serialize(self.kernel_regularizer),";
    "Fxn:regularizers.serialize(self.recurrent_regularizer),";
    "Fxn:regularizers.serialize(self.bias_regularizer),";
    "Fxn:regularizers.serialize(self.activity_regularizer),";
    "Fxn:constraints.serialize(self.kernel_constraint),";
    "Fxn:constraints.serialize(self.recurrent_constraint),";
    "Fxn:constraints.serialize(self.bias_constraint),";
    "Fxn:super(SimpleRNN,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Fxn:from_config";
    "Fxn:config.pop('implementation')";
    "Fxn:cls(**config)";
    "class:GRUCell(Layer):";
    "Fxn:__init__";
    "Fxn:super(GRUCell,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:activations.get(activation)";
    "Fxn:activations.get(recurrent_activation)";
    "Fxn:initializers.get(kernel_initializer)";
    "Fxn:initializers.get(recurrent_initializer)";
    "Fxn:initializers.get(bias_initializer)";
    "Fxn:regularizers.get(kernel_regularizer)";
    "Fxn:regularizers.get(recurrent_regularizer)";
    "Fxn:regularizers.get(bias_regularizer)";
    "Fxn:constraints.get(kernel_constraint)";
    "Fxn:constraints.get(recurrent_constraint)";
    "Fxn:constraints.get(bias_constraint)";
    "Fxn:min(1.,";
    "Fxn:max(0.,";
    "Fxn:min(1.,";
    "Fxn:max(0.,";
    "Fxn:build";
    "Fxn:self.add_weight(shape=(input_dim,";
    "Fxn:self.add_weight(";
    "Fxn:shape=(self.units,";
    "Fxn:`(2";
    "Fxn:self.add_weight(shape=bias_shape,";
    "Fxn:K.flatten(self.bias[0])";
    "Fxn:K.flatten(self.bias[1])";
    "Fxn:call";
    "Fxn:_generate_dropout_mask(";
    "Fxn:_generate_dropout_ones(inputs,";
    "Fxn:K.shape(inputs)[-1]),";
    "Fxn:_generate_dropout_mask(";
    "Fxn:_generate_dropout_ones(inputs,";
    "Fxn:K.dot(inputs_z,";
    "Fxn:K.dot(inputs_r,";
    "Fxn:K.dot(inputs_h,";
    "Fxn:K.bias_add(x_z,";
    "Fxn:K.bias_add(x_r,";
    "Fxn:K.bias_add(x_h,";
    "Fxn:K.dot(h_tm1_z,";
    "Fxn:K.dot(h_tm1_r,";
    "Fxn:K.bias_add(recurrent_z,";
    "Fxn:K.bias_add(recurrent_r,";
    "Fxn:self.recurrent_activation(x_z";
    "Fxn:self.recurrent_activation(x_r";
    "Fxn:K.dot(h_tm1_h,";
    "Fxn:K.bias_add(recurrent_h,";
    "Fxn:K.dot(r";
    "Fxn:self.activation(x_h";
    "Fxn:K.dot(inputs,";
    "Fxn:K.bias_add(matrix_x,";
    "Fxn:K.dot(h_tm1,";
    "Fxn:K.bias_add(matrix_inner,";
    "Fxn:K.dot(h_tm1,";
    "Fxn:self.recurrent_activation(x_z";
    "Fxn:self.recurrent_activation(x_r";
    "Fxn:K.dot(r";
    "Fxn:self.activation(x_h";
    "Fxn:get_config";
    "Fxn:activations.serialize(self.activation),";
    "Fxn:activations.serialize(self.recurrent_activation),";
    "Fxn:initializers.serialize(self.kernel_initializer),";
    "Fxn:initializers.serialize(self.recurrent_initializer),";
    "Fxn:initializers.serialize(self.bias_initializer),";
    "Fxn:regularizers.serialize(self.kernel_regularizer),";
    "Fxn:regularizers.serialize(self.recurrent_regularizer),";
    "Fxn:regularizers.serialize(self.bias_regularizer),";
    "Fxn:constraints.serialize(self.kernel_constraint),";
    "Fxn:constraints.serialize(self.recurrent_constraint),";
    "Fxn:constraints.serialize(self.bias_constraint),";
    "Fxn:super(GRUCell,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:GRU(RNN):";
    "Fxn:__init__";
    "Fxn:warnings.warn('`implementation=0`";
    "Fxn:K.backend()";
    "Fxn:warnings.warn(";
    "Fxn:GRUCell(units,";
    "Fxn:super(GRU,";
    "Fxn:self).__init__(cell,";
    "Fxn:regularizers.get(activity_regularizer)";
    "Fxn:call";
    "Fxn:super(GRU,";
    "Fxn:self).call(inputs,";
    "Fxn:units";
    "Fxn:activation";
    "Fxn:recurrent_activation";
    "Fxn:use_bias";
    "Fxn:kernel_initializer";
    "Fxn:recurrent_initializer";
    "Fxn:bias_initializer";
    "Fxn:kernel_regularizer";
    "Fxn:recurrent_regularizer";
    "Fxn:bias_regularizer";
    "Fxn:kernel_constraint";
    "Fxn:recurrent_constraint";
    "Fxn:bias_constraint";
    "Fxn:dropout";
    "Fxn:recurrent_dropout";
    "Fxn:implementation";
    "Fxn:reset_after";
    "Fxn:get_config";
    "Fxn:activations.serialize(self.activation),";
    "Fxn:activations.serialize(self.recurrent_activation),";
    "Fxn:initializers.serialize(self.kernel_initializer),";
    "Fxn:initializers.serialize(self.recurrent_initializer),";
    "Fxn:initializers.serialize(self.bias_initializer),";
    "Fxn:regularizers.serialize(self.kernel_regularizer),";
    "Fxn:regularizers.serialize(self.recurrent_regularizer),";
    "Fxn:regularizers.serialize(self.bias_regularizer),";
    "Fxn:regularizers.serialize(self.activity_regularizer),";
    "Fxn:constraints.serialize(self.kernel_constraint),";
    "Fxn:constraints.serialize(self.recurrent_constraint),";
    "Fxn:constraints.serialize(self.bias_constraint),";
    "Fxn:super(GRU,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Fxn:from_config";
    "Fxn:cls(**config)";
    "class:LSTMCell(Layer):";
    "Fxn:__init__";
    "Fxn:super(LSTMCell,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:activations.get(activation)";
    "Fxn:activations.get(recurrent_activation)";
    "Fxn:initializers.get(kernel_initializer)";
    "Fxn:initializers.get(recurrent_initializer)";
    "Fxn:initializers.get(bias_initializer)";
    "Fxn:regularizers.get(kernel_regularizer)";
    "Fxn:regularizers.get(recurrent_regularizer)";
    "Fxn:regularizers.get(bias_regularizer)";
    "Fxn:constraints.get(kernel_constraint)";
    "Fxn:constraints.get(recurrent_constraint)";
    "Fxn:constraints.get(bias_constraint)";
    "Fxn:min(1.,";
    "Fxn:max(0.,";
    "Fxn:min(1.,";
    "Fxn:max(0.,";
    "Fxn:build";
    "Fxn:self.add_weight(shape=(input_dim,";
    "Fxn:self.add_weight(";
    "Fxn:shape=(self.units,";
    "Fxn:bias_initializer";
    "Fxn:K.concatenate([";
    "Fxn:self.bias_initializer((self.units,),";
    "Fxn:initializers.Ones()((self.units,),";
    "Fxn:self.bias_initializer((self.units";
    "Fxn:self.add_weight(shape=(self.units";
    "Fxn:call";
    "Fxn:_generate_dropout_mask(";
    "Fxn:_generate_dropout_ones(inputs,";
    "Fxn:K.shape(inputs)[-1]),";
    "Fxn:_generate_dropout_mask(";
    "Fxn:_generate_dropout_ones(inputs,";
    "Fxn:K.dot(inputs_i,";
    "Fxn:K.dot(inputs_f,";
    "Fxn:K.dot(inputs_c,";
    "Fxn:K.dot(inputs_o,";
    "Fxn:K.bias_add(x_i,";
    "Fxn:K.bias_add(x_f,";
    "Fxn:K.bias_add(x_c,";
    "Fxn:K.bias_add(x_o,";
    "Fxn:self.recurrent_activation(x_i";
    "Fxn:K.dot(h_tm1_i,";
    "Fxn:self.recurrent_activation(x_f";
    "Fxn:K.dot(h_tm1_f,";
    "Fxn:self.activation(x_c";
    "Fxn:K.dot(h_tm1_c,";
    "Fxn:self.recurrent_activation(x_o";
    "Fxn:K.dot(h_tm1_o,";
    "Fxn:K.dot(inputs,";
    "Fxn:K.dot(h_tm1,";
    "Fxn:K.bias_add(z,";
    "Fxn:self.recurrent_activation(z0)";
    "Fxn:self.recurrent_activation(z1)";
    "Fxn:self.activation(z2)";
    "Fxn:self.recurrent_activation(z3)";
    "Fxn:self.activation(c)";
    "Fxn:get_config";
    "Fxn:activations.serialize(self.activation),";
    "Fxn:activations.serialize(self.recurrent_activation),";
    "Fxn:initializers.serialize(self.kernel_initializer),";
    "Fxn:initializers.serialize(self.recurrent_initializer),";
    "Fxn:initializers.serialize(self.bias_initializer),";
    "Fxn:regularizers.serialize(self.kernel_regularizer),";
    "Fxn:regularizers.serialize(self.recurrent_regularizer),";
    "Fxn:regularizers.serialize(self.bias_regularizer),";
    "Fxn:constraints.serialize(self.kernel_constraint),";
    "Fxn:constraints.serialize(self.recurrent_constraint),";
    "Fxn:constraints.serialize(self.bias_constraint),";
    "Fxn:super(LSTMCell,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:LSTM(RNN):";
    "Fxn:__init__";
    "Fxn:warnings.warn('`implementation=0`";
    "Fxn:K.backend()";
    "Fxn:warnings.warn(";
    "Fxn:LSTMCell(units,";
    "Fxn:super(LSTM,";
    "Fxn:self).__init__(cell,";
    "Fxn:regularizers.get(activity_regularizer)";
    "Fxn:call";
    "Fxn:super(LSTM,";
    "Fxn:self).call(inputs,";
    "Fxn:units";
    "Fxn:activation";
    "Fxn:recurrent_activation";
    "Fxn:use_bias";
    "Fxn:kernel_initializer";
    "Fxn:recurrent_initializer";
    "Fxn:bias_initializer";
    "Fxn:unit_forget_bias";
    "Fxn:kernel_regularizer";
    "Fxn:recurrent_regularizer";
    "Fxn:bias_regularizer";
    "Fxn:kernel_constraint";
    "Fxn:recurrent_constraint";
    "Fxn:bias_constraint";
    "Fxn:dropout";
    "Fxn:recurrent_dropout";
    "Fxn:implementation";
    "Fxn:get_config";
    "Fxn:activations.serialize(self.activation),";
    "Fxn:activations.serialize(self.recurrent_activation),";
    "Fxn:initializers.serialize(self.kernel_initializer),";
    "Fxn:initializers.serialize(self.recurrent_initializer),";
    "Fxn:initializers.serialize(self.bias_initializer),";
    "Fxn:regularizers.serialize(self.kernel_regularizer),";
    "Fxn:regularizers.serialize(self.recurrent_regularizer),";
    "Fxn:regularizers.serialize(self.bias_regularizer),";
    "Fxn:regularizers.serialize(self.activity_regularizer),";
    "Fxn:constraints.serialize(self.kernel_constraint),";
    "Fxn:constraints.serialize(self.recurrent_constraint),";
    "Fxn:constraints.serialize(self.bias_constraint),";
    "Fxn:super(LSTM,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Fxn:from_config";
    "Fxn:cls(**config)";
    "Fxn:_generate_dropout_ones";
    "Fxn:K.backend()";
    "Fxn:K.ones_like(K.reshape(inputs[:,";
    "Fxn:K.tile(ones,";
    "Fxn:K.ones((K.shape(inputs)[0],";
    "Fxn:_generate_dropout_mask";
    "Fxn:dropped_inputs";
    "Fxn:K.dropout(ones,";
    "Fxn:[K.in_train_phase(";
    "Fxn:range(count)]";
    "Fxn:K.in_train_phase(";
    "/keras/layers/wrappers.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:copy";
    "Import:Layer";
    "Import:InputSpec";
    "Import:_object_list_uid";
    "Import:has_arg";
    "Import:backend";
    "class:Wrapper(Layer):";
    "Fxn:__init__";
    "Fxn:super(Wrapper,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:build";
    "Fxn:activity_regularizer";
    "Fxn:hasattr(self.layer,";
    "Fxn:trainable";
    "Fxn:trainable";
    "Fxn:trainable_weights";
    "Fxn:non_trainable_weights";
    "Fxn:updates";
    "Fxn:hasattr(self.layer,";
    "Fxn:get_updates_for";
    "Fxn:_object_list_uid(inputs)";
    "Fxn:self.layer.get_updates_for(inner_inputs)";
    "Fxn:super(Wrapper,";
    "Fxn:self).get_updates_for(inputs)";
    "Fxn:losses";
    "Fxn:hasattr(self.layer,";
    "Fxn:get_losses_for";
    "Fxn:self.layer.get_losses_for(None)";
    "Fxn:super(Wrapper,";
    "Fxn:self).get_losses_for(None)";
    "Fxn:super(Wrapper,";
    "Fxn:self).get_losses_for(inputs)";
    "Fxn:get_weights";
    "Fxn:self.layer.get_weights()";
    "Fxn:set_weights";
    "Fxn:self.layer.set_weights(weights)";
    "Fxn:get_config";
    "Fxn:self.layer.get_config()}}";
    "Fxn:super(Wrapper,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Fxn:from_config";
    "Fxn:deserialize_layer(config.pop('layer'),";
    "Fxn:cls(layer,";
    "Import:deserialize";
    "class:TimeDistributed(Wrapper):";
    "Fxn:__init__";
    "Fxn:super(TimeDistributed,";
    "Fxn:self).__init__(layer,";
    "Fxn:build";
    "Fxn:len(input_shape)";
    "Fxn:InputSpec(shape=input_shape)";
    "Fxn:self.layer.build(child_input_shape)";
    "Fxn:super(TimeDistributed,";
    "Fxn:self).build()";
    "Fxn:compute_output_shape";
    "Fxn:self.layer.compute_output_shape(child_input_shape)";
    "Fxn:call";
    "Fxn:has_arg(self.layer.call,";
    "Fxn:K.int_shape(inputs)";
    "Fxn:step";
    "Fxn:self.layer.call(x,";
    "Fxn:hasattr(output,";
    "Fxn:K.rnn(step,";
    "Fxn:K.shape(inputs)[1]";
    "Fxn:_object_list_uid(inputs)";
    "Fxn:K.reshape(inputs,";
    "Fxn:self.layer.call(inputs,";
    "Fxn:hasattr(y,";
    "Fxn:self.compute_output_shape(input_shape)";
    "Fxn:K.reshape(y,";
    "Fxn:self.layer.activity_regularizer(y)";
    "Fxn:self.add_loss(regularization_loss,";
    "class:Bidirectional(Wrapper):";
    "Fxn:__init__";
    "Fxn:ValueError('Invalid";
    "Fxn:copy.copy(layer)";
    "Fxn:layer.get_config()";
    "Fxn:layer.__class__.from_config(config)";
    "Fxn:len(weights)";
    "Fxn:super(Bidirectional,";
    "Fxn:self).__init__(layer,";
    "Fxn:trainable";
    "Fxn:trainable";
    "Fxn:get_weights";
    "Fxn:self.forward_layer.get_weights()";
    "Fxn:self.backward_layer.get_weights()";
    "Fxn:set_weights";
    "Fxn:len(weights)";
    "Fxn:self.forward_layer.set_weights(weights[:nw";
    "Fxn:self.backward_layer.set_weights(weights[nw";
    "Fxn:compute_output_shape";
    "Fxn:self.forward_layer.compute_output_shape(input_shape)";
    "Fxn:list(output_shape)";
    "Fxn:tuple(output_shape)";
    "Fxn:copy.copy(output_shape)]";
    "Fxn:copy.copy(state_shape)";
    "Fxn:copy.copy(state_shape)";
    "Fxn:__call__";
    "Fxn:isinstance(inputs,";
    "Fxn:len(inputs)";
    "Fxn:super(Bidirectional,";
    "Fxn:self).__call__(inputs,";
    "Fxn:isinstance(initial_state,";
    "Fxn:list(initial_state)";
    "Fxn:isinstance(initial_state,";
    "Fxn:len(initial_state)";
    "Fxn:ValueError(";
    "Fxn:str(initial_state))";
    "Fxn:[InputSpec(shape=K.int_shape(state))";
    "Fxn:K.is_keras_tensor(additional_inputs[0])";
    "Fxn:K.is_keras_tensor(tensor)";
    "Fxn:ValueError('The";
    "Fxn:super(Bidirectional,";
    "Fxn:self).__call__(full_input,";
    "Fxn:super(Bidirectional,";
    "Fxn:self).__call__(inputs,";
    "Fxn:call";
    "Fxn:has_arg(self.layer.call,";
    "Fxn:has_arg(self.layer.call,";
    "Fxn:has_arg(self.layer.call,";
    "Fxn:initial_state[:len(initial_state)";
    "Fxn:initial_state[len(initial_state)";
    "Fxn:self.forward_layer.call(inputs,";
    "Fxn:self.backward_layer.call(inputs,";
    "Fxn:self.forward_layer.call(inputs,";
    "Fxn:self.backward_layer.call(inputs,";
    "Fxn:K.reverse(y_rev,";
    "Fxn:K.concatenate([y,";
    "Fxn:getattr(y_rev,";
    "Fxn:reset_states";
    "Fxn:self.forward_layer.reset_states()";
    "Fxn:self.backward_layer.reset_states()";
    "Fxn:build";
    "Fxn:K.name_scope(self.forward_layer.name):";
    "Fxn:self.forward_layer.build(input_shape)";
    "Fxn:K.name_scope(self.backward_layer.name):";
    "Fxn:self.backward_layer.build(input_shape)";
    "Fxn:compute_mask";
    "Fxn:trainable_weights";
    "Fxn:hasattr(self.forward_layer,";
    "Fxn:non_trainable_weights";
    "Fxn:hasattr(self.forward_layer,";
    "Fxn:updates";
    "Fxn:hasattr(self.forward_layer,";
    "Fxn:losses";
    "Fxn:hasattr(self.forward_layer,";
    "Fxn:constraints";
    "Fxn:hasattr(self.forward_layer,";
    "Fxn:constraints.update(self.forward_layer.constraints)";
    "Fxn:constraints.update(self.backward_layer.constraints)";
    "Fxn:get_config";
    "Fxn:super(Bidirectional,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "/keras/layers/__init__.py";
    "Import:absolute_import";
    "Import:deserialize_keras_object";
    "Import:Layer";
    "Import:Input";
    "Import:InputLayer";
    "Import:InputSpec";
    "Import:.core";
    "Import:.convolutional";
    "Import:.pooling";
    "Import:.local";
    "Import:.recurrent";
    "Import:.cudnn_recurrent";
    "Import:.normalization";
    "Import:.embeddings";
    "Import:.noise";
    "Import:.advanced_activations";
    "Import:.wrappers";
    "Import:.convolutional_recurrent";
    "Import:..legacy.layers";
    "Import:def";
    "Fxn:serialize";
    "Fxn:deserialize";
    "Import:models";
    "/keras/legacy/interfaces.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:six";
    "Import:warnings";
    "Import:functools";
    "Import:numpy";
    "Fxn:generate_legacy_interface";
    "Fxn:legacy_support";
    "Fxn:wrapper";
    "Fxn:raise_duplicate_arg_error";
    "Fxn:embedding_kwargs_preprocessor";
    "Fxn:recurrent_args_preprocessor";
    "Fxn:conv1d_args_preprocessor";
    "Fxn:conv2d_args_preprocessor";
    "Fxn:separable_conv2d_args_preprocessor";
    "Fxn:deconv2d_args_preprocessor";
    "Fxn:conv3d_args_preprocessor";
    "Fxn:batchnorm_args_preprocessor";
    "Fxn:convlstm2d_args_preprocessor";
    "Fxn:zeropadding2d_args_preprocessor";
    "Fxn:generator_methods_args_preprocessor";
    "Fxn:add_weight_args_preprocessing";
    "Fxn:get_updates_arg_preprocessing";
    "/keras/legacy/layers.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:numpy";
    "Import:types";
    "Import:warnings";
    "Import:Layer,";
    "Import:backend";
    "Import:func_dump,";
    "Import:conv_utils";
    "Import:regularizers";
    "Import:constraints";
    "Import:activations";
    "Import:initializers";
    "class:Merge(Layer):";
    "Fxn:__init__";
    "Fxn:warnings.warn('The";
    "Fxn:self.__class__.__name__.lower()";
    "Fxn:str(K.get_uid(prefix))";
    "Fxn:Merge(layers=None)";
    "Fxn:merge([input_tensor_1,";
    "Fxn:range(len(layers))]";
    "Fxn:range(len(layers))]";
    "Fxn:self._arguments_validation(layers,";
    "Fxn:enumerate(layers):";
    "Fxn:input_tensors.append(inbound_node.output_tensors[tensor_index])";
    "Fxn:input_masks.append(inbound_node.output_masks[tensor_index])";
    "Fxn:self(input_tensors,";
    "Fxn:_arguments_validation";
    "Fxn:callable(mode):";
    "Fxn:ValueError('Invalid";
    "Fxn:str(mode))";
    "Fxn:isinstance(layers,";
    "Fxn:len(layers)";
    "Fxn:TypeError('A";
    "Fxn:str(layers))";
    "Fxn:range(len(layers))]";
    "Fxn:enumerate(layers):";
    "Fxn:layer.get_output_shape_at(node_indices[i])";
    "Fxn:isinstance(layer_output_shape,";
    "Fxn:input_shapes.append(layer_output_shape)";
    "Fxn:set(input_shapes)";
    "Fxn:len(input_shapes_set)";
    "Fxn:ValueError('Only";
    "Fxn:len(layers)";
    "Fxn:ValueError(mode";
    "Fxn:len(shape1)";
    "Fxn:len(shape2)";
    "Fxn:isinstance(dot_axes,";
    "Fxn:isinstance(self.dot_axes,";
    "Fxn:TypeError('Invalid";
    "Fxn:len(self.dot_axes)";
    "Fxn:ValueError('Invalid";
    "Fxn:isinstance(self.dot_axes[0],";
    "Fxn:isinstance(self.dot_axes[1],";
    "Fxn:ValueError('Invalid";
    "Fxn:ValueError('Dimension";
    "Fxn:[list(shape)";
    "Fxn:set()";
    "Fxn:range(len(reduced_inputs_shapes)):";
    "Fxn:shape_set.add(tuple(reduced_inputs_shapes[i]))";
    "Fxn:len(shape_set)";
    "Fxn:ValueError('"concat"";
    "Fxn:call";
    "Fxn:isinstance(inputs,";
    "Fxn:len(inputs)";
    "Fxn:TypeError('Merge";
    "Fxn:'(at";
    "Fxn:str(inputs))";
    "Fxn:callable(self.mode):";
    "Fxn:has_arg(self.mode,";
    "Fxn:self.mode(inputs,";
    "Fxn:range(1,";
    "Fxn:len(inputs)):";
    "Fxn:len(inputs)";
    "Fxn:K.concatenate(inputs,";
    "Fxn:range(1,";
    "Fxn:len(inputs)):";
    "Fxn:range(1,";
    "Fxn:len(inputs)):";
    "Fxn:K.maximum(s,";
    "Fxn:K.batch_dot(l1,";
    "Fxn:K.sqrt(K.batch_dot(l1,";
    "Fxn:K.batch_dot(l2,";
    "Fxn:K.maximum(denominator,";
    "Fxn:K.epsilon())";
    "Fxn:K.batch_dot(l1,";
    "Fxn:K.expand_dims(output,";
    "Fxn:ValueError('Unknown";
    "Fxn:compute_output_shape";
    "Fxn:isinstance(input_shape,";
    "Fxn:callable(self.mode):";
    "Fxn:callable(self._output_shape):";
    "Fxn:self._output_shape(input_shape)";
    "Fxn:tuple(self._output_shape)";
    "Fxn:ValueError('The";
    "Fxn:'(or";
    "Fxn:list(input_shapes[0])";
    "Fxn:tuple(output_shape)";
    "Fxn:list(input_shapes[0])";
    "Fxn:list(input_shapes[1])";
    "Fxn:shape1.pop(self.dot_axes[0])";
    "Fxn:shape2.pop(self.dot_axes[1])";
    "Fxn:shape2.pop(0)";
    "Fxn:len(output_shape)";
    "Fxn:tuple(output_shape)";
    "Fxn:compute_mask";
    "Fxn:all([m";
    "Fxn:hasattr(mask,";
    "Fxn:len(mask)";
    "Fxn:len(inputs)";
    "Fxn:[K.expand_dims(m,";
    "Fxn:K.all(K.concatenate(masks,";
    "Fxn:zip(inputs,";
    "Fxn:masks.append(K.ones_like(input_i,";
    "Fxn:K.ndim(mask_i)";
    "Fxn:K.ndim(input_i):";
    "Fxn:masks.append(K.expand_dims(mask_i))";
    "Fxn:masks.append(mask_i)";
    "Fxn:K.concatenate(masks,";
    "Fxn:K.all(concatenated,";
    "Fxn:callable(self.mode):";
    "Fxn:callable(self._output_mask):";
    "Fxn:self._output_mask(mask)";
    "Fxn:ValueError('Invalid";
    "Fxn:{}'.format(self.mode))";
    "Fxn:get_config";
    "Fxn:isinstance(self.mode,";
    "Fxn:func_dump(self.mode)";
    "Fxn:callable(self.mode):";
    "Fxn:isinstance(self._output_shape,";
    "Fxn:func_dump(self._output_shape)";
    "Fxn:callable(self._output_shape):";
    "Fxn:isinstance(self._output_mask,";
    "Fxn:func_dump(self._output_mask)";
    "Fxn:callable(self._output_mask):";
    "Fxn:from_config";
    "Fxn:config.copy()";
    "Fxn:config.pop('mode_type')";
    "Fxn:globals()[config['mode']]";
    "Fxn:func_load(config['mode'],";
    "Fxn:globs=globals())";
    "Fxn:config.pop('output_shape_type',";
    "Fxn:globals()[config['output_shape']]";
    "Fxn:func_load(config['output_shape'],";
    "Fxn:globs=globals())";
    "Fxn:config.get('output_shape')";
    "Fxn:config.pop('output_mask_type',";
    "Fxn:globals()[config['output_mask']]";
    "Fxn:func_load(config['output_mask'],";
    "Fxn:globs=globals())";
    "Fxn:config.get('output_mask')";
    "Fxn:super(Merge,";
    "Fxn:cls).from_config(config)";
    "Fxn:merge";
    "Fxn:Input(shape=(32,))";
    "Fxn:Input(shape=(32,))";
    "Fxn:merge([tensor_a,";
    "Fxn:warnings.warn('The";
    "Fxn:hasattr(x,";
    "Fxn:input_layers.append(input_layer)";
    "Fxn:node_indices.append(node_index)";
    "Fxn:tensor_indices.append(tensor_index)";
    "Fxn:Merge(input_layers,";
    "Fxn:Merge(mode=mode,";
    "Fxn:merge_layer(inputs)";
    "class:MaxoutDense(Layer):";
    "Fxn:__init__";
    "Fxn:warnings.warn('The";
    "Fxn:initializers.get(init)";
    "Fxn:regularizers.get(W_regularizer)";
    "Fxn:regularizers.get(b_regularizer)";
    "Fxn:regularizers.get(activity_regularizer)";
    "Fxn:constraints.get(W_constraint)";
    "Fxn:constraints.get(b_constraint)";
    "Fxn:InputSpec(ndim=2)";
    "Fxn:super(MaxoutDense,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:build";
    "Fxn:InputSpec(dtype=K.floatx(),";
    "Fxn:shape=(None,";
    "Fxn:self.add_weight((self.nb_feature,";
    "Fxn:self.add_weight((self.nb_feature,";
    "Fxn:self.set_weights(self.initial_weights)";
    "Fxn:compute_output_shape";
    "Fxn:len(input_shape)";
    "Fxn:call";
    "Fxn:K.dot(x,";
    "Fxn:K.max(output,";
    "Fxn:get_config";
    "Fxn:initializers.serialize(self.init),";
    "Fxn:regularizers.serialize(self.W_regularizer),";
    "Fxn:regularizers.serialize(self.b_regularizer),";
    "Fxn:regularizers.serialize(self.activity_regularizer),";
    "Fxn:constraints.serialize(self.W_constraint),";
    "Fxn:constraints.serialize(self.b_constraint),";
    "Fxn:super(MaxoutDense,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:Highway(Layer):";
    "Fxn:__init__";
    "Fxn:warnings.warn('The";
    "Fxn:kwargs.pop('transform_bias')";
    "Fxn:warnings.warn('`transform_bias`";
    "Fxn:initializers.get(init)";
    "Fxn:activations.get(activation)";
    "Fxn:regularizers.get(W_regularizer)";
    "Fxn:regularizers.get(b_regularizer)";
    "Fxn:regularizers.get(activity_regularizer)";
    "Fxn:constraints.get(W_constraint)";
    "Fxn:constraints.get(b_constraint)";
    "Fxn:InputSpec(ndim=2)";
    "Fxn:super(Highway,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:build";
    "Fxn:InputSpec(dtype=K.floatx(),";
    "Fxn:shape=(None,";
    "Fxn:self.add_weight((input_dim,";
    "Fxn:self.add_weight((input_dim,";
    "Fxn:self.add_weight((input_dim,),";
    "Fxn:self.add_weight((input_dim,),";
    "Fxn:self.set_weights(self.initial_weights)";
    "Fxn:call";
    "Fxn:K.dot(x,";
    "Fxn:activations.sigmoid(y)";
    "Fxn:K.dot(x,";
    "Fxn:self.activation(y)";
    "Fxn:get_config";
    "Fxn:initializers.serialize(self.init),";
    "Fxn:activations.serialize(self.activation),";
    "Fxn:regularizers.serialize(self.W_regularizer),";
    "Fxn:regularizers.serialize(self.b_regularizer),";
    "Fxn:regularizers.serialize(self.activity_regularizer),";
    "Fxn:constraints.serialize(self.W_constraint),";
    "Fxn:constraints.serialize(self.b_constraint),";
    "Fxn:super(Highway,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Fxn:AtrousConvolution1D";
    "Fxn:kwargs.pop('atrous_rate')";
    "Fxn:warnings.warn('The";
    "Fxn:Conv1D(*args,";
    "Fxn:AtrousConvolution2D";
    "Fxn:kwargs.pop('atrous_rate')";
    "Fxn:warnings.warn('The";
    "Fxn:Conv2D(*args,";
    "Import:Conv1D";
    "Import:Conv2D";
    "class:Recurrent(Layer):";
    "Fxn:__init__";
    "Fxn:super(Recurrent,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:[InputSpec(ndim=3)]";
    "Fxn:compute_output_shape";
    "Fxn:isinstance(input_shape,";
    "Fxn:[(input_shape[0],";
    "Fxn:compute_mask";
    "Fxn:isinstance(mask,";
    "Fxn:step";
    "Fxn:get_constants";
    "Fxn:get_initial_state";
    "Fxn:K.zeros_like(inputs)";
    "Fxn:K.sum(initial_state,";
    "Fxn:axis=(1,";
    "Fxn:K.expand_dims(initial_state)";
    "Fxn:K.tile(initial_state,";
    "Fxn:range(len(self.states))]";
    "Fxn:preprocess_input";
    "Fxn:__call__";
    "Fxn:isinstance(inputs,";
    "Fxn:len(inputs)";
    "Fxn:super(Recurrent,";
    "Fxn:self).__call__(inputs,";
    "Fxn:isinstance(initial_state,";
    "Fxn:hasattr(initial_state[0],";
    "Fxn:hasattr(tensor,";
    "Fxn:ValueError('The";
    "Fxn:isinstance(input_spec,";
    "Fxn:isinstance(state_spec,";
    "Fxn:list(initial_state)";
    "Fxn:super(Recurrent,";
    "Fxn:self).__call__(inputs,";
    "Fxn:super(Recurrent,";
    "Fxn:self).__call__(inputs,";
    "Fxn:call";
    "Fxn:`(samples,";
    "Fxn:.build()";
    "Fxn:isinstance(inputs,";
    "Fxn:self.get_initial_state(inputs)";
    "Fxn:isinstance(mask,";
    "Fxn:len(initial_state)";
    "Fxn:len(self.states):";
    "Fxn:ValueError('Layer";
    "Fxn:str(len(self.states))";
    "Fxn:str(len(initial_state))";
    "Fxn:K.int_shape(inputs)";
    "Fxn:ValueError('Cannot";
    "Fxn:self.get_constants(inputs,";
    "Fxn:self.preprocess_input(inputs,";
    "Fxn:K.rnn(self.step,";
    "Fxn:range(len(states)):";
    "Fxn:updates.append((self.states[i],";
    "Fxn:self.add_update(updates,";
    "Fxn:isinstance(states,";
    "Fxn:list(states)";
    "Fxn:reset_states";
    "Fxn:AttributeError('Layer";
    "Fxn:ValueError('If";
    "Fxn:[K.zeros((batch_size,";
    "Fxn:K.set_value(state,";
    "Fxn:np.zeros((batch_size,";
    "Fxn:isinstance(states,";
    "Fxn:len(states)";
    "Fxn:len(self.states):";
    "Fxn:ValueError('Layer";
    "Fxn:str(len(self.states))";
    "Fxn:str(len(states))";
    "Fxn:str(states))";
    "Fxn:enumerate(zip(states,";
    "Fxn:ValueError('State";
    "Fxn:str(index)";
    "Fxn:str((batch_size,";
    "Fxn:str(value.shape))";
    "Fxn:K.set_value(state,";
    "Fxn:get_config";
    "Fxn:super(Recurrent,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "class:ConvRecurrent2D(Recurrent):";
    "Fxn:__init__";
    "Fxn:strides=(1,";
    "Fxn:dilation_rate=(1,";
    "Fxn:super(ConvRecurrent2D,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:conv_utils.normalize_tuple(kernel_size,";
    "Fxn:conv_utils.normalize_tuple(strides,";
    "Fxn:conv_utils.normalize_padding(padding)";
    "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:conv_utils.normalize_tuple(dilation_rate,";
    "Fxn:[InputSpec(ndim=5)]";
    "Fxn:compute_output_shape";
    "Fxn:isinstance(input_shape,";
    "Fxn:conv_utils.conv_output_length(rows,";
    "Fxn:conv_utils.conv_output_length(cols,";
    "Fxn:[(input_shape[0],";
    "Fxn:range(2)]";
    "Fxn:[(input_shape[0],";
    "Fxn:range(2)]";
    "Fxn:get_config";
    "Fxn:super(ConvRecurrent2D,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "/keras/legacy/models.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:Merge";
    "Fxn:needs_legacy_support";
    "Fxn:legacy_sequential_layers";
    "/keras/legacy/__init__.py";
    "/keras/preprocessing/image.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:numpy";
    "Import:scipy";
    "Import:linalg";
    "Import:scipy.ndimage";
    "Import:range";
    "Import:import";
    "Import:threading";
    "Import:warnings";
    "Import:multiprocessing.pool";
    "Import:partial";
    "Import:backend";
    "Import:Sequence";
    "Import:ImageEnhance";
    "Import:Image";
    "Fxn:random_rotation";
    "Fxn:random_shift";
    "Fxn:random_shear";
    "Fxn:random_zoom";
    "Fxn:random_channel_shift";
    "Fxn:random_brightness";
    "Fxn:transform_matrix_offset_center";
    "Fxn:apply_transform";
    "Fxn:flip_axis";
    "Fxn:array_to_img";
    "Import:PIL.Image.";
    "Fxn:img_to_array";
    "Fxn:load_img";
    "Import:PIL.Image.";
    "Fxn:list_pictures";
    "class:ImageDataGenerator(object):";
    "Fxn:__init__";
    "Fxn:K.image_data_format()";
    "Fxn:ValueError('`data_format`";
    "Fxn:ValueError('`validation_split`";
    "Fxn:np.isscalar(zoom_range):";
    "Fxn:len(zoom_range)";
    "Fxn:ValueError('`zoom_range`";
    "Fxn:warnings.warn('This";
    "Fxn:warnings.warn('This";
    "Fxn:warnings.warn('This";
    "Fxn:warnings.warn('This";
    "Fxn:flow";
    "Fxn:NumpyArrayIterator(";
    "Fxn:flow_from_directory";
    "Fxn:target_size=(256,";
    "Fxn:DirectoryIterator(";
    "Fxn:standardize";
    "Fxn:np.mean(x,";
    "Fxn:K.epsilon())";
    "Fxn:warnings.warn('This";
    "Fxn:`.fit(numpy_data)`.')";
    "Fxn:K.epsilon())";
    "Fxn:warnings.warn('This";
    "Fxn:`.fit(numpy_data)`.')";
    "Fxn:np.reshape(x,";
    "Fxn:np.prod(x.shape[-3:])))";
    "Fxn:np.dot(flatx,";
    "Fxn:np.reshape(whitex,";
    "Fxn:warnings.warn('This";
    "Fxn:`.fit(numpy_data)`.')";
    "Fxn:random_transform";
    "Fxn:np.random.seed(seed)";
    "Fxn:np.deg2rad(np.random.uniform(-self.rotation_range,";
    "Fxn:np.random.uniform(-self.height_shift_range,";
    "Fxn:np.random.uniform(-self.width_shift_range,";
    "Fxn:np.deg2rad(np.random.uniform(-self.shear_range,";
    "Fxn:np.random.uniform(self.zoom_range[0],";
    "Fxn:np.array([[np.cos(theta),";
    "Fxn:-np.sin(theta),";
    "Fxn:[np.sin(theta),";
    "Fxn:np.cos(theta),";
    "Fxn:np.array([[1,";
    "Fxn:np.dot(transform_matrix,";
    "Fxn:np.array([[1,";
    "Fxn:-np.sin(shear),";
    "Fxn:np.cos(shear),";
    "Fxn:np.dot(transform_matrix,";
    "Fxn:np.array([[zx,";
    "Fxn:np.dot(transform_matrix,";
    "Fxn:transform_matrix_offset_center(transform_matrix,";
    "Fxn:apply_transform(x,";
    "Fxn:random_channel_shift(x,";
    "Fxn:np.random.random()";
    "Fxn:flip_axis(x,";
    "Fxn:np.random.random()";
    "Fxn:flip_axis(x,";
    "Fxn:random_brightness(x,";
    "Fxn:fit";
    "Fxn:np.asarray(x,";
    "Fxn:dtype=K.floatx())";
    "Fxn:ValueError('Input";
    "Fxn:`.fit()`";
    "Fxn:str(x.shape))";
    "Fxn:warnings.warn(";
    "Fxn:'(channels";
    "Fxn:str(self.channel_axis)";
    "Fxn:str(self.channel_axis)";
    "Fxn:str(x.shape)";
    "Fxn:str(x.shape[self.channel_axis])";
    "Fxn:np.random.seed(seed)";
    "Fxn:np.copy(x)";
    "Fxn:np.zeros(tuple([rounds";
    "Fxn:list(x.shape)[1:]),";
    "Fxn:dtype=K.floatx())";
    "Fxn:range(rounds):";
    "Fxn:range(x.shape[0]):";
    "Fxn:self.random_transform(x[i])";
    "Fxn:np.mean(x,";
    "Fxn:axis=(0,";
    "Fxn:np.reshape(self.mean,";
    "Fxn:np.std(x,";
    "Fxn:axis=(0,";
    "Fxn:np.reshape(self.std,";
    "Fxn:K.epsilon())";
    "Fxn:np.reshape(x,";
    "Fxn:np.dot(flat_x.T,";
    "Fxn:linalg.svd(sigma)";
    "Fxn:np.sqrt(s[np.newaxis]";
    "Fxn:s_inv).dot(u.T)";
    "class:Iterator(Sequence):";
    "Fxn:__init__";
    "Fxn:threading.Lock()";
    "Fxn:self._flow_index()";
    "Fxn:_set_index_array";
    "Fxn:np.arange(self.n)";
    "Fxn:np.random.permutation(self.n)";
    "Fxn:__getitem__";
    "Fxn:len(self):";
    "Fxn:ValueError('Asked";
    "Fxn:{length}'.format(idx=idx,";
    "Fxn:length=len(self)))";
    "Fxn:np.random.seed(self.seed";
    "Fxn:self._set_index_array()";
    "Fxn:self._get_batches_of_transformed_samples(index_array)";
    "Fxn:__len__";
    "Fxn:on_epoch_end";
    "Fxn:self._set_index_array()";
    "Fxn:reset";
    "Fxn:_flow_index";
    "Fxn:self.reset()";
    "Fxn:np.random.seed(self.seed";
    "Fxn:self._set_index_array()";
    "Fxn:__iter__";
    "Fxn:data_gen.flow(...):";
    "Fxn:__next__";
    "Fxn:self.next(*args,";
    "Fxn:_get_batches_of_transformed_samples";
    "class:NumpyArrayIterator(Iterator):";
    "Fxn:__init__";
    "Fxn:len(x)";
    "Fxn:len(y):";
    "Fxn:ValueError('`x`";
    "Fxn:np.asarray(y).shape))";
    "Fxn:ValueError('Invalid";
    "Fxn:int(len(x)";
    "Fxn:K.image_data_format()";
    "Fxn:np.asarray(x,";
    "Fxn:dtype=K.floatx())";
    "Fxn:ValueError('Input";
    "Fxn:warnings.warn('NumpyArrayIterator";
    "Fxn:'(channels";
    "Fxn:str(channels_axis)";
    "Fxn:str(channels_axis)";
    "Fxn:str(self.x.shape)";
    "Fxn:str(self.x.shape[channels_axis])";
    "Fxn:np.asarray(y)";
    "Fxn:super(NumpyArrayIterator,";
    "Fxn:self).__init__(x.shape[0],";
    "Fxn:_get_batches_of_transformed_samples";
    "Fxn:np.zeros(tuple([len(index_array)]";
    "Fxn:list(self.x.shape)[1:]),";
    "Fxn:dtype=K.floatx())";
    "Fxn:enumerate(index_array):";
    "Fxn:self.image_data_generator.preprocessing_function(x)";
    "Fxn:self.image_data_generator.random_transform(x.astype(K.floatx()))";
    "Fxn:self.image_data_generator.standardize(x)";
    "Fxn:enumerate(index_array):";
    "Fxn:array_to_img(batch_x[i],";
    "Fxn:'{prefix}_{index}_{hash}.{format}'.format(prefix=self.save_prefix,";
    "Fxn:hash=np.random.randint(1e4),";
    "Fxn:img.save(os.path.join(self.save_to_dir,";
    "Fxn:next";
    "Fxn:next(self.index_generator)";
    "Fxn:self._get_batches_of_transformed_samples(index_array)";
    "Fxn:_iter_valid_files";
    "Fxn:_recursive_list";
    "Fxn:sorted(os.walk(subpath,";
    "Fxn:_recursive_list(directory):";
    "Fxn:sorted(files):";
    "Fxn:fname.lower().endswith('.tiff'):";
    "Fxn:warnings.warn('Using";
    "Fxn:fname.lower().endswith('.'";
    "Fxn:_count_valid_files_in_directory";
    "Fxn:`(0.2,";
    "Fxn:`segment=(0.6,";
    "Fxn:len(list(_iter_valid_files(directory,";
    "Fxn:int(split[0]";
    "Fxn:int(split[1]";
    "Fxn:_list_valid_filenames_in_directory";
    "class:DirectoryIterator(Iterator):";
    "Fxn:__init__";
    "Fxn:target_size=(256,";
    "Fxn:K.image_data_format()";
    "Fxn:tuple(target_size)";
    "Fxn:ValueError('Invalid";
    "Fxn:ValueError('Invalid";
    "Fxn:ValueError('Invalid";
    "Fxn:sorted(os.listdir(directory)):";
    "Fxn:os.path.isdir(os.path.join(directory,";
    "Fxn:classes.append(subdir)";
    "Fxn:len(classes)";
    "Fxn:dict(zip(classes,";
    "Fxn:range(len(classes))))";
    "Fxn:multiprocessing.pool.ThreadPool()";
    "Fxn:partial(_count_valid_files_in_directory,";
    "Fxn:sum(pool.map(function_partial,";
    "Fxn:print('Found";
    "Fxn:_get_batches_of_transformed_samples";
    "Fxn:np.zeros((len(index_array),)";
    "Fxn:dtype=K.floatx())";
    "Fxn:enumerate(index_array):";
    "Fxn:load_img(os.path.join(self.directory,";
    "Fxn:self.image_data_generator.preprocessing_function(img)";
    "Fxn:ValueError(";
    "Fxn:{}'.format(";
    "Fxn:".join(_PIL_INTERPOLATION_METHODS.keys())))";
    "Fxn:img.resize(width_height_tuple,";
    "Fxn:img_to_array(img,";
    "Fxn:self.image_data_generator.random_transform(x)";
    "Fxn:self.image_data_generator.standardize(x)";
    "Fxn:enumerate(index_array):";
    "Fxn:array_to_img(batch_x[i],";
    "Fxn:'{prefix}_{index}_{hash}.{format}'.format(prefix=self.save_prefix,";
    "Fxn:hash=np.random.randint(1e7),";
    "Fxn:img.save(os.path.join(self.save_to_dir,";
    "Fxn:batch_x.copy()";
    "Fxn:self.classes[index_array].astype(K.floatx())";
    "Fxn:np.zeros((len(batch_x),";
    "Fxn:dtype=K.floatx())";
    "Fxn:enumerate(self.classes[index_array]):";
    "Fxn:next";
    "Fxn:next(self.index_generator)";
    "Fxn:self._get_batches_of_transformed_samples(index_array)";
    "/keras/preprocessing/sequence.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:numpy";
    "Import:random";
    "Import:range";
    "Import:Sequence";
    "Fxn:pad_sequences";
    "Fxn:make_sampling_table";
    "Fxn:skipgrams";
    "Fxn:_remove_long_seq";
    "class:TimeseriesGenerator(Sequence):";
    "Fxn:__init__";
    "Fxn:len(data)";
    "Fxn:__len__";
    "Fxn:int(np.ceil(";
    "Fxn:_empty_batch";
    "Fxn:samples_shape.extend(self.data.shape[1:])";
    "Fxn:targets_shape.extend(self.targets.shape[1:])";
    "Fxn:np.empty(samples_shape),";
    "Fxn:np.empty(targets_shape)";
    "Fxn:__getitem__";
    "Fxn:np.random.randint(";
    "Fxn:np.arange(i,";
    "Fxn:min(i";
    "Fxn:self._empty_batch(len(rows))";
    "Fxn:enumerate(rows):";
    "Fxn:range(rows[j]";
    "Import:TimeseriesGenerator";
    "Import:numpy";
    "/keras/preprocessing/text.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:string";
    "Import:sys";
    "Import:warnings";
    "Import:OrderedDict";
    "Import:md5";
    "Import:numpy";
    "Import:range";
    "Import:zip";
    "Fxn:text_to_word_sequence";
    "Fxn:one_hot";
    "Fxn:hashing_trick";
    "class:Tokenizer(object):";
    "Fxn:__init__";
    "Fxn:filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',";
    "Fxn:warnings.warn('The";
    "Fxn:kwargs.pop('nb_words')";
    "Fxn:TypeError('Unrecognized";
    "Fxn:str(kwargs))";
    "Fxn:OrderedDict()";
    "Fxn:fit_on_texts";
    "Fxn:isinstance(text,";
    "Fxn:text_to_word_sequence(text,";
    "Fxn:set(seq):";
    "Fxn:list(self.word_counts.items())";
    "Fxn:wcounts.sort(key=lambda";
    "Fxn:dict(list(zip(sorted_voc,";
    "Fxn:list(range(1,";
    "Fxn:len(sorted_voc)";
    "Fxn:self.word_index.get(self.oov_token)";
    "Fxn:len(self.word_index)";
    "Fxn:list(self.word_docs.items()):";
    "Fxn:fit_on_sequences";
    "Fxn:len(sequences)";
    "Fxn:set(seq)";
    "Fxn:texts_to_sequences";
    "Fxn:self.texts_to_sequences_generator(texts):";
    "Fxn:res.append(vect)";
    "Fxn:texts_to_sequences_generator";
    "Fxn:isinstance(text,";
    "Fxn:text_to_word_sequence(text,";
    "Fxn:self.word_index.get(w)";
    "Fxn:vect.append(i)";
    "Fxn:self.word_index.get(self.oov_token)";
    "Fxn:vect.append(i)";
    "Fxn:texts_to_matrix";
    "Fxn:self.texts_to_sequences(texts)";
    "Fxn:self.sequences_to_matrix(sequences,";
    "Fxn:sequences_to_matrix";
    "Fxn:len(self.word_index)";
    "Fxn:ValueError('Specify";
    "Fxn:ValueError('Fit";
    "Fxn:np.zeros((len(sequences),";
    "Fxn:enumerate(sequences):";
    "Fxn:list(counts.items()):";
    "Fxn:len(seq)";
    "Fxn:np.log(c)";
    "Fxn:np.log(1";
    "Fxn:self.index_docs.get(j,";
    "Fxn:ValueError('Unknown";
    "/keras/preprocessing/__init__.py";
    "/keras/utils/conv_utils.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:range";
    "Import:numpy";
    "Import:backend";
    "Fxn:normalize_tuple";
    "Fxn:normalize_data_format";
    "Fxn:normalize_padding";
    "Fxn:convert_kernel";
    "Fxn:conv_output_length";
    "Fxn:conv_input_length";
    "Fxn:deconv_length";
    "/keras/utils/data_utils.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:hashlib";
    "Import:multiprocessing";
    "Import:import";
    "Import:random";
    "Import:shutil";
    "Import:sys";
    "Import:tarfile";
    "Import:threading";
    "Import:time";
    "Import:traceback";
    "Import:zipfile";
    "Import:abstractmethod";
    "Import:closing";
    "Import:ThreadPool";
    "Import:numpy";
    "Import:six";
    "Import:HTTPError";
    "Import:URLError";
    "Import:urlopen";
    "Import:queue";
    "Import:Queue";
    "Import:Progbar";
    "Fxn:urlretrieve";
    "Fxn:chunk_read";
    "Import:urlretrieve";
    "Fxn:_extract_archive";
    "Fxn:get_file";
    "class:ProgressTracker(object):";
    "Fxn:dl_progress";
    "Fxn:Progbar(total_size)";
    "Fxn:ProgressTracker.progbar.update(count";
    "Fxn:urlretrieve(origin,";
    "Fxn:Exception(error_msg.format(origin,";
    "Fxn:Exception(error_msg.format(origin,";
    "Fxn:os.path.exists(fpath):";
    "Fxn:os.remove(fpath)";
    "Fxn:os.path.exists(untar_fpath):";
    "Fxn:_extract_archive(fpath,";
    "Fxn:_extract_archive(fpath,";
    "Fxn:_hash_file";
    "Fxn:_hash_file('/path/to/file.zip')";
    "Fxn:len(hash)";
    "Fxn:hashlib.sha256()";
    "Fxn:hashlib.md5()";
    "Fxn:open(fpath,";
    "Fxn:iter(lambda:";
    "Fxn:fpath_file.read(chunk_size),";
    "Fxn:hasher.update(chunk)";
    "Fxn:hasher.hexdigest()";
    "Fxn:validate_file";
    "Fxn:len(file_hash)";
    "Fxn:str(_hash_file(fpath,";
    "Fxn:str(file_hash):";
    "Import:_hash_file";
    "class:Sequence(object):";
    "Import:imread";
    "Import:resize";
    "Import:numpy";
    "class:CIFAR10Sequence(Sequence):";
    "Fxn:__init__";
    "Fxn:__len__";
    "Fxn:np.ceil(len(self.x)";
    "Fxn:float(self.batch_size))";
    "Fxn:__getitem__";
    "Fxn:self.batch_size:(idx";
    "Fxn:self.batch_size:(idx";
    "Fxn:np.array([";
    "Fxn:resize(imread(file_name),";
    "Fxn:np.array(batch_y)";
    "Fxn:__getitem__";
    "Fxn:__len__";
    "Fxn:on_epoch_end";
    "Fxn:__iter__";
    "Fxn:range(len(self))):";
    "Fxn:init_pool";
    "Fxn:get_index";
    "class:SequenceEnqueuer(object):";
    "Fxn:is_running";
    "Fxn:start";
    "Fxn:`put()`).";
    "Fxn:stop";
    "Fxn:start().";
    "Fxn:thread.join()";
    "Fxn:get";
    "Fxn:`(inputs,";
    "Fxn:`(inputs,";
    "class:OrderedEnqueuer(SequenceEnqueuer):";
    "Fxn:__init__";
    "Fxn:multiprocessing.Value('i',";
    "Fxn:isinstance(_SEQUENCE_COUNTER,";
    "Fxn:_SEQUENCE_COUNTER.get_lock():";
    "Fxn:is_running";
    "Fxn:self.stop_signal.is_set()";
    "Fxn:start";
    "Fxn:`put()`)";
    "Fxn:multiprocessing.Pool(workers,";
    "Fxn:initargs=(seqs,))";
    "Fxn:ThreadPool(workers)";
    "Fxn:queue.Queue(max_queue_size)";
    "Fxn:threading.Event()";
    "Fxn:threading.Thread(target=self._run)";
    "Fxn:self.run_thread.start()";
    "Fxn:_wait_queue";
    "Fxn:time.sleep(0.1)";
    "Fxn:self.stop_signal.is_set():";
    "Fxn:_run";
    "Fxn:list(range(len(self.sequence)))";
    "Fxn:self._send_sequence()";
    "Fxn:random.shuffle(sequence)";
    "Fxn:closing(self.executor_fn(_SHARED_SEQUENCES))";
    "Fxn:self.stop_signal.is_set():";
    "Fxn:self.queue.put(";
    "Fxn:executor.apply_async(get_index,";
    "Fxn:self._wait_queue()";
    "Fxn:self.stop_signal.is_set():";
    "Fxn:self.sequence.on_epoch_end()";
    "Fxn:self._send_sequence()";
    "Fxn:get";
    "Fxn:`(inputs,";
    "Fxn:`(inputs,";
    "Fxn:self.is_running():";
    "Fxn:self.queue.get(block=True).get()";
    "Fxn:self.queue.task_done()";
    "Fxn:self.stop()";
    "Fxn:six.raise_from(StopIteration(e),";
    "Fxn:_send_sequence";
    "Fxn:stop";
    "Fxn:`start()`.";
    "Fxn:`thread.join()`";
    "Fxn:self.stop_signal.set()";
    "Fxn:self.queue.queue.clear()";
    "Fxn:self.queue.not_full.notify()";
    "Fxn:self.run_thread.join(timeout)";
    "class:GeneratorEnqueuer(SequenceEnqueuer):";
    "Fxn:__init__";
    "Fxn:ValueError('Using";
    "Fxn:_data_generator_task";
    "Fxn:self._stop_event.is_set():";
    "Fxn:self.queue.qsize()";
    "Fxn:next()";
    "Fxn:next(self._generator)";
    "Fxn:self.queue.put((True,";
    "Fxn:time.sleep(self.wait_time)";
    "Fxn:hasattr(e,";
    "Fxn:setattr(e,";
    "Fxn:sys.exc_info()[2])";
    "Fxn:self.queue.put((False,";
    "Fxn:self._stop_event.set()";
    "Fxn:self._stop_event.is_set():";
    "Fxn:self.queue.qsize()";
    "Fxn:next(self._generator)";
    "Fxn:self.queue.put((True,";
    "Fxn:time.sleep(self.wait_time)";
    "Fxn:traceback.print_exc()";
    "Fxn:setattr(e,";
    "Fxn:self.queue.put((False,";
    "Fxn:self._stop_event.set()";
    "Fxn:start";
    "Fxn:`put()`)";
    "Fxn:multiprocessing.Manager()";
    "Fxn:self._manager.Queue(maxsize=max_queue_size)";
    "Fxn:multiprocessing.Event()";
    "Fxn:next()";
    "Fxn:threading.Lock()";
    "Fxn:queue.Queue(maxsize=max_queue_size)";
    "Fxn:threading.Event()";
    "Fxn:range(workers):";
    "Fxn:np.random.seed(self.seed)";
    "Fxn:multiprocessing.Process(target=self._data_generator_task)";
    "Fxn:threading.Thread(target=self._data_generator_task)";
    "Fxn:self._threads.append(thread)";
    "Fxn:thread.start()";
    "Fxn:self.stop()";
    "Fxn:is_running";
    "Fxn:self._stop_event.is_set()";
    "Fxn:stop";
    "Fxn:`start()`.";
    "Fxn:`thread.join()`.";
    "Fxn:self.is_running():";
    "Fxn:self._stop_event.set()";
    "Fxn:thread.is_alive():";
    "Fxn:thread.terminate()";
    "Fxn:thread.is_alive()";
    "Fxn:thread.join()";
    "Fxn:thread.join(timeout)";
    "Fxn:self._manager.shutdown()";
    "Fxn:get";
    "Fxn:`(inputs,";
    "Fxn:`(inputs,";
    "Fxn:self.is_running():";
    "Fxn:self.queue.empty():";
    "Fxn:self.queue.get()";
    "Fxn:six.reraise(value.__class__,";
    "Fxn:all([not";
    "Fxn:thread.is_alive()";
    "Fxn:self.queue.empty():";
    "Fxn:StopIteration()";
    "Fxn:time.sleep(self.wait_time)";
    "Fxn:self.queue.empty():";
    "Fxn:self.queue.get()";
    "Fxn:six.reraise(value.__class__,";
    "/keras/utils/generic_utils.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:binascii";
    "Import:numpy";
    "Import:time";
    "Import:sys";
    "Import:six";
    "Import:marshal";
    "Import:types";
    "Import:inspect";
    "Import:codecs";
    "Import:collections";
    "class:CustomObjectScope(object):";
    "Fxn:__init__";
    "Fxn:__enter__";
    "Fxn:_GLOBAL_CUSTOM_OBJECTS.copy()";
    "Fxn:_GLOBAL_CUSTOM_OBJECTS.update(objects)";
    "Fxn:__exit__";
    "Fxn:_GLOBAL_CUSTOM_OBJECTS.clear()";
    "Fxn:_GLOBAL_CUSTOM_OBJECTS.update(self.backup)";
    "Fxn:custom_object_scope";
    "Fxn:custom_object_scope({'MyObject':MyObject}):";
    "Fxn:Dense(...,";
    "Fxn:get_custom_objects";
    "Fxn:get_custom_objects().clear()";
    "Fxn:get_custom_objects()['MyObject']";
    "Fxn:serialize_keras_object";
    "Fxn:hasattr(instance,";
    "Fxn:instance.get_config()";
    "Fxn:hasattr(instance,";
    "Fxn:ValueError('Cannot";
    "Fxn:deserialize_keras_object";
    "Fxn:isinstance(identifier,";
    "Fxn:ValueError('Improper";
    "Fxn:str(config))";
    "Fxn:module_objects.get(class_name)";
    "Fxn:ValueError('Unknown";
    "Fxn:hasattr(cls,";
    "Fxn:has_arg(cls.from_config,";
    "Fxn:cls.from_config(config['config'],";
    "Fxn:custom_objects=dict(list(_GLOBAL_CUSTOM_OBJECTS.items())";
    "Fxn:list(custom_objects.items())))";
    "Fxn:CustomObjectScope(custom_objects):";
    "Fxn:cls.from_config(config['config'])";
    "Fxn:CustomObjectScope(custom_objects):";
    "Fxn:cls(**config['config'])";
    "Fxn:isinstance(identifier,";
    "Fxn:custom_objects.get(function_name)";
    "Fxn:module_objects.get(function_name)";
    "Fxn:ValueError('Unknown";
    "Fxn:ValueError('Could";
    "Fxn:func_dump";
    "Fxn:`(code,";
    "Fxn:marshal.dumps(func.__code__)";
    "Fxn:codecs.encode(raw_code,";
    "Fxn:'base64').decode('ascii')";
    "Fxn:tuple(c.cell_contents";
    "Fxn:func_load";
    "Fxn:isinstance(code,";
    "Fxn:isinstance(defaults,";
    "Fxn:tuple(defaults)";
    "Fxn:ensure_value_to_cell";
    "Fxn:dummy_fn";
    "Fxn:isinstance(value,";
    "Fxn:type(cell_value)):";
    "Fxn:tuple(ensure_value_to_cell(_)";
    "Fxn:codecs.decode(code.encode('ascii'),";
    "Fxn:marshal.loads(raw_code)";
    "Fxn:code.encode('raw_unicode_escape')";
    "Fxn:marshal.loads(raw_code)";
    "Fxn:globals()";
    "Fxn:python_types.FunctionType(code,";
    "Fxn:has_arg";
    "Fxn:inspect.getargspec(fn)";
    "Fxn:inspect.getfullargspec(fn)";
    "Fxn:inspect.signature(fn)";
    "Fxn:signature.parameters.get(name)";
    "Fxn:signature.parameters.values():";
    "class:Progbar(object):";
    "Fxn:__init__";
    "Fxn:set(stateful_metrics)";
    "Fxn:set()";
    "Fxn:sys.stdout.isatty())";
    "Fxn:collections.OrderedDict()";
    "Fxn:time.time()";
    "Fxn:update";
    "Fxn:`(name,";
    "Fxn:time.time()";
    "Fxn:sys.stdout.write('\b'";
    "Fxn:sys.stdout.write('\r')";
    "Fxn:sys.stdout.write('\n')";
    "Fxn:int(np.floor(np.log10(self.target)))";
    "Fxn:float(current)";
    "Fxn:int(self.width";
    "Fxn:len(bar)";
    "Fxn:sys.stdout.write(bar)";
    "Fxn:isinstance(self._values[k],";
    "Fxn:np.mean(";
    "Fxn:max(1,";
    "Fxn:abs(avg)";
    "Fxn:len(info)";
    "Fxn:sys.stdout.write(info)";
    "Fxn:sys.stdout.flush()";
    "Fxn:np.mean(";
    "Fxn:max(1,";
    "Fxn:sys.stdout.write(info)";
    "Fxn:sys.stdout.flush()";
    "Fxn:add";
    "Fxn:self.update(self._seen_so_far";
    "/keras/utils/io_utils.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:numpy";
    "Import:defaultdict";
    "Import:six";
    "Import:h5py";
    "class:HDF5Matrix(object):";
    "Fxn:__init__";
    "Fxn:ImportError('The";
    "Fxn:list(self.refs.keys()):";
    "Fxn:h5py.File(datapath)";
    "Fxn:__len__";
    "Fxn:__getitem__";
    "Fxn:isinstance(key,";
    "Fxn:slice(start";
    "Fxn:isinstance(key,";
    "Fxn:isinstance(key,";
    "Fxn:np.max(key)";
    "Fxn:key).tolist()";
    "Fxn:isinstance(key,";
    "Fxn:max(key)";
    "Fxn:self.normalizer(self.data[idx])";
    "Fxn:shape";
    "Fxn:dtype";
    "Fxn:ndim";
    "Fxn:size";
    "Fxn:np.prod(self.shape)";
    "Fxn:ask_to_proceed_with_overwrite";
    "Fxn:six.moves.input('[WARNING]";
    "Fxn:six.moves.input('Enter";
    "Fxn:'(cancel).').strip().lower()";
    "Fxn:print('[TIP]";
    "/keras/utils/layer_utils.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:convert_kernel";
    "Import:backend";
    "Import:numpy";
    "Fxn:count_params";
    "Fxn:print_summary";
    "Fxn:print_row";
    "Fxn:print_layer_summary";
    "Fxn:print_layer_summary_with_connections";
    "Fxn:convert_all_kernels_in_model";
    "Fxn:convert_dense_weights_data_format";
    "/keras/utils/multi_gpu_utils.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:concatenate";
    "Import:backend";
    "Import:Lambda";
    "Import:Model";
    "Fxn:_get_available_devices";
    "Fxn:_normalize_device_name";
    "Fxn:multi_gpu_model";
    "Import:tensorflow";
    "Import:Xception";
    "Import:multi_gpu_model";
    "Import:numpy";
    "Import:tensorflow";
    "Fxn:get_slice";
    "/keras/utils/np_utils.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:numpy";
    "Fxn:to_categorical";
    "Fxn:normalize";
    "/keras/utils/test_utils.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:numpy";
    "Import:assert_allclose";
    "Import:six";
    "Import:has_arg";
    "Import:Model,";
    "Import:Sequential";
    "Import:model_from_json";
    "Import:backend";
    "Fxn:get_test_data";
    "Fxn:layer_test";
    "Fxn:keras_test";
    "Fxn:wrapper";
    "/keras/utils/vis_utils.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:try:";
    "Import:pydot_ng";
    "Import:pydotplus";
    "Import:pydot";
    "Fxn:_check_pydot";
    "Import:pydot.";
    "Fxn:model_to_dot";
    "Import:Wrapper";
    "Import:Sequential";
    "Fxn:plot_model";
    "/keras/utils/__init__.py";
    "Import:absolute_import";
    "Import:np_utils";
    "Import:generic_utils";
    "Import:data_utils";
    "Import:io_utils";
    "Import:conv_utils";
    "Import:HDF5Matrix";
    "Import:get_file";
    "Import:Sequence";
    "Import:GeneratorEnqueuer";
    "Import:OrderedEnqueuer";
    "Import:CustomObjectScope";
    "Import:custom_object_scope";
    "Import:get_custom_objects";
    "Import:serialize_keras_object";
    "Import:deserialize_keras_object";
    "Import:Progbar";
    "Import:convert_all_kernels_in_model";
    "Import:print_summary";
    "Import:plot_model";
    "Import:to_categorical";
    "Import:normalize";
    "Import:multi_gpu_model";
    "/keras/wrappers/scikit_learn.py";
    "Import:absolute_import";
    "Import:division";
    "Import:print_function";
    "Import:copy";
    "Import:types";
    "Import:numpy";
    "Import:to_categorical";
    "Import:has_arg";
    "Import:Sequential";
    "class:BaseWrapper(object):";
    "Fxn:__init__";
    "Fxn:self.check_params(sk_params)";
    "Fxn:check_params";
    "Fxn:legal_params_fns.append(self.__call__)";
    "Fxn:isinstance(self.build_fn,";
    "Fxn:isinstance(self.build_fn,";
    "Fxn:legal_params_fns.append(self.build_fn.__call__)";
    "Fxn:legal_params_fns.append(self.build_fn)";
    "Fxn:has_arg(fn,";
    "Fxn:ValueError(";
    "Fxn:parameter'.format(params_name))";
    "Fxn:get_params";
    "Fxn:copy.deepcopy(self.sk_params)";
    "Fxn:res.update({'build_fn':";
    "Fxn:set_params";
    "Fxn:self.check_params(params)";
    "Fxn:self.sk_params.update(params)";
    "Fxn:fit";
    "Fxn:`(x,";
    "Fxn:`(n_samples,";
    "Fxn:`(n_samples,)`";
    "Fxn:`(n_samples,";
    "Fxn:self.__call__(**self.filter_sk_params(self.__call__))";
    "Fxn:isinstance(self.build_fn,";
    "Fxn:isinstance(self.build_fn,";
    "Fxn:self.build_fn(";
    "Fxn:**self.filter_sk_params(self.build_fn.__call__))";
    "Fxn:self.build_fn(**self.filter_sk_params(self.build_fn))";
    "Fxn:hasattr(loss_name,";
    "Fxn:len(y.shape)";
    "Fxn:to_categorical(y)";
    "Fxn:copy.deepcopy(self.filter_sk_params(Sequential.fit))";
    "Fxn:fit_args.update(kwargs)";
    "Fxn:self.model.fit(x,";
    "Fxn:filter_sk_params";
    "Fxn:self.sk_params.items():";
    "Fxn:has_arg(fn,";
    "Fxn:res.update({name:";
    "Fxn:res.update(override)";
    "class:KerasClassifier(BaseWrapper):";
    "Fxn:fit";
    "Fxn:`(x,";
    "Fxn:`(n_samples,";
    "Fxn:`(n_samples,)`";
    "Fxn:`(n_samples,";
    "Fxn:np.array(y)";
    "Fxn:len(y.shape)";
    "Fxn:np.arange(y.shape[1])";
    "Fxn:len(y.shape)";
    "Fxn:np.unique(y)";
    "Fxn:np.searchsorted(self.classes_,";
    "Fxn:ValueError('Invalid";
    "Fxn:str(y.shape))";
    "Fxn:len(self.classes_)";
    "Fxn:super(KerasClassifier,";
    "Fxn:self).fit(x,";
    "Fxn:predict";
    "Fxn:predict_proba";
    "Fxn:score";
    "Fxn:`(n_samples,";
    "Fxn:`(n_samples,)`";
    "Fxn:`(n_samples,";
    "Fxn:`.compile()`";
    "Fxn:np.searchsorted(self.classes_,";
    "Fxn:self.filter_sk_params(Sequential.evaluate,";
    "Fxn:hasattr(loss_name,";
    "Fxn:len(y.shape)";
    "Fxn:to_categorical(y)";
    "Fxn:self.model.evaluate(x,";
    "Fxn:isinstance(outputs,";
    "Fxn:zip(self.model.metrics_names,";
    "Fxn:ValueError('The";
    "Fxn:`model.compile()`";
    "class:KerasRegressor(BaseWrapper):";
    "Fxn:predict";
    "Fxn:`(n_samples,";
    "Fxn:`(n_samples,)`";
    "Fxn:self.filter_sk_params(Sequential.predict,";
    "Fxn:np.squeeze(self.model.predict(x,";
    "Fxn:score";
    "Fxn:`(n_samples,";
    "Fxn:`(n_samples,)`";
    "Fxn:self.filter_sk_params(Sequential.evaluate,";
    "Fxn:self.model.evaluate(x,";
    "Fxn:isinstance(loss,";
    "/keras/wrappers/__init__.py";
    "/tests/test_documentation.py";
    "Import:importlib";
    "Import:inspect";
    "Import:import";
    "Import:sys";
    "Import:compress";
    "Import:pytest";
    "Fxn:handle_class";
    "Fxn:handle_function";
    "Fxn:assert_doc_style";
    "Fxn:assert_function_style";
    "Fxn:assert_blank_before";
    "Fxn:is_accepted";
    "Fxn:member_too_small";
    "Fxn:assert_args_presence";
    "Fxn:handle_method";
    "Fxn:handle_module";
    "Fxn:test_doc";
    "/tests/test_dynamic_trainability.py";
    "Import:absolute_import";
    "Import:print_function";
    "Import:pytest";
    "Import:keras_test";
    "Import:Model,";
    "Import:Dense,";
    "Fxn:test_layer_trainability_switch";
    "Fxn:test_model_trainability_switch";
    "Fxn:test_nested_model_trainability";
    "/tests/test_loss_masking.py";
    "Import:numpy";
    "Import:pytest";
    "Import:Sequential";
    "Import:_weighted_masked_objective";
    "Import:TimeDistributed,";
    "Import:keras_test";
    "Import:losses";
    "Import:backend";
    "Fxn:test_masking";
    "Fxn:test_loss_masking";
    "/tests/test_loss_weighting.py";
    "Import:absolute_import";
    "Import:print_function";
    "Import:pytest";
    "Import:numpy";
    "Import:backend";
    "Import:get_test_data";
    "Import:Sequential,";
    "Import:Dense,";
    "Import:np_utils";
    "Import:keras_test";
    "Import:assert_almost_equal,";
    "Fxn:_get_test_data";
    "Fxn:create_sequential_model";
    "Fxn:create_temporal_sequential_model";
    "Fxn:test_sequential_class_weights";
    "Fxn:test_sequential_sample_weights";
    "Fxn:test_sequential_temporal_sample_weights";
    "Fxn:test_weighted_metrics_with_sample_weight";
    "Fxn:test_weighted_metrics_with_no_sample_weight";
    "Fxn:test_weighted_metrics_with_weighted_accuracy_metric";
    "Fxn:test_weighted_metrics_with_multiple_outputs";
    "Fxn:test_class_weight_wrong_classes";
    "/tests/test_model_saving.py";
    "Import:pytest";
    "Import:import";
    "Import:h5py";
    "Import:tempfile";
    "Import:numpy";
    "Import:assert_allclose";
    "Import:assert_raises";
    "Import:backend";
    "Import:Model,";
    "Import:Dense,";
    "Import:Conv2D,";
    "Import:Input";
    "Import:optimizers";
    "Import:losses";
    "Import:metrics";
    "Import:keras_test";
    "Import:save_model,";
    "Fxn:test_sequential_model_saving";
    "Fxn:test_sequential_model_saving_2";
    "Fxn:test_functional_model_saving";
    "Fxn:test_saving_multiple_metrics_outputs";
    "Fxn:test_saving_without_compilation";
    "Fxn:test_saving_right_after_compilation";
    "Fxn:test_saving_unused_layers_is_ok";
    "Fxn:test_loading_weights_by_name_and_reshape";
    "Fxn:test_loading_weights_by_name_2";
    "Fxn:test_loading_weights_by_name_skip_mismatch";
    "Fxn:square_fn";
    "Fxn:test_saving_lambda_custom_objects";
    "Fxn:test_saving_lambda_numpy_array_arguments";
    "Fxn:test_saving_custom_activation_function";
    "Fxn:test_saving_model_with_long_layer_names";
    "Fxn:test_saving_model_with_long_weights_names";
    "Fxn:test_saving_recurrent_layer_with_init_state";
    "Fxn:test_saving_recurrent_layer_without_bias";
    "/tests/test_multiprocessing.py";
    "Import:print_function";
    "Import:import";
    "Import:threading";
    "Import:pytest";
    "Import:numpy";
    "Import:Sequential";
    "Import:Dense";
    "Import:keras_test";
    "Import:Sequence";
    "class:DummySequence(Sequence):";
    "Fxn:__getitem__";
    "Fxn:np.zeros([10,";
    "Fxn:np.ones([10])";
    "Fxn:__len__";
    "Fxn:in_tmpdir";
    "Fxn:tmpdir.as_cwd():";
    "Fxn:tmpdir.listdir()";
    "Fxn:test_multiprocessing_training";
    "Fxn:np.random.randint(0,";
    "Fxn:np.random.randint(0,";
    "Fxn:np.random.random(50)";
    "Fxn:custom_generator";
    "Fxn:np.random.randint(0,";
    "Fxn:Sequential()";
    "Fxn:model.add(Dense(1,";
    "Fxn:input_shape=(2,";
    "Fxn:model.compile(loss='mse',";
    "Fxn:`fit_generator()`";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:`fit_generator()`";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.fit_generator(custom_generator(True),";
    "Fxn:validation_data=(arr_data[:10],";
    "Fxn:model.fit_generator(custom_generator(True),";
    "Fxn:validation_data=(arr_data[:10],";
    "Fxn:model.fit_generator(custom_generator(True),";
    "Fxn:validation_data=(arr_data[:10],";
    "Fxn:`fit_generator()`";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.fit_generator(custom_generator(True),";
    "Fxn:validation_data=custom_generator(True),";
    "Fxn:model.fit_generator(custom_generator(True),";
    "Fxn:validation_data=custom_generator(True),";
    "Fxn:model.fit_generator(custom_generator(True),";
    "Fxn:validation_data=custom_generator(True),";
    "Fxn:model.fit_generator(custom_generator(True),";
    "Fxn:validation_data=custom_generator(True),";
    "Fxn:model.fit_generator(custom_generator(True),";
    "Fxn:validation_data=custom_generator(True),";
    "Fxn:model.fit_generator(DummySequence(),";
    "Fxn:validation_data=custom_generator(True),";
    "Fxn:model.fit_generator(DummySequence(),";
    "Fxn:validation_data=custom_generator(True),";
    "Fxn:invalid_generator";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:validation_data=custom_generator(),";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:validation_data=(arr_data[:10],";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:validation_data=invalid_generator(),";
    "Fxn:test_multiprocessing_training_from_file";
    "Fxn:np.random.randint(0,";
    "Fxn:np.random.randint(0,";
    "Fxn:np.savez('data.npz',";
    "Fxn:custom_generator";
    "Fxn:np.load('data.npz')";
    "Fxn:np.random.randint(0,";
    "Fxn:Sequential()";
    "Fxn:model.add(Dense(1,";
    "Fxn:input_shape=(2,";
    "Fxn:model.compile(loss='mse',";
    "Fxn:`fit_generator()`";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:`fit_generator()`";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:os.remove('data.npz')";
    "Fxn:test_multiprocessing_predicting";
    "Fxn:np.random.randint(0,";
    "Fxn:custom_generator";
    "Fxn:np.random.randint(0,";
    "Fxn:Sequential()";
    "Fxn:model.add(Dense(1,";
    "Fxn:input_shape=(2,";
    "Fxn:model.compile(loss='mse',";
    "Fxn:`predict_generator()`";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:`predict_generator()`";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:test_multiprocessing_evaluating";
    "Fxn:np.random.randint(0,";
    "Fxn:np.random.randint(0,";
    "Fxn:custom_generator";
    "Fxn:np.random.randint(0,";
    "Fxn:Sequential()";
    "Fxn:model.add(Dense(1,";
    "Fxn:input_shape=(2,";
    "Fxn:model.compile(loss='mse',";
    "Fxn:`evaluate_generator()`";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:`evaluate_generator()`";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:test_multiprocessing_fit_error";
    "Fxn:np.random.randint(0,";
    "Fxn:np.random.randint(0,";
    "Fxn:custom_generator";
    "Fxn:range(good_batches):";
    "Fxn:np.random.randint(0,";
    "Fxn:Sequential()";
    "Fxn:model.add(Dense(1,";
    "Fxn:input_shape=(2,";
    "Fxn:model.compile(loss='mse',";
    "Fxn:`fit_generator()`";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:pytest.raises(RuntimeError):";
    "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:pytest.raises(RuntimeError):";
    "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:`fit_generator()`";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:pytest.raises(RuntimeError):";
    "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:pytest.raises(RuntimeError):";
    "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:pytest.raises(RuntimeError):";
    "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:pytest.raises(RuntimeError):";
    "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:test_multiprocessing_evaluate_error";
    "Fxn:np.random.randint(0,";
    "Fxn:np.random.randint(0,";
    "Fxn:custom_generator";
    "Fxn:range(good_batches):";
    "Fxn:np.random.randint(0,";
    "Fxn:Sequential()";
    "Fxn:model.add(Dense(1,";
    "Fxn:input_shape=(2,";
    "Fxn:model.compile(loss='mse',";
    "Fxn:`evaluate_generator()`";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:pytest.raises(RuntimeError):";
    "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:pytest.raises(RuntimeError):";
    "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:`evaluate_generator()`";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:pytest.raises(RuntimeError):";
    "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:pytest.raises(RuntimeError):";
    "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:pytest.raises(RuntimeError):";
    "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:pytest.raises(RuntimeError):";
    "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:test_multiprocessing_predict_error";
    "Fxn:np.random.randint(0,";
    "Fxn:custom_generator";
    "Fxn:range(good_batches):";
    "Fxn:np.random.randint(0,";
    "Fxn:Sequential()";
    "Fxn:model.add(Dense(1,";
    "Fxn:input_shape=(2,";
    "Fxn:model.compile(loss='mse',";
    "Fxn:`predict_generator()`";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:pytest.raises(RuntimeError):";
    "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:pytest.raises(RuntimeError):";
    "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:`predict_generator()`";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:pytest.raises(RuntimeError):";
    "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:pytest.raises(RuntimeError):";
    "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:pytest.raises(RuntimeError):";
    "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:pytest.raises(RuntimeError):";
    "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:pytest.main([__file__])";
    "/tests/integration_tests/test_datasets.py";
    "Import:print_function";
    "Import:pytest";
    "Import:time";
    "Import:random";
    "Import:cifar10";
    "Import:cifar100";
    "Import:reuters";
    "Import:imdb";
    "Import:mnist";
    "Import:boston_housing";
    "Import:fashion_mnist";
    "Fxn:test_cifar";
    "Fxn:test_reuters";
    "Fxn:test_mnist";
    "Fxn:test_imdb";
    "Fxn:test_boston_housing";
    "Fxn:test_fashion_mnist";
    "/tests/integration_tests/test_image_data_tasks.py";
    "Import:print_function";
    "Import:numpy";
    "Import:pytest";
    "Import:get_test_data,";
    "Import:Sequential";
    "Import:layers";
    "Import:to_categorical";
    "Fxn:test_image_classification";
    "/tests/integration_tests/test_temporal_data_tasks.py";
    "Import:print_function";
    "Import:numpy";
    "Import:pytest";
    "Import:string";
    "Import:get_test_data,";
    "Import:to_categorical";
    "Import:Sequential";
    "Import:layers,";
    "Import:keras.backend";
    "Import:keras";
    "Fxn:test_temporal_classification";
    "Fxn:test_temporal_classification_functional";
    "Fxn:test_temporal_regression";
    "Fxn:test_3d_to_3d";
    "Fxn:test_stacked_lstm_char_prediction";
    "Fxn:test_masked_temporal";
    "Fxn:test_embedding_with_clipnorm";
    "/tests/integration_tests/test_vector_data_tasks.py";
    "Import:print_function";
    "Import:pytest";
    "Import:get_test_data,";
    "Import:Sequential";
    "Import:layers";
    "Import:keras";
    "Import:to_categorical";
    "Fxn:test_vector_classification";
    "Fxn:test_vector_classification_functional";
    "Fxn:test_vector_regression";
    "/tests/keras/activations_test.py";
    "Import:pytest";
    "Import:numpy";
    "Import:assert_allclose";
    "Import:backend";
    "Import:activations";
    "Import:Dense";
    "Fxn:get_standard_values";
    "Fxn:test_serialization";
    "Fxn:test_get_fn";
    "Fxn:test_softmax_valid";
    "Fxn:softmax";
    "Fxn:test_softmax_invalid";
    "Fxn:test_time_distributed_softmax";
    "Fxn:test_softplus";
    "Fxn:softplus";
    "Fxn:test_softsign";
    "Fxn:softsign";
    "Fxn:test_sigmoid";
    "Fxn:ref_sigmoid";
    "Fxn:test_hard_sigmoid";
    "Fxn:ref_hard_sigmoid";
    "Fxn:test_relu";
    "Fxn:test_elu";
    "Fxn:test_selu";
    "Fxn:test_tanh";
    "Fxn:test_linear";
    "/tests/keras/constraints_test.py";
    "Import:pytest";
    "Import:numpy";
    "Import:assert_allclose";
    "Import:backend";
    "Import:constraints";
    "Import:keras_test";
    "Fxn:get_test_values";
    "Fxn:get_example_array";
    "Fxn:test_serialization";
    "Fxn:test_max_norm";
    "Fxn:test_non_neg";
    "Fxn:test_unit_norm";
    "Fxn:test_min_max_norm";
    "/tests/keras/initializers_test.py";
    "Import:pytest";
    "Import:numpy";
    "Import:initializers";
    "Import:backend";
    "Fxn:_runner";
    "Fxn:test_uniform";
    "Fxn:test_normal";
    "Fxn:test_truncated_normal";
    "Fxn:test_constant";
    "Fxn:test_lecun_uniform";
    "Fxn:test_glorot_uniform";
    "Fxn:test_he_uniform";
    "Fxn:test_glorot_normal";
    "Fxn:test_he_normal";
    "Fxn:test_lecun_normal";
    "Fxn:test_orthogonal";
    "Fxn:test_identity";
    "Fxn:test_zero";
    "Fxn:test_one";
    "/tests/keras/losses_test.py";
    "Import:pytest";
    "Import:numpy";
    "Import:keras";
    "Import:losses";
    "Import:backend";
    "Import:custom_object_scope";
    "Fxn:test_objective_shapes_3d";
    "Fxn:test_objective_shapes_2d";
    "Fxn:test_cce_one_hot";
    "Fxn:test_categorical_hinge";
    "Fxn:test_sparse_categorical_crossentropy";
    "Fxn:test_sparse_categorical_crossentropy_4d";
    "Fxn:__init__";
    "Fxn:__call__";
    "Fxn:get_config";
    "Fxn:test_serializing_loss_class";
    "Fxn:test_serializing_model_with_loss_class";
    "/tests/keras/metrics_test.py";
    "Import:pytest";
    "Import:numpy";
    "Import:keras";
    "Import:metrics";
    "Import:backend";
    "Import:keras_test";
    "Fxn:test_metrics";
    "Fxn:test_sparse_metrics";
    "Fxn:test_serialize";
    "Fxn:__init__";
    "Fxn:test_invalid_get";
    "Fxn:test_top_k_categorical_accuracy";
    "Fxn:test_sparse_top_k_categorical_accuracy";
    "Fxn:test_stateful_metrics";
    "class:BinaryTruePositives(keras.layers.Layer):";
    "Fxn:__init__";
    "Fxn:super(BinaryTruePositives,";
    "Fxn:self).__init__(name=name,";
    "Fxn:K.variable(value=0,";
    "Fxn:reset_states";
    "Fxn:K.set_value(self.true_positives,";
    "Fxn:__call__";
    "Fxn:K.cast(y_true,";
    "Fxn:K.cast(K.round(y_pred),";
    "Fxn:K.cast(K.equal(y_pred,";
    "Fxn:K.cast(K.sum(correct_preds";
    "Fxn:self.add_update(K.update_add(self.true_positives,";
    "Fxn:BinaryTruePositives()";
    "Fxn:metrics.serialize(metric_fn)";
    "Fxn:metrics.deserialize(";
    "Fxn:keras.Input(shape=(2,))";
    "Fxn:keras.layers.Dense(1,";
    "Fxn:activation='sigmoid')(inputs)";
    "Fxn:keras.Model(inputs,";
    "Fxn:model.compile(optimizer='sgd',";
    "Fxn:np.random.random((samples,";
    "Fxn:np.random.randint(2,";
    "Fxn:size=(samples,";
    "Fxn:model.fit(x,";
    "Fxn:model.evaluate(x,";
    "Fxn:model.predict(x)";
    "Fxn:ref_true_pos";
    "Fxn:np.sum(np.logical_and(y_pred";
    "Fxn:np.testing.assert_allclose(outs[2],";
    "Fxn:ref_true_pos(y,";
    "Fxn:pytest.main([__file__])";
    "/tests/keras/optimizers_test.py";
    "Import:print_function";
    "Import:pytest";
    "Import:numpy";
    "Import:assert_allclose";
    "Import:test_utils";
    "Import:optimizers,";
    "Import:Sequential,";
    "Import:Dense,";
    "Import:keras_test";
    "Import:to_categorical";
    "Import:backend";
    "Fxn:get_test_data";
    "Fxn:_test_optimizer";
    "Fxn:_test_no_grad";
    "Fxn:test_sgd";
    "Fxn:test_rmsprop";
    "Fxn:test_adagrad";
    "Fxn:test_adadelta";
    "Fxn:test_adam";
    "Fxn:test_adamax";
    "Fxn:test_nadam";
    "Fxn:test_adam_amsgrad";
    "Fxn:test_clipnorm";
    "Fxn:test_clipvalue";
    "Fxn:test_tfoptimizer";
    "Import:constraints";
    "Import:train";
    "/tests/keras/regularizers_test.py";
    "Import:pytest";
    "Import:Sequential,";
    "Import:Dense,";
    "Import:np_utils";
    "Import:test_utils";
    "Import:regularizers";
    "Import:backend";
    "Fxn:get_data";
    "Fxn:create_model";
    "Fxn:create_multi_input_model_from";
    "Fxn:test_kernel_regularization";
    "Fxn:test_activity_regularization";
    "Fxn:test_regularization_shared_layer";
    "Fxn:test_regularization_shared_model";
    "Fxn:test_regularization_shared_layer_in_different_models";
    "/tests/keras/test_callbacks.py";
    "Import:import";
    "Import:multiprocessing";
    "Import:numpy";
    "Import:pytest";
    "Import:reader";
    "Import:Sniffer";
    "Import:shutil";
    "Import:optimizers";
    "Import:initializers";
    "Import:callbacks";
    "Import:Sequential,";
    "Import:Input,";
    "Import:Conv2D";
    "Import:MaxPooling2D,";
    "Import:get_test_data";
    "Import:keras_test";
    "Import:backend";
    "Import:np_utils";
    "Import:patch";
    "Import:patch";
    "Fxn:test_TerminateOnNaN";
    "Fxn:data_generator";
    "Fxn:test_stop_training_csv";
    "Fxn:data_generator";
    "Fxn:test_ModelCheckpoint";
    "Fxn:test_EarlyStopping";
    "Fxn:test_EarlyStopping_reuse";
    "Fxn:test_EarlyStopping_patience";
    "class:DummyModel(object):";
    "Fxn:__init__";
    "Fxn:callbacks.EarlyStopping(monitor='val_loss',";
    "Fxn:DummyModel()";
    "Fxn:early_stop.on_train_begin()";
    "Fxn:range(len(losses)):";
    "Fxn:early_stop.on_epoch_end(epoch,";
    "Fxn:test_LearningRateScheduler";
    "Fxn:np.random.seed(1337)";
    "Fxn:get_test_data(num_train=train_samples,";
    "Fxn:input_shape=(input_dim,),";
    "Fxn:np_utils.to_categorical(y_test)";
    "Fxn:np_utils.to_categorical(y_train)";
    "Fxn:Sequential()";
    "Fxn:model.add(Dense(num_hidden,";
    "Fxn:model.add(Dense(num_classes,";
    "Fxn:model.compile(loss='categorical_crossentropy',";
    "Fxn:[callbacks.LearningRateScheduler(lambda";
    "Fxn:model.fit(X_train,";
    "Fxn:validation_data=(X_test,";
    "Fxn:K.epsilon()";
    "Fxn:test_ReduceLROnPlateau";
    "Fxn:np.random.seed(1337)";
    "Fxn:get_test_data(num_train=train_samples,";
    "Fxn:input_shape=(input_dim,),";
    "Fxn:np_utils.to_categorical(y_test)";
    "Fxn:np_utils.to_categorical(y_train)";
    "Fxn:make_model";
    "Fxn:np.random.seed(1337)";
    "Fxn:Sequential()";
    "Fxn:model.add(Dense(num_hidden,";
    "Fxn:model.add(Dense(num_classes,";
    "Fxn:model.compile(loss='categorical_crossentropy',";
    "Fxn:optimizer=optimizers.SGD(lr=0.1),";
    "Fxn:make_model()";
    "Fxn:[callbacks.ReduceLROnPlateau(monitor='val_loss',";
    "Fxn:model.fit(X_train,";
    "Fxn:validation_data=(X_test,";
    "Fxn:np.allclose(float(K.get_value(model.optimizer.lr)),";
    "Fxn:atol=K.epsilon())";
    "Fxn:make_model()";
    "Fxn:[callbacks.ReduceLROnPlateau(monitor='val_loss',";
    "Fxn:model.fit(X_train,";
    "Fxn:validation_data=(X_test,";
    "Fxn:np.allclose(float(K.get_value(model.optimizer.lr)),";
    "Fxn:atol=K.epsilon())";
    "Fxn:test_CSVLogger";
    "Fxn:np.random.seed(1337)";
    "Fxn:str(tmpdir";
    "Fxn:get_test_data(num_train=train_samples,";
    "Fxn:input_shape=(input_dim,),";
    "Fxn:np_utils.to_categorical(y_test)";
    "Fxn:np_utils.to_categorical(y_train)";
    "Fxn:make_model";
    "Fxn:np.random.seed(1337)";
    "Fxn:Sequential()";
    "Fxn:model.add(Dense(num_hidden,";
    "Fxn:model.add(Dense(num_classes,";
    "Fxn:model.compile(loss='categorical_crossentropy',";
    "Fxn:optimizer=optimizers.SGD(lr=0.1),";
    "Fxn:make_model()";
    "Fxn:[callbacks.CSVLogger(filepath,";
    "Fxn:model.fit(X_train,";
    "Fxn:validation_data=(X_test,";
    "Fxn:os.path.isfile(filepath)";
    "Fxn:open(filepath)";
    "Fxn:Sniffer().sniff(csvfile.read())";
    "Fxn:make_model()";
    "Fxn:[callbacks.CSVLogger(filepath,";
    "Fxn:model.fit(X_train,";
    "Fxn:validation_data=(X_test,";
    "Fxn:model.fit(X_train,";
    "Fxn:validation_data=(X_test,";
    "Fxn:open(filepath)";
    "Fxn:".join(csvfile.readlines())";
    "Fxn:len(re.findall('epoch',";
    "Fxn:os.remove(filepath)";
    "Fxn:tmpdir.listdir()";
    "Fxn:test_TensorBoard";
    "Fxn:np.random.seed(np.random.randint(1,";
    "Fxn:str(tmpdir";
    "Fxn:get_test_data(";
    "Fxn:input_shape=(input_dim,),";
    "Fxn:np_utils.to_categorical(y_test)";
    "Fxn:np_utils.to_categorical(y_train)";
    "Fxn:data_generator";
    "Fxn:len(X_train)";
    "Fxn:len(X_test)";
    "Fxn:Input((input_dim,))";
    "Fxn:Dense(num_hidden,";
    "Fxn:activation='relu')(inp)";
    "Fxn:Dropout(0.1)(hidden)";
    "Fxn:Dense(num_classes,";
    "Fxn:activation='softmax')(hidden)";
    "Fxn:Model(inputs=inp,";
    "Fxn:model.compile(loss='categorical_crossentropy',";
    "Fxn:callbacks_factory";
    "Fxn:[callbacks.TensorBoard(log_dir=filepath,";
    "Fxn:model.fit(X_train,";
    "Fxn:callbacks=callbacks_factory(histogram_freq=0),";
    "Fxn:model.fit(X_train,";
    "Fxn:validation_data=(X_test,";
    "Fxn:callbacks=callbacks_factory(histogram_freq=0),";
    "Fxn:model.fit_generator(data_generator(True),";
    "Fxn:len(X_train),";
    "Fxn:callbacks=callbacks_factory(histogram_freq=0))";
    "Fxn:model.fit_generator(data_generator(True),";
    "Fxn:len(X_train),";
    "Fxn:validation_data=(X_test,";
    "Fxn:callbacks=callbacks_factory(histogram_freq=1))";
    "Fxn:os.path.isdir(filepath)";
    "Fxn:shutil.rmtree(filepath)";
    "Fxn:tmpdir.listdir()";
    "Fxn:@pytest.mark.skipif((K.backend()";
    "Fxn:test_TensorBoard_histogram_freq_must_have_validation_data";
    "Fxn:np.random.seed(np.random.randint(1,";
    "Fxn:str(tmpdir";
    "Fxn:get_test_data(";
    "Fxn:input_shape=(input_dim,),";
    "Fxn:np_utils.to_categorical(y_test)";
    "Fxn:np_utils.to_categorical(y_train)";
    "Fxn:data_generator";
    "Fxn:len(X_train)";
    "Fxn:len(X_test)";
    "Fxn:Input((input_dim,))";
    "Fxn:Dense(num_hidden,";
    "Fxn:activation='relu')(inp)";
    "Fxn:Dropout(0.1)(hidden)";
    "Fxn:Dense(num_classes,";
    "Fxn:activation='softmax')(hidden)";
    "Fxn:Model(inputs=inp,";
    "Fxn:model.compile(loss='categorical_crossentropy',";
    "Fxn:callbacks_factory";
    "Fxn:[callbacks.TensorBoard(log_dir=filepath,";
    "Fxn:pytest.raises(ValueError)";
    "Fxn:model.fit(X_train,";
    "Fxn:callbacks=callbacks_factory(histogram_freq=1),";
    "Fxn:str(raised_exception.value)";
    "Fxn:pytest.raises(ValueError)";
    "Fxn:model.fit_generator(data_generator(True),";
    "Fxn:len(X_train),";
    "Fxn:callbacks=callbacks_factory(histogram_freq=1))";
    "Fxn:str(raised_exception.value)";
    "Fxn:pytest.raises(ValueError)";
    "Fxn:model.fit_generator(data_generator(True),";
    "Fxn:len(X_train),";
    "Fxn:validation_data=data_generator(False),";
    "Fxn:callbacks=callbacks_factory(histogram_freq=1))";
    "Fxn:str(raised_exception.value)";
    "Fxn:test_TensorBoard_multi_input_output";
    "Fxn:np.random.seed(np.random.randint(1,";
    "Fxn:str(tmpdir";
    "Fxn:get_test_data(";
    "Fxn:input_shape=(input_dim,),";
    "Fxn:np_utils.to_categorical(y_test)";
    "Fxn:np_utils.to_categorical(y_train)";
    "Fxn:data_generator";
    "Fxn:len(X_train)";
    "Fxn:len(X_test)";
    "Fxn:Input((input_dim,))";
    "Fxn:Input((input_dim,))";
    "Fxn:add([inp1,";
    "Fxn:Dense(num_hidden,";
    "Fxn:activation='relu')(inp)";
    "Fxn:Dropout(0.1)(hidden)";
    "Fxn:Dense(num_classes,";
    "Fxn:activation='softmax')(hidden)";
    "Fxn:Dense(num_classes,";
    "Fxn:activation='softmax')(hidden)";
    "Fxn:Model(inputs=[inp1,";
    "Fxn:model.compile(loss='categorical_crossentropy',";
    "Fxn:callbacks_factory";
    "Fxn:[callbacks.TensorBoard(log_dir=filepath,";
    "Fxn:model.fit([X_train]";
    "Fxn:callbacks=callbacks_factory(histogram_freq=0),";
    "Fxn:model.fit([X_train]";
    "Fxn:validation_data=([X_test]";
    "Fxn:callbacks=callbacks_factory(histogram_freq=1),";
    "Fxn:model.fit_generator(data_generator(True),";
    "Fxn:len(X_train),";
    "Fxn:callbacks=callbacks_factory(histogram_freq=0))";
    "Fxn:model.fit_generator(data_generator(True),";
    "Fxn:len(X_train),";
    "Fxn:validation_data=([X_test]";
    "Fxn:callbacks=callbacks_factory(histogram_freq=1))";
    "Fxn:os.path.isdir(filepath)";
    "Fxn:shutil.rmtree(filepath)";
    "Fxn:tmpdir.listdir()";
    "Fxn:test_TensorBoard_convnet";
    "Fxn:np.random.seed(np.random.randint(1,";
    "Fxn:str(tmpdir";
    "Fxn:get_test_data(num_train=500,";
    "Fxn:np_utils.to_categorical(y_train)";
    "Fxn:np_utils.to_categorical(y_test)";
    "Fxn:Sequential([";
    "Fxn:Conv2D(filters=8,";
    "Fxn:MaxPooling2D(pool_size=2),";
    "Fxn:Conv2D(filters=4,";
    "Fxn:kernel_size=(3,";
    "Fxn:GlobalAveragePooling2D(),";
    "Fxn:Dense(num_classes,";
    "Fxn:model.compile(loss='categorical_crossentropy',";
    "Fxn:callbacks.TensorBoard(log_dir=filepath,";
    "Fxn:model.summary()";
    "Fxn:model.fit(x_train,";
    "Fxn:validation_data=(x_test,";
    "Fxn:os.path.isdir(filepath)";
    "Fxn:shutil.rmtree(filepath)";
    "Fxn:tmpdir.listdir()";
    "Fxn:test_CallbackValData";
    "Fxn:np.random.seed(1337)";
    "Fxn:get_test_data(num_train=train_samples,";
    "Fxn:input_shape=(input_dim,),";
    "Fxn:np_utils.to_categorical(y_test)";
    "Fxn:np_utils.to_categorical(y_train)";
    "Fxn:Sequential()";
    "Fxn:model.add(Dense(num_hidden,";
    "Fxn:model.add(Dense(num_classes,";
    "Fxn:model.compile(loss='categorical_crossentropy',";
    "Fxn:callbacks.LambdaCallback(on_train_end=lambda";
    "Fxn:model.fit(X_train,";
    "Fxn:validation_data=(X_test,";
    "Fxn:data_generator";
    "Fxn:len(X_train)";
    "Fxn:len(X_test)";
    "Fxn:callbacks.LambdaCallback(on_train_end=lambda";
    "Fxn:model.fit_generator(data_generator(True),";
    "Fxn:len(X_train),";
    "Fxn:validation_data=(X_test,";
    "Fxn:len(cbk.validation_data)";
    "Fxn:len(cbk2.validation_data)";
    "Fxn:test_LambdaCallback";
    "Fxn:np.random.seed(1337)";
    "Fxn:get_test_data(num_train=train_samples,";
    "Fxn:input_shape=(input_dim,),";
    "Fxn:np_utils.to_categorical(y_test)";
    "Fxn:np_utils.to_categorical(y_train)";
    "Fxn:Sequential()";
    "Fxn:model.add(Dense(num_hidden,";
    "Fxn:model.add(Dense(num_classes,";
    "Fxn:model.compile(loss='categorical_crossentropy',";
    "Fxn:f";
    "Fxn:multiprocessing.Process(target=f)";
    "Fxn:p.start()";
    "Fxn:callbacks.LambdaCallback(on_train_end=lambda";
    "Fxn:p.terminate())";
    "Fxn:model.fit(X_train,";
    "Fxn:validation_data=(X_test,";
    "Fxn:p.join()";
    "Fxn:p.is_alive()";
    "Fxn:test_TensorBoard_with_ReduceLROnPlateau";
    "Fxn:np.random.seed(np.random.randint(1,";
    "Fxn:str(tmpdir";
    "Fxn:get_test_data(num_train=train_samples,";
    "Fxn:input_shape=(input_dim,),";
    "Fxn:np_utils.to_categorical(y_test)";
    "Fxn:np_utils.to_categorical(y_train)";
    "Fxn:Sequential()";
    "Fxn:model.add(Dense(num_hidden,";
    "Fxn:model.add(Dense(num_classes,";
    "Fxn:model.compile(loss='binary_crossentropy',";
    "Fxn:callbacks.ReduceLROnPlateau(";
    "Fxn:callbacks.TensorBoard(";
    "Fxn:model.fit(X_train,";
    "Fxn:validation_data=(X_test,";
    "Fxn:os.path.isdir(filepath)";
    "Fxn:shutil.rmtree(filepath)";
    "Fxn:tmpdir.listdir()";
    "Fxn:tests_RemoteMonitor";
    "Fxn:get_test_data(num_train=train_samples,";
    "Fxn:input_shape=(input_dim,),";
    "Fxn:np_utils.to_categorical(y_test)";
    "Fxn:np_utils.to_categorical(y_train)";
    "Fxn:Sequential()";
    "Fxn:model.add(Dense(num_hidden,";
    "Fxn:model.add(Dense(num_classes,";
    "Fxn:model.compile(loss='categorical_crossentropy',";
    "Fxn:[callbacks.RemoteMonitor()]";
    "Fxn:patch('requests.post'):";
    "Fxn:model.fit(X_train,";
    "Fxn:validation_data=(X_test,";
    "Fxn:pytest.main([__file__])";
    "Import:open(filepath)";
    "Import:shutil";
    "/tests/keras/test_sequential_model.py";
    "Import:absolute_import";
    "Import:print_function";
    "Import:pytest";
    "Import:import";
    "Import:numpy";
    "Import:assert_allclose";
    "Import:backend";
    "Import:keras";
    "Import:Sequential";
    "Import:Dense,";
    "Import:np_utils";
    "Import:get_test_data,";
    "Import:model_from_json,";
    "Import:losses";
    "Import:_make_batches";
    "Fxn:in_tmpdir";
    "Fxn:test_sequential_pop";
    "Fxn:_get_test_data";
    "Fxn:test_sequential_fit_generator";
    "Fxn:data_generator";
    "Fxn:test_sequential";
    "Fxn:data_generator";
    "Fxn:test_nested_sequential";
    "Fxn:test_sequential_count_params";
    "Fxn:test_nested_sequential_trainability";
    "Fxn:test_rebuild_model";
    "Fxn:test_clone_functional_model";
    "Fxn:test_clone_sequential_model";
    "Fxn:test_sequential_update_disabling";
    "/tests/keras/applications/applications_test.py";
    "Import:pytest";
    "Import:random";
    "Import:multiprocessing";
    "Import:Process,";
    "Import:keras_test";
    "Import:layer_test";
    "Import:Sequential";
    "Import:applications";
    "Import:backend";
    "Fxn:_get_output_shape";
    "Fxn:target";
    "Fxn:_test_application_basic";
    "Fxn:_test_application_notop";
    "Fxn:_test_application_variable_input_channels";
    "Fxn:_test_app_pooling";
    "Fxn:test_resnet50";
    "Fxn:test_vgg";
    "Fxn:test_xception";
    "Fxn:test_inceptionv3";
    "Fxn:test_inceptionresnetv2";
    "Fxn:test_mobilenet";
    "Fxn:test_densenet";
    "Fxn:test_nasnet";
    "/tests/keras/applications/imagenet_utils_test.py";
    "Import:pytest";
    "Import:numpy";
    "Import:assert_allclose";
    "Import:imagenet_utils";
    "Import:Model";
    "Import:Input,";
    "Fxn:test_preprocess_input";
    "Fxn:test_preprocess_input_symbolic";
    "Fxn:test_decode_predictions";
    "Fxn:test_obtain_input_shape";
    "/tests/keras/backend/backend_test.py";
    "Import:pytest";
    "Import:assert_allclose";
    "Import:numpy";
    "Import:scipy.signal";
    "Import:scipy.sparse";
    "Import:warnings";
    "Import:keras_test";
    "Import:backend";
    "Import:floatx,";
    "Import:convert_kernel";
    "Import:cntk_backend";
    "Import:CNTK";
    "Import:tensorflow_backend";
    "Import:TensorFlow";
    "Import:theano_backend";
    "Import:Theano";
    "Fxn:check_dtype";
    "Fxn:cntk_func_single_tensor";
    "Fxn:cntk_func_two_tensor";
    "Fxn:cntk_func_three_tensor";
    "Fxn:parse_shape_or_val";
    "Fxn:assert_list_pairwise";
    "Fxn:assert_list_with_ref";
    "Fxn:assert_list_keras_shape";
    "Fxn:check_single_tensor_operation";
    "Fxn:check_two_tensor_operation";
    "Fxn:check_composed_tensor_operations";
    "Fxn:normalize_ref_conv";
    "Fxn:wrapper";
    "Fxn:ref_conv";
    "Fxn:ref_depthwise_conv";
    "Fxn:ref_separable_conv";
    "Fxn:ref_pool";
    "Fxn:ref_rnn";
    "class:TestBackend(object):";
    "Fxn:test_is_keras_tensor";
    "Fxn:np.array([1,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:k.is_keras_tensor(np_var)";
    "Fxn:k.variable(np_var)";
    "Fxn:k.is_keras_tensor(keras_var)";
    "Fxn:k.placeholder(shape=(2,";
    "Fxn:k.is_keras_tensor(keras_placeholder)";
    "Fxn:test_set_learning_phase";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:k.set_learning_phase(2)";
    "Fxn:test_eye";
    "Fxn:[k.eval(k.eye(3))";
    "Fxn:assert_list_pairwise(z_list)";
    "Fxn:test_linear_operations";
    "Fxn:check_two_tensor_operation('dot',";
    "Fxn:check_two_tensor_operation('dot',";
    "Fxn:check_two_tensor_operation('batch_dot',";
    "Fxn:axes=(2,";
    "Fxn:check_two_tensor_operation('batch_dot',";
    "Fxn:axes=(2,";
    "Fxn:check_two_tensor_operation('batch_dot',";
    "Fxn:axes=(1,";
    "Fxn:check_two_tensor_operation('batch_dot',";
    "Fxn:check_two_tensor_operation('batch_dot',";
    "Fxn:axes=(1,";
    "Fxn:check_single_tensor_operation('transpose',";
    "Fxn:check_single_tensor_operation('reverse',";
    "Fxn:check_single_tensor_operation('reverse',";
    "Fxn:axes=(1,";
    "Fxn:test_random_variables";
    "Fxn:check_single_tensor_operation('random_uniform_variable',";
    "Fxn:check_single_tensor_operation('random_normal_variable',";
    "Fxn:@pytest.mark.skipif(K.backend()";
    "Fxn:test_batch_dot_shape";
    "Fxn:K.ones(shape=(32,";
    "Fxn:K.ones(shape=(32,";
    "Fxn:K.batch_dot(x_batch,";
    "Fxn:assert_allclose(K.eval(xy_batch_dot),";
    "Fxn:np.ones((32,";
    "Fxn:K.batch_dot(x_batch,";
    "Fxn:assert_allclose(K.eval(xy_batch_dot),";
    "Fxn:np.ones((20,";
    "Fxn:K.ones(shape=(32,";
    "Fxn:K.ones(shape=(20,";
    "Fxn:K.batch_dot(x_batch,";
    "Fxn:axes=(0,";
    "Fxn:assert_allclose(K.eval(xy_batch_dot),";
    "Fxn:np.ones((20,";
    "Fxn:K.batch_dot(x_batch,";
    "Fxn:axes=(1,";
    "Fxn:assert_allclose(K.eval(xy_batch_dot),";
    "Fxn:np.ones((32,";
    "Fxn:test_shape_operations";
    "Fxn:check_two_tensor_operation('concatenate',";
    "Fxn:check_single_tensor_operation('reshape',";
    "Fxn:shape=(8,";
    "Fxn:check_single_tensor_operation('permute_dimensions',";
    "Fxn:pattern=(2,";
    "Fxn:check_single_tensor_operation('repeat',";
    "Fxn:check_single_tensor_operation('flatten',";
    "Fxn:check_single_tensor_operation('batch_flatten',";
    "Fxn:check_single_tensor_operation('expand_dims',";
    "Fxn:check_single_tensor_operation('expand_dims',";
    "Fxn:check_single_tensor_operation('squeeze',";
    "Fxn:check_single_tensor_operation('squeeze',";
    "Fxn:check_composed_tensor_operations('reshape',";
    "Fxn:test_none_shape_operations";
    "Fxn:K.backend()";
    "Fxn:KTH.placeholder((3,";
    "Fxn:KTH.batch_flatten(x)";
    "Fxn:hasattr(y,";
    "Fxn:KTH.flatten(x)";
    "Fxn:hasattr(y,";
    "Fxn:test_repeat_elements";
    "Fxn:np.arange(2,";
    "Fxn:np.arange(np.prod(shape)).reshape(shape)";
    "Fxn:range(ndims):";
    "Fxn:np.repeat(arr,";
    "Fxn:check_single_tensor_operation('repeat_elements',";
    "Fxn:K.backend()";
    "Fxn:list(shape)";
    "Fxn:K.placeholder(shape=shape)";
    "Fxn:K.repeat_elements(x,";
    "Fxn:tuple(shape)";
    "Fxn:K.int_shape(y)";
    "Fxn:test_tile";
    "Fxn:np.arange(np.prod(shape)).reshape(shape)";
    "Fxn:check_single_tensor_operation('tile',";
    "Fxn:check_single_tensor_operation('tile',";
    "Fxn:K.backend()";
    "Fxn:K.placeholder(shape=(None,";
    "Fxn:K.tile(x,";
    "Fxn:K.tile(x,";
    "Fxn:test_gather";
    "Fxn:np.arange(np.prod(shape)).reshape(shape)";
    "Fxn:[k.eval(k.gather(k.variable(ref),";
    "Fxn:k.variable(inds,";
    "Fxn:assert_list_pairwise(z_list)";
    "Fxn:assert_list_keras_shape(z_list)";
    "Fxn:K.backend()";
    "Fxn:K.placeholder(shape=(None,";
    "Fxn:K.placeholder(shape=(5,";
    "Fxn:K.gather(x,";
    "Fxn:test_value_manipulation";
    "Fxn:np.random.random((4,";
    "Fxn:[getattr(k,";
    "Fxn:function_name)(k.variable(val))";
    "Fxn:assert_list_pairwise(v_list)";
    "Fxn:assert_list_pairwise(v_list,";
    "Fxn:check_single_tensor_operation('print_tensor',";
    "Fxn:check_single_tensor_operation('print_tensor',";
    "Fxn:check_single_tensor_operation('print_tensor',";
    "Fxn:check_single_tensor_operation('print_tensor',";
    "Fxn:test_elementwise_operations";
    "Fxn:check_single_tensor_operation('max',";
    "Fxn:check_single_tensor_operation('max',";
    "Fxn:check_single_tensor_operation('min',";
    "Fxn:check_single_tensor_operation('min',";
    "Fxn:check_single_tensor_operation('min',";
    "Fxn:check_single_tensor_operation('mean',";
    "Fxn:check_single_tensor_operation('mean',";
    "Fxn:check_single_tensor_operation('mean',";
    "Fxn:check_single_tensor_operation('mean',";
    "Fxn:check_single_tensor_operation('std',";
    "Fxn:check_single_tensor_operation('std',";
    "Fxn:check_single_tensor_operation('std',";
    "Fxn:check_single_tensor_operation('prod',";
    "Fxn:check_single_tensor_operation('prod',";
    "Fxn:check_single_tensor_operation('prod',";
    "Fxn:check_single_tensor_operation('cumsum',";
    "Fxn:check_single_tensor_operation('cumsum',";
    "Fxn:check_single_tensor_operation('cumprod',";
    "Fxn:check_single_tensor_operation('cumprod',";
    "Fxn:check_single_tensor_operation('any',";
    "Fxn:check_single_tensor_operation('any',";
    "Fxn:check_single_tensor_operation('all',";
    "Fxn:check_single_tensor_operation('all',";
    "Fxn:check_single_tensor_operation('argmax',";
    "Fxn:check_single_tensor_operation('argmax',";
    "Fxn:check_single_tensor_operation('argmin',";
    "Fxn:check_single_tensor_operation('argmin',";
    "Fxn:check_single_tensor_operation('square',";
    "Fxn:check_single_tensor_operation('abs',";
    "Fxn:check_single_tensor_operation('sqrt',";
    "Fxn:check_single_tensor_operation('exp',";
    "Fxn:check_single_tensor_operation('log',";
    "Fxn:check_single_tensor_operation('round',";
    "Fxn:check_single_tensor_operation('sign',";
    "Fxn:check_single_tensor_operation('pow',";
    "Fxn:check_single_tensor_operation('clip',";
    "Fxn:check_two_tensor_operation('equal',";
    "Fxn:check_two_tensor_operation('not_equal',";
    "Fxn:check_two_tensor_operation('greater',";
    "Fxn:check_two_tensor_operation('greater_equal',";
    "Fxn:check_two_tensor_operation('less',";
    "Fxn:check_two_tensor_operation('less_equal',";
    "Fxn:check_two_tensor_operation('maximum',";
    "Fxn:check_two_tensor_operation('minimum',";
    "Fxn:test_gradient";
    "Fxn:np.random.random((4,";
    "Fxn:[k.variable(val)";
    "Fxn:zip(x_list,";
    "Fxn:k.exp(x)";
    "Fxn:k.sum(exp)";
    "Fxn:k.stop_gradient(loss)";
    "Fxn:k.gradients(loss,";
    "Fxn:k.gradients(loss";
    "Fxn:z_list.append(k.eval(grad[0]))";
    "Fxn:zero_list.append(k.eval(zero_grad[0]))";
    "Fxn:assert_list_pairwise(z_list)";
    "Fxn:assert_list_pairwise(zero_list)";
    "Fxn:range(len(z_list)):";
    "Fxn:assert_allclose(zero_list[i],";
    "Fxn:test_stop_gradient";
    "Fxn:np.random.random((4,";
    "Fxn:k.variable(val)";
    "Fxn:k.square(a)";
    "Fxn:k.stop_gradient([a,";
    "Fxn:k.stop_gradient(b)";
    "Fxn:test_function";
    "Fxn:np.random.random((4,";
    "Fxn:np.random.random((4,";
    "Fxn:k.variable(val)";
    "Fxn:x_list.append(x)";
    "Fxn:k.placeholder(ndim=2)";
    "Fxn:k.square(x)";
    "Fxn:k.function([y],";
    "Fxn:updates=[(x,";
    "Fxn:f_list.append(f)";
    "Fxn:[f([input_val])[0]";
    "Fxn:assert_list_pairwise(function_outputs_list)";
    "Fxn:[k.get_value(x)";
    "Fxn:zip(x_list,";
    "Fxn:assert_list_pairwise(new_val_list)";
    "Fxn:test_function_tf_fetches";
    "Fxn:tf.Session().run()";
    "Fxn:KTF.function()";
    "Fxn:KTF.function().";
    "Fxn:KTF.variable(0.)";
    "Fxn:KTF.variable(0.)";
    "Fxn:KTF.placeholder(shape=())";
    "Fxn:KTF.placeholder(shape=())";
    "Fxn:KTF.function(inputs=[x_placeholder,";
    "Fxn:updates=[(x,";
    "Fxn:fetches=[KTF.update(y,";
    "Fxn:f([10.,";
    "Fxn:KTF.get_session().run(fetches=[x,";
    "Fxn:test_function_tf_feed_dict";
    "Fxn:`tf.Session().run()`";
    "Fxn:KTF.variable(0.)";
    "Fxn:KTF.variable(0.)";
    "Fxn:KTF.placeholder(shape=())";
    "Fxn:KTF.placeholder(shape=())";
    "Fxn:KTF.function(inputs=[x_placeholder],";
    "Fxn:updates=[(x,";
    "Fxn:fetches=[KTF.update(y,";
    "Fxn:f([10.])";
    "Fxn:KTF.get_session().run(fetches=[x,";
    "Fxn:K.function()";
    "Fxn:f([20.])";
    "Fxn:KTF.get_session().run(fetches=[x,";
    "Fxn:test_rnn";
    "Fxn:parse_shape_or_val((num_samples,";
    "Fxn:parse_shape_or_val((num_samples,";
    "Fxn:parse_shape_or_val((input_dim,";
    "Fxn:parse_shape_or_val((output_dim,";
    "Fxn:np.random.randint(2,";
    "Fxn:size=(num_samples,";
    "Fxn:K.variable(x)";
    "Fxn:[K.variable(h0)]";
    "Fxn:K.variable(wi)";
    "Fxn:K.variable(wh)";
    "Fxn:K.variable(mask)";
    "Fxn:rnn_fn";
    "Fxn:len(h_k)";
    "Fxn:K.dot(x_k,";
    "Fxn:K.dot(h_k[0],";
    "Fxn:enumerate(kwargs_list):";
    "Fxn:ref_rnn(x,";
    "Fxn:K.rnn(rnn_fn,";
    "Fxn:len(h2)";
    "Fxn:K.eval(last_y2)";
    "Fxn:K.eval(y2)";
    "Fxn:K.eval(h2[0])";
    "Fxn:np.expand_dims(mask[:,";
    "Fxn:np.expand_dims(mask[:,";
    "Fxn:np.expand_dims(mask,";
    "Fxn:np.expand_dims(mask,";
    "Fxn:np.expand_dims(mask[:,";
    "Fxn:np.expand_dims(mask[:,";
    "Fxn:last_output_list.append(last_y2)";
    "Fxn:outputs_list.append(y2)";
    "Fxn:state_list.append(h2)";
    "Fxn:assert_allclose(last_y1,";
    "Fxn:assert_allclose(y1,";
    "Fxn:assert_allclose(h1,";
    "Fxn:assert_allclose(last_output_list[i";
    "Fxn:assert_allclose(outputs_list[i";
    "Fxn:assert_allclose(state_list[i";
    "Fxn:test_rnn_no_states";
    "Fxn:parse_shape_or_val((32,";
    "Fxn:parse_shape_or_val((input_dim,";
    "Fxn:K.variable(x)";
    "Fxn:K.variable(wi)";
    "Fxn:rnn_fn";
    "Fxn:len(h_k)";
    "Fxn:K.dot(x_k,";
    "Fxn:ref_rnn(x,";
    "Fxn:K.rnn(rnn_fn,";
    "Fxn:len(h2)";
    "Fxn:K.eval(last_y2)";
    "Fxn:K.eval(y2)";
    "Fxn:assert_allclose(last_y1,";
    "Fxn:assert_allclose(y1,";
    "Fxn:legacy_test_rnn";
    "Fxn:np.random.random((num_samples,";
    "Fxn:input_dim)).astype(np.float32)";
    "Fxn:np.random.random((num_samples,";
    "Fxn:output_dim)).astype(np.float32)";
    "Fxn:np.random.random((input_dim,";
    "Fxn:output_dim)).astype(np.float32)";
    "Fxn:np.random.random((output_dim,";
    "Fxn:output_dim)).astype(np.float32)";
    "Fxn:np.random.randint(2,";
    "Fxn:size=(num_samples,";
    "Fxn:rnn_step_fn";
    "Fxn:k.variable(W_i_val)";
    "Fxn:k.variable(W_o_val)";
    "Fxn:step_function";
    "Fxn:len(states)";
    "Fxn:k.dot(x,";
    "Fxn:k.dot(prev_output,";
    "Fxn:rnn_step_fn(k)";
    "Fxn:k.variable(input_val)";
    "Fxn:[k.variable(init_state_val)]";
    "Fxn:k.variable(np_mask)";
    "Fxn:enumerate(kwargs_list):";
    "Fxn:k.rnn(rnn_fn,";
    "Fxn:last_output_list[i].append(k.eval(last_output))";
    "Fxn:outputs_list[i].append(k.eval(outputs))";
    "Fxn:len(new_states)";
    "Fxn:state_list[i].append(k.eval(new_states[0]))";
    "Fxn:assert_list_pairwise(last_output_list[0],";
    "Fxn:assert_list_pairwise(outputs_list[0],";
    "Fxn:assert_list_pairwise(state_list[0],";
    "Fxn:assert_list_pairwise(last_output_list[2],";
    "Fxn:assert_list_pairwise(outputs_list[2],";
    "Fxn:assert_list_pairwise(state_list[2],";
    "Fxn:zip(last_output_list[0],";
    "Fxn:assert_allclose(l,";
    "Fxn:zip(outputs_list[0],";
    "Fxn:assert_allclose(o,";
    "Fxn:zip(state_list[0],";
    "Fxn:assert_allclose(s,";
    "Fxn:zip(last_output_list[2],";
    "Fxn:assert_allclose(b_l,";
    "Fxn:zip(outputs_list[2],";
    "Fxn:assert_allclose(b_o,";
    "Fxn:zip(state_list[2],";
    "Fxn:assert_allclose(b_s,";
    "Fxn:zip(last_output_list[4],";
    "Fxn:np.expand_dims(np_mask[:,";
    "Fxn:np.expand_dims(np_mask[:,";
    "Fxn:assert_allclose(m_l,";
    "Fxn:zip(outputs_list[4],";
    "Fxn:np.expand_dims(np_mask,";
    "Fxn:np.expand_dims(np_mask,";
    "Fxn:assert_allclose(m_o,";
    "Fxn:zip(state_list[4],";
    "Fxn:assert_allclose(m_s,";
    "Fxn:legacy_test_rnn_no_states";
    "Fxn:np.random.random((32,";
    "Fxn:np.random.random((input_dim,";
    "Fxn:rnn_step_fn";
    "Fxn:k.variable(W_i_val)";
    "Fxn:step_function";
    "Fxn:len(states)";
    "Fxn:k.dot(x,";
    "Fxn:rnn_step_fn(k)";
    "Fxn:k.variable(input_val)";
    "Fxn:k.rnn(rnn_fn,";
    "Fxn:last_output_list.append(k.eval(last_output))";
    "Fxn:outputs_list.append(k.eval(outputs))";
    "Fxn:len(new_states)";
    "Fxn:assert_list_pairwise(last_output_list,";
    "Fxn:assert_list_pairwise(outputs_list,";
    "Fxn:@pytest.mark.parametrize('x_np,axis,keepdims',";
    "Fxn:test_logsumexp";
    "Fxn:k.variable(x_np)";
    "Fxn:assert_allclose(k.eval(k.logsumexp(x,";
    "Fxn:np.log(np.sum(np.exp(x_np),";
    "Fxn:test_logsumexp_optim";
    "Fxn:np.array([1e+4,";
    "Fxn:assert_allclose(k.eval(k.logsumexp(k.variable(x_np),";
    "Fxn:test_switch";
    "Fxn:np.random.random()";
    "Fxn:k.variable(val)";
    "Fxn:k.switch(k.greater_equal(x,";
    "Fxn:z_list.append(k.eval(x))";
    "Fxn:assert_list_pairwise(z_list)";
    "Fxn:shapes.append([(4,";
    "Fxn:shapes.append([(4,";
    "Fxn:shapes.append([(4,),";
    "Fxn:list(map(np.random.random,";
    "Fxn:map(k.variable,";
    "Fxn:k.greater_equal(x,";
    "Fxn:z_list.append(k.eval(k.switch(cond,";
    "Fxn:assert_list_pairwise(z_list)";
    "Fxn:test_dropout";
    "Fxn:np.random.random((100,";
    "Fxn:[k.eval(k.dropout(k.variable(val),";
    "Fxn:assert_list_pairwise(z_list,";
    "Fxn:range(len(z_list)";
    "Fxn:np.abs(z_list[i].mean()";
    "Fxn:1].mean())";
    "Fxn:[k.eval(k.dropout(k.variable(val),";
    "Fxn:noise_shape=list(val.shape)))";
    "Fxn:assert_list_pairwise(z_list,";
    "Fxn:range(len(z_list)";
    "Fxn:np.abs(z_list[i].mean()";
    "Fxn:1].mean())";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:k.dropout(k.variable(val),";
    "Fxn:test_nn_operations";
    "Fxn:check_single_tensor_operation('relu',";
    "Fxn:check_single_tensor_operation('softplus',";
    "Fxn:check_single_tensor_operation('elu',";
    "Fxn:check_single_tensor_operation('sigmoid',";
    "Fxn:check_single_tensor_operation('hard_sigmoid',";
    "Fxn:check_single_tensor_operation('tanh',";
    "Fxn:check_single_tensor_operation('softmax',";
    "Fxn:check_single_tensor_operation('softmax',";
    "Fxn:check_two_tensor_operation('binary_crossentropy',";
    "Fxn:check_two_tensor_operation('categorical_crossentropy',";
    "Fxn:np.asarray([[0.26157712,";
    "Fxn:np.asarray([[0.46221867,";
    "Fxn:check_two_tensor_operation('categorical_crossentropy',";
    "Fxn:check_two_tensor_operation('binary_crossentropy',";
    "Fxn:check_two_tensor_operation('categorical_crossentropy',";
    "Fxn:check_single_tensor_operation('l2_normalize',";
    "Fxn:check_single_tensor_operation('l2_normalize',";
    "Fxn:test_in_top_k";
    "Fxn:np.random.random((batch_size,";
    "Fxn:num_classes)).astype('float32')";
    "Fxn:np.random.randint(num_classes,";
    "Fxn:range(num_classes";
    "Fxn:[b.eval(b.in_top_k(b.variable(predictions,";
    "Fxn:b.variable(targets,";
    "Fxn:assert_list_pairwise(z_list)";
    "Fxn:range(batch_size):";
    "Fxn:np.random.choice(num_classes,";
    "Fxn:np.zeros(batch_size,";
    "Fxn:range(1,";
    "Fxn:[b.eval(b.in_top_k(b.variable(predictions,";
    "Fxn:b.variable(targets,";
    "Fxn:assert_list_pairwise(z_list)";
    "Fxn:@pytest.mark.parametrize('op,input_shape,kernel_shape,padding,data_format',";
    "Fxn:test_conv";
    "Fxn:K.backend()";
    "Fxn:parse_shape_or_val(input_shape)";
    "Fxn:parse_shape_or_val(kernel_shape)";
    "Fxn:ref_conv(x,";
    "Fxn:check_two_tensor_operation(";
    "Fxn:assert_allclose(y1,";
    "Fxn:@pytest.mark.parametrize('op,input_shape,kernel_shape,padding,data_format',";
    "Fxn:test_depthwise_conv";
    "Fxn:K.backend()";
    "Fxn:parse_shape_or_val(input_shape)";
    "Fxn:parse_shape_or_val(kernel_shape)";
    "Fxn:ref_depthwise_conv(x,";
    "Fxn:check_two_tensor_operation(";
    "Fxn:assert_allclose(y1,";
    "Fxn:@pytest.mark.parametrize('op,input_shape,pool_size,strides,padding,data_format,pool_mode',";
    "Fxn:test_pool";
    "Fxn:K.backend()";
    "Fxn:parse_shape_or_val(input_shape)";
    "Fxn:ref_pool(x,";
    "Fxn:check_single_tensor_operation(";
    "Fxn:assert_allclose(y1,";
    "Fxn:legacy_test_conv1d";
    "Fxn:check_two_tensor_operation('conv1d',";
    "Fxn:legacy_test_conv2d";
    "Fxn:check_two_tensor_operation('conv2d',";
    "Fxn:legacy_test_depthwise_conv_2d";
    "Fxn:check_two_tensor_operation('depthwise_conv2d',";
    "Fxn:legacy_test_conv3d";
    "Fxn:check_two_tensor_operation('conv3d',";
    "Fxn:@pytest.mark.skipif(K.backend()";
    "Fxn:@pytest.mark.parametrize('op,input_shape,kernel_shape,depth_multiplier,padding,data_format',";
    "Fxn:test_separable_conv2d";
    "Fxn:parse_shape_or_val(input_shape)";
    "Fxn:parse_shape_or_val(kernel_shape";
    "Fxn:parse_shape_or_val((1,";
    "Fxn:ref_separable_conv(x,";
    "Fxn:K.backend()";
    "Fxn:cntk_func_three_tensor(";
    "Fxn:data_format=data_format)([x])[0]";
    "Fxn:K.eval(getattr(K,";
    "Fxn:op)(";
    "Fxn:K.variable(x),";
    "Fxn:K.variable(depthwise),";
    "Fxn:K.variable(pointwise),";
    "Fxn:assert_allclose(y1,";
    "Fxn:legacy_test_pool2d";
    "Fxn:check_single_tensor_operation('pool2d',";
    "Fxn:pool_size=(2,";
    "Fxn:strides=(1,";
    "Fxn:check_single_tensor_operation('pool2d',";
    "Fxn:pool_size=(2,";
    "Fxn:strides=(1,";
    "Fxn:check_single_tensor_operation('pool2d',";
    "Fxn:pool_size=(2,";
    "Fxn:strides=(1,";
    "Fxn:check_single_tensor_operation('pool2d',";
    "Fxn:pool_size=(2,";
    "Fxn:strides=(1,";
    "Fxn:check_single_tensor_operation('pool2d',";
    "Fxn:pool_size=(3,";
    "Fxn:strides=(1,";
    "Fxn:legacy_test_pool3d";
    "Fxn:check_single_tensor_operation('pool3d',";
    "Fxn:pool_size=(2,";
    "Fxn:strides=(1,";
    "Fxn:check_single_tensor_operation('pool3d',";
    "Fxn:pool_size=(2,";
    "Fxn:strides=(1,";
    "Fxn:check_single_tensor_operation('pool3d',";
    "Fxn:pool_size=(2,";
    "Fxn:strides=(1,";
    "Fxn:check_single_tensor_operation('pool3d',";
    "Fxn:pool_size=(2,";
    "Fxn:strides=(1,";
    "Fxn:check_single_tensor_operation('pool3d',";
    "Fxn:pool_size=(3,";
    "Fxn:strides=(1,";
    "Fxn:test_random_normal";
    "Fxn:k.eval(k.random_normal((300,";
    "Fxn:np.abs(np.mean(rand)";
    "Fxn:np.abs(np.std(rand)";
    "Fxn:test_random_uniform";
    "Fxn:k.eval(k.random_uniform((200,";
    "Fxn:np.abs(np.mean(rand))";
    "Fxn:np.max(rand)";
    "Fxn:np.min(rand)";
    "Fxn:test_random_binomial";
    "Fxn:k.eval(k.random_binomial((200,";
    "Fxn:np.abs(np.mean(rand)";
    "Fxn:np.max(rand)";
    "Fxn:np.min(rand)";
    "Fxn:test_conv_invalid_use";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:k.conv1d(k.variable(np.ones((4,";
    "Fxn:k.variable(np.ones((3,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:k.conv2d(k.variable(np.ones((2,";
    "Fxn:k.variable(np.ones((2,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:k.conv3d(k.variable(np.ones((2,";
    "Fxn:k.variable(np.ones((2,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:k.separable_conv2d(k.variable(np.ones((2,";
    "Fxn:k.variable(np.ones((2,";
    "Fxn:k.variable(np.ones((1,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:k.depthwise_conv2d(k.variable(np.ones((2,";
    "Fxn:k.variable(np.ones((2,";
    "Fxn:test_pooling_invalid_use";
    "Fxn:zip([(5,";
    "Fxn:[(2,";
    "Fxn:k.variable(np.random.random(input_shape))";
    "Fxn:len(pool_size)";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:k.pool2d(x,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:k.pool2d(x,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:k.pool2d(x,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:k.pool3d(x,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:k.pool3d(x,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:k.pool3d(x,";
    "Fxn:test_resize_images";
    "Fxn:check_single_tensor_operation('resize_images',";
    "Fxn:np.random.random(x_shape)";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:k.resize_images(k.variable(xval),";
    "Fxn:test_resize_volumes";
    "Fxn:check_single_tensor_operation('resize_volumes',";
    "Fxn:np.random.random(x_shape)";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:k.resize_volumes(k.variable(xval),";
    "Fxn:test_temporal_padding";
    "Fxn:check_single_tensor_operation('temporal_padding',";
    "Fxn:check_single_tensor_operation('temporal_padding',";
    "Fxn:padding=(1,";
    "Fxn:test_spatial_2d_padding";
    "Fxn:check_single_tensor_operation('spatial_2d_padding',";
    "Fxn:np.random.random(x_shape)";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:k.spatial_2d_padding(k.variable(xval),";
    "Fxn:test_spatial_3d_padding";
    "Fxn:check_single_tensor_operation('spatial_3d_padding',";
    "Fxn:np.random.random(x_shape)";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:k.spatial_3d_padding(k.variable(xval),";
    "Fxn:test_bias_add";
    "Fxn:[(),";
    "Fxn:check_two_tensor_operation('bias_add',";
    "Fxn:check_two_tensor_operation('bias_add',";
    "Fxn:k.variable(np.random.random(x_shape))";
    "Fxn:k.variable(np.random.random(bias_shape))";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:k.bias_add(x,";
    "Fxn:test_batchnorm";
    "Fxn:np.random.random(x_shape).astype(np.float32)";
    "Fxn:KTH.variable(x_val)";
    "Fxn:KTF.variable(x_val)";
    "Fxn:KC.placeholder(x_shape)";
    "Fxn:KTH.normalize_batch_in_training(xth,";
    "Fxn:KTF.normalize_batch_in_training(xtf,";
    "Fxn:KC.normalize_batch_in_training(xc,";
    "Fxn:KTH.eval(zth)";
    "Fxn:KTF.eval(ztf)";
    "Fxn:KC.function([xc],";
    "Fxn:[zc])([x_val])[0]";
    "Fxn:@pytest.mark.skipif(K.backend()";
    "Fxn:test_ctc";
    "Fxn:K.backend()";
    "Fxn:np.expand_dims(np.asarray([5,";
    "Fxn:np.expand_dims(np.asarray([5,";
    "Fxn:np.asarray([[0,";
    "Fxn:np.asarray(";
    "Fxn:K.variable(labels,";
    "Fxn:K.variable(inputs,";
    "Fxn:K.variable(input_lens,";
    "Fxn:K.variable(label_lens,";
    "Fxn:K.eval(K.ctc_batch_cost(k_labels,";
    "Fxn:assert_allclose(res[0,";
    "Fxn:K.backend()";
    "Fxn:test_ctc_decode_greedy";
    "Fxn:np.asarray(";
    "Fxn:np.log(input_prob_matrix_0)";
    "Fxn:np.asarray(";
    "Fxn:[np.vstack([input_prob_matrix_0[t,";
    "Fxn:range(max_time_steps)]";
    "Fxn:KTF.variable(np.asarray(inputs).transpose((1,";
    "Fxn:KTF.variable(np.array([seq_len_0,";
    "Fxn:np.array([";
    "Fxn:np.sum(-np.log([1.0,";
    "Fxn:np.sum(-np.log([0.9,";
    "Fxn:np.array([[0,";
    "Fxn:KTF.ctc_decode(inputs,";
    "Fxn:len(decode_pred_tf)";
    "Fxn:KTF.eval(decode_pred_tf[0])";
    "Fxn:KTF.eval(log_prob_pred_tf)";
    "Fxn:np.alltrue(decode_truth";
    "Fxn:np.allclose(log_prob_truth,";
    "Fxn:test_ctc_decode_beam_search";
    "Fxn:np.asarray(";
    "Fxn:range(seq_len_0)]";
    "Fxn:[np.zeros((1,";
    "Fxn:KTF.variable(np.asarray(inputs).transpose((1,";
    "Fxn:KTF.variable(np.array([seq_len_0],";
    "Fxn:np.array([";
    "Fxn:[np.array([1,";
    "Fxn:np.array([0,";
    "Fxn:KTF.ctc_decode(inputs,";
    "Fxn:len(decode_pred_tf)";
    "Fxn:KTF.eval(log_prob_pred_tf)";
    "Fxn:range(top_paths):";
    "Fxn:np.alltrue(decode_truth[i]";
    "Fxn:KTF.eval(decode_pred_tf[i]))";
    "Fxn:np.allclose(log_prob_truth,";
    "Fxn:test_one_hot";
    "Fxn:np.random.randint(0,";
    "Fxn:size=(batch_size,";
    "Fxn:np.eye(num_classes)[indices]";
    "Fxn:k.eval(k.one_hot(k.variable(indices,";
    "Fxn:np.all(koh";
    "Fxn:test_sparse_dot";
    "Fxn:np.array([0,";
    "Fxn:np.array([0,";
    "Fxn:np.array([4,";
    "Fxn:sparse.csr_matrix((x_d,";
    "Fxn:shape=(4,";
    "Fxn:x_sparse.toarray()";
    "Fxn:np.random.random((5,";
    "Fxn:backends.append(KTH)";
    "Fxn:k.variable(W)";
    "Fxn:k.eval(k.dot(k.variable(x_sparse),";
    "Fxn:k.eval(k.dot(k.variable(x_dense),";
    "Fxn:assert_allclose(k_s,";
    "Fxn:test_sparse_concat";
    "Fxn:np.array([0,";
    "Fxn:np.array([0,";
    "Fxn:np.array([4,";
    "Fxn:sparse.csr_matrix((x_d,";
    "Fxn:shape=(4,";
    "Fxn:np.array([0,";
    "Fxn:np.array([0,";
    "Fxn:np.array([4,";
    "Fxn:sparse.csr_matrix((x_d,";
    "Fxn:shape=(4,";
    "Fxn:x_sparse_1.toarray()";
    "Fxn:x_sparse_2.toarray()";
    "Fxn:backends.append(KTH)";
    "Fxn:k.concatenate([k.variable(x_sparse_1),";
    "Fxn:k.variable(x_sparse_2)])";
    "Fxn:k.is_sparse(k_s)";
    "Fxn:k.eval(k_s)";
    "Fxn:k.eval(k.concatenate([k.variable(x_dense_1),";
    "Fxn:k.variable(x_dense_2)]))";
    "Fxn:assert_allclose(k_s_d,";
    "Fxn:@pytest.mark.skipif(K.backend()";
    "Fxn:test_map";
    "Fxn:np.random.rand(10,";
    "Fxn:3).astype(np.float32)";
    "Fxn:K.variable(x)";
    "Fxn:K.eval(K.map_fn(K.sum,";
    "Fxn:K.eval(K.map_fn(";
    "Fxn:K.sum(vx[i]),";
    "Fxn:K.arange(10),";
    "Fxn:dtype=K.floatx()";
    "Fxn:assert_allclose(x.sum(axis=1),";
    "Fxn:assert_allclose(kx,";
    "Fxn:@pytest.mark.skipif(K.backend()";
    "Fxn:test_foldl";
    "Fxn:np.random.rand(10,";
    "Fxn:3).astype(np.float32)";
    "Fxn:K.eval(K.foldl(lambda";
    "Fxn:K.variable(x)))";
    "Fxn:assert_allclose(x.sum(axis=0),";
    "Fxn:@pytest.mark.skipif(K.backend()";
    "Fxn:test_foldr";
    "Fxn:np.array([1e-20,";
    "Fxn:K.variable(x)";
    "Fxn:K.eval(K.foldl(lambda";
    "Fxn:K.eval(K.foldr(lambda";
    "Fxn:test_arange";
    "Fxn:k.arange(test_value)";
    "Fxn:k.eval(t)";
    "Fxn:np.array_equal(a,";
    "Fxn:np.arange(test_value))";
    "Fxn:dtype_list.append(k.dtype(t))";
    "Fxn:a_list.append(a)";
    "Fxn:range(len(a_list)";
    "Fxn:np.array_equal(a_list[i],";
    "Fxn:k.eval(k.arange(start,";
    "Fxn:np.array_equal(a,";
    "Fxn:np.arange(start,";
    "Fxn:a_list.append(a)";
    "Fxn:range(len(a_list)";
    "Fxn:np.array_equal(a_list[i],";
    "Fxn:k.arange(10,";
    "Fxn:k.dtype(t)";
    "Fxn:k.constant(1,";
    "Fxn:k.arange(start)";
    "Fxn:len(k.eval(t))";
    "Fxn:k.constant(-1,";
    "Fxn:k.arange(start)";
    "Fxn:len(k.eval(t))";
    "Fxn:test_in_train_phase";
    "Fxn:check_two_tensor_operation('in_train_phase',";
    "Fxn:test_setfloatx_incorrect_values";
    "Fxn:floatx()";
    "Fxn:floatx()";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:set_floatx(value)";
    "Fxn:floatx()";
    "Fxn:set_floatx(old_floatx)";
    "Fxn:test_setfloatx_correct_values";
    "Fxn:floatx()";
    "Fxn:set_floatx(value)";
    "Fxn:floatx()";
    "Fxn:set_floatx(old_floatx)";
    "Fxn:@pytest.mark.skipif((K.backend()";
    "Fxn:test_set_floatx";
    "Fxn:floatx()";
    "Fxn:set_floatx('float16')";
    "Fxn:variable([10])";
    "Fxn:check_dtype(var,";
    "Fxn:set_floatx('float64')";
    "Fxn:variable([10])";
    "Fxn:check_dtype(var,";
    "Fxn:set_floatx(old_floatx)";
    "Fxn:test_variable_support_bool_dtype";
    "Fxn:K.backend()";
    "Fxn:K.dtype(K.variable(1,";
    "Fxn:K.dtype(K.variable(False,";
    "Fxn:pytest.raises(TypeError):";
    "Fxn:K.variable('',";
    "Fxn:pytest.main([__file__])";
    "/tests/keras/engine/test_topology.py";
    "Import:pytest";
    "Import:json";
    "Import:numpy";
    "Import:assert_allclose";
    "Import:Dense,";
    "Import:layers";
    "Import:Input,";
    "Import:Model,";
    "Import:backend";
    "Import:model_from_json,";
    "Import:keras_test";
    "Fxn:test_get_updates_for";
    "Fxn:test_get_losses_for";
    "Fxn:test_trainable_weights";
    "Fxn:test_valid_compute_mask";
    "Fxn:test_invalid_compute_mask";
    "Fxn:test_get_layer";
    "Fxn:test_learning_phase";
    "Fxn:test_layer_call_arguments";
    "Fxn:test_node_construction";
    "Fxn:test_multi_input_layer";
    "Fxn:test_recursion";
    "Import:tensorflow";
    "Fxn:test_load_layers";
    "Import:ConvLSTM2D,";
    "Import:Model";
    "Fxn:convert_weights";
    "Fxn:test_preprocess_weights_for_loading";
    "Fxn:test_preprocess_weights_for_loading_for_model";
    "Fxn:test_preprocess_weights_for_loading_rnn_should_be_idempotent";
    "Fxn:test_preprocess_weights_for_loading_cudnn_rnn_should_be_idempotent";
    "Fxn:test_recursion_with_bn_and_loss";
    "Fxn:test_activity_regularization_with_model_composition";
    "Fxn:reg";
    "Fxn:test_shared_layer_depth_is_correct";
    "Import:Embedding,";
    "Import:Model";
    "Fxn:test_layer_sharing_at_heterogeneous_depth";
    "Fxn:test_layer_sharing_at_heterogeneous_depth_with_concat";
    "Fxn:test_multi_output_mask";
    "class:ArbitraryMultiOutputLayer(Layer):";
    "Fxn:__init__";
    "Fxn:super(ArbitraryMultiOutputLayer,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:call";
    "Fxn:[K.abs(inputs),";
    "Fxn:K.abs(inputs)]";
    "Fxn:compute_output_shape";
    "Fxn:super(ArbitraryMultiOutputLayer,";
    "Fxn:self).compute_output_shape(input_shape)";
    "class:ArbitraryMultiInputLayer(Layer):";
    "Fxn:__init__";
    "Fxn:super(ArbitraryMultiInputLayer,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:call";
    "Fxn:Input(shape=(16,";
    "Fxn:ArbitraryMultiOutputLayer()(input_layer)";
    "Fxn:ArbitraryMultiInputLayer()([x,";
    "Fxn:Model(inputs=input_layer,";
    "Fxn:K.int_shape(z)[1:]";
    "Fxn:pytest.main([__file__])";
    "/tests/keras/engine/test_training.py";
    "Import:pytest";
    "Import:numpy";
    "Import:pandas";
    "Import:assert_allclose";
    "Import:sys";
    "Import:scipy.sparse";
    "Import:keras";
    "Import:losses";
    "Import:Dense,";
    "Import:Input";
    "Import:Model";
    "Import:_check_loss_and_target_compatibility";
    "Import:_weighted_masked_objective";
    "Import:_check_array_lengths";
    "Import:_slice_arrays";
    "Import:Sequential";
    "Import:backend";
    "Import:Sequence";
    "Import:keras_test";
    "Import:LambdaCallback";
    "class:RandomSequence(Sequence):";
    "Fxn:__init__";
    "Fxn:__len__";
    "Fxn:__getitem__";
    "Fxn:[np.random.random((self.batch_size,";
    "Fxn:np.random.random((self.batch_size,";
    "Fxn:np.random.random((self.batch_size,";
    "Fxn:np.random.random((self.batch_size,";
    "Fxn:on_epoch_end";
    "Fxn:test_check_array_lengths";
    "Fxn:_check_array_lengths(None,";
    "Fxn:np.random.random((4,";
    "Fxn:_check_array_lengths(a_np,";
    "Fxn:_check_array_lengths([a_np,";
    "Fxn:_check_array_lengths([None],";
    "Fxn:np.random.random((3,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:_check_array_lengths(a_np,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:_check_array_lengths(a_np,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:_check_array_lengths([a_np],";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:_check_array_lengths([a_np],";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:_check_array_lengths([a_np],";
    "Fxn:test_slice_arrays";
    "Fxn:np.random.random((10,";
    "Fxn:_slice_arrays(None)";
    "Fxn:_slice_arrays(input_a,";
    "Fxn:_slice_arrays(input_a,";
    "Fxn:_slice_arrays(input_a,";
    "Fxn:_slice_arrays(input_a,";
    "Fxn:_slice_arrays(input_a,";
    "Fxn:_slice_arrays(input_a,";
    "Fxn:_slice_arrays(input_a,";
    "Fxn:_slice_arrays(input_a,";
    "Fxn:_slice_arrays(input_a,";
    "Fxn:_slice_arrays(input_a,";
    "Fxn:_slice_arrays(input_a,";
    "Fxn:_slice_arrays(input_a,";
    "Fxn:test_weighted_masked_objective";
    "Fxn:Input(shape=(3,),";
    "Fxn:mask_dummy";
    "Fxn:K.placeholder(y_true.shape)";
    "Fxn:_weighted_masked_objective(losses.categorical_crossentropy)";
    "Fxn:weighted_function(a,";
    "Fxn:test_model_methods";
    "Fxn:Input(shape=(3,),";
    "Fxn:Input(shape=(3,),";
    "Fxn:Dense(4,";
    "Fxn:name='dense_1')(a)";
    "Fxn:Dropout(0.5,";
    "Fxn:dp(b)";
    "Fxn:Model([a,";
    "Fxn:np.random.random((10,";
    "Fxn:np.random.random((10,";
    "Fxn:np.random.random((10,";
    "Fxn:np.random.random((10,";
    "Fxn:pytest.raises(RuntimeError):";
    "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:model.compile(optimizer,";
    "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:model.train_on_batch({'input_a':";
    "Fxn:model.train_on_batch({'input_a':";
    "Fxn:model.fit([input_a_np,";
    "Fxn:model.fit({'input_a':";
    "Fxn:model.fit({'input_a':";
    "Fxn:model.fit([input_a_np,";
    "Fxn:model.fit({'input_a':";
    "Fxn:model.fit([input_a_np,";
    "Fxn:validation_data=([input_a_np,";
    "Fxn:model.fit({'input_a':";
    "Fxn:validation_data=({'input_a':";
    "Fxn:model.fit({'input_a':";
    "Fxn:validation_data=(";
    "Fxn:model.test_on_batch([input_a_np,";
    "Fxn:model.test_on_batch({'input_a':";
    "Fxn:model.test_on_batch({'input_a':";
    "Fxn:model.predict_on_batch([input_a_np,";
    "Fxn:model.predict_on_batch({'input_a':";
    "Fxn:np.random.random((10,";
    "Fxn:np.random.random((10,";
    "Fxn:np.random.random((10,";
    "Fxn:np.random.random((10,";
    "Fxn:model.evaluate([input_a_np,";
    "Fxn:model.predict([input_a_np,";
    "Fxn:np.random.random((10,";
    "Fxn:np.random.random((10,";
    "Fxn:np.random.random((10,";
    "Fxn:np.random.random((10,";
    "Fxn:np.random.random((10,))]";
    "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:model.test_on_batch([input_a_np,";
    "Fxn:model.compile(optimizer,";
    "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:len(out)";
    "Fxn:model.test_on_batch([input_a_np,";
    "Fxn:len(out)";
    "Fxn:model.compile(optimizer,";
    "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:len(out)";
    "Fxn:model.test_on_batch([input_a_np,";
    "Fxn:len(out)";
    "Fxn:model.compile(optimizer,";
    "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:len(out)";
    "Fxn:model.test_on_batch([input_a_np,";
    "Fxn:len(out)";
    "Fxn:on_epoch_begin";
    "Fxn:trained_epochs.append(epoch)";
    "Fxn:on_batch_begin";
    "Fxn:trained_batches.append(batch)";
    "Fxn:LambdaCallback(on_epoch_begin=on_epoch_begin,";
    "Fxn:model.fit([input_a_np,";
    "Fxn:gen_data";
    "Fxn:np.random.random((batch_sz,";
    "Fxn:[np.random.random((batch_sz,";
    "Fxn:np.random.random((batch_sz,";
    "Fxn:model.fit_generator(gen_data(4),";
    "Fxn:mse";
    "Fxn:K.mean(K.pow(y_true";
    "Fxn:model.compile(optimizer,";
    "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:len(out)";
    "Fxn:model.test_on_batch([input_a_np,";
    "Fxn:len(out)";
    "Fxn:np.random.random((10,";
    "Fxn:np.random.random((10,";
    "Fxn:np.random.random((10,";
    "Fxn:np.random.random((10,";
    "Fxn:model.fit([input_a_np,";
    "Fxn:model.evaluate([input_a_np,";
    "Fxn:model.predict([input_a_np,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:gen_data";
    "Fxn:np.asarray([]))";
    "Fxn:model.evaluate_generator(gen_data(),";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.predict([None])";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.predict([input_a_np,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.predict([None,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:pytest.raises(TypeError):";
    "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:sample_weight=tuple(sample_weight))";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.fit([input_a_np,";
    "Fxn:validation_data=([input_a_np,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.compile(optimizer,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.compile(optimizer,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.compile(optimizer,";
    "Fxn:pytest.raises(TypeError):";
    "Fxn:model.compile(optimizer,";
    "Fxn:loss_weights=(0.5,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.compile(optimizer,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.compile(optimizer,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.compile(optimizer,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.compile(optimizer,";
    "Fxn:model.compile(optimizer,";
    "Fxn:model.compile(optimizer,";
    "Fxn:model.compile(optimizer,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:np.random.random((10,";
    "Fxn:model.compile(optimizer,";
    "Fxn:model.compile(optimizer,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:model.compile(optimizer,";
    "Fxn:model.fit_generator(generator=RandomSequence(3),";
    "Fxn:validation_data=RandomSequence(4),";
    "Fxn:list(range(3))";
    "Fxn:model.fit_generator(generator=RandomSequence(3),";
    "Fxn:validation_data=RandomSequence(4),";
    "Fxn:list(range(12))";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:gen_data";
    "Fxn:np.asarray([]))";
    "Fxn:model.fit_generator(generator=gen_data(),";
    "Fxn:validation_data=gen_data(),";
    "Fxn:gen_data";
    "Fxn:np.random.random((1,";
    "Fxn:[np.random.random((1,";
    "Fxn:np.random.random((1,";
    "Fxn:model.fit_generator(generator=gen_data(0),";
    "Fxn:validation_data=gen_data(1),";
    "Fxn:model.fit_generator(generator=RandomSequence(3),";
    "Fxn:validation_data=gen_data(0),";
    "Fxn:expected_shape";
    "Fxn:expected_shape(batch_size,";
    "Fxn:model.predict_generator(RandomSequence(batch_size,";
    "Fxn:np.shape(out[0])";
    "Fxn:np.shape(out[1])";
    "Fxn:expected_shape(batch_size,";
    "Fxn:model.predict_generator(RandomSequence(batch_size,";
    "Fxn:np.shape(out[0])";
    "Fxn:np.shape(out[1])";
    "Fxn:Model([a,";
    "Fxn:single_output_model.compile(optimizer,";
    "Fxn:expected_shape(batch_size,";
    "Fxn:single_output_model.predict_generator(RandomSequence(batch_size,";
    "Fxn:np.shape(out)";
    "Fxn:expected_shape(batch_size,";
    "Fxn:single_output_model.predict_generator(RandomSequence(batch_size,";
    "Fxn:np.shape(out)";
    "Fxn:@pytest.mark.skipif(sys.version_info";
    "Fxn:test_warnings";
    "Fxn:Input(shape=(3,),";
    "Fxn:Input(shape=(3,),";
    "Fxn:Dense(4,";
    "Fxn:name='dense_1')(a)";
    "Fxn:Dropout(0.5,";
    "Fxn:dp(b)";
    "Fxn:Model([a,";
    "Fxn:model.compile(optimizer,";
    "Fxn:gen_data";
    "Fxn:np.random.random((batch_sz,";
    "Fxn:[np.random.random((batch_sz,";
    "Fxn:np.random.random((batch_sz,";
    "Fxn:pytest.warns(Warning)";
    "Fxn:model.fit_generator(gen_data(4),";
    "Fxn:any(['Sequence'";
    "Fxn:str(w_.message)";
    "Fxn:pytest.warns(None)";
    "Fxn:model.fit_generator(RandomSequence(3),";
    "Fxn:all(['Sequence'";
    "Fxn:str(w_.message)";
    "Fxn:test_sparse_inputs_targets";
    "Fxn:[sparse.random(6,";
    "Fxn:density=0.25).tocsr()";
    "Fxn:range(2)]";
    "Fxn:[sparse.random(6,";
    "Fxn:density=0.25).tocsr()";
    "Fxn:range(3,";
    "Fxn:Input(shape=(3,))";
    "Fxn:Input(shape=(3,))";
    "Fxn:Dropout(0.5,";
    "Fxn:name='dropout')(in1)";
    "Fxn:Dense(4,";
    "Fxn:name='dense_1')(in2)";
    "Fxn:Model([in1,";
    "Fxn:model.predict(test_inputs,";
    "Fxn:model.compile('rmsprop',";
    "Fxn:model.fit(test_inputs,";
    "Fxn:model.evaluate(test_inputs,";
    "Fxn:@pytest.mark.skipif(K.backend()";
    "Fxn:test_sparse_placeholder_fit";
    "Fxn:[sparse.random(6,";
    "Fxn:density=0.25).tocsr()";
    "Fxn:range(2)]";
    "Fxn:[sparse.random(6,";
    "Fxn:density=0.25).tocsr()";
    "Fxn:range(3,";
    "Fxn:Input(shape=(3,))";
    "Fxn:Input(shape=(3,),";
    "Fxn:Dropout(0.5,";
    "Fxn:name='dropout')(in1)";
    "Fxn:Dense(4,";
    "Fxn:name='dense_1')(in2)";
    "Fxn:Model([in1,";
    "Fxn:model.predict(test_inputs,";
    "Fxn:model.compile('rmsprop',";
    "Fxn:model.fit(test_inputs,";
    "Fxn:model.evaluate(test_inputs,";
    "Fxn:test_trainable_argument";
    "Fxn:np.random.random((5,";
    "Fxn:np.random.random((5,";
    "Fxn:Sequential()";
    "Fxn:model.add(Dense(2,";
    "Fxn:model.compile('rmsprop',";
    "Fxn:model.predict(x)";
    "Fxn:model.train_on_batch(x,";
    "Fxn:model.predict(x)";
    "Fxn:assert_allclose(out,";
    "Fxn:Input(shape=(3,))";
    "Fxn:model(inputs)";
    "Fxn:Model(inputs,";
    "Fxn:model.compile('rmsprop',";
    "Fxn:model.predict(x)";
    "Fxn:model.train_on_batch(x,";
    "Fxn:model.predict(x)";
    "Fxn:assert_allclose(out,";
    "Fxn:test_with_list_as_targets";
    "Fxn:Sequential()";
    "Fxn:model.add(Dense(1,";
    "Fxn:model.compile('rmsprop',";
    "Fxn:np.random.random((2,";
    "Fxn:model.train_on_batch(x,";
    "Fxn:test_check_not_failing";
    "Fxn:np.random.random((2,";
    "Fxn:_check_loss_and_target_compatibility([a],";
    "Fxn:_check_loss_and_target_compatibility([a],";
    "Fxn:[(2,";
    "Fxn:test_check_last_is_one";
    "Fxn:np.random.random((2,";
    "Fxn:pytest.raises(ValueError)";
    "Fxn:_check_loss_and_target_compatibility([a],";
    "Fxn:str(exc)";
    "Fxn:test_check_bad_shape";
    "Fxn:np.random.random((2,";
    "Fxn:pytest.raises(ValueError)";
    "Fxn:_check_loss_and_target_compatibility([a],";
    "Fxn:[(2,";
    "Fxn:str(exc)";
    "Fxn:@pytest.mark.skipif(K.backend()";
    "Fxn:test_model_with_input_feed_tensor";
    "Fxn:np.random.random((10,";
    "Fxn:np.random.random((10,";
    "Fxn:np.random.random((10,";
    "Fxn:np.random.random((10,";
    "Fxn:Input(tensor=tf.Variable(input_a_np,";
    "Fxn:Input(shape=(3,),";
    "Fxn:Dense(4,";
    "Fxn:name='dense_1')(a)";
    "Fxn:Dropout(0.5,";
    "Fxn:dp(b)";
    "Fxn:Model([a,";
    "Fxn:model.summary()";
    "Fxn:model.compile(optimizer,";
    "Fxn:model.train_on_batch(input_b_np,";
    "Fxn:model.train_on_batch({'input_b':";
    "Fxn:model.test_on_batch({'input_b':";
    "Fxn:model.predict_on_batch({'input_b':";
    "Fxn:model.fit({'input_b':";
    "Fxn:model.fit(input_b_np,";
    "Fxn:model.evaluate({'input_b':";
    "Fxn:model.evaluate(input_b_np,";
    "Fxn:model.predict({'input_b':";
    "Fxn:model.predict(input_b_np,";
    "Fxn:len(out)";
    "Fxn:Input(tensor=tf.Variable(input_a_np,";
    "Fxn:Dense(4,";
    "Fxn:name='dense_1')(a)";
    "Fxn:Dropout(0.5,";
    "Fxn:name='dropout')(a_2)";
    "Fxn:Model(a,";
    "Fxn:model.summary()";
    "Fxn:model.compile(optimizer,";
    "Fxn:model.train_on_batch(None,";
    "Fxn:model.train_on_batch(None,";
    "Fxn:model.test_on_batch(None,";
    "Fxn:model.predict_on_batch(None)";
    "Fxn:model.train_on_batch([],";
    "Fxn:model.train_on_batch({},";
    "Fxn:model.fit(None,";
    "Fxn:model.fit(None,";
    "Fxn:model.evaluate(None,";
    "Fxn:model.evaluate(None,";
    "Fxn:model.predict(None,";
    "Fxn:model.predict(None,";
    "Fxn:Input(tensor=tf.Variable(input_a_np,";
    "Fxn:Dense(4,";
    "Fxn:name='dense_1')(a)";
    "Fxn:Model(a,";
    "Fxn:model.summary()";
    "Fxn:model.compile(optimizer,";
    "Fxn:model.train_on_batch(None,";
    "Fxn:model.train_on_batch(None,";
    "Fxn:model.test_on_batch(None,";
    "Fxn:model.predict_on_batch(None)";
    "Fxn:model.train_on_batch([],";
    "Fxn:model.train_on_batch({},";
    "Fxn:model.fit(None,";
    "Fxn:model.fit(None,";
    "Fxn:model.evaluate(None,";
    "Fxn:model.evaluate(None,";
    "Fxn:model.predict(None,";
    "Fxn:model.predict(None,";
    "Fxn:test_model_with_partial_loss";
    "Fxn:Input(shape=(3,),";
    "Fxn:Dense(4,";
    "Fxn:name='dense_1')(a)";
    "Fxn:Dropout(0.5,";
    "Fxn:dp(a_2)";
    "Fxn:Model(a,";
    "Fxn:model.compile(optimizer,";
    "Fxn:np.random.random((10,";
    "Fxn:np.random.random((10,";
    "Fxn:model.train_on_batch(input_a_np,";
    "Fxn:model.test_on_batch(input_a_np,";
    "Fxn:model.fit(input_a_np,";
    "Fxn:model.evaluate(input_a_np,";
    "Fxn:Input(shape=(3,),";
    "Fxn:Dense(4,";
    "Fxn:name='dense_1')(a)";
    "Fxn:Dense(4,";
    "Fxn:name='dense_2')(a_2)";
    "Fxn:Model(a,";
    "Fxn:model.compile(optimizer,";
    "Fxn:model.train_on_batch(input_a_np,";
    "Fxn:model.test_on_batch(input_a_np,";
    "Fxn:model.fit(input_a_np,";
    "Fxn:model.evaluate(input_a_np,";
    "Fxn:@pytest.mark.skipif((K.backend()";
    "Fxn:test_model_with_external_loss";
    "Fxn:Input(shape=(3,),";
    "Fxn:Dense(4,";
    "Fxn:bias_regularizer='l2')(a)";
    "Fxn:Dropout(0.5,";
    "Fxn:dp(a_2)";
    "Fxn:Model(a,";
    "Fxn:model.compile(optimizer,";
    "Fxn:np.random.random((10,";
    "Fxn:model.train_on_batch(input_a_np,";
    "Fxn:model.test_on_batch(input_a_np,";
    "Fxn:model.fit(input_a_np,";
    "Fxn:model.evaluate(input_a_np,";
    "Fxn:Input(shape=(3,),";
    "Fxn:Dense(4,";
    "Fxn:name='dense_1')(a)";
    "Fxn:Dense(4,";
    "Fxn:name='dense_2')(a)";
    "Fxn:Model(a,";
    "Fxn:model.add_loss(K.mean(a_3";
    "Fxn:model.compile(optimizer,";
    "Fxn:model.train_on_batch(input_a_np,";
    "Fxn:model.test_on_batch(input_a_np,";
    "Fxn:model.fit(input_a_np,";
    "Fxn:model.evaluate(input_a_np,";
    "Fxn:K.backend()";
    "Fxn:Input(tensor=tf.Variable(input_a_np,";
    "Fxn:Dense(4,";
    "Fxn:name='dense_1')(a)";
    "Fxn:Dropout(0.5,";
    "Fxn:name='dropout')(a_2)";
    "Fxn:Model(a,";
    "Fxn:model.add_loss(K.mean(a_2))";
    "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:model.train_on_batch(None,";
    "Fxn:model.test_on_batch(None,";
    "Fxn:model.predict_on_batch(None)";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.fit(None,";
    "Fxn:model.fit(None,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.fit(None,";
    "Fxn:model.fit(None,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.evaluate(None,";
    "Fxn:model.evaluate(None,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.predict(None,";
    "Fxn:model.predict(None,";
    "Fxn:Input(tensor=tf.Variable(input_a_np,";
    "Fxn:Dense(4,";
    "Fxn:name='dense_1')(a)";
    "Fxn:Dropout(0.5,";
    "Fxn:name='dropout')(a_1)";
    "Fxn:Model(a,";
    "Fxn:model.add_loss(K.mean(a_2))";
    "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:model.train_on_batch(None,";
    "Fxn:model.test_on_batch(None,";
    "Fxn:model.predict_on_batch(None)";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.fit(None,";
    "Fxn:model.fit(None,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.fit(None,";
    "Fxn:model.fit(None,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.evaluate(None,";
    "Fxn:model.evaluate(None,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.predict(None,";
    "Fxn:model.predict(None,";
    "Fxn:len(out)";
    "Fxn:test_target_tensors";
    "Fxn:keras.models.Sequential()";
    "Fxn:model.add(keras.layers.Dense(4,";
    "Fxn:input_shape=(4,),";
    "Fxn:np.random.random((10,";
    "Fxn:np.random.random((10,";
    "Fxn:keras.backend.variable(target_val)";
    "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:model.train_on_batch(input_val,";
    "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:model.train_on_batch(input_val,";
    "Fxn:pytest.raises(TypeError):";
    "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:target_tensors=set())";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:model.train_on_batch(input_val,";
    "Fxn:np.random.random((10,";
    "Fxn:np.random.random((10,";
    "Fxn:np.random.random((10,";
    "Fxn:keras.backend.variable(target_val_a)";
    "Fxn:keras.backend.variable(target_val_b)";
    "Fxn:keras.layers.Input(shape=(4,))";
    "Fxn:keras.layers.Dense(4,";
    "Fxn:name='dense_a')(inputs)";
    "Fxn:keras.layers.Dense(4,";
    "Fxn:name='dense_b')(inputs)";
    "Fxn:keras.models.Model(inputs,";
    "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:model.train_on_batch(input_val,";
    "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:model.train_on_batch(input_val,";
    "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:model.train_on_batch(input_val,";
    "Fxn:np.random.random((10,))})";
    "Fxn:test_model_custom_target_tensors";
    "Fxn:Input(shape=(3,),";
    "Fxn:Input(shape=(3,),";
    "Fxn:Dense(4,";
    "Fxn:name='dense_1')(a)";
    "Fxn:Dropout(0.5,";
    "Fxn:dp(b)";
    "Fxn:K.placeholder([10,";
    "Fxn:K.placeholder([10,";
    "Fxn:K.placeholder([7,";
    "Fxn:Model([a,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.compile(optimizer,";
    "Fxn:model.compile(optimizer,";
    "Fxn:np.random.random((10,";
    "Fxn:np.random.random((10,";
    "Fxn:np.random.random((10,";
    "Fxn:np.random.random((10,";
    "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:np.random.random((10,";
    "Fxn:np.random.random((10,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:model.compile(optimizer,";
    "Fxn:model.compile(optimizer,";
    "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:np.random.random((10,";
    "Fxn:np.random.random((10,";
    "Fxn:K.backend()";
    "Fxn:tf.placeholder('float32',";
    "Fxn:shape=(None,";
    "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:@pytest.mark.skipif(sys.version_info";
    "Fxn:test_trainable_weights_count_consistency";
    "Fxn:.compile()";
    "Fxn:Input(shape=(3,),";
    "Fxn:Model(inputs=a,";
    "Fxn:outputs=Dense(1)(a))";
    "Fxn:Input(shape=(3,),";
    "Fxn:model1(b)";
    "Fxn:Model(inputs=b,";
    "Fxn:outputs=Dense(1)(y))";
    "Fxn:model2.compile(optimizer='adam',";
    "Fxn:.summary()";
    "Fxn:pytest.warns(UserWarning)";
    "Fxn:model2.summary()";
    "Fxn:any(['Discrepancy'";
    "Fxn:str(w_.message)";
    "Fxn:.fit()";
    "Fxn:pytest.warns(UserWarning)";
    "Fxn:model2.fit(x=np.zeros((5,";
    "Fxn:y=np.zeros((5,";
    "Fxn:any(['Discrepancy'";
    "Fxn:str(w_.message)";
    "Fxn:model2.compile(optimizer='adam',";
    "Fxn:pytest.warns(None)";
    "Fxn:model2.summary()";
    "Fxn:len(w)";
    "Fxn:.compile()";
    "Fxn:test_pandas_dataframe";
    "Fxn:Input(shape=(3,),";
    "Fxn:Input(shape=(3,),";
    "Fxn:Dense(4,";
    "Fxn:name='dense_1')(input_a)";
    "Fxn:Dense(3,";
    "Fxn:name='desne_2')(input_b)";
    "Fxn:Model(inputs=input_a,";
    "Fxn:Model(inputs=[input_a,";
    "Fxn:model_1.compile(optimizer=optimizer,";
    "Fxn:model_2.compile(optimizer=optimizer,";
    "Fxn:pd.DataFrame(np.random.random((10,";
    "Fxn:pd.DataFrame(np.random.random((10,";
    "Fxn:pd.DataFrame(np.random.random((10,";
    "Fxn:pd.DataFrame(np.random.random((10,";
    "Fxn:model_1.fit(input_a_df,";
    "Fxn:model_2.fit([input_a_df,";
    "Fxn:model_1.fit([input_a_df],";
    "Fxn:model_1.fit({'input_a':";
    "Fxn:model_2.fit({'input_a':";
    "Fxn:model_1.predict(input_a_df)";
    "Fxn:model_2.predict([input_a_df,";
    "Fxn:model_1.predict([input_a_df])";
    "Fxn:model_1.predict({'input_a':";
    "Fxn:model_2.predict({'input_a':";
    "Fxn:model_1.predict_on_batch(input_a_df)";
    "Fxn:model_2.predict_on_batch([input_a_df,";
    "Fxn:model_1.predict_on_batch([input_a_df])";
    "Fxn:model_1.predict_on_batch({'input_a':";
    "Fxn:model_2.predict_on_batch({'input_a':";
    "Fxn:model_1.evaluate(input_a_df,";
    "Fxn:model_2.evaluate([input_a_df,";
    "Fxn:model_1.evaluate([input_a_df],";
    "Fxn:model_1.evaluate({'input_a':";
    "Fxn:model_2.evaluate({'input_a':";
    "Fxn:model_1.train_on_batch(input_a_df,";
    "Fxn:model_2.train_on_batch([input_a_df,";
    "Fxn:model_1.train_on_batch([input_a_df],";
    "Fxn:model_1.train_on_batch({'input_a':";
    "Fxn:model_2.train_on_batch({'input_a':";
    "Fxn:model_1.test_on_batch(input_a_df,";
    "Fxn:model_2.test_on_batch([input_a_df,";
    "Fxn:model_1.test_on_batch([input_a_df],";
    "Fxn:model_1.test_on_batch({'input_a':";
    "Fxn:model_2.test_on_batch({'input_a':";
    "Fxn:pytest.main([__file__])";
    "Import:tensorflow";
    "Import:tensorflow";
    "Import:tensorflow";
    "/tests/keras/layers/advanced_activations_test.py";
    "Import:pytest";
    "Import:layer_test";
    "Import:keras_test";
    "Import:layers";
    "Fxn:test_leaky_relu";
    "Fxn:test_prelu";
    "Fxn:test_prelu_share";
    "Fxn:test_elu";
    "Fxn:test_thresholded_relu";
    "Fxn:test_softmax";
    "/tests/keras/layers/convolutional_recurrent_test.py";
    "Import:pytest";
    "Import:numpy";
    "Import:assert_allclose";
    "Import:backend";
    "Import:Sequential,";
    "Import:convolutional_recurrent,";
    "Import:layer_test";
    "Import:regularizers";
    "Fxn:test_convolutional_recurrent";
    "/tests/keras/layers/convolutional_test.py";
    "Import:pytest";
    "Import:numpy";
    "Import:assert_allclose";
    "Import:layer_test";
    "Import:keras_test";
    "Import:backend";
    "Import:InputLayer";
    "Import:convolutional";
    "Import:pooling";
    "Import:Sequential";
    "Fxn:test_causal_dilated_conv";
    "Fxn:test_conv_1d";
    "Fxn:test_maxpooling_1d";
    "Fxn:test_averagepooling_1d";
    "Fxn:test_convolution_2d";
    "Fxn:test_conv2d_transpose";
    "Fxn:test_separable_conv_1d";
    "Fxn:test_separable_conv_2d";
    "Fxn:test_depthwise_conv_2d";
    "Fxn:test_globalpooling_1d";
    "Fxn:test_globalpooling_2d";
    "Fxn:test_globalpooling_3d";
    "Fxn:test_maxpooling_2d";
    "Fxn:test_averagepooling_2d";
    "Fxn:test_convolution_3d";
    "Fxn:test_conv3d_transpose";
    "Fxn:test_maxpooling_3d";
    "Fxn:test_averagepooling_3d";
    "Fxn:test_zero_padding_1d";
    "Fxn:test_zero_padding_2d";
    "Fxn:test_zero_padding_3d";
    "Fxn:test_upsampling_1d";
    "Fxn:test_upsampling_2d";
    "Fxn:test_upsampling_3d";
    "Fxn:test_cropping_1d";
    "Fxn:test_cropping_2d";
    "Fxn:test_cropping_3d";
    "/tests/keras/layers/core_test.py";
    "Import:pytest";
    "Import:numpy";
    "Import:assert_allclose";
    "Import:backend";
    "Import:layers";
    "Import:Model";
    "Import:layer_test";
    "Import:keras_test";
    "Import:regularizers";
    "Import:constraints";
    "Import:deserialize";
    "Fxn:test_masking";
    "Fxn:test_dropout";
    "Fxn:test_activation";
    "Fxn:test_reshape";
    "Fxn:test_permute";
    "Fxn:test_flatten";
    "Fxn:test_repeat_vector";
    "Fxn:test_lambda";
    "Fxn:antirectifier";
    "Fxn:antirectifier_output_shape";
    "Fxn:test_multiple_outputs";
    "Fxn:func";
    "Fxn:output_shape";
    "Fxn:mask";
    "Fxn:test_multiple_outputs_no_mask";
    "Fxn:func";
    "Fxn:output_shape";
    "Fxn:f";
    "Fxn:f";
    "Fxn:f_shape";
    "Fxn:test_dense";
    "Fxn:test_activity_regularization";
    "/tests/keras/layers/cudnn_recurrent_test.py";
    "Import:pytest";
    "Import:numpy";
    "Import:assert_allclose";
    "Import:keras";
    "Import:layer_test";
    "Import:keras_test";
    "Import:time";
    "Fxn:test_cudnn_rnn_canonical_to_params_lstm";
    "Fxn:test_cudnn_rnn_canonical_to_params_gru";
    "Fxn:test_cudnn_rnn_timing";
    "Fxn:test_cudnn_rnn_basics";
    "Fxn:test_trainability";
    "Fxn:test_regularizer";
    "Fxn:test_return_state";
    "Fxn:test_specify_initial_state_keras_tensor";
    "Fxn:test_statefulness";
    "Fxn:test_load_weights_between_noncudnn_rnn";
    "Fxn:convert_weights";
    "Fxn:test_cudnnrnn_bidirectional";
    "Fxn:test_preprocess_weights_for_loading_gru_incompatible";
    "Fxn:gru";
    "Fxn:initialize_weights";
    "Fxn:assert_not_compatible";
    "/tests/keras/layers/embeddings_test.py";
    "Import:pytest";
    "Import:layer_test,";
    "Import:Embedding";
    "Import:keras.backend";
    "Fxn:test_embedding";
    "/tests/keras/layers/local_test.py";
    "Import:pytest";
    "Import:layer_test";
    "Import:keras_test";
    "Import:local";
    "Fxn:test_locallyconnected_1d";
    "Fxn:test_locallyconnected_2d";
    "/tests/keras/layers/merge_test.py";
    "Import:pytest";
    "Import:numpy";
    "Import:assert_allclose";
    "Import:layers";
    "Import:models";
    "Import:backend";
    "Import:layer_test";
    "Import:keras_test";
    "Import:merge";
    "Fxn:test_merge_add";
    "Fxn:test_merge_subtract";
    "Fxn:test_merge_multiply";
    "Fxn:test_merge_average";
    "Fxn:test_merge_maximum";
    "Fxn:test_merge_minimum";
    "Fxn:test_merge_concatenate";
    "Fxn:test_merge_dot";
    "Fxn:test_merge_broadcast";
    "/tests/keras/layers/noise_test.py";
    "Import:pytest";
    "Import:layer_test";
    "Import:keras_test";
    "Import:noise";
    "Import:backend";
    "Fxn:test_GaussianNoise";
    "Fxn:test_GaussianDropout";
    "Fxn:test_AlphaDropout";
    "/tests/keras/layers/normalization_test.py";
    "Import:pytest";
    "Import:numpy";
    "Import:assert_allclose";
    "Import:Input";
    "Import:regularizers";
    "Import:layer_test,";
    "Import:normalization";
    "Import:Sequential,";
    "Import:backend";
    "Fxn:test_basic_batchnorm";
    "Fxn:test_batchnorm_correctness_1d";
    "Fxn:test_batchnorm_correctness_2d";
    "Fxn:test_batchnorm_training_argument";
    "Fxn:test_batchnorm_mode_twice";
    "Fxn:test_batchnorm_convnet";
    "Fxn:test_batchnorm_convnet_no_center_no_scale";
    "Fxn:test_shared_batchnorm";
    "Fxn:test_that_trainable_disables_updates";
    "/tests/keras/layers/recurrent_test.py";
    "Import:pytest";
    "Import:numpy";
    "Import:assert_allclose";
    "Import:keras";
    "Import:layer_test";
    "Import:keras_test";
    "Import:recurrent";
    "Import:embeddings";
    "Import:Sequential";
    "Import:Model";
    "Import:Input";
    "Import:Masking";
    "Import:regularizers";
    "Import:backend";
    "Fxn:rnn_test";
    "Fxn:rnn_cell_test";
    "Fxn:test_return_sequences";
    "Fxn:test_dynamic_behavior";
    "Fxn:test_stateful_invalid_use";
    "Fxn:test_dropout";
    "Fxn:test_statefulness";
    "Fxn:test_masking_correctness";
    "Fxn:test_implementation_mode";
    "Fxn:test_regularizer";
    "Fxn:test_trainability";
    "Fxn:test_masking_layer";
    "Fxn:test_from_config";
    "Fxn:test_specify_initial_state_keras_tensor";
    "Fxn:test_specify_initial_state_non_keras_tensor";
    "Fxn:test_reset_states_with_values";
    "Fxn:test_initial_states_as_other_inputs";
    "Fxn:test_specify_state_with_masking";
    "Fxn:test_return_state";
    "Fxn:test_state_reuse";
    "Fxn:test_state_reuse_with_dropout";
    "Fxn:test_minimal_rnn_cell_non_layer";
    "class:MinimalRNNCell(object):";
    "Fxn:__init__";
    "Fxn:keras.backend.variable(";
    "Fxn:np.random.random((input_dim,";
    "Fxn:call";
    "Fxn:keras.backend.dot(inputs,";
    "Fxn:MinimalRNNCell(32,";
    "Fxn:keras.Input((None,";
    "Fxn:recurrent.RNN(cell)";
    "Fxn:layer(x)";
    "Fxn:keras.models.Model(x,";
    "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:model.train_on_batch(np.zeros((6,";
    "Fxn:np.zeros((6,";
    "Fxn:[MinimalRNNCell(8,";
    "Fxn:MinimalRNNCell(32,";
    "Fxn:MinimalRNNCell(32,";
    "Fxn:recurrent.RNN(cells)";
    "Fxn:layer(x)";
    "Fxn:keras.models.Model(x,";
    "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:model.train_on_batch(np.zeros((6,";
    "Fxn:np.zeros((6,";
    "Fxn:test_minimal_rnn_cell_non_layer_multiple_states";
    "class:MinimalRNNCell(object):";
    "Fxn:__init__";
    "Fxn:keras.backend.variable(";
    "Fxn:np.random.random((input_dim,";
    "Fxn:call";
    "Fxn:keras.backend.dot(inputs,";
    "Fxn:MinimalRNNCell(32,";
    "Fxn:keras.Input((None,";
    "Fxn:recurrent.RNN(cell)";
    "Fxn:layer(x)";
    "Fxn:keras.models.Model(x,";
    "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:model.train_on_batch(np.zeros((6,";
    "Fxn:np.zeros((6,";
    "Fxn:[MinimalRNNCell(8,";
    "Fxn:MinimalRNNCell(16,";
    "Fxn:MinimalRNNCell(32,";
    "Fxn:recurrent.RNN(cells)";
    "Fxn:layer(x)";
    "Fxn:keras.models.Model(x,";
    "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:model.train_on_batch(np.zeros((6,";
    "Fxn:np.zeros((6,";
    "Fxn:test_minimal_rnn_cell_layer";
    "class:MinimalRNNCell(keras.layers.Layer):";
    "Fxn:__init__";
    "Fxn:super(MinimalRNNCell,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:build";
    "Fxn:len(input_shape)";
    "Fxn:self.add_weight(shape=(input_shape[-1],";
    "Fxn:self.add_weight(";
    "Fxn:shape=(self.units,";
    "Fxn:call";
    "Fxn:keras.backend.dot(inputs,";
    "Fxn:keras.backend.dot(prev_output,";
    "Fxn:get_config";
    "Fxn:super(MinimalRNNCell,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Fxn:keras.Input((None,";
    "Fxn:MinimalRNNCell(32)";
    "Fxn:recurrent.RNN(cell)";
    "Fxn:layer(x)";
    "Fxn:keras.models.Model(x,";
    "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:model.train_on_batch(np.zeros((6,";
    "Fxn:np.zeros((6,";
    "Fxn:np.random.random((6,";
    "Fxn:model.predict(x_np)";
    "Fxn:model.get_weights()";
    "Fxn:layer.get_config()";
    "Fxn:keras.utils.CustomObjectScope({'MinimalRNNCell':";
    "Fxn:recurrent.RNN.from_config(config)";
    "Fxn:layer(x)";
    "Fxn:keras.models.Model(x,";
    "Fxn:model.set_weights(weights)";
    "Fxn:model.predict(x_np)";
    "Fxn:assert_allclose(y_np,";
    "Fxn:[MinimalRNNCell(8),";
    "Fxn:MinimalRNNCell(12),";
    "Fxn:MinimalRNNCell(32)]";
    "Fxn:recurrent.RNN(cells)";
    "Fxn:layer(x)";
    "Fxn:keras.models.Model(x,";
    "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:model.train_on_batch(np.zeros((6,";
    "Fxn:np.zeros((6,";
    "Fxn:np.random.random((6,";
    "Fxn:model.predict(x_np)";
    "Fxn:model.get_weights()";
    "Fxn:layer.get_config()";
    "Fxn:keras.utils.CustomObjectScope({'MinimalRNNCell':";
    "Fxn:recurrent.RNN.from_config(config)";
    "Fxn:layer(x)";
    "Fxn:keras.models.Model(x,";
    "Fxn:model.set_weights(weights)";
    "Fxn:model.predict(x_np)";
    "Fxn:assert_allclose(y_np,";
    "Fxn:test_builtin_rnn_cell_layer";
    "Fxn:keras.Input((None,";
    "Fxn:cell_class(32)";
    "Fxn:recurrent.RNN(cell)";
    "Fxn:layer(x)";
    "Fxn:keras.models.Model(x,";
    "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:model.train_on_batch(np.zeros((6,";
    "Fxn:np.zeros((6,";
    "Fxn:np.random.random((6,";
    "Fxn:model.predict(x_np)";
    "Fxn:model.get_weights()";
    "Fxn:layer.get_config()";
    "Fxn:recurrent.RNN.from_config(config)";
    "Fxn:layer(x)";
    "Fxn:keras.models.Model(x,";
    "Fxn:model.set_weights(weights)";
    "Fxn:model.predict(x_np)";
    "Fxn:assert_allclose(y_np,";
    "Fxn:[cell_class(8),";
    "Fxn:cell_class(12),";
    "Fxn:cell_class(32)]";
    "Fxn:recurrent.RNN(cells)";
    "Fxn:layer(x)";
    "Fxn:keras.models.Model(x,";
    "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:model.train_on_batch(np.zeros((6,";
    "Fxn:np.zeros((6,";
    "Fxn:np.random.random((6,";
    "Fxn:model.predict(x_np)";
    "Fxn:model.get_weights()";
    "Fxn:layer.get_config()";
    "Fxn:recurrent.RNN.from_config(config)";
    "Fxn:layer(x)";
    "Fxn:keras.models.Model(x,";
    "Fxn:model.set_weights(weights)";
    "Fxn:model.predict(x_np)";
    "Fxn:assert_allclose(y_np,";
    "Fxn:@pytest.mark.skipif((K.backend()";
    "Fxn:test_stacked_rnn_dropout";
    "Fxn:[recurrent.LSTMCell(3,";
    "Fxn:recurrent.LSTMCell(3,";
    "Fxn:recurrent.RNN(cells)";
    "Fxn:keras.Input((None,";
    "Fxn:layer(x)";
    "Fxn:keras.models.Model(x,";
    "Fxn:model.compile('sgd',";
    "Fxn:np.random.random((6,";
    "Fxn:np.random.random((6,";
    "Fxn:model.train_on_batch(x_np,";
    "Fxn:test_stacked_rnn_attributes";
    "Fxn:[recurrent.LSTMCell(3),";
    "Fxn:recurrent.LSTMCell(3,";
    "Fxn:recurrent.RNN(cells)";
    "Fxn:layer.build((None,";
    "Fxn:len(layer.losses)";
    "Fxn:len(layer.trainable_weights)";
    "Fxn:len(layer.trainable_weights)";
    "Fxn:len(layer.non_trainable_weights)";
    "Fxn:keras.Input((None,";
    "Fxn:K.sum(x)";
    "Fxn:cells[0].add_loss(y,";
    "Fxn:layer.get_losses_for(x)";
    "Fxn:test_stacked_rnn_compute_output_shape";
    "Fxn:[recurrent.LSTMCell(3),";
    "Fxn:recurrent.LSTMCell(6)]";
    "Fxn:recurrent.RNN(cells,";
    "Fxn:layer.compute_output_shape((None,";
    "Fxn:[(None,";
    "Fxn:test_batch_size_equal_one";
    "Fxn:Input(batch_shape=(1,";
    "Fxn:layer_class(units)";
    "Fxn:layer(inputs)";
    "Fxn:Model(inputs,";
    "Fxn:model.compile('sgd',";
    "Fxn:np.random.random((1,";
    "Fxn:np.random.random((1,";
    "Fxn:model.train_on_batch(x,";
    "Fxn:test_rnn_cell_with_constants_layer";
    "class:RNNCellWithConstants(keras.layers.Layer):";
    "Fxn:__init__";
    "Fxn:super(RNNCellWithConstants,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:build";
    "Fxn:isinstance(input_shape,";
    "Fxn:TypeError('expects";
    "Fxn:self.add_weight(";
    "Fxn:shape=(input_shape[-1],";
    "Fxn:self.add_weight(";
    "Fxn:shape=(self.units,";
    "Fxn:self.add_weight(";
    "Fxn:shape=(constant_shape[-1],";
    "Fxn:call";
    "Fxn:keras.backend.dot(inputs,";
    "Fxn:keras.backend.dot(prev_output,";
    "Fxn:keras.backend.dot(constant,";
    "Fxn:get_config";
    "Fxn:super(RNNCellWithConstants,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Fxn:keras.Input((None,";
    "Fxn:keras.Input((3,))";
    "Fxn:RNNCellWithConstants(32)";
    "Fxn:recurrent.RNN(cell)";
    "Fxn:layer(x,";
    "Fxn:keras.models.Model([x,";
    "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:model.train_on_batch(";
    "Fxn:[np.zeros((6,";
    "Fxn:np.zeros((6,";
    "Fxn:np.zeros((6,";
    "Fxn:np.random.random((6,";
    "Fxn:np.random.random((6,";
    "Fxn:model.predict([x_np,";
    "Fxn:model.get_weights()";
    "Fxn:layer.get_config()";
    "Fxn:keras.utils.CustomObjectScope(custom_objects):";
    "Fxn:recurrent.RNN.from_config(config.copy())";
    "Fxn:layer(x,";
    "Fxn:keras.models.Model([x,";
    "Fxn:model.set_weights(weights)";
    "Fxn:model.predict([x_np,";
    "Fxn:assert_allclose(y_np,";
    "Fxn:keras.utils.CustomObjectScope(custom_objects):";
    "Fxn:recurrent.RNN.from_config(config.copy())";
    "Fxn:layer([x,";
    "Fxn:keras.models.Model([x,";
    "Fxn:model.set_weights(weights)";
    "Fxn:model.predict([x_np,";
    "Fxn:assert_allclose(y_np,";
    "Fxn:[recurrent.GRUCell(8),";
    "Fxn:RNNCellWithConstants(12),";
    "Fxn:RNNCellWithConstants(32)]";
    "Fxn:recurrent.RNN(cells)";
    "Fxn:layer(x,";
    "Fxn:keras.models.Model([x,";
    "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:model.train_on_batch(";
    "Fxn:[np.zeros((6,";
    "Fxn:np.zeros((6,";
    "Fxn:np.zeros((6,";
    "Fxn:np.random.random((6,";
    "Fxn:np.random.random((6,";
    "Fxn:model.predict([x_np,";
    "Fxn:model.get_weights()";
    "Fxn:layer.get_config()";
    "Fxn:keras.utils.CustomObjectScope(custom_objects):";
    "Fxn:recurrent.RNN.from_config(config.copy())";
    "Fxn:layer(x,";
    "Fxn:keras.models.Model([x,";
    "Fxn:model.set_weights(weights)";
    "Fxn:model.predict([x_np,";
    "Fxn:assert_allclose(y_np,";
    "Fxn:test_rnn_cell_with_constants_layer_passing_initial_state";
    "class:RNNCellWithConstants(keras.layers.Layer):";
    "Fxn:__init__";
    "Fxn:super(RNNCellWithConstants,";
    "Fxn:self).__init__(**kwargs)";
    "Fxn:build";
    "Fxn:isinstance(input_shape,";
    "Fxn:TypeError('expects";
    "Fxn:self.add_weight(";
    "Fxn:shape=(input_shape[-1],";
    "Fxn:self.add_weight(";
    "Fxn:shape=(self.units,";
    "Fxn:self.add_weight(";
    "Fxn:shape=(constant_shape[-1],";
    "Fxn:call";
    "Fxn:keras.backend.dot(inputs,";
    "Fxn:keras.backend.dot(prev_output,";
    "Fxn:keras.backend.dot(constant,";
    "Fxn:get_config";
    "Fxn:super(RNNCellWithConstants,";
    "Fxn:self).get_config()";
    "Fxn:dict(list(base_config.items())";
    "Fxn:list(config.items()))";
    "Fxn:keras.Input((None,";
    "Fxn:keras.Input((3,))";
    "Fxn:keras.Input((32,))";
    "Fxn:RNNCellWithConstants(32)";
    "Fxn:recurrent.RNN(cell)";
    "Fxn:layer(x,";
    "Fxn:keras.models.Model([x,";
    "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:model.train_on_batch(";
    "Fxn:[np.zeros((6,";
    "Fxn:np.zeros((6,";
    "Fxn:np.zeros((6,";
    "Fxn:np.zeros((6,";
    "Fxn:np.random.random((6,";
    "Fxn:np.random.random((6,";
    "Fxn:np.random.random((6,";
    "Fxn:model.predict([x_np,";
    "Fxn:model.get_weights()";
    "Fxn:layer.get_config()";
    "Fxn:keras.utils.CustomObjectScope(custom_objects):";
    "Fxn:recurrent.RNN.from_config(config.copy())";
    "Fxn:layer(x,";
    "Fxn:keras.models.Model([x,";
    "Fxn:model.set_weights(weights)";
    "Fxn:model.predict([x_np,";
    "Fxn:assert_allclose(y_np,";
    "Fxn:model.predict([x_np,";
    "Fxn:pytest.raises(AssertionError):";
    "Fxn:assert_allclose(y_np,";
    "Fxn:keras.utils.CustomObjectScope(custom_objects):";
    "Fxn:recurrent.RNN.from_config(config.copy())";
    "Fxn:layer([x,";
    "Fxn:keras.models.Model([x,";
    "Fxn:model.set_weights(weights)";
    "Fxn:model.predict([x_np,";
    "Fxn:assert_allclose(y_np,";
    "Fxn:pytest.main([__file__])";
    "/tests/keras/layers/wrappers_test.py";
    "Import:pytest";
    "Import:numpy";
    "Import:assert_allclose";
    "Import:keras_test";
    "Import:wrappers,";
    "Import:layers";
    "Import:Sequential,";
    "Import:backend";
    "Import:_object_list_uid,";
    "Fxn:test_TimeDistributed";
    "Fxn:test_TimeDistributed_learning_phase";
    "Fxn:test_TimeDistributed_trainable";
    "Fxn:test_regularizers";
    "Fxn:test_Bidirectional";
    "Fxn:test_Bidirectional_merged_value";
    "Fxn:test_Bidirectional_dropout";
    "Fxn:test_Bidirectional_state_reuse";
    "Fxn:test_Bidirectional_trainable";
    "/tests/keras/legacy/interface_test.py";
    "Import:pytest";
    "Import:json";
    "Import:keras_test";
    "Import:keras";
    "Import:numpy";
    "Fxn:test_dense_legacy_interface";
    "Fxn:test_dropout_legacy_interface";
    "Fxn:test_embedding_legacy_interface";
    "Fxn:test_maxpooling1d_legacy_interface";
    "Fxn:test_avgpooling1d_legacy_interface";
    "Fxn:test_prelu_legacy_interface";
    "Fxn:test_gaussiannoise_legacy_interface";
    "Fxn:test_lstm_legacy_interface";
    "Fxn:test_simplernn_legacy_interface";
    "Fxn:test_gru_legacy_interface";
    "Fxn:test_gaussiandropout_legacy_interface";
    "Fxn:test_maxpooling2d_legacy_interface";
    "Fxn:test_avgpooling2d_legacy_interface";
    "Fxn:test_maxpooling3d_legacy_interface";
    "Fxn:test_avgpooling3d_legacy_interface";
    "Fxn:test_global_maxpooling2d_legacy_interface";
    "Fxn:test_global_avgpooling2d_legacy_interface";
    "Fxn:test_global_maxpooling3d_legacy_interface";
    "Fxn:test_global_avgpooling3d_legacy_interface";
    "Fxn:test_upsampling1d_legacy_interface";
    "Fxn:test_upsampling2d_legacy_interface";
    "Fxn:test_upsampling3d_legacy_interface";
    "Fxn:test_conv2d_legacy_interface";
    "Fxn:test_deconv2d_legacy_interface";
    "Fxn:test_conv1d_legacy_interface";
    "Fxn:test_separable_conv2d_legacy_interface";
    "Fxn:test_conv3d_legacy_interface";
    "Fxn:test_convlstm2d_legacy_interface";
    "Fxn:test_batchnorm_legacy_interface";
    "Fxn:test_atrousconv1d_legacy_interface";
    "Fxn:test_atrousconv2d_legacy_interface";
    "Fxn:test_zeropadding2d_legacy_interface";
    "Fxn:test_zeropadding3d_legacy_interface";
    "Fxn:test_cropping2d_legacy_interface";
    "Fxn:test_cropping3d_legacy_interface";
    "Fxn:test_generator_methods_interface";
    "Fxn:train_generator";
    "Fxn:val_generator";
    "Fxn:pred_generator";
    "Fxn:test_spatialdropout1d_legacy_interface";
    "Fxn:test_spatialdropout2d_legacy_interface";
    "Fxn:test_spatialdropout3d_legacy_interface";
    "Fxn:test_optimizer_get_updates_legacy_interface";
    "/tests/keras/legacy/layers_test.py";
    "Import:pytest";
    "Import:keras_test";
    "Import:layer_test";
    "Import:layers";
    "Import:layers";
    "Import:models";
    "Import:regularizers";
    "Import:constraints";
    "Import:backend";
    "Import:numpy";
    "Fxn:test_highway";
    "Fxn:test_maxout_dense";
    "Fxn:test_merge";
    "Fxn:fn_mode";
    "Fxn:fn_output_shape";
    "Fxn:fn_output_mask";
    "Fxn:fn_mode";
    "Fxn:test_merge_mask_2d";
    "Fxn:test_merge_mask_3d";
    "Fxn:test_sequential_regression";
    "/tests/keras/legacy/models_test.py";
    "Import:absolute_import";
    "Import:print_function";
    "Import:pytest";
    "Import:import";
    "Import:numpy";
    "Import:Sequential";
    "Import:Dense,";
    "Import:Merge";
    "Import:np_utils";
    "Import:get_test_data,";
    "Import:model_from_json,";
    "Fxn:in_tmpdir";
    "Fxn:_get_test_data";
    "Fxn:test_merge_sum";
    "Fxn:test_merge_dot";
    "Fxn:test_merge_concat";
    "Fxn:test_merge_recursivity";
    "Fxn:test_merge_overlap";
    "/tests/keras/preprocessing/image_test.py";
    "Import:pytest";
    "Import:image";
    "Import:Image";
    "Import:numpy";
    "Import:import";
    "Import:tempfile";
    "Import:shutil";
    "class:TestImage(object):";
    "Fxn:setup_class";
    "Fxn:range(8):";
    "Fxn:np.random.rand(cls.img_w,";
    "Fxn:np.random.rand(cls.img_w,";
    "Fxn:np.random.rand(cls.img_w,";
    "Fxn:Image.fromarray(imarray.astype('uint8')).convert('RGB')";
    "Fxn:rgb_images.append(im)";
    "Fxn:np.random.rand(cls.img_w,";
    "Fxn:Image.fromarray(imarray.astype('uint8').squeeze()).convert('L')";
    "Fxn:gray_images.append(im)";
    "Fxn:teardown_class";
    "Fxn:test_image_data_generator";
    "Fxn:img_list.append(image.img_to_array(im)[None,";
    "Fxn:np.vstack(img_list)";
    "Fxn:image.ImageDataGenerator(";
    "Fxn:brightness_range=(1,";
    "Fxn:generator.fit(images,";
    "Fxn:generator.flow(images,";
    "Fxn:np.arange(images.shape[0]),";
    "Fxn:save_to_dir=str(tmpdir),";
    "Fxn:list(y)";
    "Fxn:generator.flow(images,";
    "Fxn:np.arange(images.shape[0]),";
    "Fxn:save_to_dir=str(tmpdir),";
    "Fxn:list(y)";
    "Fxn:generator.flow(images,";
    "Fxn:np.arange(images.shape[0]),";
    "Fxn:save_to_dir=str(tmpdir),";
    "Fxn:len(seq)";
    "Fxn:list(y)";
    "Fxn:generator.flow(images,";
    "Fxn:np.arange(images.shape[0]),";
    "Fxn:save_to_dir=str(tmpdir),";
    "Fxn:list(y)";
    "Fxn:seq.on_epoch_end()";
    "Fxn:list(y)";
    "Fxn:list(y2)";
    "Fxn:test_image_data_generator_with_validation_split";
    "Fxn:img_list.append(image.img_to_array(im)[None,";
    "Fxn:np.vstack(img_list)";
    "Fxn:image.ImageDataGenerator(validation_split=0.5)";
    "Fxn:generator.flow(images,";
    "Fxn:np.arange(images.shape[0]),";
    "Fxn:list(y)";
    "Fxn:generator.flow(images,";
    "Fxn:np.arange(images.shape[0]),";
    "Fxn:list(y2)";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:generator.flow(images,";
    "Fxn:np.arange(images.shape[0]),";
    "Fxn:test_image_data_generator_with_split_value_error";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:image.ImageDataGenerator(validation_split=5)";
    "Fxn:test_image_data_generator_invalid_data";
    "Fxn:image.ImageDataGenerator(";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:np.random.random((3,";
    "Fxn:generator.fit(x)";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:np.random.random((32,";
    "Fxn:generator.flow(np.arange(x.shape[0]))";
    "Fxn:test_image_data_generator_fit";
    "Fxn:image.ImageDataGenerator(";
    "Fxn:zoom_range=(0.2,";
    "Fxn:np.random.random((32,";
    "Fxn:generator.fit(x)";
    "Fxn:np.random.random((32,";
    "Fxn:generator.fit(x)";
    "Fxn:np.random.random((32,";
    "Fxn:generator.fit(x)";
    "Fxn:image.ImageDataGenerator(";
    "Fxn:np.random.random((32,";
    "Fxn:generator.fit(x)";
    "Fxn:np.random.random((32,";
    "Fxn:generator.fit(x)";
    "Fxn:np.random.random((32,";
    "Fxn:generator.fit(x)";
    "Fxn:test_directory_iterator";
    "Fxn:range(num_classes):";
    "Fxn:'class-{}'.format(cl)";
    "Fxn:os.path.join(class_directory,";
    "Fxn:os.path.join(class_directory,";
    "Fxn:os.path.join(class_directory,";
    "Fxn:tmpdir.join(path).mkdir()";
    "Fxn:paths.append(classpaths)";
    "Fxn:preprocess_test";
    "Fxn:img.resize((1,";
    "Fxn:image.ImageDataGenerator(preprocessing_function=preprocess_test)";
    "Fxn:generator.flow_from_directory(str(tmpdir),";
    "Fxn:target_size=(26,";
    "Fxn:image.load_img(os.path.join(dir_seq.directory,";
    "Fxn:preprocess_test(test_x1)";
    "Fxn:test_x1.resize((26,";
    "Fxn:image.img_to_array(test_x1)";
    "Fxn:dir_seq.image_data_generator.random_transform(test_x1)";
    "Fxn:dir_seq.image_data_generator.standardize(test_x1)";
    "Fxn:test_directory_iterator_class_mode_input";
    "Fxn:tmpdir.join('class-1').mkdir()";
    "Fxn:str(tmpdir";
    "Fxn:'image-{}.jpg'.format(count))";
    "Fxn:im.save(filename)";
    "Fxn:image.ImageDataGenerator()";
    "Fxn:generator.flow_from_directory(str(tmpdir),";
    "Fxn:next(dir_iterator)";
    "Fxn:assert(batch[0].shape";
    "Fxn:assert(input_img[0][0][0]";
    "Fxn:@pytest.mark.parametrize('validation_split,num_training',";
    "Fxn:test_directory_iterator_with_validation_split";
    "Fxn:tempfile.mkdtemp(prefix='test_images')";
    "Fxn:range(num_classes):";
    "Fxn:'class-{}'.format(cl)";
    "Fxn:os.path.join(class_directory,";
    "Fxn:os.path.join(class_directory,";
    "Fxn:os.path.join(class_directory,";
    "Fxn:os.mkdir(os.path.join(tmp_folder,";
    "Fxn:paths.append(classpaths)";
    "Fxn:test_img_utils";
    "Fxn:np.random.random((3,";
    "Fxn:image.array_to_img(x,";
    "Fxn:image.img_to_array(img,";
    "Fxn:np.random.random((1,";
    "Fxn:image.array_to_img(x,";
    "Fxn:image.img_to_array(img,";
    "Fxn:np.random.random((height,";
    "Fxn:image.array_to_img(x,";
    "Fxn:image.img_to_array(img,";
    "Fxn:np.random.random((height,";
    "Fxn:image.array_to_img(x,";
    "Fxn:image.img_to_array(img,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:np.random.random((height,";
    "Fxn:image.array_to_img(x,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:np.random.random((height,";
    "Fxn:image.array_to_img(x,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:np.random.random((height,";
    "Fxn:image.array_to_img(x,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:np.random.random((height,";
    "Fxn:image.img_to_array(x,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:np.random.random((height,";
    "Fxn:image.img_to_array(x,";
    "Fxn:test_random_transforms";
    "Fxn:np.random.random((2,";
    "Fxn:image.random_rotation(x,";
    "Fxn:image.random_shift(x,";
    "Fxn:image.random_shear(x,";
    "Fxn:image.random_zoom(x,";
    "Fxn:image.random_channel_shift(x,";
    "Fxn:test_batch_standardize";
    "Fxn:img_list.append(image.img_to_array(im)[None,";
    "Fxn:np.vstack(img_list)";
    "Fxn:image.ImageDataGenerator(";
    "Fxn:brightness_range=(1,";
    "Fxn:generator.fit(images,";
    "Fxn:np.copy(images)";
    "Fxn:enumerate(transformed):";
    "Fxn:generator.random_transform(im)";
    "Fxn:generator.standardize(transformed)";
    "Fxn:test_load_img";
    "Fxn:str(tmpdir";
    "Fxn:np.array(255";
    "Fxn:np.random.rand(100,";
    "Fxn:image.array_to_img(original_im_array,";
    "Fxn:original_im.save(filename)";
    "Fxn:image.load_img(filename)";
    "Fxn:image.img_to_array(loaded_im)";
    "Fxn:np.all(loaded_im_array";
    "Fxn:image.load_img(filename,";
    "Fxn:image.img_to_array(loaded_im)";
    "Fxn:image.load_img(filename,";
    "Fxn:target_size=(100,";
    "Fxn:image.img_to_array(loaded_im)";
    "Fxn:np.all(loaded_im_array";
    "Fxn:image.load_img(filename,";
    "Fxn:target_size=(100,";
    "Fxn:image.img_to_array(loaded_im)";
    "Fxn:image.load_img(filename,";
    "Fxn:target_size=(25,";
    "Fxn:image.img_to_array(loaded_im)";
    "Fxn:image.load_img(filename,";
    "Fxn:target_size=(25,";
    "Fxn:image.img_to_array(loaded_im)";
    "Fxn:image.load_img(filename,";
    "Fxn:target_size=(25,";
    "Fxn:image.img_to_array(loaded_im_nearest)";
    "Fxn:np.any(loaded_im_array_nearest";
    "Fxn:image.load_img(filename,";
    "Fxn:pytest.raises(ValueError):";
    "Fxn:image.load_img(filename,";
    "Fxn:target_size=(25,";
    "Fxn:pytest.main([__file__])";
    "/tests/keras/preprocessing/sequence_test.py";
    "Import:numpy";
    "Import:assert_allclose";
    "Import:pytest";
    "Import:pad_sequences";
    "Import:make_sampling_table";
    "Import:skipgrams";
    "Import:_remove_long_seq";
    "Import:TimeseriesGenerator";
    "Fxn:test_pad_sequences";
    "Fxn:test_pad_sequences_vector";
    "Fxn:test_make_sampling_table";
    "Fxn:test_skipgrams";
    "Fxn:test_remove_long_seq";
    "Fxn:test_TimeseriesGenerator";
    "/tests/keras/preprocessing/text_test.py";
    "Import:numpy";
    "Import:pytest";
    "Import:Tokenizer,";
    "Fxn:test_one_hot";
    "Fxn:test_hashing_trick_hash";
    "Fxn:test_hashing_trick_md5";
    "Fxn:test_tokenizer";
    "Fxn:test_sequential_fit";
    "Fxn:test_text_to_word_sequence";
    "Fxn:test_text_to_word_sequence_multichar_split";
    "Fxn:test_text_to_word_sequence_unicode";
    "Fxn:test_text_to_word_sequence_unicode_multichar_split";
    "Fxn:test_tokenizer_unicode";
    "Fxn:test_tokenizer_oov_flag";
    "/tests/keras/utils/conv_utils_test.py";
    "Import:pytest";
    "Import:numpy";
    "Import:conv_utils";
    "Fxn:test_normalize_tuple";
    "Fxn:test_invalid_data_format";
    "Fxn:test_invalid_padding";
    "Fxn:test_invalid_convert_kernel";
    "Fxn:test_conv_output_length";
    "Fxn:test_conv_input_length";
    "Fxn:test_deconv_length";
    "/tests/keras/utils/data_utils_test.py";
    "Import:import";
    "Import:sys";
    "Import:tarfile";
    "Import:threading";
    "Import:zipfile";
    "Import:cycle";
    "Import:multiprocessing";
    "Import:numpy";
    "Import:pytest";
    "Import:six";
    "Import:urljoin";
    "Import:pathname2url";
    "Import:GeneratorEnqueuer";
    "Import:OrderedEnqueuer";
    "Import:Sequence";
    "Import:_hash_file";
    "Import:get_file";
    "Import:validate_file";
    "Fxn:next";
    "Fxn:use_spawn";
    "Fxn:wrapper";
    "Fxn:in_tmpdir";
    "Fxn:test_data_utils";
    "Fxn:__init__";
    "Fxn:__iter__";
    "Fxn:__next__";
    "Fxn:next";
    "Fxn:threadsafe_generator";
    "Fxn:g";
    "class:DummySequence(Sequence):";
    "Fxn:__init__";
    "Fxn:__getitem__";
    "Fxn:np.ones(self.shape,";
    "Fxn:__len__";
    "Fxn:on_epoch_end";
    "class:FaultSequence(Sequence):";
    "Fxn:__getitem__";
    "Fxn:IndexError(item,";
    "Fxn:__len__";
    "Fxn:on_epoch_end";
    "Fxn:create_generator_from_sequence_threads";
    "Fxn:cycle(range(len(ds))):";
    "Fxn:create_generator_from_sequence_pcs";
    "Fxn:cycle(range(len(ds))):";
    "Fxn:test_generator_enqueuer_threads";
    "Fxn:GeneratorEnqueuer(create_generator_from_sequence_threads(";
    "Fxn:DummySequence([3,";
    "Fxn:enqueuer.start(3,";
    "Fxn:enqueuer.get()";
    "Fxn:range(100):";
    "Fxn:acc.append(int(next(gen_output)[0,";
    "Fxn:len(set(acc)";
    "Fxn:set(range(100)))";
    "Fxn:enqueuer.stop()";
    "Fxn:test_generator_enqueuer_processes";
    "Fxn:GeneratorEnqueuer(create_generator_from_sequence_pcs(";
    "Fxn:DummySequence([3,";
    "Fxn:enqueuer.start(3,";
    "Fxn:enqueuer.get()";
    "Fxn:range(100):";
    "Fxn:acc.append(int(next(gen_output)[0,";
    "Fxn:list(range(100)),";
    "Fxn:enqueuer.stop()";
    "Fxn:test_generator_enqueuer_fail_threads";
    "Fxn:GeneratorEnqueuer(create_generator_from_sequence_threads(";
    "Fxn:FaultSequence()),";
    "Fxn:enqueuer.start(3,";
    "Fxn:enqueuer.get()";
    "Fxn:pytest.raises(IndexError):";
    "Fxn:next(gen_output)";
    "Fxn:test_generator_enqueuer_fail_processes";
    "Fxn:GeneratorEnqueuer(create_generator_from_sequence_pcs(";
    "Fxn:FaultSequence()),";
    "Fxn:enqueuer.start(3,";
    "Fxn:enqueuer.get()";
    "Fxn:pytest.raises(IndexError):";
    "Fxn:next(gen_output)";
    "Fxn:test_ordered_enqueuer_threads";
    "Fxn:OrderedEnqueuer(DummySequence([3,";
    "Fxn:enqueuer.start(3,";
    "Fxn:enqueuer.get()";
    "Fxn:range(100):";
    "Fxn:acc.append(next(gen_output)[0,";
    "Fxn:list(range(100)),";
    "Fxn:enqueuer.stop()";
    "Fxn:test_ordered_enqueuer_threads_not_ordered";
    "Fxn:OrderedEnqueuer(DummySequence([3,";
    "Fxn:enqueuer.start(3,";
    "Fxn:enqueuer.get()";
    "Fxn:range(100):";
    "Fxn:acc.append(next(gen_output)[0,";
    "Fxn:list(range(100)),";
    "Fxn:enqueuer.stop()";
    "Fxn:test_ordered_enqueuer_processes";
    "Fxn:OrderedEnqueuer(DummySequence([3,";
    "Fxn:enqueuer.start(3,";
    "Fxn:enqueuer.get()";
    "Fxn:range(100):";
    "Fxn:acc.append(next(gen_output)[0,";
    "Fxn:list(range(100)),";
    "Fxn:enqueuer.stop()";
    "Fxn:test_ordered_enqueuer_fail_threads";
    "Fxn:OrderedEnqueuer(FaultSequence(),";
    "Fxn:enqueuer.start(3,";
    "Fxn:enqueuer.get()";
    "Fxn:pytest.raises(StopIteration):";
    "Fxn:next(gen_output)";
    "Fxn:test_on_epoch_end_processes";
    "Fxn:OrderedEnqueuer(DummySequence([3,";
    "Fxn:enqueuer.start(3,";
    "Fxn:enqueuer.get()";
    "Fxn:range(200):";
    "Fxn:acc.append(next(gen_output)[0,";
    "Fxn:list([k";
    "Fxn:range(100)]),";
    "Fxn:enqueuer.stop()";
    "Fxn:test_context_switch";
    "Fxn:OrderedEnqueuer(DummySequence([3,";
    "Fxn:OrderedEnqueuer(DummySequence([3,";
    "Fxn:enqueuer.start(3,";
    "Fxn:enqueuer2.start(3,";
    "Fxn:enqueuer.get()";
    "Fxn:enqueuer2.get()";
    "Fxn:range(100):";
    "Fxn:acc.append(next(gen_output)[0,";
    "Fxn:range(100):";
    "Fxn:acc.append(next(gen_output2)[0,";
    "Fxn:next(gen_output)[0,";
    "Fxn:next(gen_output)[0,";
    "Fxn:next(gen_output2)[0,";
    "Fxn:next(gen_output2)[0,";
    "Fxn:enqueuer.stop()";
    "Fxn:enqueuer2.stop()";
    "Fxn:test_on_epoch_end_threads";
    "Fxn:OrderedEnqueuer(DummySequence([3,";
    "Fxn:enqueuer.start(3,";
    "Fxn:enqueuer.get()";
    "Fxn:range(100):";
    "Fxn:acc.append(next(gen_output)[0,";
    "Fxn:range(100):";
    "Fxn:acc.append(next(gen_output)[0,";
    "Fxn:list([k";
    "Fxn:range(100)]),";
    "Fxn:enqueuer.stop()";
    "Fxn:test_ordered_enqueuer_fail_processes";
    "Fxn:OrderedEnqueuer(FaultSequence(),";
    "Fxn:enqueuer.start(3,";
    "Fxn:enqueuer.get()";
    "Fxn:pytest.raises(StopIteration):";
    "Fxn:next(gen_output)";
    "Fxn:create_finite_generator_from_sequence_threads";
    "Fxn:range(len(ds)):";
    "Fxn:create_finite_generator_from_sequence_pcs";
    "Fxn:range(len(ds)):";
    "Fxn:test_finite_generator_enqueuer_threads";
    "Fxn:GeneratorEnqueuer(create_finite_generator_from_sequence_threads(";
    "Fxn:DummySequence([3,";
    "Fxn:enqueuer.start(3,";
    "Fxn:enqueuer.get()";
    "Fxn:acc.append(int(output[0,";
    "Fxn:set(acc)";
    "Fxn:set(range(100)),";
    "Fxn:enqueuer.stop()";
    "Fxn:test_finite_generator_enqueuer_processes";
    "Fxn:GeneratorEnqueuer(create_finite_generator_from_sequence_pcs(";
    "Fxn:DummySequence([3,";
    "Fxn:enqueuer.start(3,";
    "Fxn:enqueuer.get()";
    "Fxn:acc.append(int(output[0,";
    "Fxn:list(range(100)),";
    "Fxn:enqueuer.stop()";
    "Fxn:pytest.main([__file__])";
    "/tests/keras/utils/generic_utils_test.py";
    "Import:sys";
    "Import:pytest";
    "Import:numpy";
    "Import:marshal";
    "Import:custom_object_scope";
    "Import:has_arg";
    "Import:Progbar";
    "Import:func_dump";
    "Import:func_load";
    "Import:keras_test";
    "Import:activations";
    "Import:regularizers";
    "Fxn:test_progbar";
    "Fxn:test_custom_objects_scope";
    "Fxn:custom_fn";
    "class:CustomClass(object):";
    "Fxn:test_has_arg";
    "Fxn:isinstance(fn,";
    "Fxn:dict()";
    "Fxn:exec('def";
    "Fxn:pass'.format(fn),";
    "Fxn:pytest.skip('Function";
    "Fxn:context.pop('__builtins__',";
    "Fxn:context.values()";
    "Fxn:has_arg(fn,";
    "Fxn:@pytest.mark.xfail(sys.version_info";
    "Fxn:test_has_arg_positional_only";
    "Fxn:has_arg(pow,";
    "Fxn:@pytest.mark.parametrize(";
    "Fxn:test_func_dump_and_load";
    "Fxn:test_func";
    "Fxn:get_test_func";
    "Fxn:test_func";
    "Fxn:get_test_func()";
    "Fxn:Exception('Unknown";
    "Fxn:func_dump(test_func)";
    "Fxn:func_load(serialized)";
    "Fxn:test_func_dump_and_load_closure";
    "Fxn:func_dump(test_func)";
    "Fxn:func_load(serialized,";
    "Fxn:@pytest.mark.parametrize(";
    "Fxn:test_func_dump_and_load_backwards_compat";
    "Fxn:marshal.dumps(test_func.__code__).decode('raw_unicode_escape')";
    "Fxn:func_load(serialized,";
    "Fxn:pytest.main([__file__])";
    "/tests/keras/utils/io_utils_test.py";
    "Import:import";
    "Import:sys";
    "Import:pytest";
    "Import:Sequential";
    "Import:Dense";
    "Import:HDF5Matrix";
    "Import:ask_to_proceed_with_overwrite";
    "Import:numpy";
    "Import:six";
    "Import:warnings";
    "Import:h5py";
    "Import:patch";
    "Import:patch";
    "Fxn:in_tmpdir";
    "Fxn:create_dataset";
    "Fxn:test_io_utils";
    "Fxn:test_ask_to_proceed_with_overwrite";
    "/tests/keras/utils/layer_utils_test.py";
    "Import:pytest";
    "Import:numpy";
    "Import:assert_allclose";
    "Import:backend";
    "Import:Conv2D";
    "Import:Dense";
    "Import:Flatten";
    "Import:Sequential";
    "Import:layer_utils";
    "Import:keras_test";
    "Fxn:test_convert_weights";
    "Fxn:get_model";
    "/tests/keras/utils/multi_gpu_test.py";
    "Import:print_function";
    "Import:keras";
    "Import:backend";
    "Import:multi_gpu_model";
    "Import:numpy";
    "Import:pytest";
    "Import:time";
    "Import:tensorflow";
    "Import:ImageDataGenerator";
    "Fxn:multi_gpu_test_simple_model";
    "Fxn:multi_gpu_test_multi_io_model";
    "Fxn:multi_gpu_test_invalid_devices";
    "Fxn:multi_gpu_application_np_array_benchmark";
    "Fxn:multi_gpu_application_folder_generator_benchmark";
    "/tests/keras/utils/np_utils_test.py";
    "Import:numpy";
    "Import:pytest";
    "Import:to_categorical";
    "Fxn:test_to_categorical";
    "/tests/keras/utils/vis_utils_test.py";
    "Import:pytest";
    "Import:import";
    "Import:sys";
    "Import:numpy";
    "Import:Conv2D";
    "Import:Dense";
    "Import:Flatten";
    "Import:LSTM";
    "Import:TimeDistributed";
    "Import:Sequential";
    "Import:vis_utils";
    "Fxn:test_plot_model";
    "/tests/keras/wrappers/scikit_learn_test.py";
    "Import:pytest";
    "Import:numpy";
    "Import:get_test_data";
    "Import:Sequential";
    "Import:Dense,";
    "Import:KerasClassifier,";
    "Fxn:build_fn_clf";
    "Fxn:test_classify_build_fn";
    "Fxn:test_classify_class_build_fn";
    "class:ClassBuildFnClf(object):";
    "Fxn:__call__";
    "Fxn:build_fn_clf(hidden_dims)";
    "Fxn:KerasClassifier(";
    "Fxn:build_fn=ClassBuildFnClf(),";
    "Fxn:assert_classification_works(clf)";
    "Fxn:assert_string_classification_works(clf)";
    "Fxn:test_classify_inherit_class_build_fn";
    "class:InheritClassBuildFnClf(KerasClassifier):";
    "Fxn:__call__";
    "Fxn:build_fn_clf(hidden_dims)";
    "Fxn:InheritClassBuildFnClf(";
    "Fxn:assert_classification_works(clf)";
    "Fxn:assert_string_classification_works(clf)";
    "Fxn:assert_classification_works";
    "Fxn:clf.fit(X_train,";
    "Fxn:sample_weight=np.ones(X_train.shape[0]),";
    "Fxn:clf.score(X_train,";
    "Fxn:np.isscalar(score)";
    "Fxn:np.isfinite(score)";
    "Fxn:clf.predict(X_test,";
    "Fxn:np.unique(preds):";
    "Fxn:range(num_classes)";
    "Fxn:clf.predict_proba(X_test,";
    "Fxn:np.allclose(np.sum(proba,";
    "Fxn:np.ones(num_test))";
    "Fxn:assert_string_classification_works";
    "Fxn:['cls{}'.format(x)";
    "Fxn:range(num_classes)]";
    "Fxn:np.array(string_classes)[y_train]";
    "Fxn:clf.fit(X_train,";
    "Fxn:clf.score(X_train,";
    "Fxn:np.isscalar(score)";
    "Fxn:np.isfinite(score)";
    "Fxn:clf.predict(X_test,";
    "Fxn:np.unique(preds):";
    "Fxn:clf.predict_proba(X_test,";
    "Fxn:np.allclose(np.sum(proba,";
    "Fxn:np.ones(num_test))";
    "Fxn:build_fn_reg";
    "Fxn:Sequential()";
    "Fxn:model.add(Dense(input_dim,";
    "Fxn:input_shape=(input_dim,)))";
    "Fxn:model.add(Activation('relu'))";
    "Fxn:model.add(Dense(hidden_dims))";
    "Fxn:model.add(Activation('relu'))";
    "Fxn:model.add(Dense(1))";
    "Fxn:model.add(Activation('linear'))";
    "Fxn:model.compile(optimizer='sgd',";
    "Fxn:test_regression_build_fn";
    "Fxn:KerasRegressor(";
    "Fxn:assert_regression_works(reg)";
    "Fxn:test_regression_class_build_fn";
    "class:ClassBuildFnReg(object):";
    "Fxn:__call__";
    "Fxn:build_fn_reg(hidden_dims)";
    "Fxn:KerasRegressor(";
    "Fxn:build_fn=ClassBuildFnReg(),";
    "Fxn:assert_regression_works(reg)";
    "Fxn:test_regression_inherit_class_build_fn";
    "class:InheritClassBuildFnReg(KerasRegressor):";
    "Fxn:__call__";
    "Fxn:build_fn_reg(hidden_dims)";
    "Fxn:InheritClassBuildFnReg(";
    "Fxn:assert_regression_works(reg)";
    "Fxn:assert_regression_works";
    "Fxn:reg.fit(X_train,";
    "Fxn:reg.score(X_train,";
    "Fxn:np.isscalar(score)";
    "Fxn:np.isfinite(score)";
    "Fxn:reg.predict(X_test,";
    "Fxn:pytest.main([__file__])";
    "Fxn:dict(hidden_dims";
    "Fxn:Inherit_class_build_fn_clf()";
    "Fxn:grid_search.GridSearchCV(classifier,";
    "Fxn:clf.fit(X_train,";
    "Fxn:dict(hidden_dims";
    "Fxn:Inherit_class_build_fn_reg()";
    "Fxn:grid_search.GridSearchCV(regressor,";
    "Fxn:reg.fit(X_train_reg,";
    "Import:grid_search";
    "tensorflow" -> "/setup.py";
    "tensorflow" -> "/docs/autogen.py";
    "tensorflow" -> "/examples/addition_rnn.py";
    "tensorflow" -> "/examples/antirectifier.py";
    "tensorflow" -> "/examples/babi_memnn.py";
    "tensorflow" -> "/examples/babi_rnn.py";
    "tensorflow" -> "/examples/cifar10_cnn.py";
    "tensorflow" -> "/examples/cifar10_cnn_capsule.py";
    "tensorflow" -> "/examples/cifar10_cnn_tfaugment2d.py";
    "tensorflow" -> "/examples/cifar10_resnet.py";
    "tensorflow" -> "/examples/conv_filter_visualization.py";
    "tensorflow" -> "/examples/conv_lstm.py";
    "tensorflow" -> "/examples/deep_dream.py";
    "tensorflow" -> "/examples/image_ocr.py";
    "tensorflow" -> "/examples/imdb_bidirectional_lstm.py";
    "tensorflow" -> "/examples/imdb_cnn.py";
    "tensorflow" -> "/examples/imdb_cnn_lstm.py";
    "tensorflow" -> "/examples/imdb_fasttext.py";
    "tensorflow" -> "/examples/imdb_lstm.py";
    "tensorflow" -> "/examples/lstm_seq2seq.py";
    "tensorflow" -> "/examples/lstm_seq2seq_restore.py";
    "tensorflow" -> "/examples/lstm_stateful.py";
    "tensorflow" -> "/examples/lstm_text_generation.py";
    "tensorflow" -> "/examples/mnist_acgan.py";
    "tensorflow" -> "/examples/mnist_cnn.py";
    "tensorflow" -> "/examples/mnist_dataset_api.py";
    "tensorflow" -> "/examples/mnist_denoising_autoencoder.py";
    "tensorflow" -> "/examples/mnist_hierarchical_rnn.py";
    "tensorflow" -> "/examples/mnist_irnn.py";
    "tensorflow" -> "/examples/mnist_mlp.py";
    "tensorflow" -> "/examples/mnist_net2net.py";
    "tensorflow" -> "/examples/mnist_siamese.py";
    "tensorflow" -> "/examples/mnist_sklearn_wrapper.py";
    "tensorflow" -> "/examples/mnist_swwae.py";
    "tensorflow" -> "/examples/mnist_tfrecord.py";
    "tensorflow" -> "/examples/mnist_transfer_cnn.py";
    "tensorflow" -> "/examples/neural_doodle.py";
    "tensorflow" -> "/examples/neural_style_transfer.py";
    "tensorflow" -> "/examples/pretrained_word_embeddings.py";
    "tensorflow" -> "/examples/reuters_mlp.py";
    "tensorflow" -> "/examples/reuters_mlp_relu_vs_selu.py";
    "tensorflow" -> "/examples/variational_autoencoder.py";
    "tensorflow" -> "/examples/variational_autoencoder_deconv.py";
    "tensorflow" -> "/keras/activations.py";
    "tensorflow" -> "/keras/callbacks.py";
    "tensorflow" -> "/keras/constraints.py";
    "tensorflow" -> "/keras/initializers.py";
    "tensorflow" -> "/keras/losses.py";
    "tensorflow" -> "/keras/metrics.py";
    "tensorflow" -> "/keras/models.py";
    "tensorflow" -> "/keras/objectives.py";
    "tensorflow" -> "/keras/optimizers.py";
    "tensorflow" -> "/keras/regularizers.py";
    "tensorflow" -> "/keras/__init__.py";
    "tensorflow" -> "/keras/applications/densenet.py";
    "tensorflow" -> "/keras/applications/imagenet_utils.py";
    "tensorflow" -> "/keras/applications/inception_resnet_v2.py";
    "tensorflow" -> "/keras/applications/inception_v3.py";
    "tensorflow" -> "/keras/applications/mobilenet.py";
    "tensorflow" -> "/keras/applications/nasnet.py";
    "tensorflow" -> "/keras/applications/resnet50.py";
    "tensorflow" -> "/keras/applications/vgg16.py";
    "tensorflow" -> "/keras/applications/vgg19.py";
    "tensorflow" -> "/keras/applications/xception.py";
    "tensorflow" -> "/keras/applications/__init__.py";
    "tensorflow" -> "/keras/backend/cntk_backend.py";
    "tensorflow" -> "/keras/backend/common.py";
    "tensorflow" -> "/keras/backend/tensorflow_backend.py";
    "tensorflow" -> "/keras/backend/theano_backend.py";
    "tensorflow" -> "/keras/backend/__init__.py";
    "tensorflow" -> "/keras/datasets/boston_housing.py";
    "tensorflow" -> "/keras/datasets/cifar.py";
    "tensorflow" -> "/keras/datasets/cifar10.py";
    "tensorflow" -> "/keras/datasets/cifar100.py";
    "tensorflow" -> "/keras/datasets/fashion_mnist.py";
    "tensorflow" -> "/keras/datasets/imdb.py";
    "tensorflow" -> "/keras/datasets/mnist.py";
    "tensorflow" -> "/keras/datasets/reuters.py";
    "tensorflow" -> "/keras/datasets/__init__.py";
    "tensorflow" -> "/keras/engine/topology.py";
    "tensorflow" -> "/keras/engine/training.py";
    "tensorflow" -> "/keras/engine/__init__.py";
    "tensorflow" -> "/keras/layers/advanced_activations.py";
    "tensorflow" -> "/keras/layers/convolutional.py";
    "tensorflow" -> "/keras/layers/convolutional_recurrent.py";
    "tensorflow" -> "/keras/layers/core.py";
    "tensorflow" -> "/keras/layers/cudnn_recurrent.py";
    "tensorflow" -> "/keras/layers/embeddings.py";
    "tensorflow" -> "/keras/layers/local.py";
    "tensorflow" -> "/keras/layers/merge.py";
    "tensorflow" -> "/keras/layers/noise.py";
    "tensorflow" -> "/keras/layers/normalization.py";
    "tensorflow" -> "/keras/layers/pooling.py";
    "tensorflow" -> "/keras/layers/recurrent.py";
    "tensorflow" -> "/keras/layers/wrappers.py";
    "tensorflow" -> "/keras/layers/__init__.py";
    "tensorflow" -> "/keras/legacy/interfaces.py";
    "tensorflow" -> "/keras/legacy/layers.py";
    "tensorflow" -> "/keras/legacy/models.py";
    "tensorflow" -> "/keras/legacy/__init__.py";
    "tensorflow" -> "/keras/preprocessing/image.py";
    "tensorflow" -> "/keras/preprocessing/sequence.py";
    "tensorflow" -> "/keras/preprocessing/text.py";
    "tensorflow" -> "/keras/preprocessing/__init__.py";
    "tensorflow" -> "/keras/utils/conv_utils.py";
    "tensorflow" -> "/keras/utils/data_utils.py";
    "tensorflow" -> "/keras/utils/generic_utils.py";
    "tensorflow" -> "/keras/utils/io_utils.py";
    "tensorflow" -> "/keras/utils/layer_utils.py";
    "tensorflow" -> "/keras/utils/multi_gpu_utils.py";
    "tensorflow" -> "/keras/utils/np_utils.py";
    "tensorflow" -> "/keras/utils/test_utils.py";
    "tensorflow" -> "/keras/utils/vis_utils.py";
    "tensorflow" -> "/keras/utils/__init__.py";
    "tensorflow" -> "/keras/wrappers/scikit_learn.py";
    "tensorflow" -> "/keras/wrappers/__init__.py";
    "tensorflow" -> "/tests/test_documentation.py";
    "tensorflow" -> "/tests/test_dynamic_trainability.py";
    "tensorflow" -> "/tests/test_loss_masking.py";
    "tensorflow" -> "/tests/test_loss_weighting.py";
    "tensorflow" -> "/tests/test_model_saving.py";
    "tensorflow" -> "/tests/test_multiprocessing.py";
    "tensorflow" -> "/tests/integration_tests/test_datasets.py";
    "tensorflow" -> "/tests/integration_tests/test_image_data_tasks.py";
    "tensorflow" -> "/tests/integration_tests/test_temporal_data_tasks.py";
    "tensorflow" -> "/tests/integration_tests/test_vector_data_tasks.py";
    "tensorflow" -> "/tests/keras/activations_test.py";
    "tensorflow" -> "/tests/keras/constraints_test.py";
    "tensorflow" -> "/tests/keras/initializers_test.py";
    "tensorflow" -> "/tests/keras/losses_test.py";
    "tensorflow" -> "/tests/keras/metrics_test.py";
    "tensorflow" -> "/tests/keras/optimizers_test.py";
    "tensorflow" -> "/tests/keras/regularizers_test.py";
    "tensorflow" -> "/tests/keras/test_callbacks.py";
    "tensorflow" -> "/tests/keras/test_sequential_model.py";
    "tensorflow" -> "/tests/keras/applications/applications_test.py";
    "tensorflow" -> "/tests/keras/applications/imagenet_utils_test.py";
    "tensorflow" -> "/tests/keras/backend/backend_test.py";
    "tensorflow" -> "/tests/keras/engine/test_topology.py";
    "tensorflow" -> "/tests/keras/engine/test_training.py";
    "tensorflow" -> "/tests/keras/layers/advanced_activations_test.py";
    "tensorflow" -> "/tests/keras/layers/convolutional_recurrent_test.py";
    "tensorflow" -> "/tests/keras/layers/convolutional_test.py";
    "tensorflow" -> "/tests/keras/layers/core_test.py";
    "tensorflow" -> "/tests/keras/layers/cudnn_recurrent_test.py";
    "tensorflow" -> "/tests/keras/layers/embeddings_test.py";
    "tensorflow" -> "/tests/keras/layers/local_test.py";
    "tensorflow" -> "/tests/keras/layers/merge_test.py";
    "tensorflow" -> "/tests/keras/layers/noise_test.py";
    "tensorflow" -> "/tests/keras/layers/normalization_test.py";
    "tensorflow" -> "/tests/keras/layers/recurrent_test.py";
    "tensorflow" -> "/tests/keras/layers/wrappers_test.py";
    "tensorflow" -> "/tests/keras/legacy/interface_test.py";
    "tensorflow" -> "/tests/keras/legacy/layers_test.py";
    "tensorflow" -> "/tests/keras/legacy/models_test.py";
    "tensorflow" -> "/tests/keras/preprocessing/image_test.py";
    "tensorflow" -> "/tests/keras/preprocessing/sequence_test.py";
    "tensorflow" -> "/tests/keras/preprocessing/text_test.py";
    "tensorflow" -> "/tests/keras/utils/conv_utils_test.py";
    "tensorflow" -> "/tests/keras/utils/data_utils_test.py";
    "tensorflow" -> "/tests/keras/utils/generic_utils_test.py";
    "tensorflow" -> "/tests/keras/utils/io_utils_test.py";
    "tensorflow" -> "/tests/keras/utils/layer_utils_test.py";
    "tensorflow" -> "/tests/keras/utils/multi_gpu_test.py";
    "tensorflow" -> "/tests/keras/utils/np_utils_test.py";
    "tensorflow" -> "/tests/keras/utils/vis_utils_test.py";
    "tensorflow" -> "/tests/keras/wrappers/scikit_learn_test.py";
    "/setup.py" -> "Import:setup";
    "/setup.py" -> "Import:find_packages";
    "/docs/autogen.py" -> "Import:print_function";
    "/docs/autogen.py" -> "Import:unicode_literals";
    "/docs/autogen.py" -> "Import:import";
    "/docs/autogen.py" -> "Import:inspect";
    "/docs/autogen.py" -> "Import:import";
    "/docs/autogen.py" -> "Import:shutil";
    "/docs/autogen.py" -> "Import:utils";
    "/docs/autogen.py" -> "Import:layers";
    "/docs/autogen.py" -> "Import:advanced_activations";
    "/docs/autogen.py" -> "Import:noise";
    "/docs/autogen.py" -> "Import:wrappers";
    "/docs/autogen.py" -> "Import:initializers";
    "/docs/autogen.py" -> "Import:optimizers";
    "/docs/autogen.py" -> "Import:callbacks";
    "/docs/autogen.py" -> "Import:models";
    "/docs/autogen.py" -> "Import:losses";
    "/docs/autogen.py" -> "Import:metrics";
    "/docs/autogen.py" -> "Import:backend";
    "/docs/autogen.py" -> "Import:activations";
    "/docs/autogen.py" -> "Import:preprocessing";
    "/docs/autogen.py" -> "Import:sys";
    "/docs/autogen.py" -> "Fxn:get_earliest_class_that_defined_member";
    "/docs/autogen.py" -> "Fxn:get_classes_ancestors";
    "/docs/autogen.py" -> "Fxn:get_function_signature";
    "/docs/autogen.py" -> "Fxn:get_class_signature";
    "/docs/autogen.py" -> "Fxn:post_process_signature";
    "/docs/autogen.py" -> "Fxn:class_to_docs_link";
    "/docs/autogen.py" -> "Fxn:class_to_source_link";
    "/docs/autogen.py" -> "Fxn:code_snippet";
    "/docs/autogen.py" -> "Fxn:count_leading_spaces";
    "/docs/autogen.py" -> "Fxn:process_docstring";
    "/docs/autogen.py" -> "Fxn:read_file";
    "/examples/addition_rnn.py" -> "Import:print_function";
    "/examples/addition_rnn.py" -> "Import:Sequential";
    "/examples/addition_rnn.py" -> "Import:layers";
    "/examples/addition_rnn.py" -> "Import:numpy";
    "/examples/addition_rnn.py" -> "Import:range";
    "/examples/addition_rnn.py" -> "class:CharacterTable(object):";
    "class:CharacterTable(object):" -> "Fxn:__init__";
    "class:CharacterTable(object):" -> "Fxn:encode";
    "class:CharacterTable(object):" -> "Fxn:decode";
    "Fxn:__init__" -> "Fxn:sorted(set(chars))";
    "Fxn:__init__" -> "Fxn:dict((c,";
    "Fxn:__init__" -> "Fxn:enumerate(self.chars))";
    "Fxn:__init__" -> "Fxn:dict((i,";
    "Fxn:__init__" -> "Fxn:enumerate(self.chars))";
    "Fxn:encode" -> "Fxn:np.zeros((num_rows,";
    "Fxn:encode" -> "Fxn:len(self.chars)))";
    "Fxn:encode" -> "Fxn:enumerate(C):";
    "Fxn:decode" -> "Fxn:x.argmax(axis=-1)";
    "Fxn:decode" -> "Fxn:''.join(self.indices_char[x]";
    "/examples/antirectifier.py" -> "Import:print_function";
    "/examples/antirectifier.py" -> "Import:keras";
    "/examples/antirectifier.py" -> "Import:Sequential";
    "/examples/antirectifier.py" -> "Import:layers";
    "/examples/antirectifier.py" -> "Import:mnist";
    "/examples/antirectifier.py" -> "Import:backend";
    "/examples/antirectifier.py" -> "class:Antirectifier(layers.Layer):";
    "class:Antirectifier(layers.Layer):" -> "Fxn:compute_output_shape";
    "class:Antirectifier(layers.Layer):" -> "Fxn:call";
    "Fxn:compute_output_shape" -> "Fxn:list(input_shape)";
    "Fxn:compute_output_shape" -> "Fxn:len(shape)";
    "Fxn:compute_output_shape" -> "Fxn:tuple(shape)";
    "Fxn:call" -> "Fxn:K.mean(inputs,";
    "Fxn:call" -> "Fxn:K.l2_normalize(inputs,";
    "Fxn:call" -> "Fxn:K.relu(inputs)";
    "Fxn:call" -> "Fxn:K.relu(-inputs)";
    "Fxn:call" -> "Fxn:K.concatenate([pos,";
    "Fxn:call" -> "Fxn:mnist.load_data()";
    "Fxn:call" -> "Fxn:x_train.reshape(60000,";
    "Fxn:call" -> "Fxn:x_test.reshape(10000,";
    "Fxn:call" -> "Fxn:x_train.astype('float32')";
    "Fxn:call" -> "Fxn:x_test.astype('float32')";
    "Fxn:call" -> "Fxn:print(x_train.shape[0],";
    "Fxn:call" -> "Fxn:print(x_test.shape[0],";
    "/examples/babi_memnn.py" -> "Import:print_function";
    "/examples/babi_memnn.py" -> "Import:Sequential,";
    "/examples/babi_memnn.py" -> "Import:Embedding";
    "/examples/babi_memnn.py" -> "Import:Input,";
    "/examples/babi_memnn.py" -> "Import:LSTM";
    "/examples/babi_memnn.py" -> "Import:get_file";
    "/examples/babi_memnn.py" -> "Import:pad_sequences";
    "/examples/babi_memnn.py" -> "Import:reduce";
    "/examples/babi_memnn.py" -> "Import:tarfile";
    "/examples/babi_memnn.py" -> "Import:numpy";
    "/examples/babi_memnn.py" -> "Import:def";
    "/examples/babi_memnn.py" -> "Fxn:tokenize";
    "/examples/babi_memnn.py" -> "Fxn:parse_stories";
    "/examples/babi_memnn.py" -> "Fxn:get_stories";
    "/examples/babi_memnn.py" -> "Fxn:vectorize_stories";
    "/examples/babi_rnn.py" -> "Import:print_function";
    "/examples/babi_rnn.py" -> "Import:reduce";
    "/examples/babi_rnn.py" -> "Import:import";
    "/examples/babi_rnn.py" -> "Import:tarfile";
    "/examples/babi_rnn.py" -> "Import:numpy";
    "/examples/babi_rnn.py" -> "Import:get_file";
    "/examples/babi_rnn.py" -> "Import:Embedding";
    "/examples/babi_rnn.py" -> "Import:layers";
    "/examples/babi_rnn.py" -> "Import:recurrent";
    "/examples/babi_rnn.py" -> "Import:Model";
    "/examples/babi_rnn.py" -> "Import:pad_sequences";
    "/examples/babi_rnn.py" -> "Fxn:tokenize";
    "/examples/babi_rnn.py" -> "Fxn:parse_stories";
    "/examples/babi_rnn.py" -> "Fxn:get_stories";
    "/examples/babi_rnn.py" -> "Fxn:vectorize_stories";
    "/examples/cifar10_cnn.py" -> "Import:print_function";
    "/examples/cifar10_cnn.py" -> "Import:keras";
    "/examples/cifar10_cnn.py" -> "Import:cifar10";
    "/examples/cifar10_cnn.py" -> "Import:ImageDataGenerator";
    "/examples/cifar10_cnn.py" -> "Import:Sequential";
    "/examples/cifar10_cnn.py" -> "Import:Dense,";
    "/examples/cifar10_cnn.py" -> "Import:Conv2D,";
    "/examples/cifar10_cnn.py" -> "Import:batch_size";
    "/examples/cifar10_cnn_capsule.py" -> "Import:print_function";
    "/examples/cifar10_cnn_capsule.py" -> "Import:backend";
    "/examples/cifar10_cnn_capsule.py" -> "Import:Layer";
    "/examples/cifar10_cnn_capsule.py" -> "Import:activations";
    "/examples/cifar10_cnn_capsule.py" -> "Import:utils";
    "/examples/cifar10_cnn_capsule.py" -> "Import:cifar10";
    "/examples/cifar10_cnn_capsule.py" -> "Import:Model";
    "/examples/cifar10_cnn_capsule.py" -> "Import:keras.preprocessing.image";
    "/examples/cifar10_cnn_capsule.py" -> "Import:ImageDataGenerator";
    "/examples/cifar10_cnn_capsule.py" -> "Fxn:squash";
    "/examples/cifar10_cnn_capsule.py" -> "Fxn:softmax";
    "/examples/cifar10_cnn_capsule.py" -> "Fxn:margin_loss";
    "/examples/cifar10_cnn_capsule.py" -> "class:Capsule(Layer):";
    "class:Capsule(Layer):" -> "Fxn:__init__";
    "class:Capsule(Layer):" -> "Fxn:build";
    "class:Capsule(Layer):" -> "Fxn:call";
    "class:Capsule(Layer):" -> "Fxn:compute_output_shape";
    "Fxn:__init__" -> "Fxn:super(Capsule,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:activations.get(activation)";
    "Fxn:build" -> "Fxn:self.add_weight(";
    "Fxn:build" -> "Fxn:shape=(1,";
    "Fxn:build" -> "Fxn:self.add_weight(";
    "Fxn:build" -> "Fxn:shape=(input_num_capsule,";
    "Fxn:call" -> "Fxn:K.batch_dot(outputs,";
    "Fxn:call" -> "Fxn:K.batch_dot(outputs,";
    "Fxn:call" -> "Fxn:K.conv1d(inputs,";
    "Fxn:call" -> "Fxn:K.local_conv1d(inputs,";
    "Fxn:call" -> "Fxn:K.shape(inputs)[0]";
    "Fxn:call" -> "Fxn:K.shape(inputs)[1]";
    "Fxn:call" -> "Fxn:K.reshape(hat_inputs,";
    "Fxn:call" -> "Fxn:K.permute_dimensions(hat_inputs,";
    "Fxn:call" -> "Fxn:K.zeros_like(hat_inputs[:,";
    "Fxn:call" -> "Fxn:range(self.routings):";
    "Fxn:call" -> "Fxn:softmax(b,";
    "Fxn:call" -> "Fxn:K.backend()";
    "Fxn:call" -> "Fxn:K.sum(o,";
    "Fxn:call" -> "Fxn:self.activation(K.batch_dot(c,";
    "Fxn:call" -> "Fxn:K.batch_dot(o,";
    "Fxn:call" -> "Fxn:K.backend()";
    "Fxn:call" -> "Fxn:K.sum(o,";
    "Fxn:compute_output_shape" -> "Fxn:cifar10.load_data()";
    "Fxn:compute_output_shape" -> "Fxn:x_train.astype('float32')";
    "Fxn:compute_output_shape" -> "Fxn:x_test.astype('float32')";
    "Fxn:compute_output_shape" -> "Fxn:utils.to_categorical(y_train,";
    "Fxn:compute_output_shape" -> "Fxn:utils.to_categorical(y_test,";
    "Fxn:compute_output_shape" -> "Fxn:Input(shape=(None,";
    "Fxn:compute_output_shape" -> "Fxn:Conv2D(64,";
    "Fxn:compute_output_shape" -> "Fxn:activation='relu')(input_image)";
    "Fxn:compute_output_shape" -> "Fxn:Conv2D(64,";
    "Fxn:compute_output_shape" -> "Fxn:activation='relu')(x)";
    "Fxn:compute_output_shape" -> "Fxn:AveragePooling2D((2,";
    "Fxn:compute_output_shape" -> "Fxn:Conv2D(128,";
    "Fxn:compute_output_shape" -> "Fxn:activation='relu')(x)";
    "Fxn:compute_output_shape" -> "Fxn:Conv2D(128,";
    "Fxn:compute_output_shape" -> "Fxn:activation='relu')(x)";
    "Fxn:compute_output_shape" -> "Fxn:Reshape((-1,";
    "Fxn:compute_output_shape" -> "Fxn:Capsule(10,";
    "Fxn:compute_output_shape" -> "Fxn:True)(x)";
    "Fxn:compute_output_shape" -> "Fxn:Lambda(lambda";
    "Fxn:compute_output_shape" -> "Fxn:K.sqrt(K.sum(K.square(z),";
    "Fxn:compute_output_shape" -> "Fxn:Model(inputs=input_image,";
    "Fxn:compute_output_shape" -> "Fxn:model.compile(loss=margin_loss,";
    "Fxn:compute_output_shape" -> "Fxn:model.summary()";
    "Fxn:compute_output_shape" -> "Fxn:print('Not";
    "Fxn:compute_output_shape" -> "Fxn:model.fit(";
    "Fxn:compute_output_shape" -> "Fxn:validation_data=(x_test,";
    "Fxn:compute_output_shape" -> "Fxn:print('Using";
    "Fxn:compute_output_shape" -> "Fxn:ImageDataGenerator(";
    "Fxn:compute_output_shape" -> "Fxn:datagen.fit(x_train)";
    "Fxn:compute_output_shape" -> "Fxn:datagen.flow().";
    "Fxn:compute_output_shape" -> "Fxn:model.fit_generator(";
    "Fxn:compute_output_shape" -> "Fxn:datagen.flow(x_train,";
    "Fxn:compute_output_shape" -> "Fxn:validation_data=(x_test,";
    "/examples/cifar10_cnn_tfaugment2d.py" -> "Import:print_function";
    "/examples/cifar10_cnn_tfaugment2d.py" -> "Import:keras";
    "/examples/cifar10_cnn_tfaugment2d.py" -> "Import:cifar10";
    "/examples/cifar10_cnn_tfaugment2d.py" -> "Import:Sequential";
    "/examples/cifar10_cnn_tfaugment2d.py" -> "Import:Dense,";
    "/examples/cifar10_cnn_tfaugment2d.py" -> "Import:Conv2D,";
    "/examples/cifar10_cnn_tfaugment2d.py" -> "Import:backend";
    "/examples/cifar10_cnn_tfaugment2d.py" -> "Import:K.backend()";
    "/examples/cifar10_cnn_tfaugment2d.py" -> "Import:tensorflow";
    "/examples/cifar10_cnn_tfaugment2d.py" -> "Fxn:augment_2d";
    "/examples/cifar10_resnet.py" -> "Import:print_function";
    "/examples/cifar10_resnet.py" -> "Import:keras";
    "/examples/cifar10_resnet.py" -> "Import:Dense,";
    "/examples/cifar10_resnet.py" -> "Import:AveragePooling2D,";
    "/examples/cifar10_resnet.py" -> "Import:Adam";
    "/examples/cifar10_resnet.py" -> "Import:ModelCheckpoint,";
    "/examples/cifar10_resnet.py" -> "Import:ReduceLROnPlateau";
    "/examples/cifar10_resnet.py" -> "Import:ImageDataGenerator";
    "/examples/cifar10_resnet.py" -> "Import:keras";
    "/examples/cifar10_resnet.py" -> "Import:backend";
    "/examples/cifar10_resnet.py" -> "Import:Model";
    "/examples/cifar10_resnet.py" -> "Import:cifar10";
    "/examples/cifar10_resnet.py" -> "Import:numpy";
    "/examples/cifar10_resnet.py" -> "Import:Training";
    "/examples/cifar10_resnet.py" -> "Fxn:lr_schedule";
    "/examples/cifar10_resnet.py" -> "Fxn:resnet_layer";
    "/examples/cifar10_resnet.py" -> "Fxn:resnet_v1";
    "/examples/cifar10_resnet.py" -> "Fxn:resnet_v2";
    "/examples/conv_filter_visualization.py" -> "Import:print_function";
    "/examples/conv_filter_visualization.py" -> "Import:imsave";
    "/examples/conv_filter_visualization.py" -> "Import:numpy";
    "/examples/conv_filter_visualization.py" -> "Import:time";
    "/examples/conv_filter_visualization.py" -> "Import:vgg16";
    "/examples/conv_filter_visualization.py" -> "Import:backend";
    "/examples/conv_filter_visualization.py" -> "Fxn:deprocess_image";
    "/examples/conv_filter_visualization.py" -> "Fxn:normalize";
    "/examples/conv_lstm.py" -> "Import:Sequential";
    "/examples/conv_lstm.py" -> "Import:Conv3D";
    "/examples/conv_lstm.py" -> "Import:ConvLSTM2D";
    "/examples/conv_lstm.py" -> "Import:BatchNormalization";
    "/examples/conv_lstm.py" -> "Import:numpy";
    "/examples/conv_lstm.py" -> "Import:pylab";
    "/examples/conv_lstm.py" -> "Fxn:generate_movies";
    "/examples/deep_dream.py" -> "Import:print_function";
    "/examples/deep_dream.py" -> "Import:load_img,";
    "/examples/deep_dream.py" -> "Import:numpy";
    "/examples/deep_dream.py" -> "Import:scipy";
    "/examples/deep_dream.py" -> "Import:argparse";
    "/examples/deep_dream.py" -> "Import:inception_v3";
    "/examples/deep_dream.py" -> "Import:backend";
    "/examples/deep_dream.py" -> "Fxn:preprocess_image";
    "/examples/deep_dream.py" -> "Fxn:deprocess_image";
    "/examples/deep_dream.py" -> "Fxn:eval_loss_and_grads";
    "/examples/deep_dream.py" -> "Fxn:resize_img";
    "/examples/deep_dream.py" -> "Fxn:gradient_ascent";
    "/examples/deep_dream.py" -> "Fxn:save_img";
    "/examples/image_ocr.py" -> "Import:import";
    "/examples/image_ocr.py" -> "Import:itertools";
    "/examples/image_ocr.py" -> "Import:codecs";
    "/examples/image_ocr.py" -> "Import:import";
    "/examples/image_ocr.py" -> "Import:datetime";
    "/examples/image_ocr.py" -> "Import:cairocffi";
    "/examples/image_ocr.py" -> "Import:editdistance";
    "/examples/image_ocr.py" -> "Import:numpy";
    "/examples/image_ocr.py" -> "Import:ndimage";
    "/examples/image_ocr.py" -> "Import:pylab";
    "/examples/image_ocr.py" -> "Import:backend";
    "/examples/image_ocr.py" -> "Import:Conv2D,";
    "/examples/image_ocr.py" -> "Import:Input,";
    "/examples/image_ocr.py" -> "Import:Reshape,";
    "/examples/image_ocr.py" -> "Import:add,";
    "/examples/image_ocr.py" -> "Import:Model";
    "/examples/image_ocr.py" -> "Import:GRU";
    "/examples/image_ocr.py" -> "Import:SGD";
    "/examples/image_ocr.py" -> "Import:get_file";
    "/examples/image_ocr.py" -> "Import:image";
    "/examples/image_ocr.py" -> "Import:keras.callbacks";
    "/examples/image_ocr.py" -> "Fxn:speckle";
    "/examples/image_ocr.py" -> "Fxn:paint_text";
    "/examples/image_ocr.py" -> "Fxn:shuffle_mats_or_lists";
    "/examples/image_ocr.py" -> "Fxn:text_to_labels";
    "/examples/image_ocr.py" -> "Fxn:labels_to_text";
    "/examples/image_ocr.py" -> "Fxn:is_valid_str";
    "/examples/image_ocr.py" -> "class:TextImageGenerator(keras.callbacks.Callback):";
    "/examples/image_ocr.py" -> "class:VizCallback(keras.callbacks.Callback):";
    "class:TextImageGenerator(keras.callbacks.Callback):" -> "Fxn:__init__";
    "class:TextImageGenerator(keras.callbacks.Callback):" -> "Fxn:get_output_size";
    "class:TextImageGenerator(keras.callbacks.Callback):" -> "Fxn:build_word_list";
    "class:TextImageGenerator(keras.callbacks.Callback):" -> "Fxn:get_batch";
    "class:TextImageGenerator(keras.callbacks.Callback):" -> "Fxn:next_train";
    "class:TextImageGenerator(keras.callbacks.Callback):" -> "Fxn:next_val";
    "class:TextImageGenerator(keras.callbacks.Callback):" -> "Fxn:on_train_begin";
    "class:TextImageGenerator(keras.callbacks.Callback):" -> "Fxn:on_epoch_begin";
    "class:TextImageGenerator(keras.callbacks.Callback):" -> "Fxn:ctc_lambda_func";
    "class:TextImageGenerator(keras.callbacks.Callback):" -> "Fxn:decode_batch";
    "Fxn:__init__" -> "Fxn:self.get_output_size()";
    "Fxn:get_output_size" -> "Fxn:len(alphabet)";
    "Fxn:build_word_list" -> "Fxn:np.ones([self.num_words,";
    "Fxn:build_word_list" -> "Fxn:codecs.open(self.monogram_file,";
    "Fxn:build_word_list" -> "Fxn:len(tmp_string_list)";
    "Fxn:build_word_list" -> "Fxn:int(self.num_words";
    "Fxn:build_word_list" -> "Fxn:line.rstrip()";
    "Fxn:build_word_list" -> "Fxn:len(word)";
    "Fxn:build_word_list" -> "Fxn:tmp_string_list.append(word)";
    "Fxn:build_word_list" -> "Fxn:codecs.open(self.bigram_file,";
    "Fxn:build_word_list" -> "Fxn:f.readlines()";
    "Fxn:build_word_list" -> "Fxn:len(tmp_string_list)";
    "Fxn:build_word_list" -> "Fxn:line.lower().split()";
    "Fxn:build_word_list" -> "Fxn:is_valid_str(word)";
    "Fxn:build_word_list" -> "Fxn:len(word)";
    "Fxn:build_word_list" -> "Fxn:tmp_string_list.append(word)";
    "Fxn:build_word_list" -> "Fxn:len(tmp_string_list)";
    "Fxn:build_word_list" -> "Fxn:IOError('Could";
    "Fxn:build_word_list" -> "Fxn:enumerate(self.string_list):";
    "Fxn:build_word_list" -> "Fxn:len(word)";
    "Fxn:build_word_list" -> "Fxn:0:len(word)]";
    "Fxn:build_word_list" -> "Fxn:text_to_labels(word)";
    "Fxn:build_word_list" -> "Fxn:self.X_text.append(word)";
    "Fxn:build_word_list" -> "Fxn:np.expand_dims(np.array(self.Y_len),";
    "Fxn:get_batch" -> "Fxn:K.image_data_format()";
    "Fxn:get_batch" -> "Fxn:np.ones([size,";
    "Fxn:get_batch" -> "Fxn:np.ones([size,";
    "Fxn:get_batch" -> "Fxn:np.ones([size,";
    "Fxn:get_batch" -> "Fxn:np.zeros([size,";
    "Fxn:get_batch" -> "Fxn:np.zeros([size,";
    "Fxn:get_batch" -> "Fxn:range(size):";
    "Fxn:get_batch" -> "Fxn:K.image_data_format()";
    "Fxn:get_batch" -> "Fxn:self.paint_func('')[0,";
    "Fxn:get_batch" -> "Fxn:self.paint_func('',)[0,";
    "Fxn:get_batch" -> "Fxn:source_str.append('')";
    "Fxn:get_batch" -> "Fxn:K.image_data_format()";
    "Fxn:get_batch" -> "Fxn:self.paint_func(self.X_text[index";
    "Fxn:get_batch" -> "Fxn:self.paint_func(self.X_text[index";
    "Fxn:get_batch" -> "Fxn:source_str.append(self.X_text[index";
    "Fxn:get_batch" -> "Fxn:np.zeros([size])}";
    "Fxn:next_train" -> "Fxn:self.get_batch(self.cur_train_index,";
    "Fxn:next_train" -> "Fxn:shuffle_mats_or_lists(";
    "Fxn:next_val" -> "Fxn:self.get_batch(self.cur_val_index,";
    "Fxn:on_train_begin" -> "Fxn:self.build_word_list(16000,";
    "Fxn:on_train_begin" -> "Fxn:paint_text(text,";
    "Fxn:on_epoch_begin" -> "Fxn:paint_text(text,";
    "Fxn:on_epoch_begin" -> "Fxn:paint_text(text,";
    "Fxn:on_epoch_begin" -> "Fxn:paint_text(text,";
    "Fxn:on_epoch_begin" -> "Fxn:self.build_word_list(32000,";
    "Fxn:ctc_lambda_func" -> "Fxn:K.ctc_batch_cost(labels,";
    "Fxn:decode_batch" -> "Fxn:test_func([word_batch])[0]";
    "Fxn:decode_batch" -> "Fxn:range(out.shape[0]):";
    "Fxn:decode_batch" -> "Fxn:list(np.argmax(out[j,";
    "Fxn:decode_batch" -> "Fxn:itertools.groupby(out_best)]";
    "Fxn:decode_batch" -> "Fxn:labels_to_text(out_best)";
    "Fxn:decode_batch" -> "Fxn:ret.append(outstr)";
    "class:VizCallback(keras.callbacks.Callback):" -> "Fxn:__init__";
    "class:VizCallback(keras.callbacks.Callback):" -> "Fxn:show_edit_distance";
    "class:VizCallback(keras.callbacks.Callback):" -> "Fxn:on_epoch_end";
    "class:VizCallback(keras.callbacks.Callback):" -> "Fxn:train";
    "Fxn:__init__" -> "Fxn:os.path.join(";
    "Fxn:__init__" -> "Fxn:os.path.exists(self.output_dir):";
    "Fxn:__init__" -> "Fxn:os.makedirs(self.output_dir)";
    "Fxn:show_edit_distance" -> "Fxn:next(self.text_img_gen)[0]";
    "Fxn:show_edit_distance" -> "Fxn:min(word_batch['the_input'].shape[0],";
    "Fxn:show_edit_distance" -> "Fxn:decode_batch(self.test_func,";
    "Fxn:show_edit_distance" -> "Fxn:range(num_proc):";
    "Fxn:show_edit_distance" -> "Fxn:editdistance.eval(decoded_res[j],";
    "Fxn:show_edit_distance" -> "Fxn:float(edit_dist)";
    "Fxn:show_edit_distance" -> "Fxn:float(edit_dist)";
    "Fxn:show_edit_distance" -> "Fxn:len(word_batch['source_str'][j])";
    "Fxn:show_edit_distance" -> "Fxn:print('\nOut";
    "Fxn:on_epoch_end" -> "Fxn:self.model.save_weights(os.path.join(self.output_dir,";
    "Fxn:on_epoch_end" -> "Fxn:self.show_edit_distance(256)";
    "Fxn:on_epoch_end" -> "Fxn:next(self.text_img_gen)[0]";
    "Fxn:on_epoch_end" -> "Fxn:decode_batch(self.test_func,";
    "Fxn:on_epoch_end" -> "Fxn:range(self.num_display_words):";
    "Fxn:on_epoch_end" -> "Fxn:pylab.subplot(self.num_display_words";
    "Fxn:on_epoch_end" -> "Fxn:K.image_data_format()";
    "Fxn:on_epoch_end" -> "Fxn:pylab.imshow(the_input.T,";
    "Fxn:on_epoch_end" -> "Fxn:pylab.xlabel('Truth";
    "Fxn:on_epoch_end" -> "Fxn:pylab.gcf()";
    "Fxn:on_epoch_end" -> "Fxn:fig.set_size_inches(10,";
    "Fxn:on_epoch_end" -> "Fxn:pylab.savefig(os.path.join(self.output_dir,";
    "Fxn:on_epoch_end" -> "Fxn:pylab.close()";
    "Fxn:train" -> "Fxn:int(words_per_epoch";
    "Fxn:train" -> "Fxn:K.image_data_format()";
    "Fxn:train" -> "Fxn:os.path.dirname(get_file('wordlists.tgz',";
    "Fxn:train" -> "Fxn:TextImageGenerator(monogram_file=os.path.join(fdir,";
    "Fxn:train" -> "Fxn:bigram_file=os.path.join(fdir,";
    "Fxn:train" -> "Fxn:downsample_factor=(pool_size";
    "Fxn:train" -> "Fxn:Input(name='the_input',";
    "Fxn:train" -> "Fxn:Conv2D(conv_filters,";
    "Fxn:train" -> "Fxn:name='conv1')(input_data)";
    "Fxn:train" -> "Fxn:MaxPooling2D(pool_size=(pool_size,";
    "Fxn:train" -> "Fxn:name='max1')(inner)";
    "Fxn:train" -> "Fxn:Conv2D(conv_filters,";
    "Fxn:train" -> "Fxn:name='conv2')(inner)";
    "Fxn:train" -> "Fxn:MaxPooling2D(pool_size=(pool_size,";
    "Fxn:train" -> "Fxn:name='max2')(inner)";
    "Fxn:train" -> "Fxn:Reshape(target_shape=conv_to_rnn_dims,";
    "Fxn:train" -> "Fxn:name='reshape')(inner)";
    "Fxn:train" -> "Fxn:Dense(time_dense_size,";
    "Fxn:train" -> "Fxn:name='dense1')(inner)";
    "Fxn:train" -> "Fxn:GRU(rnn_size,";
    "Fxn:train" -> "Fxn:name='gru1')(inner)";
    "Fxn:train" -> "Fxn:GRU(rnn_size,";
    "Fxn:train" -> "Fxn:name='gru1_b')(inner)";
    "Fxn:train" -> "Fxn:add([gru_1,";
    "Fxn:train" -> "Fxn:GRU(rnn_size,";
    "Fxn:train" -> "Fxn:name='gru2')(gru1_merged)";
    "Fxn:train" -> "Fxn:GRU(rnn_size,";
    "Fxn:train" -> "Fxn:name='gru2_b')(gru1_merged)";
    "Fxn:train" -> "Fxn:Dense(img_gen.get_output_size(),";
    "Fxn:train" -> "Fxn:name='dense2')(concatenate([gru_2,";
    "Fxn:train" -> "Fxn:Activation('softmax',";
    "Fxn:train" -> "Fxn:name='softmax')(inner)";
    "Fxn:train" -> "Fxn:Model(inputs=input_data,";
    "Fxn:train" -> "Fxn:outputs=y_pred).summary()";
    "Fxn:train" -> "Fxn:Input(name='the_labels',";
    "Fxn:train" -> "Fxn:Input(name='input_length',";
    "Fxn:train" -> "Fxn:Input(name='label_length',";
    "Fxn:train" -> "Fxn:Lambda(ctc_lambda_func,";
    "Fxn:train" -> "Fxn:output_shape=(1,),";
    "Fxn:train" -> "Fxn:name='ctc')([y_pred,";
    "Fxn:train" -> "Fxn:SGD(lr=0.02,";
    "Fxn:train" -> "Fxn:Model(inputs=[input_data,";
    "Fxn:train" -> "Fxn:model.compile(loss={'ctc':";
    "Fxn:train" -> "Fxn:os.path.join(OUTPUT_DIR,";
    "Fxn:train" -> "Fxn:os.path.join(run_name,";
    "Fxn:train" -> "Fxn:model.load_weights(weight_file)";
    "Fxn:train" -> "Fxn:K.function([input_data],";
    "Fxn:train" -> "Fxn:VizCallback(run_name,";
    "Fxn:train" -> "Fxn:img_gen.next_val())";
    "Fxn:train" -> "Fxn:model.fit_generator(generator=img_gen.next_train(),";
    "Fxn:train" -> "Fxn:steps_per_epoch=(words_per_epoch";
    "Fxn:train" -> "Fxn:validation_data=img_gen.next_val(),";
    "Fxn:train" -> "Fxn:datetime.datetime.now().strftime('%Y:%m:%d:%H:%M:%S')";
    "Fxn:train" -> "Fxn:train(run_name,";
    "Fxn:train" -> "Fxn:train(run_name,";
    "/examples/imdb_bidirectional_lstm.py" -> "Import:print_function";
    "/examples/imdb_bidirectional_lstm.py" -> "Import:numpy";
    "/examples/imdb_bidirectional_lstm.py" -> "Import:sequence";
    "/examples/imdb_bidirectional_lstm.py" -> "Import:Sequential";
    "/examples/imdb_bidirectional_lstm.py" -> "Import:Dense,";
    "/examples/imdb_bidirectional_lstm.py" -> "Import:imdb";
    "/examples/imdb_cnn.py" -> "Import:print_function";
    "/examples/imdb_cnn.py" -> "Import:sequence";
    "/examples/imdb_cnn.py" -> "Import:Sequential";
    "/examples/imdb_cnn.py" -> "Import:Dense,";
    "/examples/imdb_cnn.py" -> "Import:Embedding";
    "/examples/imdb_cnn.py" -> "Import:Conv1D,";
    "/examples/imdb_cnn.py" -> "Import:imdb";
    "/examples/imdb_cnn_lstm.py" -> "Import:print_function";
    "/examples/imdb_cnn_lstm.py" -> "Import:sequence";
    "/examples/imdb_cnn_lstm.py" -> "Import:Sequential";
    "/examples/imdb_cnn_lstm.py" -> "Import:Dense,";
    "/examples/imdb_cnn_lstm.py" -> "Import:Embedding";
    "/examples/imdb_cnn_lstm.py" -> "Import:LSTM";
    "/examples/imdb_cnn_lstm.py" -> "Import:Conv1D,";
    "/examples/imdb_cnn_lstm.py" -> "Import:imdb";
    "/examples/imdb_fasttext.py" -> "Import:print_function";
    "/examples/imdb_fasttext.py" -> "Import:numpy";
    "/examples/imdb_fasttext.py" -> "Import:sequence";
    "/examples/imdb_fasttext.py" -> "Import:Sequential";
    "/examples/imdb_fasttext.py" -> "Import:Dense";
    "/examples/imdb_fasttext.py" -> "Import:Embedding";
    "/examples/imdb_fasttext.py" -> "Import:GlobalAveragePooling1D";
    "/examples/imdb_fasttext.py" -> "Import:imdb";
    "/examples/imdb_fasttext.py" -> "Fxn:create_ngram_set";
    "/examples/imdb_fasttext.py" -> "Fxn:add_ngram";
    "/examples/imdb_lstm.py" -> "Import:print_function";
    "/examples/imdb_lstm.py" -> "Import:sequence";
    "/examples/imdb_lstm.py" -> "Import:Sequential";
    "/examples/imdb_lstm.py" -> "Import:Dense,";
    "/examples/imdb_lstm.py" -> "Import:LSTM";
    "/examples/imdb_lstm.py" -> "Import:imdb";
    "/examples/lstm_seq2seq.py" -> "Import:print_function";
    "/examples/lstm_seq2seq.py" -> "Import:Model";
    "/examples/lstm_seq2seq.py" -> "Import:Input,";
    "/examples/lstm_seq2seq.py" -> "Import:numpy";
    "/examples/lstm_seq2seq.py" -> "Fxn:decode_sequence";
    "/examples/lstm_seq2seq_restore.py" -> "Import:print_function";
    "/examples/lstm_seq2seq_restore.py" -> "Import:Model,";
    "/examples/lstm_seq2seq_restore.py" -> "Import:Input";
    "/examples/lstm_seq2seq_restore.py" -> "Import:numpy";
    "/examples/lstm_seq2seq_restore.py" -> "Fxn:decode_sequence";
    "/examples/lstm_stateful.py" -> "Import:print_function";
    "/examples/lstm_stateful.py" -> "Import:numpy";
    "/examples/lstm_stateful.py" -> "Import:matplotlib.pyplot";
    "/examples/lstm_stateful.py" -> "Import:pandas";
    "/examples/lstm_stateful.py" -> "Import:Sequential";
    "/examples/lstm_stateful.py" -> "Import:Dense,";
    "/examples/lstm_stateful.py" -> "Fxn:gen_uniform_amp";
    "/examples/lstm_stateful.py" -> "Fxn:create_model";
    "/examples/lstm_stateful.py" -> "Fxn:split_data";
    "/examples/lstm_text_generation.py" -> "Import:print_function";
    "/examples/lstm_text_generation.py" -> "Import:LambdaCallback";
    "/examples/lstm_text_generation.py" -> "Import:Sequential";
    "/examples/lstm_text_generation.py" -> "Import:Dense,";
    "/examples/lstm_text_generation.py" -> "Import:LSTM";
    "/examples/lstm_text_generation.py" -> "Import:RMSprop";
    "/examples/lstm_text_generation.py" -> "Import:get_file";
    "/examples/lstm_text_generation.py" -> "Import:numpy";
    "/examples/lstm_text_generation.py" -> "Import:random";
    "/examples/lstm_text_generation.py" -> "Import:sys";
    "/examples/lstm_text_generation.py" -> "Import:path";
    "/examples/lstm_text_generation.py" -> "Fxn:sample";
    "/examples/lstm_text_generation.py" -> "Fxn:on_epoch_end";
    "/examples/mnist_acgan.py" -> "Import:print_function";
    "/examples/mnist_acgan.py" -> "Import:defaultdict";
    "/examples/mnist_acgan.py" -> "Import:cPickle";
    "/examples/mnist_acgan.py" -> "Import:pickle";
    "/examples/mnist_acgan.py" -> "Import:Image";
    "/examples/mnist_acgan.py" -> "Import:range";
    "/examples/mnist_acgan.py" -> "Import:mnist";
    "/examples/mnist_acgan.py" -> "Import:layers";
    "/examples/mnist_acgan.py" -> "Import:Input,";
    "/examples/mnist_acgan.py" -> "Import:BatchNormalization";
    "/examples/mnist_acgan.py" -> "Import:LeakyReLU";
    "/examples/mnist_acgan.py" -> "Import:Conv2DTranspose,";
    "/examples/mnist_acgan.py" -> "Import:Sequential,";
    "/examples/mnist_acgan.py" -> "Import:Adam";
    "/examples/mnist_acgan.py" -> "Import:Progbar";
    "/examples/mnist_acgan.py" -> "Import:numpy";
    "/examples/mnist_acgan.py" -> "Fxn:build_generator";
    "/examples/mnist_acgan.py" -> "Fxn:build_discriminator";
    "/examples/mnist_cnn.py" -> "Import:print_function";
    "/examples/mnist_cnn.py" -> "Import:keras";
    "/examples/mnist_cnn.py" -> "Import:mnist";
    "/examples/mnist_cnn.py" -> "Import:Sequential";
    "/examples/mnist_cnn.py" -> "Import:Dense,";
    "/examples/mnist_cnn.py" -> "Import:Conv2D,";
    "/examples/mnist_cnn.py" -> "Import:backend";
    "/examples/mnist_dataset_api.py" -> "Import:numpy";
    "/examples/mnist_dataset_api.py" -> "Import:import";
    "/examples/mnist_dataset_api.py" -> "Import:tempfile";
    "/examples/mnist_dataset_api.py" -> "Import:keras";
    "/examples/mnist_dataset_api.py" -> "Import:backend";
    "/examples/mnist_dataset_api.py" -> "Import:layers";
    "/examples/mnist_dataset_api.py" -> "Import:mnist";
    "/examples/mnist_dataset_api.py" -> "Import:tensorflow";
    "/examples/mnist_dataset_api.py" -> "Import:Dataset";
    "/examples/mnist_dataset_api.py" -> "Fxn:cnn_layers";
    "/examples/mnist_denoising_autoencoder.py" -> "Import:absolute_import";
    "/examples/mnist_denoising_autoencoder.py" -> "Import:division";
    "/examples/mnist_denoising_autoencoder.py" -> "Import:print_function";
    "/examples/mnist_denoising_autoencoder.py" -> "Import:keras";
    "/examples/mnist_denoising_autoencoder.py" -> "Import:Activation,";
    "/examples/mnist_denoising_autoencoder.py" -> "Import:Conv2D,";
    "/examples/mnist_denoising_autoencoder.py" -> "Import:Reshape,";
    "/examples/mnist_denoising_autoencoder.py" -> "Import:Model";
    "/examples/mnist_denoising_autoencoder.py" -> "Import:backend";
    "/examples/mnist_denoising_autoencoder.py" -> "Import:mnist";
    "/examples/mnist_denoising_autoencoder.py" -> "Import:numpy";
    "/examples/mnist_denoising_autoencoder.py" -> "Import:matplotlib.pyplot";
    "/examples/mnist_denoising_autoencoder.py" -> "Import:Image";
    "/examples/mnist_hierarchical_rnn.py" -> "Import:print_function";
    "/examples/mnist_hierarchical_rnn.py" -> "Import:keras";
    "/examples/mnist_hierarchical_rnn.py" -> "Import:mnist";
    "/examples/mnist_hierarchical_rnn.py" -> "Import:Model";
    "/examples/mnist_hierarchical_rnn.py" -> "Import:Input,";
    "/examples/mnist_hierarchical_rnn.py" -> "Import:LSTM";
    "/examples/mnist_irnn.py" -> "Import:print_function";
    "/examples/mnist_irnn.py" -> "Import:keras";
    "/examples/mnist_irnn.py" -> "Import:mnist";
    "/examples/mnist_irnn.py" -> "Import:Sequential";
    "/examples/mnist_irnn.py" -> "Import:Dense,";
    "/examples/mnist_irnn.py" -> "Import:SimpleRNN";
    "/examples/mnist_irnn.py" -> "Import:initializers";
    "/examples/mnist_irnn.py" -> "Import:RMSprop";
    "/examples/mnist_mlp.py" -> "Import:print_function";
    "/examples/mnist_mlp.py" -> "Import:keras";
    "/examples/mnist_mlp.py" -> "Import:mnist";
    "/examples/mnist_mlp.py" -> "Import:Sequential";
    "/examples/mnist_mlp.py" -> "Import:Dense,";
    "/examples/mnist_mlp.py" -> "Import:RMSprop";
    "/examples/mnist_net2net.py" -> "Import:print_function";
    "/examples/mnist_net2net.py" -> "Import:numpy";
    "/examples/mnist_net2net.py" -> "Import:keras";
    "/examples/mnist_net2net.py" -> "Import:backend";
    "/examples/mnist_net2net.py" -> "Import:Sequential";
    "/examples/mnist_net2net.py" -> "Import:Conv2D,";
    "/examples/mnist_net2net.py" -> "Import:SGD";
    "/examples/mnist_net2net.py" -> "Import:mnist";
    "/examples/mnist_net2net.py" -> "Fxn:preprocess_input";
    "/examples/mnist_net2net.py" -> "Fxn:preprocess_output";
    "/examples/mnist_net2net.py" -> "Fxn:wider2net_conv2d";
    "/examples/mnist_net2net.py" -> "Fxn:wider2net_fc";
    "/examples/mnist_net2net.py" -> "Fxn:deeper2net_conv2d";
    "/examples/mnist_net2net.py" -> "Fxn:copy_weights";
    "/examples/mnist_net2net.py" -> "Fxn:make_teacher_model";
    "/examples/mnist_net2net.py" -> "Fxn:make_wider_student_model";
    "/examples/mnist_net2net.py" -> "Fxn:make_deeper_student_model";
    "/examples/mnist_net2net.py" -> "Fxn:net2wider_experiment";
    "/examples/mnist_net2net.py" -> "Fxn:net2deeper_experiment";
    "/examples/mnist_siamese.py" -> "Import:absolute_import";
    "/examples/mnist_siamese.py" -> "Import:print_function";
    "/examples/mnist_siamese.py" -> "Import:numpy";
    "/examples/mnist_siamese.py" -> "Import:random";
    "/examples/mnist_siamese.py" -> "Import:mnist";
    "/examples/mnist_siamese.py" -> "Import:Model";
    "/examples/mnist_siamese.py" -> "Import:Input,";
    "/examples/mnist_siamese.py" -> "Import:RMSprop";
    "/examples/mnist_siamese.py" -> "Import:backend";
    "/examples/mnist_siamese.py" -> "Fxn:euclidean_distance";
    "/examples/mnist_siamese.py" -> "Fxn:eucl_dist_output_shape";
    "/examples/mnist_siamese.py" -> "Fxn:contrastive_loss";
    "/examples/mnist_siamese.py" -> "Fxn:create_pairs";
    "/examples/mnist_siamese.py" -> "Fxn:create_base_network";
    "/examples/mnist_siamese.py" -> "Fxn:compute_accuracy";
    "/examples/mnist_siamese.py" -> "Fxn:accuracy";
    "/examples/mnist_sklearn_wrapper.py" -> "Import:print_function";
    "/examples/mnist_sklearn_wrapper.py" -> "Import:keras";
    "/examples/mnist_sklearn_wrapper.py" -> "Import:mnist";
    "/examples/mnist_sklearn_wrapper.py" -> "Import:Sequential";
    "/examples/mnist_sklearn_wrapper.py" -> "Import:Dense,";
    "/examples/mnist_sklearn_wrapper.py" -> "Import:Conv2D,";
    "/examples/mnist_sklearn_wrapper.py" -> "Import:KerasClassifier";
    "/examples/mnist_sklearn_wrapper.py" -> "Import:backend";
    "/examples/mnist_sklearn_wrapper.py" -> "Import:GridSearchCV";
    "/examples/mnist_sklearn_wrapper.py" -> "Fxn:make_model";
    "/examples/mnist_swwae.py" -> "Import:print_function";
    "/examples/mnist_swwae.py" -> "Import:numpy";
    "/examples/mnist_swwae.py" -> "Import:mnist";
    "/examples/mnist_swwae.py" -> "Import:Model";
    "/examples/mnist_swwae.py" -> "Import:Activation";
    "/examples/mnist_swwae.py" -> "Import:UpSampling2D,";
    "/examples/mnist_swwae.py" -> "Import:Input,";
    "/examples/mnist_swwae.py" -> "Import:matplotlib.pyplot";
    "/examples/mnist_swwae.py" -> "Import:keras.backend";
    "/examples/mnist_swwae.py" -> "Import:layers";
    "/examples/mnist_swwae.py" -> "Fxn:convresblock";
    "/examples/mnist_swwae.py" -> "Fxn:getwhere";
    "/examples/mnist_swwae.py" -> "Import:sys";
    "/examples/mnist_tfrecord.py" -> "Import:numpy";
    "/examples/mnist_tfrecord.py" -> "Import:import";
    "/examples/mnist_tfrecord.py" -> "Import:tensorflow";
    "/examples/mnist_tfrecord.py" -> "Import:keras";
    "/examples/mnist_tfrecord.py" -> "Import:backend";
    "/examples/mnist_tfrecord.py" -> "Import:layers";
    "/examples/mnist_tfrecord.py" -> "Import:Callback";
    "/examples/mnist_tfrecord.py" -> "Import:mnist";
    "/examples/mnist_tfrecord.py" -> "class:EvaluateInputTensor(Callback):";
    "class:EvaluateInputTensor(Callback):" -> "Fxn:__init__";
    "class:EvaluateInputTensor(Callback):" -> "Fxn:on_epoch_end";
    "class:EvaluateInputTensor(Callback):" -> "Fxn:cnn_layers";
    "Fxn:__init__" -> "Fxn:super(EvaluateInputTensor,";
    "Fxn:__init__" -> "Fxn:self).__init__()";
    "Fxn:on_epoch_end" -> "Fxn:self.val_model.set_weights(self.model.get_weights())";
    "Fxn:on_epoch_end" -> "Fxn:self.val_model.evaluate(None,";
    "Fxn:on_epoch_end" -> "Fxn:steps=int(self.num_steps),";
    "Fxn:on_epoch_end" -> "Fxn:zip(results,";
    "Fxn:on_epoch_end" -> "Fxn:str(result)";
    "Fxn:on_epoch_end" -> "Fxn:print(metrics_str)";
    "Fxn:cnn_layers" -> "Fxn:layers.Conv2D(32,";
    "Fxn:cnn_layers" -> "Fxn:padding='valid')(x_train_input)";
    "Fxn:cnn_layers" -> "Fxn:layers.MaxPooling2D(pool_size=(2,";
    "Fxn:cnn_layers" -> "Fxn:layers.Conv2D(64,";
    "Fxn:cnn_layers" -> "Fxn:activation='relu')(x)";
    "Fxn:cnn_layers" -> "Fxn:layers.MaxPooling2D(pool_size=(2,";
    "Fxn:cnn_layers" -> "Fxn:layers.Flatten()(x)";
    "Fxn:cnn_layers" -> "Fxn:layers.Dense(512,";
    "Fxn:cnn_layers" -> "Fxn:activation='relu')(x)";
    "Fxn:cnn_layers" -> "Fxn:layers.Dropout(0.5)(x)";
    "Fxn:cnn_layers" -> "Fxn:layers.Dense(num_classes,";
    "Fxn:cnn_layers" -> "Fxn:name='x_train_out')(x)";
    "Fxn:cnn_layers" -> "Fxn:K.get_session()";
    "Fxn:cnn_layers" -> "Fxn:os.path.expanduser(";
    "Fxn:cnn_layers" -> "Fxn:os.path.join('~',";
    "Fxn:cnn_layers" -> "Fxn:mnist.read_data_sets(cache_dir,";
    "Fxn:cnn_layers" -> "Fxn:tf.train.shuffle_batch(";
    "Fxn:cnn_layers" -> "Fxn:data.train.labels.astype(np.int32)],";
    "Fxn:cnn_layers" -> "Fxn:tf.cast(x_train_batch,";
    "Fxn:cnn_layers" -> "Fxn:tf.reshape(x_train_batch,";
    "Fxn:cnn_layers" -> "Fxn:tf.cast(y_train_batch,";
    "Fxn:cnn_layers" -> "Fxn:tf.one_hot(y_train_batch,";
    "Fxn:cnn_layers" -> "Fxn:x_train_batch.get_shape().as_list()";
    "Fxn:cnn_layers" -> "Fxn:y_train_batch.get_shape().as_list()";
    "Fxn:cnn_layers" -> "Fxn:layers.Input(tensor=x_train_batch)";
    "Fxn:cnn_layers" -> "Fxn:cnn_layers(model_input)";
    "Fxn:cnn_layers" -> "Fxn:keras.models.Model(inputs=model_input,";
    "Fxn:cnn_layers" -> "Fxn:train_model.compile(optimizer=keras.optimizers.RMSprop(lr=2e-3,";
    "Fxn:cnn_layers" -> "Fxn:train_model.summary()";
    "Fxn:cnn_layers" -> "Fxn:tf.train.batch(";
    "Fxn:cnn_layers" -> "Fxn:data.test.labels.astype(np.int32)],";
    "Fxn:cnn_layers" -> "Fxn:tf.cast(x_test_batch,";
    "Fxn:cnn_layers" -> "Fxn:tf.reshape(x_test_batch,";
    "Fxn:cnn_layers" -> "Fxn:tf.cast(y_test_batch,";
    "Fxn:cnn_layers" -> "Fxn:tf.one_hot(y_test_batch,";
    "Fxn:cnn_layers" -> "Fxn:x_test_batch.get_shape().as_list()";
    "Fxn:cnn_layers" -> "Fxn:y_test_batch.get_shape().as_list()";
    "Fxn:cnn_layers" -> "Fxn:layers.Input(tensor=x_test_batch)";
    "Fxn:cnn_layers" -> "Fxn:cnn_layers(test_model_input)";
    "Fxn:cnn_layers" -> "Fxn:keras.models.Model(inputs=test_model_input,";
    "Fxn:cnn_layers" -> "Fxn:test_model.compile(optimizer=keras.optimizers.RMSprop(lr=2e-3,";
    "Fxn:cnn_layers" -> "Fxn:tf.train.Coordinator()";
    "Fxn:cnn_layers" -> "Fxn:tf.train.start_queue_runners(sess,";
    "Fxn:cnn_layers" -> "Fxn:train_model.fit(epochs=epochs,";
    "Fxn:cnn_layers" -> "Fxn:steps_per_epoch=int(np.ceil(data.train.num_examples";
    "Fxn:cnn_layers" -> "Fxn:float(batch_size))),";
    "Fxn:cnn_layers" -> "Fxn:callbacks=[EvaluateInputTensor(test_model,";
    "Fxn:cnn_layers" -> "Fxn:train_model.save_weights('saved_wt.h5')";
    "Fxn:cnn_layers" -> "Fxn:coord.request_stop()";
    "Fxn:cnn_layers" -> "Fxn:coord.join(threads)";
    "Fxn:cnn_layers" -> "Fxn:K.clear_session()";
    "Fxn:cnn_layers" -> "Fxn:np.reshape(data.test.images,";
    "Fxn:cnn_layers" -> "Fxn:layers.Input(shape=(x_test.shape[1:]))";
    "Fxn:cnn_layers" -> "Fxn:cnn_layers(x_test_inp)";
    "Fxn:cnn_layers" -> "Fxn:keras.models.Model(inputs=x_test_inp,";
    "Fxn:cnn_layers" -> "Fxn:test_model.load_weights('saved_wt.h5')";
    "Fxn:cnn_layers" -> "Fxn:test_model.compile(optimizer='rmsprop',";
    "Fxn:cnn_layers" -> "Fxn:test_model.summary()";
    "Fxn:cnn_layers" -> "Fxn:test_model.evaluate(x_test,";
    "Fxn:cnn_layers" -> "Fxn:keras.utils.to_categorical(y_test),";
    "Fxn:cnn_layers" -> "Fxn:print('\nTest";
    "Fxn:cnn_layers" -> "Fxn:{0}'.format(acc))";
    "/examples/mnist_transfer_cnn.py" -> "Import:print_function";
    "/examples/mnist_transfer_cnn.py" -> "Import:datetime";
    "/examples/mnist_transfer_cnn.py" -> "Import:keras";
    "/examples/mnist_transfer_cnn.py" -> "Import:mnist";
    "/examples/mnist_transfer_cnn.py" -> "Import:Sequential";
    "/examples/mnist_transfer_cnn.py" -> "Import:Dense,";
    "/examples/mnist_transfer_cnn.py" -> "Import:Conv2D,";
    "/examples/mnist_transfer_cnn.py" -> "Import:backend";
    "/examples/mnist_transfer_cnn.py" -> "Fxn:train_model";
    "/examples/neural_doodle.py" -> "Import:print_function";
    "/examples/neural_doodle.py" -> "Import:time";
    "/examples/neural_doodle.py" -> "Import:argparse";
    "/examples/neural_doodle.py" -> "Import:numpy";
    "/examples/neural_doodle.py" -> "Import:fmin_l_bfgs_b";
    "/examples/neural_doodle.py" -> "Import:imread,";
    "/examples/neural_doodle.py" -> "Import:backend";
    "/examples/neural_doodle.py" -> "Import:Input,";
    "/examples/neural_doodle.py" -> "Import:Model";
    "/examples/neural_doodle.py" -> "Import:load_img,";
    "/examples/neural_doodle.py" -> "Import:vgg19";
    "/examples/neural_doodle.py" -> "Fxn:preprocess_image";
    "/examples/neural_doodle.py" -> "Fxn:deprocess_image";
    "/examples/neural_doodle.py" -> "Fxn:kmeans";
    "/examples/neural_doodle.py" -> "Import:k_means";
    "/examples/neural_doodle.py" -> "Import:kmeans2";
    "/examples/neural_doodle.py" -> "Fxn:load_mask_labels";
    "/examples/neural_doodle.py" -> "Fxn:gram_matrix";
    "/examples/neural_doodle.py" -> "Fxn:region_style_loss";
    "/examples/neural_doodle.py" -> "Fxn:style_loss";
    "/examples/neural_doodle.py" -> "Fxn:content_loss";
    "/examples/neural_doodle.py" -> "Fxn:total_variation_loss";
    "/examples/neural_doodle.py" -> "Fxn:eval_loss_and_grads";
    "/examples/neural_doodle.py" -> "class:Evaluator(object):";
    "class:Evaluator(object):" -> "Fxn:__init__";
    "class:Evaluator(object):" -> "Fxn:loss";
    "class:Evaluator(object):" -> "Fxn:grads";
    "Fxn:loss" -> "Fxn:eval_loss_and_grads(x)";
    "Fxn:grads" -> "Fxn:np.copy(self.grad_values)";
    "Fxn:grads" -> "Fxn:Evaluator()";
    "Fxn:grads" -> "Fxn:K.image_data_format()";
    "Fxn:grads" -> "Fxn:np.random.uniform(0,";
    "Fxn:grads" -> "Fxn:np.random.uniform(0,";
    "Fxn:grads" -> "Fxn:range(50):";
    "Fxn:grads" -> "Fxn:print('Start";
    "Fxn:grads" -> "Fxn:time.time()";
    "Fxn:grads" -> "Fxn:fmin_l_bfgs_b(evaluator.loss,";
    "Fxn:grads" -> "Fxn:x.flatten(),";
    "Fxn:grads" -> "Fxn:print('Current";
    "Fxn:grads" -> "Fxn:deprocess_image(x.copy())";
    "Fxn:grads" -> "Fxn:imsave(fname,";
    "Fxn:grads" -> "Fxn:time.time()";
    "Fxn:grads" -> "Fxn:print('Image";
    "Fxn:grads" -> "Fxn:print('Iteration";
    "/examples/neural_style_transfer.py" -> "Import:print_function";
    "/examples/neural_style_transfer.py" -> "Import:load_img,";
    "/examples/neural_style_transfer.py" -> "Import:imsave";
    "/examples/neural_style_transfer.py" -> "Import:numpy";
    "/examples/neural_style_transfer.py" -> "Import:fmin_l_bfgs_b";
    "/examples/neural_style_transfer.py" -> "Import:time";
    "/examples/neural_style_transfer.py" -> "Import:argparse";
    "/examples/neural_style_transfer.py" -> "Import:vgg19";
    "/examples/neural_style_transfer.py" -> "Import:backend";
    "/examples/neural_style_transfer.py" -> "Fxn:preprocess_image";
    "/examples/neural_style_transfer.py" -> "Fxn:deprocess_image";
    "/examples/neural_style_transfer.py" -> "Fxn:gram_matrix";
    "/examples/neural_style_transfer.py" -> "Fxn:style_loss";
    "/examples/neural_style_transfer.py" -> "Fxn:content_loss";
    "/examples/neural_style_transfer.py" -> "Fxn:total_variation_loss";
    "/examples/neural_style_transfer.py" -> "Fxn:eval_loss_and_grads";
    "/examples/neural_style_transfer.py" -> "class:Evaluator(object):";
    "class:Evaluator(object):" -> "Fxn:__init__";
    "class:Evaluator(object):" -> "Fxn:loss";
    "class:Evaluator(object):" -> "Fxn:grads";
    "Fxn:loss" -> "Fxn:eval_loss_and_grads(x)";
    "Fxn:grads" -> "Fxn:np.copy(self.grad_values)";
    "Fxn:grads" -> "Fxn:Evaluator()";
    "Fxn:grads" -> "Fxn:preprocess_image(base_image_path)";
    "Fxn:grads" -> "Fxn:range(iterations):";
    "Fxn:grads" -> "Fxn:print('Start";
    "Fxn:grads" -> "Fxn:time.time()";
    "Fxn:grads" -> "Fxn:fmin_l_bfgs_b(evaluator.loss,";
    "Fxn:grads" -> "Fxn:x.flatten(),";
    "Fxn:grads" -> "Fxn:print('Current";
    "Fxn:grads" -> "Fxn:deprocess_image(x.copy())";
    "Fxn:grads" -> "Fxn:imsave(fname,";
    "Fxn:grads" -> "Fxn:time.time()";
    "Fxn:grads" -> "Fxn:print('Image";
    "Fxn:grads" -> "Fxn:print('Iteration";
    "/examples/pretrained_word_embeddings.py" -> "Import:print_function";
    "/examples/pretrained_word_embeddings.py" -> "Import:import";
    "/examples/pretrained_word_embeddings.py" -> "Import:sys";
    "/examples/pretrained_word_embeddings.py" -> "Import:numpy";
    "/examples/pretrained_word_embeddings.py" -> "Import:Tokenizer";
    "/examples/pretrained_word_embeddings.py" -> "Import:pad_sequences";
    "/examples/pretrained_word_embeddings.py" -> "Import:to_categorical";
    "/examples/pretrained_word_embeddings.py" -> "Import:Dense,";
    "/examples/pretrained_word_embeddings.py" -> "Import:Conv1D,";
    "/examples/pretrained_word_embeddings.py" -> "Import:Model";
    "/examples/reuters_mlp.py" -> "Import:print_function";
    "/examples/reuters_mlp.py" -> "Import:numpy";
    "/examples/reuters_mlp.py" -> "Import:keras";
    "/examples/reuters_mlp.py" -> "Import:reuters";
    "/examples/reuters_mlp.py" -> "Import:Sequential";
    "/examples/reuters_mlp.py" -> "Import:Dense,";
    "/examples/reuters_mlp.py" -> "Import:Tokenizer";
    "/examples/reuters_mlp_relu_vs_selu.py" -> "Import:print_function";
    "/examples/reuters_mlp_relu_vs_selu.py" -> "Import:numpy";
    "/examples/reuters_mlp_relu_vs_selu.py" -> "Import:matplotlib.pyplot";
    "/examples/reuters_mlp_relu_vs_selu.py" -> "Import:keras";
    "/examples/reuters_mlp_relu_vs_selu.py" -> "Import:reuters";
    "/examples/reuters_mlp_relu_vs_selu.py" -> "Import:Sequential";
    "/examples/reuters_mlp_relu_vs_selu.py" -> "Import:Dense,";
    "/examples/reuters_mlp_relu_vs_selu.py" -> "Import:AlphaDropout";
    "/examples/reuters_mlp_relu_vs_selu.py" -> "Import:Tokenizer";
    "/examples/reuters_mlp_relu_vs_selu.py" -> "Fxn:create_network";
    "/examples/variational_autoencoder.py" -> "Import:print_function";
    "/examples/variational_autoencoder.py" -> "Import:numpy";
    "/examples/variational_autoencoder.py" -> "Import:matplotlib.pyplot";
    "/examples/variational_autoencoder.py" -> "Import:norm";
    "/examples/variational_autoencoder.py" -> "Import:Input,";
    "/examples/variational_autoencoder.py" -> "Import:Model";
    "/examples/variational_autoencoder.py" -> "Import:backend";
    "/examples/variational_autoencoder.py" -> "Import:metrics";
    "/examples/variational_autoencoder.py" -> "Import:mnist";
    "/examples/variational_autoencoder.py" -> "Fxn:sampling";
    "/examples/variational_autoencoder_deconv.py" -> "Import:print_function";
    "/examples/variational_autoencoder_deconv.py" -> "Import:numpy";
    "/examples/variational_autoencoder_deconv.py" -> "Import:matplotlib.pyplot";
    "/examples/variational_autoencoder_deconv.py" -> "Import:norm";
    "/examples/variational_autoencoder_deconv.py" -> "Import:Input,";
    "/examples/variational_autoencoder_deconv.py" -> "Import:Conv2D,";
    "/examples/variational_autoencoder_deconv.py" -> "Import:Model";
    "/examples/variational_autoencoder_deconv.py" -> "Import:backend";
    "/examples/variational_autoencoder_deconv.py" -> "Import:metrics";
    "/examples/variational_autoencoder_deconv.py" -> "Import:mnist";
    "/examples/variational_autoencoder_deconv.py" -> "Fxn:sampling";
    "/keras/activations.py" -> "Import:absolute_import";
    "/keras/activations.py" -> "Import:division";
    "/keras/activations.py" -> "Import:print_function";
    "/keras/activations.py" -> "Import:six";
    "/keras/activations.py" -> "Import:warnings";
    "/keras/activations.py" -> "Import:backend";
    "/keras/activations.py" -> "Import:deserialize_keras_object";
    "/keras/activations.py" -> "Import:Layer";
    "/keras/activations.py" -> "Fxn:softmax";
    "/keras/activations.py" -> "Fxn:elu";
    "/keras/activations.py" -> "Fxn:selu";
    "/keras/activations.py" -> "Fxn:softplus";
    "/keras/activations.py" -> "Fxn:softsign";
    "/keras/activations.py" -> "Fxn:relu";
    "/keras/activations.py" -> "Fxn:tanh";
    "/keras/activations.py" -> "Fxn:sigmoid";
    "/keras/activations.py" -> "Fxn:hard_sigmoid";
    "/keras/activations.py" -> "Fxn:linear";
    "/keras/activations.py" -> "Fxn:serialize";
    "/keras/activations.py" -> "Fxn:deserialize";
    "/keras/activations.py" -> "Fxn:get";
    "/keras/callbacks.py" -> "Import:absolute_import";
    "/keras/callbacks.py" -> "Import:division";
    "/keras/callbacks.py" -> "Import:print_function";
    "/keras/callbacks.py" -> "Import:import";
    "/keras/callbacks.py" -> "Import:csv";
    "/keras/callbacks.py" -> "Import:six";
    "/keras/callbacks.py" -> "Import:numpy";
    "/keras/callbacks.py" -> "Import:time";
    "/keras/callbacks.py" -> "Import:json";
    "/keras/callbacks.py" -> "Import:warnings";
    "/keras/callbacks.py" -> "Import:deque";
    "/keras/callbacks.py" -> "Import:OrderedDict";
    "/keras/callbacks.py" -> "Import:Iterable";
    "/keras/callbacks.py" -> "Import:Progbar";
    "/keras/callbacks.py" -> "Import:backend";
    "/keras/callbacks.py" -> "Import:Layer";
    "/keras/callbacks.py" -> "Import:requests";
    "/keras/callbacks.py" -> "class:CallbackList(object):";
    "/keras/callbacks.py" -> "class:Callback(object):";
    "/keras/callbacks.py" -> "class:BaseLogger(Callback):";
    "/keras/callbacks.py" -> "class:TerminateOnNaN(Callback):";
    "/keras/callbacks.py" -> "class:ProgbarLogger(Callback):";
    "/keras/callbacks.py" -> "class:History(Callback):";
    "/keras/callbacks.py" -> "class:ModelCheckpoint(Callback):";
    "/keras/callbacks.py" -> "class:EarlyStopping(Callback):";
    "/keras/callbacks.py" -> "class:RemoteMonitor(Callback):";
    "/keras/callbacks.py" -> "class:LearningRateScheduler(Callback):";
    "/keras/callbacks.py" -> "class:TensorBoard(Callback):";
    "/keras/callbacks.py" -> "Import:tensorflow";
    "/keras/callbacks.py" -> "Import:projector";
    "/keras/callbacks.py" -> "class:ReduceLROnPlateau(Callback):";
    "/keras/callbacks.py" -> "class:CSVLogger(Callback):";
    "/keras/callbacks.py" -> "class:CustomDialect(csv.excel):";
    "/keras/callbacks.py" -> "class:LambdaCallback(Callback):";
    "/keras/callbacks.py" -> "Import:json";
    "class:CallbackList(object):" -> "Fxn:__init__";
    "class:CallbackList(object):" -> "Fxn:append";
    "class:CallbackList(object):" -> "Fxn:set_params";
    "class:CallbackList(object):" -> "Fxn:set_model";
    "class:CallbackList(object):" -> "Fxn:on_epoch_begin";
    "class:CallbackList(object):" -> "Fxn:on_epoch_end";
    "class:CallbackList(object):" -> "Fxn:on_batch_begin";
    "class:CallbackList(object):" -> "Fxn:on_batch_end";
    "class:CallbackList(object):" -> "Fxn:on_train_begin";
    "class:CallbackList(object):" -> "Fxn:on_train_end";
    "class:CallbackList(object):" -> "Fxn:__iter__";
    "Fxn:append" -> "Fxn:self.callbacks.append(callback)";
    "Fxn:set_params" -> "Fxn:callback.set_params(params)";
    "Fxn:set_model" -> "Fxn:callback.set_model(model)";
    "Fxn:on_epoch_begin" -> "Fxn:callback.on_epoch_begin(epoch,";
    "Fxn:on_epoch_begin" -> "Fxn:deque([],";
    "Fxn:on_epoch_begin" -> "Fxn:deque([],";
    "Fxn:on_epoch_end" -> "Fxn:callback.on_epoch_end(epoch,";
    "Fxn:on_batch_begin" -> "Fxn:time.time()";
    "Fxn:on_batch_begin" -> "Fxn:callback.on_batch_begin(batch,";
    "Fxn:on_batch_begin" -> "Fxn:self._delta_ts_batch_begin.append(time.time()";
    "Fxn:on_batch_begin" -> "Fxn:np.median(self._delta_ts_batch_begin)";
    "Fxn:on_batch_begin" -> "Fxn:warnings.warn('Method";
    "Fxn:on_batch_begin" -> "Fxn:on_batch_begin()";
    "Fxn:on_batch_begin" -> "Fxn:time.time()";
    "Fxn:on_batch_end" -> "Fxn:hasattr(self,";
    "Fxn:on_batch_end" -> "Fxn:time.time()";
    "Fxn:on_batch_end" -> "Fxn:time.time()";
    "Fxn:on_batch_end" -> "Fxn:time.time()";
    "Fxn:on_batch_end" -> "Fxn:callback.on_batch_end(batch,";
    "Fxn:on_batch_end" -> "Fxn:self._delta_ts_batch_end.append(time.time()";
    "Fxn:on_batch_end" -> "Fxn:np.median(self._delta_ts_batch_end)";
    "Fxn:on_batch_end" -> "Fxn:warnings.warn('Method";
    "Fxn:on_batch_end" -> "Fxn:on_batch_end()";
    "Fxn:on_train_begin" -> "Fxn:callback.on_train_begin(logs)";
    "Fxn:on_train_end" -> "Fxn:callback.on_train_end(logs)";
    "Fxn:__iter__" -> "Fxn:iter(self.callbacks)";
    "class:Callback(object):" -> "Fxn:__init__";
    "class:Callback(object):" -> "Fxn:set_params";
    "class:Callback(object):" -> "Fxn:set_model";
    "class:Callback(object):" -> "Fxn:on_epoch_begin";
    "class:Callback(object):" -> "Fxn:on_epoch_end";
    "class:Callback(object):" -> "Fxn:on_batch_begin";
    "class:Callback(object):" -> "Fxn:on_batch_end";
    "class:Callback(object):" -> "Fxn:on_train_begin";
    "class:Callback(object):" -> "Fxn:on_train_end";
    "class:BaseLogger(Callback):" -> "Fxn:__init__";
    "class:BaseLogger(Callback):" -> "Fxn:on_epoch_begin";
    "class:BaseLogger(Callback):" -> "Fxn:on_batch_end";
    "class:BaseLogger(Callback):" -> "Fxn:on_epoch_end";
    "Fxn:__init__" -> "Fxn:set(stateful_metrics)";
    "Fxn:__init__" -> "Fxn:set()";
    "Fxn:on_batch_end" -> "Fxn:logs.get('size',";
    "Fxn:on_batch_end" -> "Fxn:logs.items():";
    "class:TerminateOnNaN(Callback):" -> "Fxn:__init__";
    "class:TerminateOnNaN(Callback):" -> "Fxn:on_batch_end";
    "Fxn:__init__" -> "Fxn:super(TerminateOnNaN,";
    "Fxn:__init__" -> "Fxn:self).__init__()";
    "Fxn:on_batch_end" -> "Fxn:logs.get('loss')";
    "Fxn:on_batch_end" -> "Fxn:np.isnan(loss)";
    "Fxn:on_batch_end" -> "Fxn:np.isinf(loss):";
    "Fxn:on_batch_end" -> "Fxn:print('Batch";
    "class:ProgbarLogger(Callback):" -> "Fxn:__init__";
    "class:ProgbarLogger(Callback):" -> "Fxn:on_train_begin";
    "class:ProgbarLogger(Callback):" -> "Fxn:on_epoch_begin";
    "class:ProgbarLogger(Callback):" -> "Fxn:on_batch_begin";
    "class:ProgbarLogger(Callback):" -> "Fxn:on_batch_end";
    "class:ProgbarLogger(Callback):" -> "Fxn:on_epoch_end";
    "Fxn:__init__" -> "Fxn:super(ProgbarLogger,";
    "Fxn:__init__" -> "Fxn:self).__init__()";
    "Fxn:__init__" -> "Fxn:ValueError('Unknown";
    "Fxn:__init__" -> "Fxn:str(count_mode))";
    "Fxn:__init__" -> "Fxn:set(stateful_metrics)";
    "Fxn:__init__" -> "Fxn:set()";
    "Fxn:on_epoch_begin" -> "Fxn:print('Epoch";
    "Fxn:on_epoch_begin" -> "Fxn:Progbar(target=self.target,";
    "Fxn:on_batch_end" -> "Fxn:logs.get('size',";
    "Fxn:on_batch_end" -> "Fxn:self.log_values.append((k,";
    "Fxn:on_batch_end" -> "Fxn:self.progbar.update(self.seen,";
    "Fxn:on_epoch_end" -> "Fxn:self.log_values.append((k,";
    "Fxn:on_epoch_end" -> "Fxn:self.progbar.update(self.seen,";
    "class:History(Callback):" -> "Fxn:on_train_begin";
    "class:History(Callback):" -> "Fxn:on_epoch_end";
    "Fxn:on_epoch_end" -> "Fxn:self.epoch.append(epoch)";
    "Fxn:on_epoch_end" -> "Fxn:logs.items():";
    "Fxn:on_epoch_end" -> "Fxn:self.history.setdefault(k,";
    "Fxn:on_epoch_end" -> "Fxn:[]).append(v)";
    "class:ModelCheckpoint(Callback):" -> "Fxn:__init__";
    "class:ModelCheckpoint(Callback):" -> "Fxn:on_epoch_end";
    "Fxn:__init__" -> "Fxn:super(ModelCheckpoint,";
    "Fxn:__init__" -> "Fxn:self).__init__()";
    "Fxn:__init__" -> "Fxn:warnings.warn('ModelCheckpoint";
    "Fxn:__init__" -> "Fxn:self.monitor.startswith('fmeasure'):";
    "Fxn:on_epoch_end" -> "Fxn:self.filepath.format(epoch=epoch";
    "Fxn:on_epoch_end" -> "Fxn:logs.get(self.monitor)";
    "Fxn:on_epoch_end" -> "Fxn:warnings.warn('Can";
    "Fxn:on_epoch_end" -> "Fxn:self.monitor_op(current,";
    "Fxn:on_epoch_end" -> "Fxn:print('\nEpoch";
    "Fxn:on_epoch_end" -> "Fxn:self.model.save_weights(filepath,";
    "Fxn:on_epoch_end" -> "Fxn:self.model.save(filepath,";
    "Fxn:on_epoch_end" -> "Fxn:print('\nEpoch";
    "Fxn:on_epoch_end" -> "Fxn:print('\nEpoch";
    "Fxn:on_epoch_end" -> "Fxn:self.model.save_weights(filepath,";
    "Fxn:on_epoch_end" -> "Fxn:self.model.save(filepath,";
    "class:EarlyStopping(Callback):" -> "Fxn:__init__";
    "class:EarlyStopping(Callback):" -> "Fxn:on_train_begin";
    "class:EarlyStopping(Callback):" -> "Fxn:on_epoch_end";
    "class:EarlyStopping(Callback):" -> "Fxn:on_train_end";
    "Fxn:__init__" -> "Fxn:super(EarlyStopping,";
    "Fxn:__init__" -> "Fxn:self).__init__()";
    "Fxn:__init__" -> "Fxn:warnings.warn('EarlyStopping";
    "Fxn:on_epoch_end" -> "Fxn:logs.get(self.monitor)";
    "Fxn:on_epoch_end" -> "Fxn:warnings.warn(";
    "Fxn:on_epoch_end" -> "Fxn:','.join(list(logs.keys()))),";
    "Fxn:on_epoch_end" -> "Fxn:self.monitor_op(current";
    "Fxn:on_train_end" -> "Fxn:print('Epoch";
    "class:RemoteMonitor(Callback):" -> "Fxn:__init__";
    "class:RemoteMonitor(Callback):" -> "Fxn:on_epoch_end";
    "Fxn:__init__" -> "Fxn:super(RemoteMonitor,";
    "Fxn:__init__" -> "Fxn:self).__init__()";
    "Fxn:on_epoch_end" -> "Fxn:ImportError('RemoteMonitor";
    "Fxn:on_epoch_end" -> "Fxn:logs.items():";
    "Fxn:on_epoch_end" -> "Fxn:isinstance(v,";
    "Fxn:on_epoch_end" -> "Fxn:v.item()";
    "Fxn:on_epoch_end" -> "Fxn:requests.post(self.root";
    "Fxn:on_epoch_end" -> "Fxn:json.dumps(send)},";
    "Fxn:on_epoch_end" -> "Fxn:warnings.warn('Warning:";
    "Fxn:on_epoch_end" -> "Fxn:str(self.root))";
    "class:LearningRateScheduler(Callback):" -> "Fxn:__init__";
    "class:LearningRateScheduler(Callback):" -> "Fxn:on_epoch_begin";
    "Fxn:__init__" -> "Fxn:super(LearningRateScheduler,";
    "Fxn:__init__" -> "Fxn:self).__init__()";
    "Fxn:on_epoch_begin" -> "Fxn:hasattr(self.model.optimizer,";
    "Fxn:on_epoch_begin" -> "Fxn:ValueError('Optimizer";
    "Fxn:on_epoch_begin" -> "Fxn:float(K.get_value(self.model.optimizer.lr))";
    "Fxn:on_epoch_begin" -> "Fxn:self.schedule(epoch,";
    "Fxn:on_epoch_begin" -> "Fxn:self.schedule(epoch)";
    "Fxn:on_epoch_begin" -> "Fxn:isinstance(lr,";
    "Fxn:on_epoch_begin" -> "Fxn:ValueError('The";
    "Fxn:on_epoch_begin" -> "Fxn:K.set_value(self.model.optimizer.lr,";
    "Fxn:on_epoch_begin" -> "Fxn:print('\nEpoch";
    "class:TensorBoard(Callback):" -> "Fxn:__init__";
    "class:TensorBoard(Callback):" -> "Fxn:set_model";
    "class:TensorBoard(Callback):" -> "Fxn:is_indexed_slices";
    "class:TensorBoard(Callback):" -> "Fxn:on_epoch_end";
    "class:TensorBoard(Callback):" -> "Fxn:on_train_end";
    "Fxn:__init__" -> "Fxn:super(TensorBoard,";
    "Fxn:__init__" -> "Fxn:self).__init__()";
    "Fxn:__init__" -> "Fxn:ImportError('You";
    "Fxn:__init__" -> "Fxn:K.backend()";
    "Fxn:__init__" -> "Fxn:warnings.warn('You";
    "Fxn:__init__" -> "Fxn:warnings.warn('You";
    "Fxn:__init__" -> "Fxn:warnings.warn('You";
    "Fxn:__init__" -> "Fxn:warnings.warn('You";
    "Fxn:set_model" -> "Fxn:K.backend()";
    "Fxn:set_model" -> "Fxn:K.get_session()";
    "Fxn:set_model" -> "Fxn:weight.name.replace(':',";
    "Fxn:set_model" -> "Fxn:tf.summary.histogram(mapped_weight_name,";
    "Fxn:set_model" -> "Fxn:model.optimizer.get_gradients(model.total_loss,";
    "Fxn:is_indexed_slices" -> "Fxn:type(grad).__name__";
    "Fxn:is_indexed_slices" -> "Fxn:is_indexed_slices(grad)";
    "Fxn:is_indexed_slices" -> "Fxn:tf.summary.histogram('{}_grad'.format(mapped_weight_name),";
    "Fxn:is_indexed_slices" -> "Fxn:tf.squeeze(weight)";
    "Fxn:is_indexed_slices" -> "Fxn:K.int_shape(w_img)";
    "Fxn:is_indexed_slices" -> "Fxn:len(shape)";
    "Fxn:is_indexed_slices" -> "Fxn:tf.transpose(w_img)";
    "Fxn:is_indexed_slices" -> "Fxn:K.int_shape(w_img)";
    "Fxn:is_indexed_slices" -> "Fxn:tf.reshape(w_img,";
    "Fxn:is_indexed_slices" -> "Fxn:len(shape)";
    "Fxn:is_indexed_slices" -> "Fxn:K.image_data_format()";
    "Fxn:is_indexed_slices" -> "Fxn:tf.transpose(w_img,";
    "Fxn:is_indexed_slices" -> "Fxn:K.int_shape(w_img)";
    "Fxn:is_indexed_slices" -> "Fxn:tf.reshape(w_img,";
    "Fxn:is_indexed_slices" -> "Fxn:len(shape)";
    "Fxn:is_indexed_slices" -> "Fxn:tf.reshape(w_img,";
    "Fxn:is_indexed_slices" -> "Fxn:K.int_shape(w_img)";
    "Fxn:is_indexed_slices" -> "Fxn:len(shape)";
    "Fxn:is_indexed_slices" -> "Fxn:tf.summary.image(mapped_weight_name,";
    "Fxn:is_indexed_slices" -> "Fxn:hasattr(layer,";
    "Fxn:is_indexed_slices" -> "Fxn:tf.summary.histogram('{}_out'.format(layer.name),";
    "Fxn:is_indexed_slices" -> "Fxn:tf.summary.merge_all()";
    "Fxn:is_indexed_slices" -> "Fxn:tf.summary.FileWriter(self.log_dir,";
    "Fxn:is_indexed_slices" -> "Fxn:tf.summary.FileWriter(self.log_dir)";
    "Fxn:is_indexed_slices" -> "Fxn:type(layer).__name__";
    "Fxn:is_indexed_slices" -> "Fxn:tf.train.Saver(list(embeddings.values()))";
    "Fxn:is_indexed_slices" -> "Fxn:isinstance(self.embeddings_metadata,";
    "Fxn:is_indexed_slices" -> "Fxn:embeddings.keys()}";
    "Fxn:is_indexed_slices" -> "Fxn:projector.ProjectorConfig()";
    "Fxn:is_indexed_slices" -> "Fxn:os.path.join(self.log_dir,";
    "Fxn:is_indexed_slices" -> "Fxn:embeddings.items():";
    "Fxn:is_indexed_slices" -> "Fxn:config.embeddings.add()";
    "Fxn:is_indexed_slices" -> "Fxn:projector.visualize_embeddings(self.writer,";
    "Fxn:on_epoch_end" -> "Fxn:ValueError('If";
    "Fxn:on_epoch_end" -> "Fxn:[K.learning_phase()]";
    "Fxn:on_epoch_end" -> "Fxn:len(val_data)";
    "Fxn:on_epoch_end" -> "Fxn:len(tensors)";
    "Fxn:on_epoch_end" -> "Fxn:min(self.batch_size,";
    "Fxn:on_epoch_end" -> "Fxn:batch_val.append(val_data[-1])";
    "Fxn:on_epoch_end" -> "Fxn:len(batch_val)";
    "Fxn:on_epoch_end" -> "Fxn:len(tensors)";
    "Fxn:on_epoch_end" -> "Fxn:dict(zip(tensors,";
    "Fxn:on_epoch_end" -> "Fxn:self.sess.run([self.merged],";
    "Fxn:on_epoch_end" -> "Fxn:self.writer.add_summary(summary_str,";
    "Fxn:on_epoch_end" -> "Fxn:self.saver.save(self.sess,";
    "Fxn:on_epoch_end" -> "Fxn:logs.items():";
    "Fxn:on_epoch_end" -> "Fxn:tf.Summary()";
    "Fxn:on_epoch_end" -> "Fxn:summary.value.add()";
    "Fxn:on_epoch_end" -> "Fxn:value.item()";
    "Fxn:on_epoch_end" -> "Fxn:self.writer.add_summary(summary,";
    "Fxn:on_epoch_end" -> "Fxn:self.writer.flush()";
    "Fxn:on_train_end" -> "Fxn:self.writer.close()";
    "class:ReduceLROnPlateau(Callback):" -> "Fxn:__init__";
    "class:ReduceLROnPlateau(Callback):" -> "Fxn:_reset";
    "class:ReduceLROnPlateau(Callback):" -> "Fxn:on_train_begin";
    "class:ReduceLROnPlateau(Callback):" -> "Fxn:on_epoch_end";
    "class:ReduceLROnPlateau(Callback):" -> "Fxn:in_cooldown";
    "Fxn:__init__" -> "Fxn:super(ReduceLROnPlateau,";
    "Fxn:__init__" -> "Fxn:self).__init__()";
    "Fxn:__init__" -> "Fxn:ValueError('ReduceLROnPlateau";
    "Fxn:__init__" -> "Fxn:self._reset()";
    "Fxn:_reset" -> "Fxn:warnings.warn('Learning";
    "Fxn:_reset" -> "Fxn:np.less(a,";
    "Fxn:_reset" -> "Fxn:np.greater(a,";
    "Fxn:on_train_begin" -> "Fxn:self._reset()";
    "Fxn:on_epoch_end" -> "Fxn:K.get_value(self.model.optimizer.lr)";
    "Fxn:on_epoch_end" -> "Fxn:logs.get(self.monitor)";
    "Fxn:on_epoch_end" -> "Fxn:warnings.warn(";
    "Fxn:on_epoch_end" -> "Fxn:','.join(list(logs.keys()))),";
    "Fxn:on_epoch_end" -> "Fxn:self.in_cooldown():";
    "Fxn:on_epoch_end" -> "Fxn:self.monitor_op(current,";
    "Fxn:on_epoch_end" -> "Fxn:self.in_cooldown():";
    "Fxn:on_epoch_end" -> "Fxn:float(K.get_value(self.model.optimizer.lr))";
    "Fxn:on_epoch_end" -> "Fxn:max(new_lr,";
    "Fxn:on_epoch_end" -> "Fxn:K.set_value(self.model.optimizer.lr,";
    "Fxn:on_epoch_end" -> "Fxn:print('\nEpoch";
    "class:CSVLogger(Callback):" -> "Fxn:__init__";
    "class:CSVLogger(Callback):" -> "Fxn:on_train_begin";
    "class:CSVLogger(Callback):" -> "Fxn:on_epoch_end";
    "class:CSVLogger(Callback):" -> "Fxn:handle_value";
    "Fxn:__init__" -> "Fxn:super(CSVLogger,";
    "Fxn:__init__" -> "Fxn:self).__init__()";
    "Fxn:on_train_begin" -> "Fxn:os.path.exists(self.filename):";
    "Fxn:on_train_begin" -> "Fxn:open(self.filename,";
    "Fxn:on_train_begin" -> "Fxn:bool(len(f.readline()))";
    "Fxn:on_train_begin" -> "Fxn:open(self.filename,";
    "Fxn:on_train_begin" -> "Fxn:open(self.filename,";
    "Fxn:handle_value" -> "Fxn:isinstance(k,";
    "Fxn:handle_value" -> "Fxn:isinstance(k,";
    "Fxn:handle_value" -> "Fxn:isinstance(k,";
    "Fxn:handle_value" -> "Fxn:'.join(map(str,";
    "Fxn:handle_value" -> "Fxn:sorted(logs.keys())";
    "Fxn:handle_value" -> "Fxn:dict([(k,";
    "class:CustomDialect(csv.excel):" -> "Fxn:on_train_end";
    "Fxn:on_train_end" -> "Fxn:self.csv_file.close()";
    "class:LambdaCallback(Callback):" -> "Fxn:__init__";
    "Fxn:__init__" -> "Fxn:super(LambdaCallback,";
    "Fxn:__init__" -> "Fxn:self).__init__()";
    "Fxn:__init__" -> "Fxn:self.__dict__.update(kwargs)";
    "/keras/constraints.py" -> "Import:absolute_import";
    "/keras/constraints.py" -> "Import:division";
    "/keras/constraints.py" -> "Import:print_function";
    "/keras/constraints.py" -> "Import:six";
    "/keras/constraints.py" -> "Import:backend";
    "/keras/constraints.py" -> "Import:serialize_keras_object";
    "/keras/constraints.py" -> "Import:deserialize_keras_object";
    "/keras/constraints.py" -> "class:Constraint(object):";
    "/keras/constraints.py" -> "class:MaxNorm(Constraint):";
    "/keras/constraints.py" -> "class:NonNeg(Constraint):";
    "/keras/constraints.py" -> "class:UnitNorm(Constraint):";
    "/keras/constraints.py" -> "class:MinMaxNorm(Constraint):";
    "class:Constraint(object):" -> "Fxn:__call__";
    "class:Constraint(object):" -> "Fxn:get_config";
    "class:MaxNorm(Constraint):" -> "Fxn:__init__";
    "class:MaxNorm(Constraint):" -> "Fxn:__call__";
    "class:MaxNorm(Constraint):" -> "Fxn:get_config";
    "Fxn:__call__" -> "Fxn:K.sqrt(K.sum(K.square(w),";
    "Fxn:__call__" -> "Fxn:K.clip(norms,";
    "class:NonNeg(Constraint):" -> "Fxn:__call__";
    "Fxn:__call__" -> "Fxn:K.cast(K.greater_equal(w,";
    "Fxn:__call__" -> "Fxn:K.floatx())";
    "class:UnitNorm(Constraint):" -> "Fxn:__init__";
    "class:UnitNorm(Constraint):" -> "Fxn:__call__";
    "class:UnitNorm(Constraint):" -> "Fxn:get_config";
    "Fxn:__call__" -> "Fxn:K.sqrt(K.sum(K.square(w),";
    "class:MinMaxNorm(Constraint):" -> "Fxn:__init__";
    "class:MinMaxNorm(Constraint):" -> "Fxn:__call__";
    "class:MinMaxNorm(Constraint):" -> "Fxn:get_config";
    "class:MinMaxNorm(Constraint):" -> "Fxn:serialize";
    "class:MinMaxNorm(Constraint):" -> "Fxn:deserialize";
    "class:MinMaxNorm(Constraint):" -> "Fxn:get";
    "Fxn:__call__" -> "Fxn:K.sqrt(K.sum(K.square(w),";
    "Fxn:__call__" -> "Fxn:K.clip(norms,";
    "Fxn:serialize" -> "Fxn:serialize_keras_object(constraint)";
    "Fxn:deserialize" -> "Fxn:deserialize_keras_object(config,";
    "Fxn:deserialize" -> "Fxn:module_objects=globals(),";
    "Fxn:get" -> "Fxn:isinstance(identifier,";
    "Fxn:get" -> "Fxn:deserialize(identifier)";
    "Fxn:get" -> "Fxn:isinstance(identifier,";
    "Fxn:get" -> "Fxn:str(identifier),";
    "Fxn:get" -> "Fxn:deserialize(config)";
    "Fxn:get" -> "Fxn:callable(identifier):";
    "Fxn:get" -> "Fxn:ValueError('Could";
    "Fxn:get" -> "Fxn:str(identifier))";
    "/keras/initializers.py" -> "Import:absolute_import";
    "/keras/initializers.py" -> "Import:division";
    "/keras/initializers.py" -> "Import:print_function";
    "/keras/initializers.py" -> "Import:numpy";
    "/keras/initializers.py" -> "Import:six";
    "/keras/initializers.py" -> "Import:backend";
    "/keras/initializers.py" -> "Import:serialize_keras_object";
    "/keras/initializers.py" -> "Import:deserialize_keras_object";
    "/keras/initializers.py" -> "class:Initializer(object):";
    "/keras/initializers.py" -> "class:Zeros(Initializer):";
    "/keras/initializers.py" -> "class:Ones(Initializer):";
    "/keras/initializers.py" -> "class:Constant(Initializer):";
    "/keras/initializers.py" -> "class:RandomNormal(Initializer):";
    "/keras/initializers.py" -> "class:RandomUniform(Initializer):";
    "/keras/initializers.py" -> "class:TruncatedNormal(Initializer):";
    "/keras/initializers.py" -> "class:VarianceScaling(Initializer):";
    "/keras/initializers.py" -> "class:Orthogonal(Initializer):";
    "/keras/initializers.py" -> "class:Identity(Initializer):";
    "class:Initializer(object):" -> "Fxn:__call__";
    "class:Initializer(object):" -> "Fxn:get_config";
    "class:Initializer(object):" -> "Fxn:from_config";
    "Fxn:from_config" -> "Fxn:config.pop('dtype')";
    "Fxn:from_config" -> "Fxn:cls(**config)";
    "class:Zeros(Initializer):" -> "Fxn:__call__";
    "Fxn:__call__" -> "Fxn:K.constant(0,";
    "class:Ones(Initializer):" -> "Fxn:__call__";
    "Fxn:__call__" -> "Fxn:K.constant(1,";
    "class:Constant(Initializer):" -> "Fxn:__init__";
    "class:Constant(Initializer):" -> "Fxn:__call__";
    "class:Constant(Initializer):" -> "Fxn:get_config";
    "Fxn:__call__" -> "Fxn:K.constant(self.value,";
    "class:RandomNormal(Initializer):" -> "Fxn:__init__";
    "class:RandomNormal(Initializer):" -> "Fxn:__call__";
    "class:RandomNormal(Initializer):" -> "Fxn:get_config";
    "Fxn:__call__" -> "Fxn:K.random_normal(shape,";
    "class:RandomUniform(Initializer):" -> "Fxn:__init__";
    "class:RandomUniform(Initializer):" -> "Fxn:__call__";
    "class:RandomUniform(Initializer):" -> "Fxn:get_config";
    "Fxn:__call__" -> "Fxn:K.random_uniform(shape,";
    "class:TruncatedNormal(Initializer):" -> "Fxn:__init__";
    "class:TruncatedNormal(Initializer):" -> "Fxn:__call__";
    "class:TruncatedNormal(Initializer):" -> "Fxn:get_config";
    "Fxn:__call__" -> "Fxn:K.truncated_normal(shape,";
    "class:VarianceScaling(Initializer):" -> "Fxn:__init__";
    "class:VarianceScaling(Initializer):" -> "Fxn:__call__";
    "class:VarianceScaling(Initializer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:ValueError('`scale`";
    "Fxn:__init__" -> "Fxn:mode.lower()";
    "Fxn:__init__" -> "Fxn:ValueError('Invalid";
    "Fxn:__init__" -> "Fxn:distribution.lower()";
    "Fxn:__init__" -> "Fxn:ValueError('Invalid";
    "Fxn:__call__" -> "Fxn:_compute_fans(shape)";
    "Fxn:__call__" -> "Fxn:max(1.,";
    "Fxn:__call__" -> "Fxn:max(1.,";
    "Fxn:__call__" -> "Fxn:max(1.,";
    "Fxn:__call__" -> "Fxn:float(fan_in";
    "Fxn:__call__" -> "Fxn:np.sqrt(scale)";
    "Fxn:__call__" -> "Fxn:K.truncated_normal(shape,";
    "Fxn:__call__" -> "Fxn:np.sqrt(3.";
    "Fxn:__call__" -> "Fxn:K.random_uniform(shape,";
    "class:Orthogonal(Initializer):" -> "Fxn:__init__";
    "class:Orthogonal(Initializer):" -> "Fxn:__call__";
    "class:Orthogonal(Initializer):" -> "Fxn:get_config";
    "Fxn:__call__" -> "Fxn:np.random.seed(self.seed)";
    "Fxn:__call__" -> "Fxn:np.random.normal(0.0,";
    "Fxn:__call__" -> "Fxn:np.linalg.svd(a,";
    "Fxn:__call__" -> "Fxn:q.reshape(shape)";
    "class:Identity(Initializer):" -> "Fxn:__init__";
    "class:Identity(Initializer):" -> "Fxn:__call__";
    "class:Identity(Initializer):" -> "Fxn:get_config";
    "class:Identity(Initializer):" -> "Fxn:lecun_uniform";
    "class:Identity(Initializer):" -> "Fxn:glorot_normal";
    "class:Identity(Initializer):" -> "Fxn:glorot_uniform";
    "class:Identity(Initializer):" -> "Fxn:he_normal";
    "class:Identity(Initializer):" -> "Fxn:lecun_normal";
    "class:Identity(Initializer):" -> "Fxn:he_uniform";
    "class:Identity(Initializer):" -> "Fxn:_compute_fans";
    "class:Identity(Initializer):" -> "Fxn:serialize";
    "class:Identity(Initializer):" -> "Fxn:deserialize";
    "class:Identity(Initializer):" -> "Fxn:get";
    "Fxn:__call__" -> "Fxn:len(shape)";
    "Fxn:__call__" -> "Fxn:ValueError('Identity";
    "Fxn:__call__" -> "Fxn:np.identity(shape[0])";
    "Fxn:lecun_uniform" -> "Fxn:`sqrt(3";
    "Fxn:lecun_uniform" -> "Fxn:VarianceScaling(scale=1.,";
    "Fxn:glorot_normal" -> "Fxn:sqrt(2";
    "Fxn:glorot_normal" -> "Fxn:VarianceScaling(scale=1.,";
    "Fxn:glorot_uniform" -> "Fxn:`sqrt(6";
    "Fxn:glorot_uniform" -> "Fxn:VarianceScaling(scale=1.,";
    "Fxn:he_normal" -> "Fxn:sqrt(2";
    "Fxn:he_normal" -> "Fxn:VarianceScaling(scale=2.,";
    "Fxn:lecun_normal" -> "Fxn:sqrt(1";
    "Fxn:lecun_normal" -> "Fxn:Networks](https://arxiv.org/abs/1706.02515)";
    "Fxn:lecun_normal" -> "Fxn:Backprop](http://yann.lecun.com/exdb/publis/pdf/lecun-98b.pdf)";
    "Fxn:lecun_normal" -> "Fxn:VarianceScaling(scale=1.,";
    "Fxn:he_uniform" -> "Fxn:`sqrt(6";
    "Fxn:he_uniform" -> "Fxn:VarianceScaling(scale=2.,";
    "Fxn:_compute_fans" -> "Fxn:`(fan_in,";
    "Fxn:_compute_fans" -> "Fxn:len(shape)";
    "Fxn:_compute_fans" -> "Fxn:len(shape)";
    "Fxn:_compute_fans" -> "Fxn:np.prod(shape[2:])";
    "Fxn:_compute_fans" -> "Fxn:np.prod(shape[:-2])";
    "Fxn:_compute_fans" -> "Fxn:ValueError('Invalid";
    "Fxn:_compute_fans" -> "Fxn:np.sqrt(np.prod(shape))";
    "Fxn:_compute_fans" -> "Fxn:np.sqrt(np.prod(shape))";
    "Fxn:serialize" -> "Fxn:serialize_keras_object(initializer)";
    "Fxn:deserialize" -> "Fxn:deserialize_keras_object(config,";
    "Fxn:deserialize" -> "Fxn:module_objects=globals(),";
    "Fxn:get" -> "Fxn:isinstance(identifier,";
    "Fxn:get" -> "Fxn:deserialize(identifier)";
    "Fxn:get" -> "Fxn:isinstance(identifier,";
    "Fxn:get" -> "Fxn:str(identifier),";
    "Fxn:get" -> "Fxn:deserialize(config)";
    "Fxn:get" -> "Fxn:callable(identifier):";
    "Fxn:get" -> "Fxn:ValueError('Could";
    "Fxn:get" -> "Fxn:str(identifier))";
    "/keras/losses.py" -> "Import:absolute_import";
    "/keras/losses.py" -> "Import:division";
    "/keras/losses.py" -> "Import:print_function";
    "/keras/losses.py" -> "Import:six";
    "/keras/losses.py" -> "Import:backend";
    "/keras/losses.py" -> "Import:deserialize_keras_object";
    "/keras/losses.py" -> "Import:serialize_keras_object";
    "/keras/losses.py" -> "Fxn:mean_squared_error";
    "/keras/losses.py" -> "Fxn:mean_absolute_error";
    "/keras/losses.py" -> "Fxn:mean_absolute_percentage_error";
    "/keras/losses.py" -> "Fxn:mean_squared_logarithmic_error";
    "/keras/losses.py" -> "Fxn:squared_hinge";
    "/keras/losses.py" -> "Fxn:hinge";
    "/keras/losses.py" -> "Fxn:categorical_hinge";
    "/keras/losses.py" -> "Fxn:logcosh";
    "/keras/losses.py" -> "Fxn:_logcosh";
    "/keras/losses.py" -> "Fxn:categorical_crossentropy";
    "/keras/losses.py" -> "Fxn:sparse_categorical_crossentropy";
    "/keras/losses.py" -> "Fxn:binary_crossentropy";
    "/keras/losses.py" -> "Fxn:kullback_leibler_divergence";
    "/keras/losses.py" -> "Fxn:poisson";
    "/keras/losses.py" -> "Fxn:cosine_proximity";
    "/keras/losses.py" -> "Fxn:serialize";
    "/keras/losses.py" -> "Fxn:deserialize";
    "/keras/losses.py" -> "Fxn:get";
    "/keras/metrics.py" -> "Import:absolute_import";
    "/keras/metrics.py" -> "Import:division";
    "/keras/metrics.py" -> "Import:print_function";
    "/keras/metrics.py" -> "Import:six";
    "/keras/metrics.py" -> "Import:backend";
    "/keras/metrics.py" -> "Import:mean_squared_error";
    "/keras/metrics.py" -> "Import:mean_absolute_error";
    "/keras/metrics.py" -> "Import:mean_absolute_percentage_error";
    "/keras/metrics.py" -> "Import:mean_squared_logarithmic_error";
    "/keras/metrics.py" -> "Import:hinge";
    "/keras/metrics.py" -> "Import:logcosh";
    "/keras/metrics.py" -> "Import:squared_hinge";
    "/keras/metrics.py" -> "Import:categorical_crossentropy";
    "/keras/metrics.py" -> "Import:sparse_categorical_crossentropy";
    "/keras/metrics.py" -> "Import:binary_crossentropy";
    "/keras/metrics.py" -> "Import:kullback_leibler_divergence";
    "/keras/metrics.py" -> "Import:poisson";
    "/keras/metrics.py" -> "Import:cosine_proximity";
    "/keras/metrics.py" -> "Import:deserialize_keras_object";
    "/keras/metrics.py" -> "Import:serialize_keras_object";
    "/keras/metrics.py" -> "Fxn:binary_accuracy";
    "/keras/metrics.py" -> "Fxn:categorical_accuracy";
    "/keras/metrics.py" -> "Fxn:sparse_categorical_accuracy";
    "/keras/metrics.py" -> "Fxn:top_k_categorical_accuracy";
    "/keras/metrics.py" -> "Fxn:sparse_top_k_categorical_accuracy";
    "/keras/metrics.py" -> "Fxn:serialize";
    "/keras/metrics.py" -> "Fxn:deserialize";
    "/keras/metrics.py" -> "Fxn:get";
    "/keras/models.py" -> "Import:absolute_import";
    "/keras/models.py" -> "Import:division";
    "/keras/models.py" -> "Import:print_function";
    "/keras/models.py" -> "Import:warnings";
    "/keras/models.py" -> "Import:copy";
    "/keras/models.py" -> "Import:json";
    "/keras/models.py" -> "Import:import";
    "/keras/models.py" -> "Import:yaml";
    "/keras/models.py" -> "Import:numpy";
    "/keras/models.py" -> "Import:backend";
    "/keras/models.py" -> "Import:optimizers";
    "/keras/models.py" -> "Import:layers";
    "/keras/models.py" -> "Import:ask_to_proceed_with_overwrite";
    "/keras/models.py" -> "Import:has_arg";
    "/keras/models.py" -> "Import:Model";
    "/keras/models.py" -> "Import:topology";
    "/keras/models.py" -> "Import:Layer";
    "/keras/models.py" -> "Import:Input";
    "/keras/models.py" -> "Import:InputLayer";
    "/keras/models.py" -> "Import:layers";
    "/keras/models.py" -> "Import:models";
    "/keras/models.py" -> "Import:interfaces";
    "/keras/models.py" -> "Import:h5py";
    "/keras/models.py" -> "Fxn:save_model";
    "/keras/models.py" -> "Fxn:get_json_type";
    "/keras/models.py" -> "Import:__version__";
    "/keras/models.py" -> "Fxn:load_model";
    "/keras/models.py" -> "Fxn:convert_custom_objects";
    "/keras/models.py" -> "Fxn:model_from_config";
    "/keras/models.py" -> "Fxn:model_from_yaml";
    "/keras/models.py" -> "Fxn:model_from_json";
    "/keras/models.py" -> "class:Sequential(Model):";
    "/keras/models.py" -> "class:self.model.compile(optimizer,";
    "class:Sequential(Model):" -> "Fxn:__init__";
    "class:Sequential(Model):" -> "Fxn:add";
    "class:Sequential(Model):" -> "Fxn:pop";
    "class:Sequential(Model):" -> "Fxn:get_layer";
    "class:Sequential(Model):" -> "Fxn:call";
    "class:Sequential(Model):" -> "Fxn:build";
    "class:Sequential(Model):" -> "Fxn:uses_learning_phase";
    "class:Sequential(Model):" -> "Fxn:_flattened_layers";
    "class:Sequential(Model):" -> "Fxn:_gather_list_attr";
    "class:Sequential(Model):" -> "Fxn:trainable";
    "class:Sequential(Model):" -> "Fxn:trainable";
    "class:Sequential(Model):" -> "Fxn:trainable_weights";
    "class:Sequential(Model):" -> "Fxn:non_trainable_weights";
    "class:Sequential(Model):" -> "Fxn:updates";
    "class:Sequential(Model):" -> "Fxn:state_updates";
    "class:Sequential(Model):" -> "Fxn:get_updates_for";
    "class:Sequential(Model):" -> "Fxn:losses";
    "class:Sequential(Model):" -> "Fxn:get_losses_for";
    "class:Sequential(Model):" -> "Fxn:regularizers";
    "class:Sequential(Model):" -> "Fxn:get_weights";
    "class:Sequential(Model):" -> "Fxn:set_weights";
    "class:Sequential(Model):" -> "Fxn:load_weights";
    "class:Sequential(Model):" -> "Fxn:save_weights";
    "class:Sequential(Model):" -> "Fxn:compile";
    "Fxn:__init__" -> "Fxn:str(K.get_uid(prefix))";
    "Fxn:__init__" -> "Fxn:self.add(layer)";
    "Fxn:add" -> "Fxn:isinstance(layer,";
    "Fxn:add" -> "Fxn:TypeError('The";
    "Fxn:pop" -> "Fxn:TypeError('There";
    "Fxn:pop" -> "Fxn:self.layers.pop()";
    "Fxn:get_layer" -> "Fxn:self.build()";
    "Fxn:get_layer" -> "Fxn:self.model.get_layer(name,";
    "Fxn:call" -> "Fxn:self.build()";
    "Fxn:call" -> "Fxn:self.model.call(inputs,";
    "Fxn:build" -> "Fxn:TypeError('Sequential";
    "Fxn:build" -> "Fxn:Model(self.inputs,";
    "Fxn:uses_learning_phase" -> "Fxn:self.build()";
    "Fxn:_flattened_layers" -> "Fxn:isinstance(self.layers[0],";
    "Fxn:_flattened_layers" -> "Fxn:hasattr(layer,";
    "Fxn:_flattened_layers" -> "Fxn:layers.append(sublayer)";
    "Fxn:_flattened_layers" -> "Fxn:hasattr(layer,";
    "Fxn:_flattened_layers" -> "Fxn:layers.append(sublayer)";
    "Fxn:_flattened_layers" -> "Fxn:layers.append(layer)";
    "Fxn:_flattened_layers" -> "Fxn:layers.append(self.layers[0])";
    "Fxn:_flattened_layers" -> "Fxn:layers.append(layer)";
    "Fxn:_gather_list_attr" -> "Fxn:getattr(layer,";
    "Fxn:trainable_weights" -> "Fxn:self._gather_list_attr('trainable_weights')";
    "Fxn:non_trainable_weights" -> "Fxn:self._gather_list_attr('non_trainable_weights')";
    "Fxn:non_trainable_weights" -> "Fxn:self._gather_list_attr('trainable_weights')";
    "Fxn:updates" -> "Fxn:self.build()";
    "Fxn:state_updates" -> "Fxn:self.build()";
    "Fxn:get_updates_for" -> "Fxn:self.build()";
    "Fxn:get_updates_for" -> "Fxn:self.model.get_updates_for(inputs)";
    "Fxn:losses" -> "Fxn:self.build()";
    "Fxn:get_losses_for" -> "Fxn:self.build()";
    "Fxn:get_losses_for" -> "Fxn:self.model.get_losses_for(inputs)";
    "Fxn:regularizers" -> "Fxn:self.build()";
    "Fxn:get_weights" -> "Fxn:legacy_models.needs_legacy_support(self):";
    "Fxn:get_weights" -> "Fxn:legacy_models.legacy_sequential_layers(self)";
    "Fxn:get_weights" -> "Fxn:weights.append(layer.get_weights())";
    "Fxn:get_weights" -> "Fxn:self.build()";
    "Fxn:get_weights" -> "Fxn:self.model.get_weights()";
    "Fxn:set_weights" -> "Fxn:`model.get_weights()`.";
    "Fxn:set_weights" -> "Fxn:legacy_models.needs_legacy_support(self):";
    "Fxn:set_weights" -> "Fxn:legacy_models.legacy_sequential_layers(self)";
    "Fxn:set_weights" -> "Fxn:len(layer.weights)";
    "Fxn:set_weights" -> "Fxn:layer.set_weights(weights[:nb_param])";
    "Fxn:set_weights" -> "Fxn:self.build()";
    "Fxn:set_weights" -> "Fxn:self.model.set_weights(weights)";
    "Fxn:load_weights" -> "Fxn:ImportError('`load_weights`";
    "Fxn:load_weights" -> "Fxn:h5py.File(filepath,";
    "Fxn:load_weights" -> "Fxn:legacy_models.needs_legacy_support(self):";
    "Fxn:load_weights" -> "Fxn:legacy_models.legacy_sequential_layers(self)";
    "Fxn:load_weights" -> "Fxn:topology.load_weights_from_hdf5_group_by_name(f,";
    "Fxn:load_weights" -> "Fxn:topology.load_weights_from_hdf5_group(f,";
    "Fxn:save_weights" -> "Fxn:ImportError('`save_weights`";
    "Fxn:save_weights" -> "Fxn:os.path.isfile(filepath):";
    "Fxn:save_weights" -> "Fxn:ask_to_proceed_with_overwrite(filepath)";
    "Fxn:save_weights" -> "Fxn:legacy_models.needs_legacy_support(self):";
    "Fxn:save_weights" -> "Fxn:legacy_models.legacy_sequential_layers(self)";
    "Fxn:save_weights" -> "Fxn:h5py.File(filepath,";
    "Fxn:save_weights" -> "Fxn:topology.save_weights_to_hdf5_group(f,";
    "Fxn:save_weights" -> "Fxn:f.flush()";
    "Fxn:compile" -> "Fxn:[optimizers](/optimizers).";
    "Fxn:compile" -> "Fxn:[losses](/losses).";
    "Fxn:compile" -> "Fxn:Sequential()";
    "Fxn:compile" -> "Fxn:model.add(Dense(32,";
    "Fxn:compile" -> "Fxn:input_shape=(500,)))";
    "Fxn:compile" -> "Fxn:model.add(Dense(10,";
    "Fxn:compile" -> "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:compile" -> "Fxn:self.build()";
    "class:self.model.compile(optimizer," -> "Fxn:fit";
    "class:self.model.compile(optimizer," -> "Fxn:evaluate";
    "class:self.model.compile(optimizer," -> "Fxn:predict";
    "class:self.model.compile(optimizer," -> "Fxn:predict_on_batch";
    "class:self.model.compile(optimizer," -> "Fxn:train_on_batch";
    "class:self.model.compile(optimizer," -> "Fxn:test_on_batch";
    "class:self.model.compile(optimizer," -> "Fxn:predict_proba";
    "class:self.model.compile(optimizer," -> "Fxn:predict_classes";
    "class:self.model.compile(optimizer," -> "Fxn:fit_generator";
    "class:self.model.compile(optimizer," -> "Fxn:generate_arrays_from_file";
    "class:self.model.compile(optimizer," -> "Fxn:evaluate_generator";
    "class:self.model.compile(optimizer," -> "Fxn:predict_generator";
    "class:self.model.compile(optimizer," -> "Fxn:get_config";
    "class:self.model.compile(optimizer," -> "Fxn:from_config";
    "class:self.model.compile(optimizer," -> "Fxn:legacy_get_config";
    "class:self.model.compile(optimizer," -> "Fxn:legacy_from_config";
    "class:self.model.compile(optimizer," -> "Fxn:normalize_legacy_config";
    "class:self.model.compile(optimizer," -> "Fxn:get_or_create_layer";
    "class:self.model.compile(optimizer," -> "Fxn:_clone_functional_model";
    "class:self.model.compile(optimizer," -> "Fxn:_clone_sequential_model";
    "class:self.model.compile(optimizer," -> "Fxn:clone";
    "class:self.model.compile(optimizer," -> "Fxn:clone_model";
    "Fxn:fit" -> "Fxn:[callbacks](/callbacks).";
    "Fxn:fit" -> "Fxn:`(x_val,";
    "Fxn:fit" -> "Fxn:`(x_val,";
    "Fxn:evaluate" -> "Fxn:RuntimeError('The";
    "Fxn:evaluate" -> "Fxn:self.model.evaluate(x,";
    "Fxn:predict" -> "Fxn:self.build()";
    "Fxn:predict" -> "Fxn:self.model.predict(x,";
    "Fxn:predict_on_batch" -> "Fxn:self.build()";
    "Fxn:predict_on_batch" -> "Fxn:self.model.predict_on_batch(x)";
    "Fxn:train_on_batch" -> "Fxn:RuntimeError('The";
    "Fxn:train_on_batch" -> "Fxn:self.model.train_on_batch(x,";
    "Fxn:test_on_batch" -> "Fxn:RuntimeError('The";
    "Fxn:test_on_batch" -> "Fxn:self.model.test_on_batch(x,";
    "Fxn:fit_generator" -> "Fxn:`(inputs,";
    "Fxn:fit_generator" -> "Fxn:`(inputs,";
    "Fxn:fit_generator" -> "Fxn:`len(generator)`";
    "Fxn:fit_generator" -> "Fxn:[callbacks](/callbacks).";
    "Fxn:fit_generator" -> "Fxn:`(inputs,";
    "Fxn:fit_generator" -> "Fxn:`(inputs,";
    "Fxn:fit_generator" -> "Fxn:`len(validation_data)`";
    "Fxn:generate_arrays_from_file" -> "Fxn:open(path)";
    "Fxn:generate_arrays_from_file" -> "Fxn:process_line(line)";
    "Fxn:generate_arrays_from_file" -> "Fxn:model.fit_generator(generate_arrays_from_file('/my_file.txt'),";
    "Fxn:generate_arrays_from_file" -> "Fxn:RuntimeError('The";
    "Fxn:generate_arrays_from_file" -> "Fxn:self.model.fit_generator(generator,";
    "Fxn:evaluate_generator" -> "Fxn:`len(generator)`";
    "Fxn:evaluate_generator" -> "Fxn:RuntimeError('The";
    "Fxn:evaluate_generator" -> "Fxn:self.model.evaluate_generator(generator,";
    "Fxn:predict_generator" -> "Fxn:`len(generator)`";
    "Fxn:predict_generator" -> "Fxn:self.build()";
    "Fxn:predict_generator" -> "Fxn:self.model.predict_generator(generator,";
    "Fxn:get_config" -> "Fxn:isinstance(self.layers[0],";
    "Fxn:get_config" -> "Fxn:self.legacy_get_config()";
    "Fxn:get_config" -> "Fxn:config.append({'class_name':";
    "Fxn:get_config" -> "Fxn:layer.get_config()})";
    "Fxn:get_config" -> "Fxn:copy.deepcopy(config)";
    "Fxn:from_config" -> "Fxn:cls.legacy_from_config(config)";
    "Fxn:from_config" -> "Fxn:cls()";
    "Fxn:from_config" -> "Fxn:layer_module.deserialize(conf,";
    "Fxn:from_config" -> "Fxn:model.add(layer)";
    "Fxn:legacy_get_config" -> "Fxn:isinstance(self.layers[0],";
    "Fxn:legacy_get_config" -> "Fxn:hasattr(self.layers[0],";
    "Fxn:legacy_get_config" -> "Fxn:layer.get_config()}";
    "Fxn:legacy_get_config" -> "Fxn:layers.append(layer_config)";
    "Fxn:legacy_get_config" -> "Fxn:self.layers[0].get_config()";
    "Fxn:legacy_get_config" -> "Fxn:config.append({'class_name':";
    "Fxn:legacy_get_config" -> "Fxn:config.append({'class_name':";
    "Fxn:legacy_get_config" -> "Fxn:self.layers[0].get_config()})";
    "Fxn:legacy_get_config" -> "Fxn:config.append({'class_name':";
    "Fxn:legacy_get_config" -> "Fxn:layer.get_config()})";
    "Fxn:legacy_get_config" -> "Fxn:copy.deepcopy(config)";
    "Fxn:normalize_legacy_config" -> "Fxn:conf.get('custom_name')";
    "Fxn:normalize_legacy_config" -> "Fxn:cls()";
    "Fxn:get_or_create_layer" -> "Fxn:layer_data['config'].get('name')";
    "Fxn:get_or_create_layer" -> "Fxn:layer_module.deserialize(layer_data)";
    "Fxn:get_or_create_layer" -> "Fxn:normalize_legacy_config(first_layer)";
    "Fxn:get_or_create_layer" -> "Fxn:first_layer_config.pop('layers'):";
    "Fxn:get_or_create_layer" -> "Fxn:layer_module.deserialize(merge_input_config)";
    "Fxn:get_or_create_layer" -> "Fxn:merge_inputs.append(merge_input)";
    "Fxn:get_or_create_layer" -> "Fxn:legacy_layers.Merge.from_config(first_layer_config)";
    "Fxn:get_or_create_layer" -> "Fxn:model.add(merge)";
    "Fxn:get_or_create_layer" -> "Fxn:get_or_create_layer(first_layer)";
    "Fxn:get_or_create_layer" -> "Fxn:model.add(layer)";
    "Fxn:get_or_create_layer" -> "Fxn:normalize_legacy_config(conf)";
    "Fxn:get_or_create_layer" -> "Fxn:get_or_create_layer(conf)";
    "Fxn:get_or_create_layer" -> "Fxn:model.add(layer)";
    "Fxn:_clone_functional_model" -> "Fxn:isinstance(model,";
    "Fxn:_clone_functional_model" -> "Fxn:ValueError('Expected";
    "Fxn:_clone_functional_model" -> "Fxn:isinstance(model,";
    "Fxn:_clone_functional_model" -> "Fxn:ValueError('Expected";
    "Fxn:_clone_functional_model" -> "Fxn:Input(batch_shape=layer.batch_input_shape,";
    "Fxn:_clone_functional_model" -> "Fxn:input_tensors.append(input_tensor)";
    "Fxn:_clone_functional_model" -> "Fxn:zip(model.input_layers,";
    "Fxn:_clone_functional_model" -> "Fxn:topology._to_list(input_tensors)";
    "Fxn:_clone_functional_model" -> "Fxn:enumerate(input_tensors):";
    "Fxn:_clone_functional_model" -> "Fxn:K.is_keras_tensor(x):";
    "Fxn:_clone_functional_model" -> "Fxn:Input(tensor=x,";
    "Fxn:_clone_functional_model" -> "Fxn:_input_tensors.append(input_tensor)";
    "Fxn:_clone_functional_model" -> "Fxn:_input_tensors.append(x)";
    "Fxn:_clone_functional_model" -> "Fxn:zip(model.inputs,";
    "Fxn:_clone_functional_model" -> "Fxn:list(model._nodes_by_depth.keys())";
    "Fxn:_clone_functional_model" -> "Fxn:depth_keys.sort(reverse=True)";
    "Fxn:_clone_functional_model" -> "Fxn:layer.__class__.from_config(layer.get_config())";
    "Fxn:_clone_functional_model" -> "Fxn:isinstance(layer,";
    "Fxn:_clone_functional_model" -> "Fxn:computed_data.append(tensor_map[x])";
    "Fxn:_clone_functional_model" -> "Fxn:len(computed_data)";
    "Fxn:_clone_functional_model" -> "Fxn:len(reference_input_tensors):";
    "Fxn:_clone_functional_model" -> "Fxn:len(computed_data)";
    "Fxn:_clone_functional_model" -> "Fxn:has_arg(layer.call,";
    "Fxn:_clone_functional_model" -> "Fxn:topology._to_list(";
    "Fxn:_clone_functional_model" -> "Fxn:layer(computed_tensor,";
    "Fxn:_clone_functional_model" -> "Fxn:topology._to_list(";
    "Fxn:_clone_functional_model" -> "Fxn:layer.compute_mask(computed_tensor,";
    "Fxn:_clone_functional_model" -> "Fxn:has_arg(layer.call,";
    "Fxn:_clone_functional_model" -> "Fxn:topology._to_list(";
    "Fxn:_clone_functional_model" -> "Fxn:layer(computed_tensors,";
    "Fxn:_clone_functional_model" -> "Fxn:topology._to_list(";
    "Fxn:_clone_functional_model" -> "Fxn:layer.compute_mask(computed_tensors,";
    "Fxn:_clone_functional_model" -> "Fxn:zip(reference_output_tensors,";
    "Fxn:_clone_functional_model" -> "Fxn:str(x)";
    "Fxn:_clone_functional_model" -> "Fxn:output_tensors.append(tensor)";
    "Fxn:_clone_functional_model" -> "Fxn:Model(input_tensors,";
    "Fxn:_clone_sequential_model" -> "Fxn:isinstance(model,";
    "Fxn:_clone_sequential_model" -> "Fxn:ValueError('Expected";
    "Fxn:clone" -> "Fxn:layer.__class__.from_config(layer.get_config())";
    "Fxn:clone" -> "Fxn:[clone(layer)";
    "Fxn:clone" -> "Fxn:Sequential(layers=layers,";
    "Fxn:clone" -> "Fxn:len(topology._to_list(input_tensors))";
    "Fxn:clone" -> "Fxn:ValueError('To";
    "Fxn:clone" -> "Fxn:topology._to_list(input_tensors)[0]";
    "Fxn:clone" -> "Fxn:K.is_keras_tensor(x):";
    "Fxn:clone" -> "Fxn:isinstance(origin_layer,";
    "Fxn:clone" -> "Fxn:Sequential(layers=[origin_layer]";
    "Fxn:clone" -> "Fxn:ValueError('Cannot";
    "Fxn:clone" -> "Fxn:Input(tensor=x,";
    "Fxn:clone" -> "Fxn:str(x.name))";
    "Fxn:clone" -> "Fxn:Sequential(layers=[input_layer]";
    "Fxn:clone_model" -> "Fxn:isinstance(model,";
    "Fxn:clone_model" -> "Fxn:_clone_sequential_model(model,";
    "Fxn:clone_model" -> "Fxn:_clone_functional_model(model,";
    "/keras/objectives.py" -> "Import:absolute_import";
    "/keras/optimizers.py" -> "Import:absolute_import";
    "/keras/optimizers.py" -> "Import:division";
    "/keras/optimizers.py" -> "Import:print_function";
    "/keras/optimizers.py" -> "Import:six";
    "/keras/optimizers.py" -> "Import:copy";
    "/keras/optimizers.py" -> "Import:zip";
    "/keras/optimizers.py" -> "Import:backend";
    "/keras/optimizers.py" -> "Import:serialize_keras_object";
    "/keras/optimizers.py" -> "Import:deserialize_keras_object";
    "/keras/optimizers.py" -> "Import:interfaces";
    "/keras/optimizers.py" -> "Import:tensorflow";
    "/keras/optimizers.py" -> "Fxn:clip_norm";
    "/keras/optimizers.py" -> "class:Optimizer(object):";
    "/keras/optimizers.py" -> "class:SGD(Optimizer):";
    "/keras/optimizers.py" -> "class:RMSprop(Optimizer):";
    "/keras/optimizers.py" -> "class:Adagrad(Optimizer):";
    "/keras/optimizers.py" -> "class:Adadelta(Optimizer):";
    "/keras/optimizers.py" -> "class:Adam(Optimizer):";
    "/keras/optimizers.py" -> "class:Adamax(Optimizer):";
    "/keras/optimizers.py" -> "class:Nadam(Optimizer):";
    "/keras/optimizers.py" -> "class:TFOptimizer(Optimizer):";
    "class:Optimizer(object):" -> "Fxn:__init__";
    "class:Optimizer(object):" -> "Fxn:get_updates";
    "class:Optimizer(object):" -> "Fxn:get_gradients";
    "class:Optimizer(object):" -> "Fxn:set_weights";
    "class:Optimizer(object):" -> "Fxn:get_weights";
    "class:Optimizer(object):" -> "Fxn:get_config";
    "class:Optimizer(object):" -> "Fxn:from_config";
    "Fxn:__init__" -> "Fxn:TypeError('Unexpected";
    "Fxn:__init__" -> "Fxn:str(k))";
    "Fxn:__init__" -> "Fxn:self.__dict__.update(kwargs)";
    "Fxn:get_gradients" -> "Fxn:K.gradients(loss,";
    "Fxn:get_gradients" -> "Fxn:ValueError('An";
    "Fxn:get_gradients" -> "Fxn:hasattr(self,";
    "Fxn:get_gradients" -> "Fxn:K.sqrt(sum([K.sum(K.square(g))";
    "Fxn:get_gradients" -> "Fxn:[clip_norm(g,";
    "Fxn:get_gradients" -> "Fxn:hasattr(self,";
    "Fxn:get_gradients" -> "Fxn:[K.clip(g,";
    "Fxn:set_weights" -> "Fxn:len(params)";
    "Fxn:set_weights" -> "Fxn:len(weights):";
    "Fxn:set_weights" -> "Fxn:ValueError('Length";
    "Fxn:set_weights" -> "Fxn:str(len(weights))";
    "Fxn:set_weights" -> "Fxn:str(len(params))";
    "Fxn:set_weights" -> "Fxn:K.batch_get_value(params)";
    "Fxn:set_weights" -> "Fxn:zip(param_values,";
    "Fxn:set_weights" -> "Fxn:ValueError('Optimizer";
    "Fxn:set_weights" -> "Fxn:str(pv.shape)";
    "Fxn:set_weights" -> "Fxn:str(w.shape))";
    "Fxn:set_weights" -> "Fxn:weight_value_tuples.append((p,";
    "Fxn:set_weights" -> "Fxn:K.batch_set_value(weight_value_tuples)";
    "Fxn:get_weights" -> "Fxn:K.batch_get_value(self.weights)";
    "Fxn:get_config" -> "Fxn:hasattr(self,";
    "Fxn:get_config" -> "Fxn:hasattr(self,";
    "Fxn:from_config" -> "Fxn:cls(**config)";
    "class:SGD(Optimizer):" -> "Fxn:__init__";
    "class:SGD(Optimizer):" -> "Fxn:get_updates";
    "class:SGD(Optimizer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(SGD,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:K.name_scope(self.__class__.__name__):";
    "Fxn:__init__" -> "Fxn:K.variable(0,";
    "Fxn:__init__" -> "Fxn:K.variable(lr,";
    "Fxn:__init__" -> "Fxn:K.variable(momentum,";
    "Fxn:__init__" -> "Fxn:K.variable(decay,";
    "Fxn:get_updates" -> "Fxn:self.get_gradients(loss,";
    "Fxn:get_updates" -> "Fxn:[K.update_add(self.iterations,";
    "Fxn:get_updates" -> "Fxn:K.cast(self.iterations,";
    "Fxn:get_updates" -> "Fxn:K.dtype(self.decay))))";
    "Fxn:get_updates" -> "Fxn:[K.int_shape(p)";
    "Fxn:get_updates" -> "Fxn:[K.zeros(shape)";
    "Fxn:get_updates" -> "Fxn:zip(params,";
    "Fxn:get_updates" -> "Fxn:self.updates.append(K.update(m,";
    "Fxn:get_updates" -> "Fxn:getattr(p,";
    "Fxn:get_updates" -> "Fxn:p.constraint(new_p)";
    "Fxn:get_updates" -> "Fxn:self.updates.append(K.update(p,";
    "Fxn:get_config" -> "Fxn:float(K.get_value(self.lr)),";
    "Fxn:get_config" -> "Fxn:float(K.get_value(self.momentum)),";
    "Fxn:get_config" -> "Fxn:float(K.get_value(self.decay)),";
    "Fxn:get_config" -> "Fxn:super(SGD,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:RMSprop(Optimizer):" -> "Fxn:__init__";
    "class:RMSprop(Optimizer):" -> "Fxn:get_updates";
    "class:RMSprop(Optimizer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(RMSprop,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:K.name_scope(self.__class__.__name__):";
    "Fxn:__init__" -> "Fxn:K.variable(lr,";
    "Fxn:__init__" -> "Fxn:K.variable(rho,";
    "Fxn:__init__" -> "Fxn:K.variable(decay,";
    "Fxn:__init__" -> "Fxn:K.variable(0,";
    "Fxn:__init__" -> "Fxn:K.epsilon()";
    "Fxn:get_updates" -> "Fxn:self.get_gradients(loss,";
    "Fxn:get_updates" -> "Fxn:[K.zeros(K.int_shape(p),";
    "Fxn:get_updates" -> "Fxn:dtype=K.dtype(p))";
    "Fxn:get_updates" -> "Fxn:[K.update_add(self.iterations,";
    "Fxn:get_updates" -> "Fxn:K.cast(self.iterations,";
    "Fxn:get_updates" -> "Fxn:K.dtype(self.decay))))";
    "Fxn:get_updates" -> "Fxn:zip(params,";
    "Fxn:get_updates" -> "Fxn:K.square(g)";
    "Fxn:get_updates" -> "Fxn:self.updates.append(K.update(a,";
    "Fxn:get_updates" -> "Fxn:getattr(p,";
    "Fxn:get_updates" -> "Fxn:p.constraint(new_p)";
    "Fxn:get_updates" -> "Fxn:self.updates.append(K.update(p,";
    "Fxn:get_config" -> "Fxn:float(K.get_value(self.lr)),";
    "Fxn:get_config" -> "Fxn:float(K.get_value(self.rho)),";
    "Fxn:get_config" -> "Fxn:float(K.get_value(self.decay)),";
    "Fxn:get_config" -> "Fxn:super(RMSprop,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:Adagrad(Optimizer):" -> "Fxn:__init__";
    "class:Adagrad(Optimizer):" -> "Fxn:get_updates";
    "class:Adagrad(Optimizer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(Adagrad,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:K.name_scope(self.__class__.__name__):";
    "Fxn:__init__" -> "Fxn:K.variable(lr,";
    "Fxn:__init__" -> "Fxn:K.variable(decay,";
    "Fxn:__init__" -> "Fxn:K.variable(0,";
    "Fxn:__init__" -> "Fxn:K.epsilon()";
    "Fxn:get_updates" -> "Fxn:self.get_gradients(loss,";
    "Fxn:get_updates" -> "Fxn:[K.int_shape(p)";
    "Fxn:get_updates" -> "Fxn:[K.zeros(shape)";
    "Fxn:get_updates" -> "Fxn:[K.update_add(self.iterations,";
    "Fxn:get_updates" -> "Fxn:K.cast(self.iterations,";
    "Fxn:get_updates" -> "Fxn:K.dtype(self.decay))))";
    "Fxn:get_updates" -> "Fxn:zip(params,";
    "Fxn:get_updates" -> "Fxn:K.square(g)";
    "Fxn:get_updates" -> "Fxn:self.updates.append(K.update(a,";
    "Fxn:get_updates" -> "Fxn:getattr(p,";
    "Fxn:get_updates" -> "Fxn:p.constraint(new_p)";
    "Fxn:get_updates" -> "Fxn:self.updates.append(K.update(p,";
    "Fxn:get_config" -> "Fxn:float(K.get_value(self.lr)),";
    "Fxn:get_config" -> "Fxn:float(K.get_value(self.decay)),";
    "Fxn:get_config" -> "Fxn:super(Adagrad,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:Adadelta(Optimizer):" -> "Fxn:__init__";
    "class:Adadelta(Optimizer):" -> "Fxn:get_updates";
    "class:Adadelta(Optimizer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(Adadelta,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:K.name_scope(self.__class__.__name__):";
    "Fxn:__init__" -> "Fxn:K.variable(lr,";
    "Fxn:__init__" -> "Fxn:K.variable(decay,";
    "Fxn:__init__" -> "Fxn:K.variable(0,";
    "Fxn:__init__" -> "Fxn:K.epsilon()";
    "Fxn:get_updates" -> "Fxn:self.get_gradients(loss,";
    "Fxn:get_updates" -> "Fxn:[K.int_shape(p)";
    "Fxn:get_updates" -> "Fxn:[K.zeros(shape)";
    "Fxn:get_updates" -> "Fxn:[K.zeros(shape)";
    "Fxn:get_updates" -> "Fxn:[K.update_add(self.iterations,";
    "Fxn:get_updates" -> "Fxn:K.cast(self.iterations,";
    "Fxn:get_updates" -> "Fxn:K.dtype(self.decay))))";
    "Fxn:get_updates" -> "Fxn:zip(params,";
    "Fxn:get_updates" -> "Fxn:K.square(g)";
    "Fxn:get_updates" -> "Fxn:self.updates.append(K.update(a,";
    "Fxn:get_updates" -> "Fxn:K.sqrt(d_a";
    "Fxn:get_updates" -> "Fxn:K.sqrt(new_a";
    "Fxn:get_updates" -> "Fxn:getattr(p,";
    "Fxn:get_updates" -> "Fxn:p.constraint(new_p)";
    "Fxn:get_updates" -> "Fxn:self.updates.append(K.update(p,";
    "Fxn:get_updates" -> "Fxn:K.square(update)";
    "Fxn:get_updates" -> "Fxn:self.updates.append(K.update(d_a,";
    "Fxn:get_config" -> "Fxn:float(K.get_value(self.lr)),";
    "Fxn:get_config" -> "Fxn:float(K.get_value(self.decay)),";
    "Fxn:get_config" -> "Fxn:super(Adadelta,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:Adam(Optimizer):" -> "Fxn:__init__";
    "class:Adam(Optimizer):" -> "Fxn:get_updates";
    "class:Adam(Optimizer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(Adam,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:K.name_scope(self.__class__.__name__):";
    "Fxn:__init__" -> "Fxn:K.variable(0,";
    "Fxn:__init__" -> "Fxn:K.variable(lr,";
    "Fxn:__init__" -> "Fxn:K.variable(beta_1,";
    "Fxn:__init__" -> "Fxn:K.variable(beta_2,";
    "Fxn:__init__" -> "Fxn:K.variable(decay,";
    "Fxn:__init__" -> "Fxn:K.epsilon()";
    "Fxn:get_updates" -> "Fxn:self.get_gradients(loss,";
    "Fxn:get_updates" -> "Fxn:[K.update_add(self.iterations,";
    "Fxn:get_updates" -> "Fxn:K.cast(self.iterations,";
    "Fxn:get_updates" -> "Fxn:K.dtype(self.decay))))";
    "Fxn:get_updates" -> "Fxn:K.cast(self.iterations,";
    "Fxn:get_updates" -> "Fxn:K.floatx())";
    "Fxn:get_updates" -> "Fxn:K.pow(self.beta_2,";
    "Fxn:get_updates" -> "Fxn:K.pow(self.beta_1,";
    "Fxn:get_updates" -> "Fxn:[K.zeros(K.int_shape(p),";
    "Fxn:get_updates" -> "Fxn:dtype=K.dtype(p))";
    "Fxn:get_updates" -> "Fxn:[K.zeros(K.int_shape(p),";
    "Fxn:get_updates" -> "Fxn:dtype=K.dtype(p))";
    "Fxn:get_updates" -> "Fxn:[K.zeros(K.int_shape(p),";
    "Fxn:get_updates" -> "Fxn:dtype=K.dtype(p))";
    "Fxn:get_updates" -> "Fxn:[K.zeros(1)";
    "Fxn:get_updates" -> "Fxn:zip(params,";
    "Fxn:get_updates" -> "Fxn:K.square(g)";
    "Fxn:get_updates" -> "Fxn:K.maximum(vhat,";
    "Fxn:get_updates" -> "Fxn:self.updates.append(K.update(vhat,";
    "Fxn:get_updates" -> "Fxn:self.updates.append(K.update(m,";
    "Fxn:get_updates" -> "Fxn:self.updates.append(K.update(v,";
    "Fxn:get_updates" -> "Fxn:getattr(p,";
    "Fxn:get_updates" -> "Fxn:p.constraint(new_p)";
    "Fxn:get_updates" -> "Fxn:self.updates.append(K.update(p,";
    "Fxn:get_config" -> "Fxn:float(K.get_value(self.lr)),";
    "Fxn:get_config" -> "Fxn:float(K.get_value(self.beta_1)),";
    "Fxn:get_config" -> "Fxn:float(K.get_value(self.beta_2)),";
    "Fxn:get_config" -> "Fxn:float(K.get_value(self.decay)),";
    "Fxn:get_config" -> "Fxn:super(Adam,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:Adamax(Optimizer):" -> "Fxn:__init__";
    "class:Adamax(Optimizer):" -> "Fxn:get_updates";
    "class:Adamax(Optimizer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(Adamax,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:K.name_scope(self.__class__.__name__):";
    "Fxn:__init__" -> "Fxn:K.variable(0,";
    "Fxn:__init__" -> "Fxn:K.variable(lr,";
    "Fxn:__init__" -> "Fxn:K.variable(beta_1,";
    "Fxn:__init__" -> "Fxn:K.variable(beta_2,";
    "Fxn:__init__" -> "Fxn:K.variable(decay,";
    "Fxn:__init__" -> "Fxn:K.epsilon()";
    "Fxn:get_updates" -> "Fxn:self.get_gradients(loss,";
    "Fxn:get_updates" -> "Fxn:[K.update_add(self.iterations,";
    "Fxn:get_updates" -> "Fxn:K.cast(self.iterations,";
    "Fxn:get_updates" -> "Fxn:K.dtype(self.decay))))";
    "Fxn:get_updates" -> "Fxn:K.cast(self.iterations,";
    "Fxn:get_updates" -> "Fxn:K.floatx())";
    "Fxn:get_updates" -> "Fxn:K.pow(self.beta_1,";
    "Fxn:get_updates" -> "Fxn:[K.int_shape(p)";
    "Fxn:get_updates" -> "Fxn:[K.zeros(shape)";
    "Fxn:get_updates" -> "Fxn:[K.zeros(shape)";
    "Fxn:get_updates" -> "Fxn:zip(params,";
    "Fxn:get_updates" -> "Fxn:K.maximum(self.beta_2";
    "Fxn:get_updates" -> "Fxn:K.abs(g))";
    "Fxn:get_updates" -> "Fxn:self.updates.append(K.update(m,";
    "Fxn:get_updates" -> "Fxn:self.updates.append(K.update(u,";
    "Fxn:get_updates" -> "Fxn:getattr(p,";
    "Fxn:get_updates" -> "Fxn:p.constraint(new_p)";
    "Fxn:get_updates" -> "Fxn:self.updates.append(K.update(p,";
    "Fxn:get_config" -> "Fxn:float(K.get_value(self.lr)),";
    "Fxn:get_config" -> "Fxn:float(K.get_value(self.beta_1)),";
    "Fxn:get_config" -> "Fxn:float(K.get_value(self.beta_2)),";
    "Fxn:get_config" -> "Fxn:float(K.get_value(self.decay)),";
    "Fxn:get_config" -> "Fxn:super(Adamax,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:Nadam(Optimizer):" -> "Fxn:__init__";
    "class:Nadam(Optimizer):" -> "Fxn:get_updates";
    "class:Nadam(Optimizer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(Nadam,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:K.name_scope(self.__class__.__name__):";
    "Fxn:__init__" -> "Fxn:K.variable(0,";
    "Fxn:__init__" -> "Fxn:K.variable(1.,";
    "Fxn:__init__" -> "Fxn:K.variable(lr,";
    "Fxn:__init__" -> "Fxn:K.variable(beta_1,";
    "Fxn:__init__" -> "Fxn:K.variable(beta_2,";
    "Fxn:__init__" -> "Fxn:K.epsilon()";
    "Fxn:get_updates" -> "Fxn:self.get_gradients(loss,";
    "Fxn:get_updates" -> "Fxn:[K.update_add(self.iterations,";
    "Fxn:get_updates" -> "Fxn:K.cast(self.iterations,";
    "Fxn:get_updates" -> "Fxn:K.floatx())";
    "Fxn:get_updates" -> "Fxn:self.updates.append((self.m_schedule,";
    "Fxn:get_updates" -> "Fxn:[K.int_shape(p)";
    "Fxn:get_updates" -> "Fxn:[K.zeros(shape)";
    "Fxn:get_updates" -> "Fxn:[K.zeros(shape)";
    "Fxn:get_updates" -> "Fxn:zip(params,";
    "Fxn:get_updates" -> "Fxn:K.square(g)";
    "Fxn:get_updates" -> "Fxn:K.pow(self.beta_2,";
    "Fxn:get_updates" -> "Fxn:self.updates.append(K.update(m,";
    "Fxn:get_updates" -> "Fxn:self.updates.append(K.update(v,";
    "Fxn:get_updates" -> "Fxn:getattr(p,";
    "Fxn:get_updates" -> "Fxn:p.constraint(new_p)";
    "Fxn:get_updates" -> "Fxn:self.updates.append(K.update(p,";
    "Fxn:get_config" -> "Fxn:float(K.get_value(self.lr)),";
    "Fxn:get_config" -> "Fxn:float(K.get_value(self.beta_1)),";
    "Fxn:get_config" -> "Fxn:float(K.get_value(self.beta_2)),";
    "Fxn:get_config" -> "Fxn:super(Nadam,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:TFOptimizer(Optimizer):" -> "Fxn:__init__";
    "class:TFOptimizer(Optimizer):" -> "Fxn:get_updates";
    "class:TFOptimizer(Optimizer):" -> "Fxn:weights";
    "class:TFOptimizer(Optimizer):" -> "Fxn:get_config";
    "class:TFOptimizer(Optimizer):" -> "Fxn:from_config";
    "class:TFOptimizer(Optimizer):" -> "Fxn:serialize";
    "class:TFOptimizer(Optimizer):" -> "Fxn:deserialize";
    "class:TFOptimizer(Optimizer):" -> "Fxn:get";
    "Fxn:__init__" -> "Fxn:K.name_scope(self.__class__.__name__):";
    "Fxn:__init__" -> "Fxn:K.variable(0,";
    "Fxn:get_updates" -> "Fxn:self.optimizer.compute_gradients(loss,";
    "Fxn:get_updates" -> "Fxn:[K.update_add(self.iterations,";
    "Fxn:get_updates" -> "Fxn:self.optimizer.apply_gradients(";
    "Fxn:get_updates" -> "Fxn:self.updates.append(opt_update)";
    "Fxn:serialize" -> "Fxn:serialize_keras_object(optimizer)";
    "Fxn:deserialize" -> "Fxn:config['class_name'].lower()";
    "Fxn:deserialize" -> "Fxn:config['class_name'].lower()";
    "Fxn:deserialize" -> "Fxn:deserialize_keras_object(config,";
    "Fxn:get" -> "Fxn:K.backend()";
    "Fxn:get" -> "Fxn:isinstance(identifier,";
    "Fxn:get" -> "Fxn:TFOptimizer(identifier)";
    "Fxn:get" -> "Fxn:isinstance(identifier,";
    "Fxn:get" -> "Fxn:deserialize(identifier)";
    "Fxn:get" -> "Fxn:isinstance(identifier,";
    "Fxn:get" -> "Fxn:str(identifier),";
    "Fxn:get" -> "Fxn:deserialize(config)";
    "Fxn:get" -> "Fxn:isinstance(identifier,";
    "Fxn:get" -> "Fxn:ValueError('Could";
    "Fxn:get" -> "Fxn:str(identifier))";
    "/keras/regularizers.py" -> "Import:absolute_import";
    "/keras/regularizers.py" -> "Import:division";
    "/keras/regularizers.py" -> "Import:print_function";
    "/keras/regularizers.py" -> "Import:six";
    "/keras/regularizers.py" -> "Import:backend";
    "/keras/regularizers.py" -> "Import:serialize_keras_object";
    "/keras/regularizers.py" -> "Import:deserialize_keras_object";
    "/keras/regularizers.py" -> "class:Regularizer(object):";
    "/keras/regularizers.py" -> "class:L1L2(Regularizer):";
    "class:Regularizer(object):" -> "Fxn:__call__";
    "class:Regularizer(object):" -> "Fxn:from_config";
    "Fxn:from_config" -> "Fxn:cls(**config)";
    "class:L1L2(Regularizer):" -> "Fxn:__init__";
    "class:L1L2(Regularizer):" -> "Fxn:__call__";
    "class:L1L2(Regularizer):" -> "Fxn:get_config";
    "class:L1L2(Regularizer):" -> "Fxn:l1";
    "class:L1L2(Regularizer):" -> "Fxn:l2";
    "class:L1L2(Regularizer):" -> "Fxn:l1_l2";
    "class:L1L2(Regularizer):" -> "Fxn:serialize";
    "class:L1L2(Regularizer):" -> "Fxn:deserialize";
    "class:L1L2(Regularizer):" -> "Fxn:get";
    "Fxn:__init__" -> "Fxn:K.cast_to_floatx(l1)";
    "Fxn:__init__" -> "Fxn:K.cast_to_floatx(l2)";
    "Fxn:__call__" -> "Fxn:K.sum(self.l1";
    "Fxn:__call__" -> "Fxn:K.abs(x))";
    "Fxn:__call__" -> "Fxn:K.sum(self.l2";
    "Fxn:__call__" -> "Fxn:K.square(x))";
    "Fxn:get_config" -> "Fxn:float(self.l1),";
    "Fxn:get_config" -> "Fxn:float(self.l2)}";
    "Fxn:l1" -> "Fxn:L1L2(l1=l)";
    "Fxn:l2" -> "Fxn:L1L2(l2=l)";
    "Fxn:l1_l2" -> "Fxn:L1L2(l1=l1,";
    "Fxn:serialize" -> "Fxn:serialize_keras_object(regularizer)";
    "Fxn:deserialize" -> "Fxn:deserialize_keras_object(config,";
    "Fxn:deserialize" -> "Fxn:module_objects=globals(),";
    "Fxn:get" -> "Fxn:isinstance(identifier,";
    "Fxn:get" -> "Fxn:deserialize(identifier)";
    "Fxn:get" -> "Fxn:isinstance(identifier,";
    "Fxn:get" -> "Fxn:str(identifier),";
    "Fxn:get" -> "Fxn:deserialize(config)";
    "Fxn:get" -> "Fxn:callable(identifier):";
    "Fxn:get" -> "Fxn:ValueError('Could";
    "Fxn:get" -> "Fxn:str(identifier))";
    "/keras/__init__.py" -> "Import:absolute_import";
    "/keras/__init__.py" -> "Import:utils";
    "/keras/__init__.py" -> "Import:activations";
    "/keras/__init__.py" -> "Import:applications";
    "/keras/__init__.py" -> "Import:backend";
    "/keras/__init__.py" -> "Import:datasets";
    "/keras/__init__.py" -> "Import:engine";
    "/keras/__init__.py" -> "Import:layers";
    "/keras/__init__.py" -> "Import:preprocessing";
    "/keras/__init__.py" -> "Import:wrappers";
    "/keras/__init__.py" -> "Import:callbacks";
    "/keras/__init__.py" -> "Import:constraints";
    "/keras/__init__.py" -> "Import:initializers";
    "/keras/__init__.py" -> "Import:metrics";
    "/keras/__init__.py" -> "Import:models";
    "/keras/__init__.py" -> "Import:losses";
    "/keras/__init__.py" -> "Import:optimizers";
    "/keras/__init__.py" -> "Import:regularizers";
    "/keras/__init__.py" -> "Import:Input";
    "/keras/__init__.py" -> "Import:Model";
    "/keras/__init__.py" -> "Import:Sequential";
    "/keras/applications/densenet.py" -> "Import:absolute_import";
    "/keras/applications/densenet.py" -> "Import:division";
    "/keras/applications/densenet.py" -> "Import:print_function";
    "/keras/applications/densenet.py" -> "Import:import";
    "/keras/applications/densenet.py" -> "Import:backend";
    "/keras/applications/densenet.py" -> "Import:Model";
    "/keras/applications/densenet.py" -> "Import:Activation";
    "/keras/applications/densenet.py" -> "Import:AveragePooling2D";
    "/keras/applications/densenet.py" -> "Import:BatchNormalization";
    "/keras/applications/densenet.py" -> "Import:Concatenate";
    "/keras/applications/densenet.py" -> "Import:Conv2D";
    "/keras/applications/densenet.py" -> "Import:Dense";
    "/keras/applications/densenet.py" -> "Import:GlobalAveragePooling2D";
    "/keras/applications/densenet.py" -> "Import:GlobalMaxPooling2D";
    "/keras/applications/densenet.py" -> "Import:Input";
    "/keras/applications/densenet.py" -> "Import:MaxPooling2D";
    "/keras/applications/densenet.py" -> "Import:ZeroPadding2D";
    "/keras/applications/densenet.py" -> "Import:get_file";
    "/keras/applications/densenet.py" -> "Import:get_source_inputs";
    "/keras/applications/densenet.py" -> "Import:imagenet_utils";
    "/keras/applications/densenet.py" -> "Import:decode_predictions";
    "/keras/applications/densenet.py" -> "Import:_obtain_input_shape";
    "/keras/applications/densenet.py" -> "Fxn:dense_block";
    "/keras/applications/densenet.py" -> "Fxn:transition_block";
    "/keras/applications/densenet.py" -> "Fxn:conv_block";
    "/keras/applications/densenet.py" -> "Fxn:DenseNet";
    "/keras/applications/densenet.py" -> "Fxn:DenseNet121";
    "/keras/applications/densenet.py" -> "Fxn:DenseNet169";
    "/keras/applications/densenet.py" -> "Fxn:DenseNet201";
    "/keras/applications/densenet.py" -> "Fxn:preprocess_input";
    "/keras/applications/imagenet_utils.py" -> "Import:absolute_import";
    "/keras/applications/imagenet_utils.py" -> "Import:division";
    "/keras/applications/imagenet_utils.py" -> "Import:print_function";
    "/keras/applications/imagenet_utils.py" -> "Import:json";
    "/keras/applications/imagenet_utils.py" -> "Import:warnings";
    "/keras/applications/imagenet_utils.py" -> "Import:numpy";
    "/keras/applications/imagenet_utils.py" -> "Import:get_file";
    "/keras/applications/imagenet_utils.py" -> "Import:backend";
    "/keras/applications/imagenet_utils.py" -> "Fxn:_preprocess_numpy_input";
    "/keras/applications/imagenet_utils.py" -> "Fxn:_preprocess_symbolic_input";
    "/keras/applications/imagenet_utils.py" -> "Fxn:preprocess_input";
    "/keras/applications/imagenet_utils.py" -> "Fxn:decode_predictions";
    "/keras/applications/imagenet_utils.py" -> "Fxn:_obtain_input_shape";
    "/keras/applications/inception_resnet_v2.py" -> "Import:absolute_import";
    "/keras/applications/inception_resnet_v2.py" -> "Import:division";
    "/keras/applications/inception_resnet_v2.py" -> "Import:print_function";
    "/keras/applications/inception_resnet_v2.py" -> "Import:import";
    "/keras/applications/inception_resnet_v2.py" -> "Import:warnings";
    "/keras/applications/inception_resnet_v2.py" -> "Import:Model";
    "/keras/applications/inception_resnet_v2.py" -> "Import:Activation";
    "/keras/applications/inception_resnet_v2.py" -> "Import:AveragePooling2D";
    "/keras/applications/inception_resnet_v2.py" -> "Import:BatchNormalization";
    "/keras/applications/inception_resnet_v2.py" -> "Import:Concatenate";
    "/keras/applications/inception_resnet_v2.py" -> "Import:Conv2D";
    "/keras/applications/inception_resnet_v2.py" -> "Import:Dense";
    "/keras/applications/inception_resnet_v2.py" -> "Import:GlobalAveragePooling2D";
    "/keras/applications/inception_resnet_v2.py" -> "Import:GlobalMaxPooling2D";
    "/keras/applications/inception_resnet_v2.py" -> "Import:Input";
    "/keras/applications/inception_resnet_v2.py" -> "Import:Lambda";
    "/keras/applications/inception_resnet_v2.py" -> "Import:MaxPooling2D";
    "/keras/applications/inception_resnet_v2.py" -> "Import:get_file";
    "/keras/applications/inception_resnet_v2.py" -> "Import:get_source_inputs";
    "/keras/applications/inception_resnet_v2.py" -> "Import:imagenet_utils";
    "/keras/applications/inception_resnet_v2.py" -> "Import:_obtain_input_shape";
    "/keras/applications/inception_resnet_v2.py" -> "Import:decode_predictions";
    "/keras/applications/inception_resnet_v2.py" -> "Import:backend";
    "/keras/applications/inception_resnet_v2.py" -> "Fxn:preprocess_input";
    "/keras/applications/inception_resnet_v2.py" -> "Fxn:conv2d_bn";
    "/keras/applications/inception_resnet_v2.py" -> "Fxn:inception_resnet_block";
    "/keras/applications/inception_resnet_v2.py" -> "Fxn:InceptionResNetV2";
    "/keras/applications/inception_v3.py" -> "Import:absolute_import";
    "/keras/applications/inception_v3.py" -> "Import:division";
    "/keras/applications/inception_v3.py" -> "Import:print_function";
    "/keras/applications/inception_v3.py" -> "Import:import";
    "/keras/applications/inception_v3.py" -> "Import:warnings";
    "/keras/applications/inception_v3.py" -> "Import:Model";
    "/keras/applications/inception_v3.py" -> "Import:layers";
    "/keras/applications/inception_v3.py" -> "Import:Activation";
    "/keras/applications/inception_v3.py" -> "Import:Dense";
    "/keras/applications/inception_v3.py" -> "Import:Input";
    "/keras/applications/inception_v3.py" -> "Import:BatchNormalization";
    "/keras/applications/inception_v3.py" -> "Import:Conv2D";
    "/keras/applications/inception_v3.py" -> "Import:MaxPooling2D";
    "/keras/applications/inception_v3.py" -> "Import:AveragePooling2D";
    "/keras/applications/inception_v3.py" -> "Import:GlobalAveragePooling2D";
    "/keras/applications/inception_v3.py" -> "Import:GlobalMaxPooling2D";
    "/keras/applications/inception_v3.py" -> "Import:get_source_inputs";
    "/keras/applications/inception_v3.py" -> "Import:get_file";
    "/keras/applications/inception_v3.py" -> "Import:backend";
    "/keras/applications/inception_v3.py" -> "Import:imagenet_utils";
    "/keras/applications/inception_v3.py" -> "Import:decode_predictions";
    "/keras/applications/inception_v3.py" -> "Import:_obtain_input_shape";
    "/keras/applications/inception_v3.py" -> "Fxn:conv2d_bn";
    "/keras/applications/inception_v3.py" -> "Fxn:InceptionV3";
    "/keras/applications/inception_v3.py" -> "Fxn:preprocess_input";
    "/keras/applications/mobilenet.py" -> "Import:print_function";
    "/keras/applications/mobilenet.py" -> "Import:absolute_import";
    "/keras/applications/mobilenet.py" -> "Import:division";
    "/keras/applications/mobilenet.py" -> "Import:import";
    "/keras/applications/mobilenet.py" -> "Import:warnings";
    "/keras/applications/mobilenet.py" -> "Import:Model";
    "/keras/applications/mobilenet.py" -> "Import:Input";
    "/keras/applications/mobilenet.py" -> "Import:Activation";
    "/keras/applications/mobilenet.py" -> "Import:Dropout";
    "/keras/applications/mobilenet.py" -> "Import:Reshape";
    "/keras/applications/mobilenet.py" -> "Import:BatchNormalization";
    "/keras/applications/mobilenet.py" -> "Import:GlobalAveragePooling2D";
    "/keras/applications/mobilenet.py" -> "Import:GlobalMaxPooling2D";
    "/keras/applications/mobilenet.py" -> "Import:ZeroPadding2D";
    "/keras/applications/mobilenet.py" -> "Import:Conv2D";
    "/keras/applications/mobilenet.py" -> "Import:DepthwiseConv2D";
    "/keras/applications/mobilenet.py" -> "Import:initializers";
    "/keras/applications/mobilenet.py" -> "Import:regularizers";
    "/keras/applications/mobilenet.py" -> "Import:constraints";
    "/keras/applications/mobilenet.py" -> "Import:conv_utils";
    "/keras/applications/mobilenet.py" -> "Import:get_file";
    "/keras/applications/mobilenet.py" -> "Import:get_source_inputs";
    "/keras/applications/mobilenet.py" -> "Import:InputSpec";
    "/keras/applications/mobilenet.py" -> "Import:imagenet_utils";
    "/keras/applications/mobilenet.py" -> "Import:_obtain_input_shape";
    "/keras/applications/mobilenet.py" -> "Import:decode_predictions";
    "/keras/applications/mobilenet.py" -> "Import:backend";
    "/keras/applications/mobilenet.py" -> "Fxn:relu6";
    "/keras/applications/mobilenet.py" -> "Fxn:preprocess_input";
    "/keras/applications/mobilenet.py" -> "Fxn:MobileNet";
    "/keras/applications/mobilenet.py" -> "Import:custom";
    "/keras/applications/mobilenet.py" -> "Fxn:_conv_block";
    "/keras/applications/mobilenet.py" -> "Fxn:_depthwise_conv_block";
    "/keras/applications/nasnet.py" -> "Import:print_function";
    "/keras/applications/nasnet.py" -> "Import:absolute_import";
    "/keras/applications/nasnet.py" -> "Import:division";
    "/keras/applications/nasnet.py" -> "Import:import";
    "/keras/applications/nasnet.py" -> "Import:warnings";
    "/keras/applications/nasnet.py" -> "Import:Model";
    "/keras/applications/nasnet.py" -> "Import:Input";
    "/keras/applications/nasnet.py" -> "Import:Activation";
    "/keras/applications/nasnet.py" -> "Import:Dense";
    "/keras/applications/nasnet.py" -> "Import:BatchNormalization";
    "/keras/applications/nasnet.py" -> "Import:MaxPooling2D";
    "/keras/applications/nasnet.py" -> "Import:AveragePooling2D";
    "/keras/applications/nasnet.py" -> "Import:GlobalAveragePooling2D";
    "/keras/applications/nasnet.py" -> "Import:GlobalMaxPooling2D";
    "/keras/applications/nasnet.py" -> "Import:Conv2D";
    "/keras/applications/nasnet.py" -> "Import:SeparableConv2D";
    "/keras/applications/nasnet.py" -> "Import:ZeroPadding2D";
    "/keras/applications/nasnet.py" -> "Import:Cropping2D";
    "/keras/applications/nasnet.py" -> "Import:concatenate";
    "/keras/applications/nasnet.py" -> "Import:add";
    "/keras/applications/nasnet.py" -> "Import:get_file";
    "/keras/applications/nasnet.py" -> "Import:get_source_inputs";
    "/keras/applications/nasnet.py" -> "Import:_obtain_input_shape";
    "/keras/applications/nasnet.py" -> "Import:preprocess_input";
    "/keras/applications/nasnet.py" -> "Import:decode_predictions";
    "/keras/applications/nasnet.py" -> "Import:backend";
    "/keras/applications/nasnet.py" -> "Fxn:NASNet";
    "/keras/applications/nasnet.py" -> "Fxn:NASNetLarge";
    "/keras/applications/nasnet.py" -> "Fxn:NASNetMobile";
    "/keras/applications/nasnet.py" -> "Fxn:_separable_conv_block";
    "/keras/applications/nasnet.py" -> "Fxn:_adjust_block";
    "/keras/applications/nasnet.py" -> "Fxn:_normal_a_cell";
    "/keras/applications/nasnet.py" -> "Fxn:_reduction_a_cell";
    "/keras/applications/resnet50.py" -> "Import:absolute_import";
    "/keras/applications/resnet50.py" -> "Import:division";
    "/keras/applications/resnet50.py" -> "Import:print_function";
    "/keras/applications/resnet50.py" -> "Import:import";
    "/keras/applications/resnet50.py" -> "Import:warnings";
    "/keras/applications/resnet50.py" -> "Import:Input";
    "/keras/applications/resnet50.py" -> "Import:layers";
    "/keras/applications/resnet50.py" -> "Import:Dense";
    "/keras/applications/resnet50.py" -> "Import:Activation";
    "/keras/applications/resnet50.py" -> "Import:Flatten";
    "/keras/applications/resnet50.py" -> "Import:Conv2D";
    "/keras/applications/resnet50.py" -> "Import:MaxPooling2D";
    "/keras/applications/resnet50.py" -> "Import:AveragePooling2D";
    "/keras/applications/resnet50.py" -> "Import:GlobalAveragePooling2D";
    "/keras/applications/resnet50.py" -> "Import:GlobalMaxPooling2D";
    "/keras/applications/resnet50.py" -> "Import:ZeroPadding2D";
    "/keras/applications/resnet50.py" -> "Import:BatchNormalization";
    "/keras/applications/resnet50.py" -> "Import:Model";
    "/keras/applications/resnet50.py" -> "Import:backend";
    "/keras/applications/resnet50.py" -> "Import:get_source_inputs";
    "/keras/applications/resnet50.py" -> "Import:layer_utils";
    "/keras/applications/resnet50.py" -> "Import:get_file";
    "/keras/applications/resnet50.py" -> "Import:decode_predictions";
    "/keras/applications/resnet50.py" -> "Import:preprocess_input";
    "/keras/applications/resnet50.py" -> "Import:_obtain_input_shape";
    "/keras/applications/resnet50.py" -> "Fxn:identity_block";
    "/keras/applications/resnet50.py" -> "Fxn:conv_block";
    "/keras/applications/resnet50.py" -> "Fxn:ResNet50";
    "/keras/applications/vgg16.py" -> "Import:absolute_import";
    "/keras/applications/vgg16.py" -> "Import:division";
    "/keras/applications/vgg16.py" -> "Import:print_function";
    "/keras/applications/vgg16.py" -> "Import:import";
    "/keras/applications/vgg16.py" -> "Import:warnings";
    "/keras/applications/vgg16.py" -> "Import:Model";
    "/keras/applications/vgg16.py" -> "Import:Flatten";
    "/keras/applications/vgg16.py" -> "Import:Dense";
    "/keras/applications/vgg16.py" -> "Import:Input";
    "/keras/applications/vgg16.py" -> "Import:Conv2D";
    "/keras/applications/vgg16.py" -> "Import:MaxPooling2D";
    "/keras/applications/vgg16.py" -> "Import:GlobalAveragePooling2D";
    "/keras/applications/vgg16.py" -> "Import:GlobalMaxPooling2D";
    "/keras/applications/vgg16.py" -> "Import:get_source_inputs";
    "/keras/applications/vgg16.py" -> "Import:layer_utils";
    "/keras/applications/vgg16.py" -> "Import:get_file";
    "/keras/applications/vgg16.py" -> "Import:backend";
    "/keras/applications/vgg16.py" -> "Import:decode_predictions";
    "/keras/applications/vgg16.py" -> "Import:preprocess_input";
    "/keras/applications/vgg16.py" -> "Import:_obtain_input_shape";
    "/keras/applications/vgg16.py" -> "Fxn:VGG16";
    "/keras/applications/vgg19.py" -> "Import:absolute_import";
    "/keras/applications/vgg19.py" -> "Import:division";
    "/keras/applications/vgg19.py" -> "Import:print_function";
    "/keras/applications/vgg19.py" -> "Import:import";
    "/keras/applications/vgg19.py" -> "Import:warnings";
    "/keras/applications/vgg19.py" -> "Import:Model";
    "/keras/applications/vgg19.py" -> "Import:Flatten";
    "/keras/applications/vgg19.py" -> "Import:Dense";
    "/keras/applications/vgg19.py" -> "Import:Input";
    "/keras/applications/vgg19.py" -> "Import:Conv2D";
    "/keras/applications/vgg19.py" -> "Import:MaxPooling2D";
    "/keras/applications/vgg19.py" -> "Import:GlobalAveragePooling2D";
    "/keras/applications/vgg19.py" -> "Import:GlobalMaxPooling2D";
    "/keras/applications/vgg19.py" -> "Import:get_source_inputs";
    "/keras/applications/vgg19.py" -> "Import:layer_utils";
    "/keras/applications/vgg19.py" -> "Import:get_file";
    "/keras/applications/vgg19.py" -> "Import:backend";
    "/keras/applications/vgg19.py" -> "Import:decode_predictions";
    "/keras/applications/vgg19.py" -> "Import:preprocess_input";
    "/keras/applications/vgg19.py" -> "Import:_obtain_input_shape";
    "/keras/applications/vgg19.py" -> "Fxn:VGG19";
    "/keras/applications/xception.py" -> "Import:absolute_import";
    "/keras/applications/xception.py" -> "Import:division";
    "/keras/applications/xception.py" -> "Import:print_function";
    "/keras/applications/xception.py" -> "Import:import";
    "/keras/applications/xception.py" -> "Import:warnings";
    "/keras/applications/xception.py" -> "Import:Model";
    "/keras/applications/xception.py" -> "Import:layers";
    "/keras/applications/xception.py" -> "Import:Dense";
    "/keras/applications/xception.py" -> "Import:Input";
    "/keras/applications/xception.py" -> "Import:BatchNormalization";
    "/keras/applications/xception.py" -> "Import:Activation";
    "/keras/applications/xception.py" -> "Import:Conv2D";
    "/keras/applications/xception.py" -> "Import:SeparableConv2D";
    "/keras/applications/xception.py" -> "Import:MaxPooling2D";
    "/keras/applications/xception.py" -> "Import:GlobalAveragePooling2D";
    "/keras/applications/xception.py" -> "Import:GlobalMaxPooling2D";
    "/keras/applications/xception.py" -> "Import:get_source_inputs";
    "/keras/applications/xception.py" -> "Import:get_file";
    "/keras/applications/xception.py" -> "Import:backend";
    "/keras/applications/xception.py" -> "Import:imagenet_utils";
    "/keras/applications/xception.py" -> "Import:decode_predictions";
    "/keras/applications/xception.py" -> "Import:_obtain_input_shape";
    "/keras/applications/xception.py" -> "Fxn:Xception";
    "/keras/applications/xception.py" -> "Fxn:preprocess_input";
    "/keras/applications/__init__.py" -> "Import:VGG16";
    "/keras/applications/__init__.py" -> "Import:VGG19";
    "/keras/applications/__init__.py" -> "Import:ResNet50";
    "/keras/applications/__init__.py" -> "Import:InceptionV3";
    "/keras/applications/__init__.py" -> "Import:InceptionResNetV2";
    "/keras/applications/__init__.py" -> "Import:Xception";
    "/keras/applications/__init__.py" -> "Import:MobileNet";
    "/keras/applications/__init__.py" -> "Import:DenseNet121,";
    "/keras/applications/__init__.py" -> "Import:NASNetMobile,";
    "/keras/backend/cntk_backend.py" -> "Import:absolute_import";
    "/keras/backend/cntk_backend.py" -> "Import:division";
    "/keras/backend/cntk_backend.py" -> "Import:print_function";
    "/keras/backend/cntk_backend.py" -> "Import:cntk";
    "/keras/backend/cntk_backend.py" -> "Import:numpy";
    "/keras/backend/cntk_backend.py" -> "Import:floatx,";
    "/keras/backend/cntk_backend.py" -> "Import:defaultdict";
    "/keras/backend/cntk_backend.py" -> "Import:contextmanager";
    "/keras/backend/cntk_backend.py" -> "Import:warnings";
    "/keras/backend/cntk_backend.py" -> "Fxn:name_scope";
    "/keras/backend/cntk_backend.py" -> "Fxn:get_uid";
    "/keras/backend/cntk_backend.py" -> "Fxn:learning_phase";
    "/keras/backend/cntk_backend.py" -> "Fxn:set_learning_phase";
    "/keras/backend/cntk_backend.py" -> "Fxn:in_train_phase";
    "/keras/backend/cntk_backend.py" -> "Fxn:in_test_phase";
    "/keras/backend/cntk_backend.py" -> "Fxn:_convert_string_dtype";
    "/keras/backend/cntk_backend.py" -> "Fxn:_convert_dtype_string";
    "/keras/backend/cntk_backend.py" -> "Fxn:variable";
    "/keras/backend/cntk_backend.py" -> "Fxn:bias_add";
    "/keras/backend/cntk_backend.py" -> "Fxn:eval";
    "/keras/backend/cntk_backend.py" -> "Fxn:placeholder";
    "/keras/backend/cntk_backend.py" -> "Fxn:is_placeholder";
    "/keras/backend/cntk_backend.py" -> "Fxn:is_keras_tensor";
    "/keras/backend/cntk_backend.py" -> "Fxn:shape";
    "/keras/backend/cntk_backend.py" -> "Fxn:is_sparse";
    "/keras/backend/cntk_backend.py" -> "Fxn:int_shape";
    "/keras/backend/cntk_backend.py" -> "Fxn:ndim";
    "/keras/backend/cntk_backend.py" -> "Fxn:_prepare_name";
    "/keras/backend/cntk_backend.py" -> "Fxn:constant";
    "/keras/backend/cntk_backend.py" -> "Fxn:random_binomial";
    "/keras/backend/cntk_backend.py" -> "Fxn:random_uniform";
    "/keras/backend/cntk_backend.py" -> "Fxn:random_uniform_variable";
    "/keras/backend/cntk_backend.py" -> "Fxn:random_normal_variable";
    "/keras/backend/cntk_backend.py" -> "Fxn:random_normal";
    "/keras/backend/cntk_backend.py" -> "Fxn:truncated_normal";
    "/keras/backend/cntk_backend.py" -> "Fxn:dtype";
    "/keras/backend/cntk_backend.py" -> "Fxn:zeros";
    "/keras/backend/cntk_backend.py" -> "Fxn:ones";
    "/keras/backend/cntk_backend.py" -> "Fxn:eye";
    "/keras/backend/cntk_backend.py" -> "Fxn:zeros_like";
    "/keras/backend/cntk_backend.py" -> "Fxn:ones_like";
    "/keras/backend/cntk_backend.py" -> "Fxn:count_params";
    "/keras/backend/cntk_backend.py" -> "Fxn:cast";
    "/keras/backend/cntk_backend.py" -> "Fxn:dot";
    "/keras/backend/cntk_backend.py" -> "Fxn:batch_dot";
    "/keras/backend/cntk_backend.py" -> "Fxn:transpose";
    "/keras/backend/cntk_backend.py" -> "Fxn:gather";
    "/keras/backend/cntk_backend.py" -> "Fxn:_remove_dims";
    "/keras/backend/cntk_backend.py" -> "Fxn:max";
    "/keras/backend/cntk_backend.py" -> "Fxn:min";
    "/keras/backend/cntk_backend.py" -> "Fxn:sum";
    "/keras/backend/cntk_backend.py" -> "Fxn:prod";
    "/keras/backend/cntk_backend.py" -> "Fxn:logsumexp";
    "/keras/backend/cntk_backend.py" -> "Fxn:var";
    "/keras/backend/cntk_backend.py" -> "Fxn:std";
    "/keras/backend/cntk_backend.py" -> "Fxn:expand_dims";
    "/keras/backend/cntk_backend.py" -> "Fxn:squeeze";
    "/keras/backend/cntk_backend.py" -> "Fxn:tile";
    "/keras/backend/cntk_backend.py" -> "Fxn:_normalize_axis";
    "/keras/backend/cntk_backend.py" -> "Fxn:_reshape_dummy_dim";
    "/keras/backend/cntk_backend.py" -> "Fxn:mean";
    "/keras/backend/cntk_backend.py" -> "Fxn:any";
    "/keras/backend/cntk_backend.py" -> "Fxn:all";
    "/keras/backend/cntk_backend.py" -> "Fxn:classification_error";
    "/keras/backend/cntk_backend.py" -> "Fxn:argmax";
    "/keras/backend/cntk_backend.py" -> "Fxn:argmin";
    "/keras/backend/cntk_backend.py" -> "Fxn:square";
    "/keras/backend/cntk_backend.py" -> "Fxn:abs";
    "/keras/backend/cntk_backend.py" -> "Fxn:sqrt";
    "/keras/backend/cntk_backend.py" -> "Fxn:exp";
    "/keras/backend/cntk_backend.py" -> "Fxn:log";
    "/keras/backend/cntk_backend.py" -> "Fxn:round";
    "/keras/backend/cntk_backend.py" -> "Fxn:sigmoid";
    "/keras/backend/cntk_backend.py" -> "Fxn:sign";
    "/keras/backend/cntk_backend.py" -> "Fxn:pow";
    "/keras/backend/cntk_backend.py" -> "Fxn:clip";
    "/keras/backend/cntk_backend.py" -> "Fxn:binary_crossentropy";
    "/keras/backend/cntk_backend.py" -> "Fxn:get_variable_shape";
    "/keras/backend/cntk_backend.py" -> "Fxn:update";
    "/keras/backend/cntk_backend.py" -> "Fxn:moving_average_update";
    "/keras/backend/cntk_backend.py" -> "Fxn:update_add";
    "/keras/backend/cntk_backend.py" -> "Fxn:gradients";
    "/keras/backend/cntk_backend.py" -> "Fxn:equal";
    "/keras/backend/cntk_backend.py" -> "Fxn:not_equal";
    "/keras/backend/cntk_backend.py" -> "Fxn:greater";
    "/keras/backend/cntk_backend.py" -> "Fxn:greater_equal";
    "/keras/backend/cntk_backend.py" -> "Fxn:less";
    "/keras/backend/cntk_backend.py" -> "Fxn:less_equal";
    "/keras/backend/cntk_backend.py" -> "Fxn:maximum";
    "/keras/backend/cntk_backend.py" -> "Fxn:minimum";
    "/keras/backend/cntk_backend.py" -> "Fxn:sin";
    "/keras/backend/cntk_backend.py" -> "Fxn:cos";
    "/keras/backend/cntk_backend.py" -> "Fxn:normalize_batch_in_training";
    "/keras/backend/cntk_backend.py" -> "Fxn:_moments";
    "/keras/backend/cntk_backend.py" -> "Fxn:batch_normalization";
    "/keras/backend/cntk_backend.py" -> "Fxn:concatenate";
    "/keras/backend/cntk_backend.py" -> "Fxn:flatten";
    "/keras/backend/cntk_backend.py" -> "Fxn:reshape";
    "/keras/backend/cntk_backend.py" -> "Fxn:permute_dimensions";
    "/keras/backend/cntk_backend.py" -> "Fxn:resize_images";
    "/keras/backend/cntk_backend.py" -> "Fxn:resize_volumes";
    "/keras/backend/cntk_backend.py" -> "Fxn:repeat_elements";
    "/keras/backend/cntk_backend.py" -> "Fxn:repeat";
    "/keras/backend/cntk_backend.py" -> "Fxn:tanh";
    "/keras/backend/cntk_backend.py" -> "Fxn:_static_rnn";
    "/keras/backend/cntk_backend.py" -> "Fxn:rnn";
    "/keras/backend/cntk_backend.py" -> "Fxn:_recurrence";
    "/keras/backend/cntk_backend.py" -> "Fxn:has_seq_axis";
    "/keras/backend/cntk_backend.py" -> "Fxn:l2_normalize";
    "/keras/backend/cntk_backend.py" -> "Fxn:hard_sigmoid";
    "/keras/backend/cntk_backend.py" -> "Fxn:conv1d";
    "/keras/backend/cntk_backend.py" -> "Fxn:conv2d";
    "/keras/backend/cntk_backend.py" -> "Fxn:separable_conv1d";
    "/keras/backend/cntk_backend.py" -> "Fxn:separable_conv2d";
    "/keras/backend/cntk_backend.py" -> "Fxn:depthwise_conv2d";
    "/keras/backend/cntk_backend.py" -> "Fxn:conv3d";
    "/keras/backend/cntk_backend.py" -> "Fxn:conv3d_transpose";
    "/keras/backend/cntk_backend.py" -> "Fxn:pool2d";
    "/keras/backend/cntk_backend.py" -> "Fxn:pool3d";
    "/keras/backend/cntk_backend.py" -> "Fxn:relu";
    "/keras/backend/cntk_backend.py" -> "Fxn:dropout";
    "/keras/backend/cntk_backend.py" -> "Fxn:batch_flatten";
    "/keras/backend/cntk_backend.py" -> "Fxn:softmax";
    "/keras/backend/cntk_backend.py" -> "Fxn:softplus";
    "/keras/backend/cntk_backend.py" -> "Fxn:softsign";
    "/keras/backend/cntk_backend.py" -> "Fxn:categorical_crossentropy";
    "/keras/backend/cntk_backend.py" -> "Fxn:sparse_categorical_crossentropy";
    "/keras/backend/cntk_backend.py" -> "class:Function(object):";
    "/keras/backend/cntk_backend.py" -> "class:ReshapeBatch(C.ops.functions.UserFunction):";
    "/keras/backend/cntk_backend.py" -> "class:ConvertToBatch(C.ops.functions.UserFunction):";
    "/keras/backend/cntk_backend.py" -> "class:ConvertToStatic(C.ops.functions.UserFunction):";
    "/keras/backend/cntk_backend.py" -> "class:LambdaFunc(C.ops.functions.UserFunction):";
    "class:Function(object):" -> "Fxn:__init__";
    "class:Function(object):" -> "Fxn:_is_input_shape_compatible";
    "class:Function(object):" -> "Fxn:__call__";
    "class:Function(object):" -> "Fxn:function";
    "class:Function(object):" -> "Fxn:temporal_padding";
    "class:Function(object):" -> "Fxn:_padding";
    "class:Function(object):" -> "Fxn:spatial_2d_padding";
    "class:Function(object):" -> "Fxn:spatial_3d_padding";
    "class:Function(object):" -> "Fxn:one_hot";
    "class:Function(object):" -> "Fxn:get_value";
    "class:Function(object):" -> "Fxn:batch_get_value";
    "class:Function(object):" -> "Fxn:set_value";
    "class:Function(object):" -> "Fxn:print_tensor";
    "class:Function(object):" -> "Fxn:batch_set_value";
    "class:Function(object):" -> "Fxn:stop_gradient";
    "class:Function(object):" -> "Fxn:switch";
    "class:Function(object):" -> "Fxn:elu";
    "class:Function(object):" -> "Fxn:in_top_k";
    "class:Function(object):" -> "Fxn:conv2d_transpose";
    "class:Function(object):" -> "Fxn:identity";
    "class:Function(object):" -> "Fxn:_preprocess_conv2d_input";
    "class:Function(object):" -> "Fxn:_preprocess_conv2d_kernel";
    "class:Function(object):" -> "Fxn:_preprocess_border_mode";
    "class:Function(object):" -> "Fxn:_postprocess_conv2d_output";
    "class:Function(object):" -> "Fxn:_preprocess_conv3d_input";
    "class:Function(object):" -> "Fxn:_preprocess_conv3d_kernel";
    "class:Function(object):" -> "Fxn:_postprocess_conv3d_output";
    "class:Function(object):" -> "Fxn:_get_dynamic_axis_num";
    "class:Function(object):" -> "Fxn:_contain_seqence_axis";
    "class:Function(object):" -> "Fxn:get_num_dynamic_axis";
    "class:Function(object):" -> "Fxn:_reduce_on_axis";
    "class:Function(object):" -> "Fxn:_reshape_sequence";
    "class:Function(object):" -> "Fxn:local_conv1d";
    "class:Function(object):" -> "Fxn:local_conv2d";
    "class:Function(object):" -> "Fxn:reverse";
    "class:Function(object):" -> "Fxn:_reshape_batch";
    "class:Function(object):" -> "Fxn:_get_cntk_version";
    "Fxn:__init__" -> "Fxn:len(updates)";
    "Fxn:__init__" -> "Fxn:len(outputs)";
    "Fxn:__init__" -> "Fxn:isinstance(update,";
    "Fxn:__init__" -> "Fxn:len(update)";
    "Fxn:__init__" -> "Fxn:C.assign(update[0],";
    "Fxn:__init__" -> "Fxn:len(u.arguments)";
    "Fxn:__init__" -> "Fxn:u_ops.append(u)";
    "Fxn:__init__" -> "Fxn:unrelated_updates.append(u)";
    "Fxn:__init__" -> "Fxn:C.combine([u.output";
    "Fxn:__init__" -> "Fxn:update_func.find_all_with_name('keras_grad_placeholder')";
    "Fxn:__init__" -> "Fxn:p_list.append(grad_parameter_dict[g])";
    "Fxn:__init__" -> "Fxn:u_list.append(g)";
    "Fxn:__init__" -> "Fxn:ValueError(";
    "Fxn:__init__" -> "Fxn:len(u_list)";
    "Fxn:__init__" -> "Fxn:C.cntk_py.universal_learner(p_list,";
    "Fxn:__init__" -> "Fxn:len(outputs)";
    "Fxn:__init__" -> "Fxn:C.trainer.Trainer(";
    "Fxn:__init__" -> "Fxn:tuple([f.output";
    "Fxn:__init__" -> "Fxn:len(u_ops)";
    "Fxn:__init__" -> "Fxn:unrelated_updates.extend(u_ops)";
    "Fxn:__init__" -> "Fxn:len(unrelated_updates)";
    "Fxn:__init__" -> "Fxn:C.combine([_.output";
    "Fxn:__init__" -> "Fxn:C.combine(self.metrics_outputs)";
    "Fxn:__init__" -> "Fxn:len(outputs)";
    "Fxn:__init__" -> "Fxn:C.combine(self.metrics_outputs)";
    "Fxn:_is_input_shape_compatible" -> "Fxn:hasattr(input,";
    "Fxn:_is_input_shape_compatible" -> "Fxn:hasattr(placeholder,";
    "Fxn:_is_input_shape_compatible" -> "Fxn:get_num_dynamic_axis(placeholder)";
    "Fxn:_is_input_shape_compatible" -> "Fxn:zip(input_shape,";
    "Fxn:__call__" -> "Fxn:isinstance(inputs,";
    "Fxn:__call__" -> "Fxn:zip(self.placeholders,";
    "Fxn:__call__" -> "Fxn:value.astype(np.float32)";
    "Fxn:__call__" -> "Fxn:np.asarray(value)";
    "Fxn:__call__" -> "Fxn:self._is_input_shape_compatible(value,";
    "Fxn:__call__" -> "Fxn:ValueError('CNTK";
    "Fxn:__call__" -> "Fxn:str(value.shape)))";
    "Fxn:__call__" -> "Fxn:ValueError(";
    "Fxn:__call__" -> "Fxn:self.trainer.train_minibatch(";
    "Fxn:__call__" -> "Fxn:assert(len(result)";
    "Fxn:__call__" -> "Fxn:updated.append(outputs[o])";
    "Fxn:__call__" -> "Fxn:ValueError('CNTK";
    "Fxn:__call__" -> "Fxn:self.metrics_func.forward(";
    "Fxn:__call__" -> "Fxn:self.metrics_func.eval(input_dict,";
    "Fxn:__call__" -> "Fxn:isinstance(output_values,";
    "Fxn:__call__" -> "Fxn:value.asarray()";
    "Fxn:__call__" -> "Fxn:updated.append(v)";
    "Fxn:__call__" -> "Fxn:output_values.asarray()";
    "Fxn:__call__" -> "Fxn:updated.append(v)";
    "Fxn:__call__" -> "Fxn:ValueError(";
    "Fxn:__call__" -> "Fxn:self.unrelated_updates.eval(input_dict,";
    "Fxn:function" -> "Fxn:Function(inputs,";
    "Fxn:temporal_padding" -> "Fxn:padding=(1,";
    "Fxn:temporal_padding" -> "Fxn:len(padding)";
    "Fxn:temporal_padding" -> "Fxn:_get_dynamic_axis_num(x)";
    "Fxn:temporal_padding" -> "Fxn:len(base_shape)";
    "Fxn:temporal_padding" -> "Fxn:hasattr(C,";
    "Fxn:temporal_padding" -> "Fxn:C.pad(x,";
    "Fxn:temporal_padding" -> "Fxn:_padding(x,";
    "Fxn:temporal_padding" -> "Fxn:len(base_shape)";
    "Fxn:temporal_padding" -> "Fxn:hasattr(C,";
    "Fxn:temporal_padding" -> "Fxn:C.pad(x,";
    "Fxn:temporal_padding" -> "Fxn:pattern=[(0,";
    "Fxn:temporal_padding" -> "Fxn:_padding(x,";
    "Fxn:_padding" -> "Fxn:b_any([dim";
    "Fxn:_padding" -> "Fxn:ValueError('CNTK";
    "Fxn:_padding" -> "Fxn:list(base_shape)";
    "Fxn:_padding" -> "Fxn:tuple(prefix_shape)";
    "Fxn:_padding" -> "Fxn:C.splice(C.constant(value=0,";
    "Fxn:_padding" -> "Fxn:list(base_shape)";
    "Fxn:_padding" -> "Fxn:tuple(postfix_shape)";
    "Fxn:_padding" -> "Fxn:C.splice(x,";
    "Fxn:_padding" -> "Fxn:C.constant(value=0,";
    "Fxn:spatial_2d_padding" -> "Fxn:padding=((1,";
    "Fxn:spatial_2d_padding" -> "Fxn:len(padding)";
    "Fxn:spatial_2d_padding" -> "Fxn:len(padding[0])";
    "Fxn:spatial_2d_padding" -> "Fxn:len(padding[1])";
    "Fxn:spatial_2d_padding" -> "Fxn:image_data_format()";
    "Fxn:spatial_2d_padding" -> "Fxn:ValueError('Unknown";
    "Fxn:spatial_2d_padding" -> "Fxn:str(data_format))";
    "Fxn:spatial_2d_padding" -> "Fxn:_get_dynamic_axis_num(x)";
    "Fxn:spatial_2d_padding" -> "Fxn:len(base_shape)";
    "Fxn:spatial_2d_padding" -> "Fxn:hasattr(C,";
    "Fxn:spatial_2d_padding" -> "Fxn:C.pad(x,";
    "Fxn:spatial_2d_padding" -> "Fxn:list(padding[0]),";
    "Fxn:spatial_2d_padding" -> "Fxn:list(padding[1])])";
    "Fxn:spatial_2d_padding" -> "Fxn:_padding(x,";
    "Fxn:spatial_2d_padding" -> "Fxn:_padding(x,";
    "Fxn:spatial_2d_padding" -> "Fxn:len(base_shape)";
    "Fxn:spatial_2d_padding" -> "Fxn:hasattr(C,";
    "Fxn:spatial_2d_padding" -> "Fxn:C.pad(x,";
    "Fxn:spatial_2d_padding" -> "Fxn:list(padding[0]),";
    "Fxn:spatial_2d_padding" -> "Fxn:list(padding[1])])";
    "Fxn:spatial_2d_padding" -> "Fxn:_padding(x,";
    "Fxn:spatial_2d_padding" -> "Fxn:_padding(x,";
    "Fxn:spatial_2d_padding" -> "Fxn:len(base_shape)";
    "Fxn:spatial_2d_padding" -> "Fxn:hasattr(C,";
    "Fxn:spatial_2d_padding" -> "Fxn:C.pad(x,";
    "Fxn:spatial_2d_padding" -> "Fxn:pattern=[list(padding[0]),";
    "Fxn:spatial_2d_padding" -> "Fxn:list(padding[1]),";
    "Fxn:spatial_2d_padding" -> "Fxn:_padding(x,";
    "Fxn:spatial_2d_padding" -> "Fxn:_padding(x,";
    "Fxn:spatial_2d_padding" -> "Fxn:len(base_shape)";
    "Fxn:spatial_2d_padding" -> "Fxn:hasattr(C,";
    "Fxn:spatial_2d_padding" -> "Fxn:C.pad(x,";
    "Fxn:spatial_2d_padding" -> "Fxn:list(padding[0]),";
    "Fxn:spatial_2d_padding" -> "Fxn:list(padding[1]),";
    "Fxn:spatial_2d_padding" -> "Fxn:_padding(x,";
    "Fxn:spatial_2d_padding" -> "Fxn:_padding(x,";
    "Fxn:spatial_3d_padding" -> "Fxn:padding=((1,";
    "Fxn:spatial_3d_padding" -> "Fxn:len(padding)";
    "Fxn:spatial_3d_padding" -> "Fxn:len(padding[0])";
    "Fxn:spatial_3d_padding" -> "Fxn:len(padding[1])";
    "Fxn:spatial_3d_padding" -> "Fxn:len(padding[2])";
    "Fxn:spatial_3d_padding" -> "Fxn:image_data_format()";
    "Fxn:spatial_3d_padding" -> "Fxn:ValueError('Unknown";
    "Fxn:spatial_3d_padding" -> "Fxn:str(data_format))";
    "Fxn:spatial_3d_padding" -> "Fxn:_get_dynamic_axis_num(x)";
    "Fxn:spatial_3d_padding" -> "Fxn:len(base_shape)";
    "Fxn:spatial_3d_padding" -> "Fxn:hasattr(C,";
    "Fxn:spatial_3d_padding" -> "Fxn:C.pad(x,";
    "Fxn:spatial_3d_padding" -> "Fxn:list(padding[0]),";
    "Fxn:spatial_3d_padding" -> "Fxn:list(padding[1]),";
    "Fxn:spatial_3d_padding" -> "Fxn:list(padding[2])])";
    "Fxn:spatial_3d_padding" -> "Fxn:_padding(x,";
    "Fxn:spatial_3d_padding" -> "Fxn:_padding(x,";
    "Fxn:spatial_3d_padding" -> "Fxn:_padding(x,";
    "Fxn:spatial_3d_padding" -> "Fxn:len(base_shape)";
    "Fxn:spatial_3d_padding" -> "Fxn:hasattr(C,";
    "Fxn:spatial_3d_padding" -> "Fxn:C.pad(x,";
    "Fxn:spatial_3d_padding" -> "Fxn:list(padding[0]),";
    "Fxn:spatial_3d_padding" -> "Fxn:list(padding[1]),";
    "Fxn:spatial_3d_padding" -> "Fxn:list(padding[2])])";
    "Fxn:spatial_3d_padding" -> "Fxn:_padding(x,";
    "Fxn:spatial_3d_padding" -> "Fxn:_padding(x,";
    "Fxn:spatial_3d_padding" -> "Fxn:_padding(x,";
    "Fxn:spatial_3d_padding" -> "Fxn:len(base_shape)";
    "Fxn:spatial_3d_padding" -> "Fxn:hasattr(C,";
    "Fxn:spatial_3d_padding" -> "Fxn:C.pad(x,";
    "Fxn:spatial_3d_padding" -> "Fxn:pattern=[list(padding[0]),";
    "Fxn:spatial_3d_padding" -> "Fxn:list(padding[1]),";
    "Fxn:spatial_3d_padding" -> "Fxn:list(padding[2]),";
    "Fxn:spatial_3d_padding" -> "Fxn:_padding(x,";
    "Fxn:spatial_3d_padding" -> "Fxn:_padding(x,";
    "Fxn:spatial_3d_padding" -> "Fxn:_padding(x,";
    "Fxn:spatial_3d_padding" -> "Fxn:len(base_shape)";
    "Fxn:spatial_3d_padding" -> "Fxn:hasattr(C,";
    "Fxn:spatial_3d_padding" -> "Fxn:C.pad(x,";
    "Fxn:spatial_3d_padding" -> "Fxn:list(padding[0]),";
    "Fxn:spatial_3d_padding" -> "Fxn:list(padding[1]),";
    "Fxn:spatial_3d_padding" -> "Fxn:list(padding[2]),";
    "Fxn:spatial_3d_padding" -> "Fxn:_padding(x,";
    "Fxn:spatial_3d_padding" -> "Fxn:_padding(x,";
    "Fxn:spatial_3d_padding" -> "Fxn:_padding(x,";
    "Fxn:one_hot" -> "Fxn:C.one_hot(indices,";
    "Fxn:get_value" -> "Fxn:isinstance(";
    "Fxn:get_value" -> "Fxn:isinstance(";
    "Fxn:get_value" -> "Fxn:eval(x)";
    "Fxn:batch_get_value" -> "Fxn:isinstance(x,";
    "Fxn:batch_get_value" -> "Fxn:result.append(x.value)";
    "Fxn:batch_get_value" -> "Fxn:result.append(eval(x))";
    "Fxn:set_value" -> "Fxn:isinstance(x,";
    "Fxn:set_value" -> "Fxn:isinstance(value,";
    "Fxn:set_value" -> "Fxn:np.full(x.shape,";
    "Fxn:set_value" -> "Fxn:dtype=floatx())";
    "Fxn:print_tensor" -> "Fxn:C.user_function(";
    "Fxn:print_tensor" -> "Fxn:LambdaFunc(x,";
    "Fxn:print_tensor" -> "Fxn:print(message)))";
    "Fxn:batch_set_value" -> "Fxn:isinstance(value,";
    "Fxn:batch_set_value" -> "Fxn:np.asarray(value)";
    "Fxn:batch_set_value" -> "Fxn:isinstance(x,";
    "Fxn:stop_gradient" -> "Fxn:isinstance(variables,";
    "Fxn:stop_gradient" -> "Fxn:map(C.stop_gradient,";
    "Fxn:stop_gradient" -> "Fxn:C.stop_gradient(variables)";
    "Fxn:switch" -> "Fxn:ndim(condition)";
    "Fxn:switch" -> "Fxn:ndim(then_expression)";
    "Fxn:switch" -> "Fxn:ValueError('Rank";
    "Fxn:switch" -> "Fxn:ndim(condition)='";
    "Fxn:switch" -> "Fxn:str(ndim_cond)";
    "Fxn:switch" -> "Fxn:ndim(then_expression)'";
    "Fxn:switch" -> "Fxn:str(ndim_expr))";
    "Fxn:switch" -> "Fxn:int_shape(then_expression)";
    "Fxn:switch" -> "Fxn:range(ndim_diff):";
    "Fxn:switch" -> "Fxn:expand_dims(condition)";
    "Fxn:switch" -> "Fxn:tile(condition,";
    "Fxn:switch" -> "Fxn:C.element_select(condition,";
    "Fxn:elu" -> "Fxn:C.elu(x)";
    "Fxn:elu" -> "Fxn:C.element_select(C.greater(x,";
    "Fxn:in_top_k" -> "Fxn:C.one_hot(targets,";
    "Fxn:in_top_k" -> "Fxn:C.classification_error(predictions,";
    "Fxn:in_top_k" -> "Fxn:C.reshape(result,";
    "Fxn:in_top_k" -> "Fxn:shape=())";
    "Fxn:conv2d_transpose" -> "Fxn:strides=(1,";
    "Fxn:conv2d_transpose" -> "Fxn:image_data_format()";
    "Fxn:conv2d_transpose" -> "Fxn:ValueError('Unknown";
    "Fxn:conv2d_transpose" -> "Fxn:str(data_format))";
    "Fxn:conv2d_transpose" -> "Fxn:_preprocess_conv2d_input(x,";
    "Fxn:conv2d_transpose" -> "Fxn:_preprocess_conv2d_kernel(kernel,";
    "Fxn:conv2d_transpose" -> "Fxn:_preprocess_border_mode(padding)";
    "Fxn:conv2d_transpose" -> "Fxn:list(output_shape)";
    "Fxn:conv2d_transpose" -> "Fxn:tuple(shape)";
    "Fxn:conv2d_transpose" -> "Fxn:C.convolution_transpose(";
    "Fxn:conv2d_transpose" -> "Fxn:_postprocess_conv2d_output(x,";
    "Fxn:identity" -> "Fxn:C.alias(x,";
    "Fxn:_preprocess_conv2d_input" -> "Fxn:C.transpose(x,";
    "Fxn:_preprocess_conv2d_kernel" -> "Fxn:`(rows,";
    "Fxn:_preprocess_conv2d_kernel" -> "Fxn:`(depth,";
    "Fxn:_preprocess_conv2d_kernel" -> "Fxn:C.transpose(kernel,";
    "Fxn:_preprocess_border_mode" -> "Fxn:ValueError('Invalid";
    "Fxn:_preprocess_border_mode" -> "Fxn:str(padding))";
    "Fxn:_postprocess_conv2d_output" -> "Fxn:C.transpose(x,";
    "Fxn:_preprocess_conv3d_input" -> "Fxn:C.transpose(x,";
    "Fxn:_preprocess_conv3d_kernel" -> "Fxn:C.transpose(kernel,";
    "Fxn:_postprocess_conv3d_output" -> "Fxn:C.transpose(x,";
    "Fxn:_get_dynamic_axis_num" -> "Fxn:hasattr(x,";
    "Fxn:_get_dynamic_axis_num" -> "Fxn:len(x.dynamic_axes)";
    "Fxn:_contain_seqence_axis" -> "Fxn:_get_dynamic_axis_num(x)";
    "Fxn:_contain_seqence_axis" -> "Fxn:C.Axis.default_dynamic_axis()";
    "Fxn:get_num_dynamic_axis" -> "Fxn:_get_dynamic_axis_num(x)";
    "Fxn:_reduce_on_axis" -> "Fxn:isinstance(axis,";
    "Fxn:_reduce_on_axis" -> "Fxn:isinstance(a,";
    "Fxn:_reduce_on_axis" -> "Fxn:C.Axis.default_batch_axis()";
    "Fxn:_reduce_on_axis" -> "Fxn:hasattr(C.sequence,";
    "Fxn:_reduce_on_axis" -> "Fxn:getattr(C.sequence,";
    "Fxn:_reduce_on_axis" -> "Fxn:reduce_fun_name)(x,";
    "Fxn:_reduce_on_axis" -> "Fxn:getattr(C,";
    "Fxn:_reduce_on_axis" -> "Fxn:reduce_fun_name)(x,";
    "Fxn:_reduce_on_axis" -> "Fxn:getattr(C,";
    "Fxn:_reduce_on_axis" -> "Fxn:reduce_fun_name)(x,";
    "Fxn:_reshape_sequence" -> "Fxn:list(int_shape(x))";
    "Fxn:_reshape_sequence" -> "Fxn:reshape(x,";
    "Fxn:local_conv1d" -> "Fxn:image_data_format()";
    "Fxn:local_conv1d" -> "Fxn:ValueError('Unknown";
    "Fxn:local_conv1d" -> "Fxn:str(data_format))";
    "Fxn:local_conv1d" -> "Fxn:int_shape(kernel)";
    "Fxn:local_conv1d" -> "Fxn:range(output_length):";
    "Fxn:local_conv1d" -> "Fxn:slice(i";
    "Fxn:local_conv1d" -> "Fxn:xs.append(reshape(inputs[:,";
    "Fxn:local_conv1d" -> "Fxn:concatenate(xs,";
    "Fxn:local_conv1d" -> "Fxn:permute_dimensions(kernel,";
    "Fxn:local_conv1d" -> "Fxn:sum(output,";
    "Fxn:local_conv1d" -> "Fxn:permute_dimensions(output,";
    "Fxn:local_conv2d" -> "Fxn:image_data_format()";
    "Fxn:local_conv2d" -> "Fxn:ValueError('Unknown";
    "Fxn:local_conv2d" -> "Fxn:str(data_format))";
    "Fxn:local_conv2d" -> "Fxn:int_shape(kernel)";
    "Fxn:local_conv2d" -> "Fxn:range(output_row):";
    "Fxn:local_conv2d" -> "Fxn:range(output_col):";
    "Fxn:local_conv2d" -> "Fxn:slice(i";
    "Fxn:local_conv2d" -> "Fxn:slice(j";
    "Fxn:local_conv2d" -> "Fxn:xs.append(reshape(inputs[:,";
    "Fxn:local_conv2d" -> "Fxn:xs.append(reshape(inputs[:,";
    "Fxn:local_conv2d" -> "Fxn:concatenate(xs,";
    "Fxn:local_conv2d" -> "Fxn:permute_dimensions(kernel,";
    "Fxn:local_conv2d" -> "Fxn:sum(output,";
    "Fxn:local_conv2d" -> "Fxn:reshape(output,";
    "Fxn:local_conv2d" -> "Fxn:permute_dimensions(output,";
    "Fxn:reverse" -> "Fxn:isinstance(axes,";
    "Fxn:reverse" -> "Fxn:_normalize_axis(axes,";
    "Fxn:reverse" -> "Fxn:C.slice(x,";
    "Fxn:_reshape_batch" -> "Fxn:hasattr(C,";
    "Fxn:_reshape_batch" -> "Fxn:_get_cntk_version()";
    "Fxn:_reshape_batch" -> "Fxn:C.unpack_batch(x)";
    "Fxn:_reshape_batch" -> "Fxn:C.reshape(const_a,";
    "Fxn:_reshape_batch" -> "Fxn:C.to_batch(const_a)";
    "Fxn:_reshape_batch" -> "Fxn:C.user_function(ReshapeBatch(x,";
    "Fxn:_get_cntk_version" -> "Fxn:version.endswith('+'):";
    "Fxn:_get_cntk_version" -> "Fxn:len(version)";
    "Fxn:_get_cntk_version" -> "Fxn:version[2:].replace('.',";
    "Fxn:_get_cntk_version" -> "Fxn:float(version)";
    "Fxn:_get_cntk_version" -> "Fxn:warnings.warn(";
    "Fxn:_get_cntk_version" -> "Fxn:float(2.0)";
    "class:ReshapeBatch(C.ops.functions.UserFunction):" -> "Fxn:__init__";
    "class:ReshapeBatch(C.ops.functions.UserFunction):" -> "Fxn:infer_outputs";
    "class:ReshapeBatch(C.ops.functions.UserFunction):" -> "Fxn:forward";
    "class:ReshapeBatch(C.ops.functions.UserFunction):" -> "Fxn:backward";
    "Fxn:__init__" -> "Fxn:super(ReshapeBatch,";
    "Fxn:__init__" -> "Fxn:self).__init__([input],";
    "Fxn:infer_outputs" -> "Fxn:C.Axis.default_batch_axis()";
    "Fxn:infer_outputs" -> "Fxn:C.output_variable(";
    "Fxn:forward" -> "Fxn:arguments.shape()[0]";
    "Fxn:forward" -> "Fxn:np.prod(np.asarray(self.from_shape))";
    "Fxn:forward" -> "Fxn:np.prod(np.asarray(self.target_shape))";
    "Fxn:forward" -> "Fxn:int(num_element";
    "Fxn:forward" -> "Fxn:arguments.data().as_shape((num_batch,)";
    "Fxn:forward" -> "Fxn:C.cntk_py.Value(result)";
    "Fxn:backward" -> "Fxn:root_gradients.data()";
    "Fxn:backward" -> "Fxn:root_gradients.shape()[0]";
    "Fxn:backward" -> "Fxn:np.prod(np.asarray(self.target_shape))";
    "Fxn:backward" -> "Fxn:np.prod(np.asarray(self.from_shape))";
    "Fxn:backward" -> "Fxn:int(num_element";
    "Fxn:backward" -> "Fxn:C.cntk_py.Value(";
    "Fxn:backward" -> "Fxn:grad_array_view.as_shape(";
    "class:ConvertToBatch(C.ops.functions.UserFunction):" -> "Fxn:__init__";
    "class:ConvertToBatch(C.ops.functions.UserFunction):" -> "Fxn:infer_outputs";
    "class:ConvertToBatch(C.ops.functions.UserFunction):" -> "Fxn:forward";
    "class:ConvertToBatch(C.ops.functions.UserFunction):" -> "Fxn:backward";
    "Fxn:__init__" -> "Fxn:super(ConvertToBatch,";
    "Fxn:__init__" -> "Fxn:self).__init__([input],";
    "Fxn:infer_outputs" -> "Fxn:C.Axis.default_batch_axis()";
    "Fxn:infer_outputs" -> "Fxn:C.output_variable(";
    "Fxn:forward" -> "Fxn:C.cntk_py.Value(arguments.data())";
    "Fxn:backward" -> "Fxn:C.cntk_py.Value(root_gradients.data())";
    "class:ConvertToStatic(C.ops.functions.UserFunction):" -> "Fxn:__init__";
    "class:ConvertToStatic(C.ops.functions.UserFunction):" -> "Fxn:infer_outputs";
    "class:ConvertToStatic(C.ops.functions.UserFunction):" -> "Fxn:forward";
    "class:ConvertToStatic(C.ops.functions.UserFunction):" -> "Fxn:backward";
    "Fxn:__init__" -> "Fxn:super(ConvertToStatic,";
    "Fxn:__init__" -> "Fxn:self).__init__([input],";
    "Fxn:infer_outputs" -> "Fxn:C.output_variable(";
    "Fxn:forward" -> "Fxn:C.cntk_py.Value(arguments.data())";
    "Fxn:backward" -> "Fxn:C.cntk_py.Value(root_gradients.data())";
    "class:LambdaFunc(C.ops.functions.UserFunction):" -> "Fxn:__init__";
    "class:LambdaFunc(C.ops.functions.UserFunction):" -> "Fxn:infer_outputs";
    "class:LambdaFunc(C.ops.functions.UserFunction):" -> "Fxn:forward";
    "class:LambdaFunc(C.ops.functions.UserFunction):" -> "Fxn:backward";
    "Fxn:__init__" -> "Fxn:print(arg),";
    "Fxn:__init__" -> "Fxn:super(LambdaFunc,";
    "Fxn:__init__" -> "Fxn:self).__init__([arg],";
    "Fxn:infer_outputs" -> "Fxn:C.output_variable(";
    "Fxn:forward" -> "Fxn:self.when(argument):";
    "Fxn:forward" -> "Fxn:self.execute(argument)";
    "/keras/backend/common.py" -> "Import:absolute_import";
    "/keras/backend/common.py" -> "Import:division";
    "/keras/backend/common.py" -> "Import:print_function";
    "/keras/backend/common.py" -> "Import:numpy";
    "/keras/backend/common.py" -> "Fxn:epsilon";
    "/keras/backend/common.py" -> "Fxn:set_epsilon";
    "/keras/backend/common.py" -> "Import:backend";
    "/keras/backend/common.py" -> "Fxn:floatx";
    "/keras/backend/common.py" -> "Fxn:set_floatx";
    "/keras/backend/common.py" -> "Import:backend";
    "/keras/backend/common.py" -> "Fxn:cast_to_floatx";
    "/keras/backend/common.py" -> "Import:backend";
    "/keras/backend/common.py" -> "Fxn:image_data_format";
    "/keras/backend/common.py" -> "Fxn:set_image_data_format";
    "/keras/backend/common.py" -> "Import:backend";
    "/keras/backend/common.py" -> "Fxn:set_image_dim_ordering";
    "/keras/backend/common.py" -> "Import:backend";
    "/keras/backend/common.py" -> "Fxn:image_dim_ordering";
    "/keras/backend/tensorflow_backend.py" -> "Import:absolute_import";
    "/keras/backend/tensorflow_backend.py" -> "Import:division";
    "/keras/backend/tensorflow_backend.py" -> "Import:print_function";
    "/keras/backend/tensorflow_backend.py" -> "Import:tensorflow";
    "/keras/backend/tensorflow_backend.py" -> "Import:moving_averages";
    "/keras/backend/tensorflow_backend.py" -> "Import:tensor_array_ops";
    "/keras/backend/tensorflow_backend.py" -> "Import:control_flow_ops";
    "/keras/backend/tensorflow_backend.py" -> "Import:functional_ops";
    "/keras/backend/tensorflow_backend.py" -> "Import:ctc_ops";
    "/keras/backend/tensorflow_backend.py" -> "Import:variables";
    "/keras/backend/tensorflow_backend.py" -> "Import:device_lib";
    "/keras/backend/tensorflow_backend.py" -> "Import:defaultdict";
    "/keras/backend/tensorflow_backend.py" -> "Import:numpy";
    "/keras/backend/tensorflow_backend.py" -> "Import:.common";
    "/keras/backend/tensorflow_backend.py" -> "Import:floatx,";
    "/keras/backend/tensorflow_backend.py" -> "Import:image_data_format";
    "/keras/backend/tensorflow_backend.py" -> "Import:has_arg";
    "/keras/backend/tensorflow_backend.py" -> "Import:set_image_dim_ordering";
    "/keras/backend/tensorflow_backend.py" -> "Import:image_dim_ordering";
    "/keras/backend/tensorflow_backend.py" -> "Fxn:get_uid";
    "/keras/backend/tensorflow_backend.py" -> "Fxn:reset_uids";
    "/keras/backend/tensorflow_backend.py" -> "Fxn:clear_session";
    "/keras/backend/tensorflow_backend.py" -> "Fxn:manual_variable_initialization";
    "/keras/backend/tensorflow_backend.py" -> "Fxn:learning_phase";
    "/keras/backend/tensorflow_backend.py" -> "Fxn:set_learning_phase";
    "/keras/backend/tensorflow_backend.py" -> "Fxn:get_session";
    "/keras/backend/tensorflow_backend.py" -> "Fxn:set_session";
    "/keras/backend/tensorflow_backend.py" -> "class:_TfDeviceCaptureOp(object):";
    "/keras/backend/tensorflow_backend.py" -> "Import:backend";
    "/keras/backend/tensorflow_backend.py" -> "Import:backend";
    "/keras/backend/tensorflow_backend.py" -> "Import:backend";
    "/keras/backend/tensorflow_backend.py" -> "Import:backend";
    "/keras/backend/tensorflow_backend.py" -> "Import:Input,";
    "/keras/backend/tensorflow_backend.py" -> "Import:backend";
    "/keras/backend/tensorflow_backend.py" -> "Import:backend";
    "/keras/backend/tensorflow_backend.py" -> "Import:backend";
    "/keras/backend/tensorflow_backend.py" -> "Import:backend";
    "/keras/backend/tensorflow_backend.py" -> "Import:backend";
    "/keras/backend/tensorflow_backend.py" -> "Import:backend";
    "/keras/backend/tensorflow_backend.py" -> "Import:backend";
    "/keras/backend/tensorflow_backend.py" -> "Import:backend";
    "/keras/backend/tensorflow_backend.py" -> "Import:backend";
    "/keras/backend/tensorflow_backend.py" -> "Import:backend";
    "/keras/backend/tensorflow_backend.py" -> "Import:backend";
    "/keras/backend/tensorflow_backend.py" -> "Import:backend";
    "/keras/backend/tensorflow_backend.py" -> "class:Function(object):";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:__init__";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:_set_device";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:_get_current_tf_device";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:_is_current_explicit_device";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:_get_available_gpus";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:_has_nchw_support";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:_to_tensor";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:is_sparse";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:to_dense";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:variable";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:constant";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:is_keras_tensor";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:placeholder";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:is_placeholder";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:shape";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:int_shape";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:ndim";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:dtype";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:eval";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:zeros";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:ones";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:eye";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:zeros_like";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:ones_like";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:identity";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:random_uniform_variable";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:random_normal_variable";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:count_params";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:cast";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:update";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:update_add";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:update_sub";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:moving_average_update";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:dot";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:batch_dot";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:transpose";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:gather";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:max";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:min";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:sum";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:prod";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:cumsum";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:cumprod";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:var";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:std";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:mean";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:any";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:all";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:argmax";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:argmin";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:square";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:abs";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:sqrt";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:exp";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:log";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:logsumexp";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:round";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:sign";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:pow";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:clip";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:equal";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:not_equal";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:greater";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:greater_equal";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:less";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:less_equal";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:maximum";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:minimum";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:sin";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:cos";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:_regular_normalize_batch_in_training";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:_broadcast_normalize_batch_in_training";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:_fused_normalize_batch_in_training";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:normalize_batch_in_training";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:batch_normalization";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:concatenate";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:reshape";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:permute_dimensions";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:resize_images";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:resize_volumes";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:repeat_elements";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:repeat";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:arange";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:tile";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:flatten";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:batch_flatten";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:expand_dims";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:squeeze";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:temporal_padding";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:spatial_2d_padding";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:spatial_3d_padding";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:stack";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:one_hot";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:reverse";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:get_value";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:batch_get_value";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:set_value";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:batch_set_value";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:get_variable_shape";
    "class:_TfDeviceCaptureOp(object):" -> "Fxn:print_tensor";
    "Fxn:_get_current_tf_device" -> "Fxn:tf.get_default_graph()";
    "Fxn:_get_current_tf_device" -> "Fxn:_TfDeviceCaptureOp()";
    "Fxn:_get_current_tf_device" -> "Fxn:g._apply_device_functions(op)";
    "Fxn:_is_current_explicit_device" -> "Fxn:device_type.upper()";
    "Fxn:_is_current_explicit_device" -> "Fxn:ValueError('`device_type`";
    "Fxn:_is_current_explicit_device" -> "Fxn:_get_current_tf_device()";
    "Fxn:_is_current_explicit_device" -> "Fxn:device_type.upper())";
    "Fxn:_get_available_gpus" -> "Fxn:get_session().list_devices()";
    "Fxn:_has_nchw_support" -> "Fxn:_is_current_explicit_device('CPU')";
    "Fxn:_has_nchw_support" -> "Fxn:len(_get_available_gpus())";
    "Fxn:_to_tensor" -> "Fxn:tf.convert_to_tensor(x,";
    "Fxn:is_sparse" -> "Fxn:K.placeholder((2,";
    "Fxn:is_sparse" -> "Fxn:print(K.is_sparse(a))";
    "Fxn:is_sparse" -> "Fxn:K.placeholder((2,";
    "Fxn:is_sparse" -> "Fxn:print(K.is_sparse(b))";
    "Fxn:is_sparse" -> "Fxn:isinstance(tensor,";
    "Fxn:to_dense" -> "Fxn:K.placeholder((2,";
    "Fxn:to_dense" -> "Fxn:print(K.is_sparse(b))";
    "Fxn:to_dense" -> "Fxn:K.to_dense(b)";
    "Fxn:to_dense" -> "Fxn:print(K.is_sparse(c))";
    "Fxn:to_dense" -> "Fxn:is_sparse(tensor):";
    "Fxn:to_dense" -> "Fxn:tf.sparse_tensor_to_dense(tensor)";
    "Fxn:variable" -> "Fxn:np.array([[1,";
    "Fxn:variable" -> "Fxn:K.variable(value=val,";
    "Fxn:variable" -> "Fxn:K.dtype(kvar)";
    "Fxn:variable" -> "Fxn:print(kvar)";
    "Fxn:variable" -> "Fxn:K.eval(kvar)";
    "Fxn:variable" -> "Fxn:array([[";
    "Fxn:variable" -> "Fxn:floatx()";
    "Fxn:variable" -> "Fxn:hasattr(value,";
    "Fxn:variable" -> "Fxn:value.tocoo()";
    "Fxn:variable" -> "Fxn:np.concatenate((np.expand_dims(sparse_coo.row,";
    "Fxn:variable" -> "Fxn:np.expand_dims(sparse_coo.col,";
    "Fxn:variable" -> "Fxn:tf.SparseTensor(indices=indices,";
    "Fxn:variable" -> "Fxn:tf.Variable(value,";
    "Fxn:variable" -> "Fxn:dtype=tf.as_dtype(dtype),";
    "Fxn:variable" -> "Fxn:isinstance(value,";
    "Fxn:variable" -> "Fxn:hasattr(value,";
    "Fxn:variable" -> "Fxn:int_shape(value)";
    "Fxn:constant" -> "Fxn:floatx()";
    "Fxn:constant" -> "Fxn:tf.constant(value,";
    "Fxn:is_keras_tensor" -> "Fxn:numpy.array([1,";
    "Fxn:is_keras_tensor" -> "Fxn:K.is_keras_tensor(np_var)";
    "Fxn:is_keras_tensor" -> "Fxn:tf.placeholder('float32',";
    "Fxn:is_keras_tensor" -> "Fxn:shape=(1,1))";
    "Fxn:is_keras_tensor" -> "Fxn:K.is_keras_tensor(k_var)";
    "Fxn:is_keras_tensor" -> "Fxn:K.variable(np_var)";
    "Fxn:is_keras_tensor" -> "Fxn:K.is_keras_tensor(keras_var)";
    "Fxn:is_keras_tensor" -> "Fxn:K.placeholder(shape=(2,";
    "Fxn:is_keras_tensor" -> "Fxn:K.is_keras_tensor(keras_placeholder)";
    "Fxn:is_keras_tensor" -> "Fxn:Input([10])";
    "Fxn:is_keras_tensor" -> "Fxn:K.is_keras_tensor(keras_input)";
    "Fxn:is_keras_tensor" -> "Fxn:Dense(10)(keras_input)";
    "Fxn:is_keras_tensor" -> "Fxn:K.is_keras_tensor(keras_layer_output)";
    "Fxn:is_keras_tensor" -> "Fxn:isinstance(x,";
    "Fxn:is_keras_tensor" -> "Fxn:ValueError('Unexpectedly";
    "Fxn:is_keras_tensor" -> "Fxn:str(type(x))";
    "Fxn:is_keras_tensor" -> "Fxn:hasattr(x,";
    "Fxn:placeholder" -> "Fxn:K.placeholder(shape=(2,";
    "Fxn:placeholder" -> "Fxn:shape=(2,";
    "Fxn:placeholder" -> "Fxn:floatx()";
    "Fxn:placeholder" -> "Fxn:tuple([None";
    "Fxn:placeholder" -> "Fxn:range(ndim)])";
    "Fxn:placeholder" -> "Fxn:tf.sparse_placeholder(dtype,";
    "Fxn:placeholder" -> "Fxn:tf.placeholder(dtype,";
    "Fxn:shape" -> "Fxn:K.get_session()";
    "Fxn:shape" -> "Fxn:np.array([[1,";
    "Fxn:shape" -> "Fxn:K.variable(value=val)";
    "Fxn:shape" -> "Fxn:keras.backend.placeholder(shape=(2,";
    "Fxn:shape" -> "Fxn:K.shape(kvar)";
    "Fxn:shape" -> "Fxn:shape=(2,)";
    "Fxn:shape" -> "Fxn:K.shape(inputs)";
    "Fxn:shape" -> "Fxn:shape=(3,)";
    "Fxn:shape" -> "Fxn:K.int_shape(x))";
    "Fxn:shape" -> "Fxn:K.shape(kvar).eval(session=tf_session)";
    "Fxn:shape" -> "Fxn:array([2,";
    "Fxn:shape" -> "Fxn:K.shape(inputs).eval(session=tf_session)";
    "Fxn:shape" -> "Fxn:array([2,";
    "Fxn:shape" -> "Fxn:tf.shape(x)";
    "Fxn:int_shape" -> "Fxn:K.placeholder(shape=(2,";
    "Fxn:int_shape" -> "Fxn:K.int_shape(inputs)";
    "Fxn:int_shape" -> "Fxn:np.array([[1,";
    "Fxn:int_shape" -> "Fxn:K.variable(value=val)";
    "Fxn:int_shape" -> "Fxn:K.int_shape(kvar)";
    "Fxn:int_shape" -> "Fxn:hasattr(x,";
    "Fxn:int_shape" -> "Fxn:tuple(x.get_shape().as_list())";
    "Fxn:ndim" -> "Fxn:K.placeholder(shape=(2,";
    "Fxn:ndim" -> "Fxn:np.array([[1,";
    "Fxn:ndim" -> "Fxn:K.variable(value=val)";
    "Fxn:ndim" -> "Fxn:K.ndim(inputs)";
    "Fxn:ndim" -> "Fxn:K.ndim(kvar)";
    "Fxn:ndim" -> "Fxn:x.get_shape()._dims";
    "Fxn:ndim" -> "Fxn:len(dims)";
    "Fxn:dtype" -> "Fxn:K.dtype(K.placeholder(shape=(2,4,5)))";
    "Fxn:dtype" -> "Fxn:K.dtype(K.placeholder(shape=(2,4,5),";
    "Fxn:dtype" -> "Fxn:K.dtype(K.placeholder(shape=(2,4,5),";
    "Fxn:dtype" -> "Fxn:K.variable(np.array([[1,";
    "Fxn:dtype" -> "Fxn:K.dtype(kvar)";
    "Fxn:dtype" -> "Fxn:K.variable(np.array([[1,";
    "Fxn:dtype" -> "Fxn:K.dtype(kvar)";
    "Fxn:eval" -> "Fxn:K.variable(np.array([[1,";
    "Fxn:eval" -> "Fxn:K.eval(kvar)";
    "Fxn:eval" -> "Fxn:array([[";
    "Fxn:eval" -> "Fxn:to_dense(x).eval(session=get_session())";
    "Fxn:zeros" -> "Fxn:K.zeros((3,4))";
    "Fxn:zeros" -> "Fxn:K.eval(kvar)";
    "Fxn:zeros" -> "Fxn:array([[";
    "Fxn:zeros" -> "Fxn:floatx()";
    "Fxn:zeros" -> "Fxn:tf.as_dtype(dtype)";
    "Fxn:zeros" -> "Fxn:tf.zeros(shape=shape,";
    "Fxn:zeros" -> "Fxn:py_all(v.get_shape().as_list()):";
    "Fxn:zeros" -> "Fxn:variable(v,";
    "Fxn:ones" -> "Fxn:K.ones((3,4))";
    "Fxn:ones" -> "Fxn:K.eval(kvar)";
    "Fxn:ones" -> "Fxn:array([[";
    "Fxn:ones" -> "Fxn:floatx()";
    "Fxn:ones" -> "Fxn:tf.as_dtype(dtype)";
    "Fxn:ones" -> "Fxn:tf.ones(shape=shape,";
    "Fxn:ones" -> "Fxn:py_all(v.get_shape().as_list()):";
    "Fxn:ones" -> "Fxn:variable(v,";
    "Fxn:eye" -> "Fxn:K.eye(3)";
    "Fxn:eye" -> "Fxn:K.eval(kvar)";
    "Fxn:eye" -> "Fxn:array([[";
    "Fxn:eye" -> "Fxn:floatx()";
    "Fxn:eye" -> "Fxn:tf.as_dtype(dtype)";
    "Fxn:eye" -> "Fxn:variable(tf.eye(size,";
    "Fxn:zeros_like" -> "Fxn:K.variable(np.random.random((2,3)))";
    "Fxn:zeros_like" -> "Fxn:K.zeros_like(kvar)";
    "Fxn:zeros_like" -> "Fxn:K.eval(kvar_zeros)";
    "Fxn:zeros_like" -> "Fxn:array([[";
    "Fxn:zeros_like" -> "Fxn:tf.zeros_like(x,";
    "Fxn:ones_like" -> "Fxn:K.variable(np.random.random((2,3)))";
    "Fxn:ones_like" -> "Fxn:K.ones_like(kvar)";
    "Fxn:ones_like" -> "Fxn:K.eval(kvar_ones)";
    "Fxn:ones_like" -> "Fxn:array([[";
    "Fxn:ones_like" -> "Fxn:tf.ones_like(x,";
    "Fxn:identity" -> "Fxn:tf.identity(x,";
    "Fxn:random_uniform_variable" -> "Fxn:K.random_uniform_variable((2,3),";
    "Fxn:random_uniform_variable" -> "Fxn:K.eval(kvar)";
    "Fxn:random_uniform_variable" -> "Fxn:array([[";
    "Fxn:random_uniform_variable" -> "Fxn:floatx()";
    "Fxn:random_uniform_variable" -> "Fxn:tf.as_dtype(dtype)";
    "Fxn:random_uniform_variable" -> "Fxn:np.random.randint(10e8)";
    "Fxn:random_uniform_variable" -> "Fxn:tf.random_uniform_initializer(";
    "Fxn:random_uniform_variable" -> "Fxn:seed=seed)(shape)";
    "Fxn:random_uniform_variable" -> "Fxn:variable(value,";
    "Fxn:random_normal_variable" -> "Fxn:K.random_normal_variable((2,3),";
    "Fxn:random_normal_variable" -> "Fxn:K.eval(kvar)";
    "Fxn:random_normal_variable" -> "Fxn:array([[";
    "Fxn:random_normal_variable" -> "Fxn:floatx()";
    "Fxn:random_normal_variable" -> "Fxn:tf.as_dtype(dtype)";
    "Fxn:random_normal_variable" -> "Fxn:np.random.randint(10e8)";
    "Fxn:random_normal_variable" -> "Fxn:tf.random_normal_initializer(";
    "Fxn:random_normal_variable" -> "Fxn:seed=seed)(shape)";
    "Fxn:random_normal_variable" -> "Fxn:variable(value,";
    "Fxn:count_params" -> "Fxn:K.zeros((2,3))";
    "Fxn:count_params" -> "Fxn:K.count_params(kvar)";
    "Fxn:count_params" -> "Fxn:K.eval(kvar)";
    "Fxn:count_params" -> "Fxn:array([[";
    "Fxn:count_params" -> "Fxn:np.prod(int_shape(x))";
    "Fxn:cast" -> "Fxn:K.placeholder((2,";
    "Fxn:cast" -> "Fxn:shape=(2,";
    "Fxn:cast" -> "Fxn:K.cast(input,";
    "Fxn:cast" -> "Fxn:shape=(2,";
    "Fxn:cast" -> "Fxn:shape=(2,";
    "Fxn:cast" -> "Fxn:K.cast(input,";
    "Fxn:cast" -> "Fxn:shape=(2,";
    "Fxn:cast" -> "Fxn:tf.cast(x,";
    "Fxn:update" -> "Fxn:tf.assign(x,";
    "Fxn:update_add" -> "Fxn:tf.assign_add(x,";
    "Fxn:update_sub" -> "Fxn:tf.assign_sub(x,";
    "Fxn:moving_average_update" -> "Fxn:moving_averages.assign_moving_average(";
    "Fxn:dot" -> "Fxn:`(2,";
    "Fxn:dot" -> "Fxn:K.placeholder(shape=(2,";
    "Fxn:dot" -> "Fxn:K.placeholder(shape=(3,";
    "Fxn:dot" -> "Fxn:K.dot(x,";
    "Fxn:dot" -> "Fxn:shape=(2,";
    "Fxn:dot" -> "Fxn:K.placeholder(shape=(32,";
    "Fxn:dot" -> "Fxn:K.placeholder(shape=(3,";
    "Fxn:dot" -> "Fxn:K.dot(x,";
    "Fxn:dot" -> "Fxn:shape=(32,";
    "Fxn:dot" -> "Fxn:K.random_uniform_variable(shape=(2,";
    "Fxn:dot" -> "Fxn:K.ones((4,";
    "Fxn:dot" -> "Fxn:K.dot(x,";
    "Fxn:dot" -> "Fxn:K.int_shape(xy)";
    "Fxn:dot" -> "Fxn:ndim(x)";
    "Fxn:dot" -> "Fxn:ndim(y)";
    "Fxn:dot" -> "Fxn:zip(int_shape(x),";
    "Fxn:dot" -> "Fxn:tf.unstack(tf.shape(x))):";
    "Fxn:dot" -> "Fxn:x_shape.append(i)";
    "Fxn:dot" -> "Fxn:x_shape.append(s)";
    "Fxn:dot" -> "Fxn:tuple(x_shape)";
    "Fxn:dot" -> "Fxn:zip(int_shape(y),";
    "Fxn:dot" -> "Fxn:tf.unstack(tf.shape(y))):";
    "Fxn:dot" -> "Fxn:y_shape.append(i)";
    "Fxn:dot" -> "Fxn:y_shape.append(s)";
    "Fxn:dot" -> "Fxn:tuple(y_shape)";
    "Fxn:dot" -> "Fxn:list(range(ndim(y)))";
    "Fxn:dot" -> "Fxn:[y_permute_dim.pop(-2)]";
    "Fxn:dot" -> "Fxn:tf.reshape(x,";
    "Fxn:dot" -> "Fxn:tf.reshape(tf.transpose(y,";
    "Fxn:dot" -> "Fxn:tf.reshape(tf.matmul(xt,";
    "Fxn:dot" -> "Fxn:is_sparse(x):";
    "Fxn:dot" -> "Fxn:tf.sparse_tensor_dense_matmul(x,";
    "Fxn:dot" -> "Fxn:tf.matmul(x,";
    "Fxn:batch_dot" -> "Fxn:`(batch_size,";
    "Fxn:batch_dot" -> "Fxn:`(batch_size,";
    "Fxn:batch_dot" -> "Fxn:`batch_dot(x,";
    "Fxn:batch_dot" -> "Fxn:`x.dot(y.T)`,";
    "Fxn:batch_dot" -> "Fxn:`(100,";
    "Fxn:batch_dot" -> "Fxn:`(100,";
    "Fxn:batch_dot" -> "Fxn:`(100,";
    "Fxn:batch_dot" -> "Fxn:K.ones(shape=(32,";
    "Fxn:batch_dot" -> "Fxn:K.ones(shape=(32,";
    "Fxn:batch_dot" -> "Fxn:K.batch_dot(x_batch,";
    "Fxn:batch_dot" -> "Fxn:K.int_shape(xy_batch_dot)";
    "Fxn:batch_dot" -> "Fxn:isinstance(axes,";
    "Fxn:batch_dot" -> "Fxn:ndim(x)";
    "Fxn:batch_dot" -> "Fxn:ndim(y)";
    "Fxn:batch_dot" -> "Fxn:tf.reshape(y,";
    "Fxn:batch_dot" -> "Fxn:tf.concat([tf.shape(y),";
    "Fxn:batch_dot" -> "Fxn:tf.reshape(x,";
    "Fxn:batch_dot" -> "Fxn:tf.concat([tf.shape(x),";
    "Fxn:batch_dot" -> "Fxn:ndim(x)";
    "Fxn:batch_dot" -> "Fxn:ndim(y)";
    "Fxn:batch_dot" -> "Fxn:tf.reduce_sum(tf.multiply(x,";
    "Fxn:batch_dot" -> "Fxn:tf.reduce_sum(tf.multiply(tf.transpose(x,";
    "Fxn:batch_dot" -> "Fxn:ndim(x)";
    "Fxn:batch_dot" -> "Fxn:ndim(y)";
    "Fxn:batch_dot" -> "Fxn:tf.matmul(x,";
    "Fxn:batch_dot" -> "Fxn:tf.squeeze(out,";
    "Fxn:batch_dot" -> "Fxn:list(range(idx,";
    "Fxn:batch_dot" -> "Fxn:ndim(out)";
    "Fxn:batch_dot" -> "Fxn:expand_dims(out,";
    "Fxn:transpose" -> "Fxn:K.variable([[1,";
    "Fxn:transpose" -> "Fxn:K.eval(var)";
    "Fxn:transpose" -> "Fxn:array([[";
    "Fxn:transpose" -> "Fxn:K.transpose(var)";
    "Fxn:transpose" -> "Fxn:K.eval(var_transposed)";
    "Fxn:transpose" -> "Fxn:array([[";
    "Fxn:transpose" -> "Fxn:K.placeholder((2,";
    "Fxn:transpose" -> "Fxn:shape=(2,";
    "Fxn:transpose" -> "Fxn:K.transpose(inputs)";
    "Fxn:transpose" -> "Fxn:shape=(3,";
    "Fxn:transpose" -> "Fxn:tf.transpose(x)";
    "Fxn:gather" -> "Fxn:tf.gather(reference,";
    "Fxn:max" -> "Fxn:tf.reduce_max(x,";
    "Fxn:min" -> "Fxn:tf.reduce_min(x,";
    "Fxn:sum" -> "Fxn:tf.reduce_sum(x,";
    "Fxn:prod" -> "Fxn:tf.reduce_prod(x,";
    "Fxn:cumsum" -> "Fxn:tf.cumsum(x,";
    "Fxn:cumprod" -> "Fxn:tf.cumprod(x,";
    "Fxn:var" -> "Fxn:tf.cast(x,";
    "Fxn:var" -> "Fxn:floatx())";
    "Fxn:var" -> "Fxn:tf.reduce_mean(x,";
    "Fxn:var" -> "Fxn:tf.square(x";
    "Fxn:var" -> "Fxn:tf.reduce_mean(devs_squared,";
    "Fxn:std" -> "Fxn:tf.sqrt(var(x,";
    "Fxn:mean" -> "Fxn:tf.cast(x,";
    "Fxn:mean" -> "Fxn:floatx())";
    "Fxn:mean" -> "Fxn:tf.reduce_mean(x,";
    "Fxn:any" -> "Fxn:tf.cast(x,";
    "Fxn:any" -> "Fxn:tf.reduce_any(x,";
    "Fxn:all" -> "Fxn:tf.cast(x,";
    "Fxn:all" -> "Fxn:tf.reduce_all(x,";
    "Fxn:argmax" -> "Fxn:tf.argmax(x,";
    "Fxn:argmin" -> "Fxn:tf.argmin(x,";
    "Fxn:square" -> "Fxn:tf.square(x)";
    "Fxn:abs" -> "Fxn:tf.abs(x)";
    "Fxn:sqrt" -> "Fxn:_to_tensor(0.,";
    "Fxn:sqrt" -> "Fxn:_to_tensor(np.inf,";
    "Fxn:sqrt" -> "Fxn:tf.clip_by_value(x,";
    "Fxn:sqrt" -> "Fxn:tf.sqrt(x)";
    "Fxn:exp" -> "Fxn:tf.exp(x)";
    "Fxn:log" -> "Fxn:tf.log(x)";
    "Fxn:logsumexp" -> "Fxn:log(sum(exp(elements";
    "Fxn:logsumexp" -> "Fxn:log(sum(exp(x))).";
    "Fxn:logsumexp" -> "Fxn:tf.reduce_logsumexp(x,";
    "Fxn:round" -> "Fxn:tf.round(x)";
    "Fxn:sign" -> "Fxn:tf.sign(x)";
    "Fxn:pow" -> "Fxn:tf.pow(x,";
    "Fxn:clip" -> "Fxn:_to_tensor(min_value,";
    "Fxn:clip" -> "Fxn:_to_tensor(max_value,";
    "Fxn:clip" -> "Fxn:tf.clip_by_value(x,";
    "Fxn:equal" -> "Fxn:tf.equal(x,";
    "Fxn:not_equal" -> "Fxn:tf.not_equal(x,";
    "Fxn:greater" -> "Fxn:tf.greater(x,";
    "Fxn:greater_equal" -> "Fxn:tf.greater_equal(x,";
    "Fxn:less" -> "Fxn:tf.less(x,";
    "Fxn:less_equal" -> "Fxn:tf.less_equal(x,";
    "Fxn:maximum" -> "Fxn:tf.maximum(x,";
    "Fxn:minimum" -> "Fxn:tf.minimum(x,";
    "Fxn:sin" -> "Fxn:tf.sin(x)";
    "Fxn:cos" -> "Fxn:tf.cos(x)";
    "Fxn:_regular_normalize_batch_in_training" -> "Fxn:`(normalized_tensor,";
    "Fxn:_regular_normalize_batch_in_training" -> "Fxn:tf.nn.moments(x,";
    "Fxn:_regular_normalize_batch_in_training" -> "Fxn:tf.nn.batch_normalization(x,";
    "Fxn:_broadcast_normalize_batch_in_training" -> "Fxn:`(normalized_tensor,";
    "Fxn:_broadcast_normalize_batch_in_training" -> "Fxn:tf.nn.moments(x,";
    "Fxn:_broadcast_normalize_batch_in_training" -> "Fxn:range(ndim(x)):";
    "Fxn:_broadcast_normalize_batch_in_training" -> "Fxn:target_shape.append(1)";
    "Fxn:_broadcast_normalize_batch_in_training" -> "Fxn:target_shape.append(tf.shape(x)[axis])";
    "Fxn:_broadcast_normalize_batch_in_training" -> "Fxn:tf.stack(target_shape)";
    "Fxn:_broadcast_normalize_batch_in_training" -> "Fxn:tf.reshape(mean,";
    "Fxn:_broadcast_normalize_batch_in_training" -> "Fxn:tf.reshape(var,";
    "Fxn:_broadcast_normalize_batch_in_training" -> "Fxn:tf.reshape(gamma,";
    "Fxn:_broadcast_normalize_batch_in_training" -> "Fxn:tf.reshape(beta,";
    "Fxn:_broadcast_normalize_batch_in_training" -> "Fxn:tf.nn.batch_normalization(";
    "Fxn:_fused_normalize_batch_in_training" -> "Fxn:`(normalized_tensor,";
    "Fxn:_fused_normalize_batch_in_training" -> "Fxn:list(reduction_axes)";
    "Fxn:_fused_normalize_batch_in_training" -> "Fxn:tf.constant(1.0,";
    "Fxn:_fused_normalize_batch_in_training" -> "Fxn:shape=[x.get_shape()[normalization_axis]])";
    "Fxn:_fused_normalize_batch_in_training" -> "Fxn:tf.constant(0.0,";
    "Fxn:_fused_normalize_batch_in_training" -> "Fxn:shape=[x.get_shape()[normalization_axis]])";
    "Fxn:_fused_normalize_batch_in_training" -> "Fxn:tf.nn.fused_batch_norm(";
    "Fxn:normalize_batch_in_training" -> "Fxn:`(normalized_tensor,";
    "Fxn:normalize_batch_in_training" -> "Fxn:ndim(x)";
    "Fxn:normalize_batch_in_training" -> "Fxn:list(reduction_axes)";
    "Fxn:normalize_batch_in_training" -> "Fxn:_has_nchw_support()";
    "Fxn:normalize_batch_in_training" -> "Fxn:list(reduction_axes)";
    "Fxn:normalize_batch_in_training" -> "Fxn:_broadcast_normalize_batch_in_training(x,";
    "Fxn:normalize_batch_in_training" -> "Fxn:_fused_normalize_batch_in_training(";
    "Fxn:normalize_batch_in_training" -> "Fxn:sorted(reduction_axes)";
    "Fxn:normalize_batch_in_training" -> "Fxn:list(range(ndim(x)))[:-1]:";
    "Fxn:normalize_batch_in_training" -> "Fxn:_regular_normalize_batch_in_training(x,";
    "Fxn:normalize_batch_in_training" -> "Fxn:_broadcast_normalize_batch_in_training(x,";
    "Fxn:batch_normalization" -> "Fxn:tf.nn.batch_normalization(x,";
    "Fxn:concatenate" -> "Fxn:ndim(tensors[0])";
    "Fxn:concatenate" -> "Fxn:py_all([is_sparse(x)";
    "Fxn:concatenate" -> "Fxn:tf.sparse_concat(axis,";
    "Fxn:concatenate" -> "Fxn:tf.concat([to_dense(x)";
    "Fxn:reshape" -> "Fxn:tf.reshape(x,";
    "Fxn:permute_dimensions" -> "Fxn:`(0,";
    "Fxn:permute_dimensions" -> "Fxn:tf.transpose(x,";
    "Fxn:resize_images" -> "Fxn:int_shape(x)";
    "Fxn:resize_images" -> "Fxn:tf.shape(x)[2:]";
    "Fxn:resize_images" -> "Fxn:tf.constant(np.array([height_factor,";
    "Fxn:resize_images" -> "Fxn:width_factor]).astype('int32'))";
    "Fxn:resize_images" -> "Fxn:permute_dimensions(x,";
    "Fxn:resize_images" -> "Fxn:tf.image.resize_nearest_neighbor(x,";
    "Fxn:resize_images" -> "Fxn:permute_dimensions(x,";
    "Fxn:resize_images" -> "Fxn:x.set_shape((None,";
    "Fxn:resize_images" -> "Fxn:int_shape(x)";
    "Fxn:resize_images" -> "Fxn:tf.shape(x)[1:3]";
    "Fxn:resize_images" -> "Fxn:tf.constant(np.array([height_factor,";
    "Fxn:resize_images" -> "Fxn:width_factor]).astype('int32'))";
    "Fxn:resize_images" -> "Fxn:tf.image.resize_nearest_neighbor(x,";
    "Fxn:resize_images" -> "Fxn:x.set_shape((None,";
    "Fxn:resize_images" -> "Fxn:ValueError('Unknown";
    "Fxn:resize_images" -> "Fxn:str(data_format))";
    "Fxn:resize_volumes" -> "Fxn:repeat_elements(x,";
    "Fxn:resize_volumes" -> "Fxn:repeat_elements(output,";
    "Fxn:resize_volumes" -> "Fxn:repeat_elements(output,";
    "Fxn:resize_volumes" -> "Fxn:repeat_elements(x,";
    "Fxn:resize_volumes" -> "Fxn:repeat_elements(output,";
    "Fxn:resize_volumes" -> "Fxn:repeat_elements(output,";
    "Fxn:resize_volumes" -> "Fxn:ValueError('Unknown";
    "Fxn:resize_volumes" -> "Fxn:str(data_format))";
    "Fxn:repeat_elements" -> "Fxn:`(s1,";
    "Fxn:repeat_elements" -> "Fxn:`(s1,";
    "Fxn:repeat_elements" -> "Fxn:x.get_shape().as_list()";
    "Fxn:repeat_elements" -> "Fxn:tf.split(value=x,";
    "Fxn:repeat_elements" -> "Fxn:range(rep)]";
    "Fxn:repeat_elements" -> "Fxn:concatenate(x_rep,";
    "Fxn:repeat_elements" -> "Fxn:tf.shape(x)";
    "Fxn:repeat_elements" -> "Fxn:tf.expand_dims(x,";
    "Fxn:repeat_elements" -> "Fxn:np.ones(len(x.get_shape())";
    "Fxn:repeat_elements" -> "Fxn:tf.tile(x_rep,";
    "Fxn:repeat_elements" -> "Fxn:np.delete(reps,";
    "Fxn:repeat_elements" -> "Fxn:tf.constant(reps,";
    "Fxn:repeat_elements" -> "Fxn:tf.reshape(x_rep,";
    "Fxn:repeat_elements" -> "Fxn:x.get_shape().as_list()";
    "Fxn:repeat_elements" -> "Fxn:x_rep.set_shape(x_shape)";
    "Fxn:repeat_elements" -> "Fxn:tuple(x_shape)";
    "Fxn:repeat" -> "Fxn:`(samples,";
    "Fxn:repeat" -> "Fxn:ndim(x)";
    "Fxn:repeat" -> "Fxn:tf.expand_dims(x,";
    "Fxn:repeat" -> "Fxn:tf.stack([1,";
    "Fxn:repeat" -> "Fxn:tf.tile(x,";
    "Fxn:arange" -> "Fxn:tf.cond(start";
    "Fxn:arange" -> "Fxn:tf.constant(0,";
    "Fxn:arange" -> "Fxn:tf.range(start,";
    "Fxn:arange" -> "Fxn:cast(result,";
    "Fxn:tile" -> "Fxn:isinstance(n,";
    "Fxn:tile" -> "Fxn:tf.tile(x,";
    "Fxn:flatten" -> "Fxn:tf.reshape(x,";
    "Fxn:batch_flatten" -> "Fxn:tf.reshape(x,";
    "Fxn:batch_flatten" -> "Fxn:tf.stack([-1,";
    "Fxn:batch_flatten" -> "Fxn:prod(shape(x)[1:])]))";
    "Fxn:expand_dims" -> "Fxn:tf.expand_dims(x,";
    "Fxn:squeeze" -> "Fxn:tf.squeeze(x,";
    "Fxn:temporal_padding" -> "Fxn:padding=(1,";
    "Fxn:temporal_padding" -> "Fxn:len(padding)";
    "Fxn:temporal_padding" -> "Fxn:tf.pad(x,";
    "Fxn:spatial_2d_padding" -> "Fxn:padding=((1,";
    "Fxn:spatial_2d_padding" -> "Fxn:len(padding)";
    "Fxn:spatial_2d_padding" -> "Fxn:len(padding[0])";
    "Fxn:spatial_2d_padding" -> "Fxn:len(padding[1])";
    "Fxn:spatial_2d_padding" -> "Fxn:image_data_format()";
    "Fxn:spatial_2d_padding" -> "Fxn:ValueError('Unknown";
    "Fxn:spatial_2d_padding" -> "Fxn:str(data_format))";
    "Fxn:spatial_2d_padding" -> "Fxn:list(padding[0]),";
    "Fxn:spatial_2d_padding" -> "Fxn:list(padding[1])]";
    "Fxn:spatial_2d_padding" -> "Fxn:list(padding[0]),";
    "Fxn:spatial_2d_padding" -> "Fxn:list(padding[1]),";
    "Fxn:spatial_2d_padding" -> "Fxn:tf.pad(x,";
    "Fxn:spatial_3d_padding" -> "Fxn:padding=((1,";
    "Fxn:spatial_3d_padding" -> "Fxn:len(padding)";
    "Fxn:spatial_3d_padding" -> "Fxn:len(padding[0])";
    "Fxn:spatial_3d_padding" -> "Fxn:len(padding[1])";
    "Fxn:spatial_3d_padding" -> "Fxn:len(padding[2])";
    "Fxn:spatial_3d_padding" -> "Fxn:image_data_format()";
    "Fxn:spatial_3d_padding" -> "Fxn:ValueError('Unknown";
    "Fxn:spatial_3d_padding" -> "Fxn:str(data_format))";
    "Fxn:spatial_3d_padding" -> "Fxn:tf.pad(x,";
    "Fxn:stack" -> "Fxn:tf.stack(x,";
    "Fxn:one_hot" -> "Fxn:`(batch_size,";
    "Fxn:one_hot" -> "Fxn:dim(n-1))`";
    "Fxn:one_hot" -> "Fxn:`(batch_size,";
    "Fxn:one_hot" -> "Fxn:dim(n-1),";
    "Fxn:one_hot" -> "Fxn:tf.one_hot(indices,";
    "Fxn:reverse" -> "Fxn:isinstance(axes,";
    "Fxn:reverse" -> "Fxn:tf.reverse(x,";
    "Fxn:get_value" -> "Fxn:x.eval(session=get_session())";
    "Fxn:batch_get_value" -> "Fxn:get_session().run(ops)";
    "Fxn:set_value" -> "Fxn:np.asarray(value,";
    "Fxn:set_value" -> "Fxn:dtype=dtype(x))";
    "Fxn:set_value" -> "Fxn:tf.as_dtype(x.dtype.name.split('_')[0])";
    "Fxn:set_value" -> "Fxn:hasattr(x,";
    "Fxn:set_value" -> "Fxn:tf.placeholder(tf_dtype,";
    "Fxn:set_value" -> "Fxn:x.assign(assign_placeholder)";
    "Fxn:set_value" -> "Fxn:get_session().run(assign_op,";
    "Fxn:batch_set_value" -> "Fxn:`(tensor,";
    "Fxn:batch_set_value" -> "Fxn:np.asarray(value,";
    "Fxn:batch_set_value" -> "Fxn:dtype=dtype(x))";
    "Fxn:batch_set_value" -> "Fxn:tf.as_dtype(x.dtype.name.split('_')[0])";
    "Fxn:batch_set_value" -> "Fxn:hasattr(x,";
    "Fxn:batch_set_value" -> "Fxn:tf.placeholder(tf_dtype,";
    "Fxn:batch_set_value" -> "Fxn:x.assign(assign_placeholder)";
    "Fxn:batch_set_value" -> "Fxn:assign_ops.append(assign_op)";
    "Fxn:batch_set_value" -> "Fxn:get_session().run(assign_ops,";
    "Fxn:get_variable_shape" -> "Fxn:int_shape(x)";
    "Fxn:print_tensor" -> "Fxn:K.print_tensor(x,";
    "Fxn:print_tensor" -> "Fxn:tf.Print(x,";
    "class:Function(object):" -> "Fxn:__init__";
    "class:Function(object):" -> "Fxn:__call__";
    "class:Function(object):" -> "Fxn:function";
    "class:Function(object):" -> "Fxn:gradients";
    "class:Function(object):" -> "Fxn:stop_gradient";
    "class:Function(object):" -> "Fxn:rnn";
    "class:Function(object):" -> "Fxn:_step";
    "class:Function(object):" -> "Fxn:_step";
    "class:Function(object):" -> "Fxn:switch";
    "class:Function(object):" -> "Fxn:then_expression_fn";
    "class:Function(object):" -> "Fxn:else_expression_fn";
    "class:Function(object):" -> "Fxn:in_train_phase";
    "class:Function(object):" -> "Fxn:in_test_phase";
    "class:Function(object):" -> "Fxn:relu";
    "class:Function(object):" -> "Fxn:elu";
    "class:Function(object):" -> "Fxn:softmax";
    "class:Function(object):" -> "Fxn:softplus";
    "class:Function(object):" -> "Fxn:softsign";
    "class:Function(object):" -> "Fxn:categorical_crossentropy";
    "class:Function(object):" -> "Fxn:sparse_categorical_crossentropy";
    "class:Function(object):" -> "Fxn:binary_crossentropy";
    "class:Function(object):" -> "Fxn:sigmoid";
    "class:Function(object):" -> "Fxn:hard_sigmoid";
    "class:Function(object):" -> "Fxn:tanh";
    "class:Function(object):" -> "Fxn:dropout";
    "class:Function(object):" -> "Fxn:l2_normalize";
    "class:Function(object):" -> "Fxn:in_top_k";
    "class:Function(object):" -> "Fxn:_preprocess_conv1d_input";
    "class:Function(object):" -> "Fxn:_preprocess_conv2d_input";
    "class:Function(object):" -> "Fxn:_preprocess_conv3d_input";
    "class:Function(object):" -> "Fxn:_preprocess_padding";
    "class:Function(object):" -> "Fxn:conv1d";
    "class:Function(object):" -> "Fxn:conv2d";
    "class:Function(object):" -> "Fxn:conv2d_transpose";
    "class:Function(object):" -> "Fxn:separable_conv1d";
    "class:Function(object):" -> "Fxn:separable_conv2d";
    "class:Function(object):" -> "Fxn:depthwise_conv2d";
    "class:Function(object):" -> "Fxn:conv3d";
    "class:Function(object):" -> "Fxn:conv3d_transpose";
    "class:Function(object):" -> "Fxn:pool2d";
    "class:Function(object):" -> "Fxn:pool3d";
    "class:Function(object):" -> "Fxn:bias_add";
    "class:Function(object):" -> "Fxn:random_normal";
    "class:Function(object):" -> "Fxn:random_uniform";
    "class:Function(object):" -> "Fxn:random_binomial";
    "class:Function(object):" -> "Fxn:truncated_normal";
    "class:Function(object):" -> "Fxn:ctc_label_dense_to_sparse";
    "class:Function(object):" -> "Fxn:range_less_than";
    "class:Function(object):" -> "Fxn:ctc_batch_cost";
    "class:Function(object):" -> "Fxn:ctc_decode";
    "class:Function(object):" -> "Fxn:map_fn";
    "class:Function(object):" -> "Fxn:foldl";
    "class:Function(object):" -> "Fxn:foldr";
    "class:Function(object):" -> "Fxn:local_conv1d";
    "class:Function(object):" -> "Fxn:local_conv2d";
    "Fxn:__init__" -> "Fxn:isinstance(inputs,";
    "Fxn:__init__" -> "Fxn:TypeError('`inputs`";
    "Fxn:__init__" -> "Fxn:isinstance(outputs,";
    "Fxn:__init__" -> "Fxn:TypeError('`outputs`";
    "Fxn:__init__" -> "Fxn:isinstance(updates,";
    "Fxn:__init__" -> "Fxn:TypeError('`updates`";
    "Fxn:__init__" -> "Fxn:list(inputs)";
    "Fxn:__init__" -> "Fxn:list(outputs)";
    "Fxn:__init__" -> "Fxn:tf.control_dependencies(self.outputs):";
    "Fxn:__init__" -> "Fxn:isinstance(update,";
    "Fxn:__init__" -> "Fxn:updates_ops.append(tf.assign(p,";
    "Fxn:__init__" -> "Fxn:updates_ops.append(update)";
    "Fxn:__init__" -> "Fxn:tf.group(*updates_ops)";
    "Fxn:__init__" -> "Fxn:session_kwargs.pop('feed_dict',";
    "Fxn:__init__" -> "Fxn:session_kwargs.pop('fetches',";
    "Fxn:__init__" -> "Fxn:isinstance(self.fetches,";
    "Fxn:__call__" -> "Fxn:isinstance(inputs,";
    "Fxn:__call__" -> "Fxn:TypeError('`inputs`";
    "Fxn:__call__" -> "Fxn:self.feed_dict.copy()";
    "Fxn:__call__" -> "Fxn:zip(self.inputs,";
    "Fxn:__call__" -> "Fxn:is_sparse(tensor):";
    "Fxn:__call__" -> "Fxn:value.tocoo()";
    "Fxn:__call__" -> "Fxn:np.concatenate((np.expand_dims(sparse_coo.row,";
    "Fxn:__call__" -> "Fxn:np.expand_dims(sparse_coo.col,";
    "Fxn:__call__" -> "Fxn:get_session()";
    "Fxn:__call__" -> "Fxn:session.run(fetches=fetches,";
    "Fxn:__call__" -> "Fxn:updated[:len(self.outputs)]";
    "Fxn:function" -> "Fxn:has_arg(Function.__init__,";
    "Fxn:function" -> "Fxn:ValueError(msg)";
    "Fxn:function" -> "Fxn:Function(inputs,";
    "Fxn:gradients" -> "Fxn:tf.gradients(loss,";
    "Fxn:stop_gradient" -> "Fxn:isinstance(variables,";
    "Fxn:stop_gradient" -> "Fxn:map(tf.stop_gradient,";
    "Fxn:stop_gradient" -> "Fxn:tf.stop_gradient(variables)";
    "Fxn:rnn" -> "Fxn:`(samples,";
    "Fxn:rnn" -> "Fxn:`(samples,";
    "Fxn:rnn" -> "Fxn:`(samples,";
    "Fxn:rnn" -> "Fxn:`(samples,";
    "Fxn:rnn" -> "Fxn:`(last_output,";
    "Fxn:rnn" -> "Fxn:`(samples,";
    "Fxn:rnn" -> "Fxn:`(samples,";
    "Fxn:rnn" -> "Fxn:`(samples,";
    "Fxn:rnn" -> "Fxn:len(inputs.get_shape())";
    "Fxn:rnn" -> "Fxn:ValueError('Input";
    "Fxn:rnn" -> "Fxn:list(range(2,";
    "Fxn:rnn" -> "Fxn:tf.transpose(inputs,";
    "Fxn:rnn" -> "Fxn:tf.cast(mask,";
    "Fxn:rnn" -> "Fxn:len(mask.get_shape())";
    "Fxn:rnn" -> "Fxn:expand_dims(mask)";
    "Fxn:rnn" -> "Fxn:tf.transpose(mask,";
    "Fxn:rnn" -> "Fxn:inputs.get_shape()[0]:";
    "Fxn:rnn" -> "Fxn:ValueError('Unrolling";
    "Fxn:rnn" -> "Fxn:tf.unstack(inputs)";
    "Fxn:rnn" -> "Fxn:input_list.reverse()";
    "Fxn:rnn" -> "Fxn:tf.unstack(mask)";
    "Fxn:rnn" -> "Fxn:mask_list.reverse()";
    "Fxn:rnn" -> "Fxn:zip(input_list,";
    "Fxn:rnn" -> "Fxn:step_function(inp,";
    "Fxn:rnn" -> "Fxn:getattr(output,";
    "Fxn:rnn" -> "Fxn:tf.tile(mask_t,";
    "Fxn:rnn" -> "Fxn:tf.stack([1,";
    "Fxn:rnn" -> "Fxn:tf.shape(output)[1]]))";
    "Fxn:rnn" -> "Fxn:zeros_like(output)";
    "Fxn:rnn" -> "Fxn:tf.where(tiled_mask_t,";
    "Fxn:rnn" -> "Fxn:zip(states,";
    "Fxn:rnn" -> "Fxn:tf.tile(mask_t,";
    "Fxn:rnn" -> "Fxn:tf.stack([1,";
    "Fxn:rnn" -> "Fxn:tf.shape(new_state)[1]]))";
    "Fxn:rnn" -> "Fxn:return_states.append(tf.where(tiled_mask_t,";
    "Fxn:rnn" -> "Fxn:successive_outputs.append(output)";
    "Fxn:rnn" -> "Fxn:successive_states.append(states)";
    "Fxn:rnn" -> "Fxn:tf.stack(successive_outputs)";
    "Fxn:rnn" -> "Fxn:step_function(inp,";
    "Fxn:rnn" -> "Fxn:getattr(output,";
    "Fxn:rnn" -> "Fxn:successive_outputs.append(output)";
    "Fxn:rnn" -> "Fxn:successive_states.append(states)";
    "Fxn:rnn" -> "Fxn:tf.stack(successive_outputs)";
    "Fxn:rnn" -> "Fxn:reverse(inputs,";
    "Fxn:rnn" -> "Fxn:tuple(initial_states)";
    "Fxn:rnn" -> "Fxn:tf.shape(inputs)[0]";
    "Fxn:rnn" -> "Fxn:step_function(inputs[0],";
    "Fxn:rnn" -> "Fxn:tensor_array_ops.TensorArray(";
    "Fxn:rnn" -> "Fxn:tensor_array_ops.TensorArray(";
    "Fxn:rnn" -> "Fxn:input_ta.unstack(inputs)";
    "Fxn:rnn" -> "Fxn:tf.constant(0,";
    "Fxn:rnn" -> "Fxn:ValueError('No";
    "Fxn:rnn" -> "Fxn:'(and";
    "Fxn:rnn" -> "Fxn:reverse(mask,";
    "Fxn:rnn" -> "Fxn:tensor_array_ops.TensorArray(";
    "Fxn:rnn" -> "Fxn:mask_ta.unstack(mask)";
    "Fxn:_step" -> "Fxn:`(time";
    "Fxn:_step" -> "Fxn:tuple(new_states)`";
    "Fxn:_step" -> "Fxn:input_ta.read(time)";
    "Fxn:_step" -> "Fxn:mask_ta.read(time)";
    "Fxn:_step" -> "Fxn:step_function(current_input,";
    "Fxn:_step" -> "Fxn:tuple(states)";
    "Fxn:_step" -> "Fxn:tuple(constants))";
    "Fxn:_step" -> "Fxn:getattr(output,";
    "Fxn:_step" -> "Fxn:zip(states,";
    "Fxn:_step" -> "Fxn:new_state.set_shape(state.get_shape())";
    "Fxn:_step" -> "Fxn:tf.tile(mask_t,";
    "Fxn:_step" -> "Fxn:tf.stack([1,";
    "Fxn:_step" -> "Fxn:tf.shape(output)[1]]))";
    "Fxn:_step" -> "Fxn:tf.where(tiled_mask_t,";
    "Fxn:_step" -> "Fxn:[tf.where(tiled_mask_t,";
    "Fxn:_step" -> "Fxn:range(len(states))]";
    "Fxn:_step" -> "Fxn:output_ta_t.write(time,";
    "Fxn:_step" -> "Fxn:tuple(new_states)";
    "Fxn:_step" -> "Fxn:`(time";
    "Fxn:_step" -> "Fxn:tuple(new_states)`";
    "Fxn:_step" -> "Fxn:input_ta.read(time)";
    "Fxn:_step" -> "Fxn:step_function(current_input,";
    "Fxn:_step" -> "Fxn:tuple(states)";
    "Fxn:_step" -> "Fxn:tuple(constants))";
    "Fxn:_step" -> "Fxn:getattr(output,";
    "Fxn:_step" -> "Fxn:zip(states,";
    "Fxn:_step" -> "Fxn:new_state.set_shape(state.get_shape())";
    "Fxn:_step" -> "Fxn:output_ta_t.write(time,";
    "Fxn:_step" -> "Fxn:tuple(new_states)";
    "Fxn:_step" -> "Fxn:control_flow_ops.while_loop(";
    "Fxn:_step" -> "Fxn:loop_vars=(time,";
    "Fxn:_step" -> "Fxn:output_ta.stack()";
    "Fxn:_step" -> "Fxn:output_ta.read(last_time";
    "Fxn:_step" -> "Fxn:list(range(2,";
    "Fxn:_step" -> "Fxn:len(outputs.get_shape())))";
    "Fxn:_step" -> "Fxn:tf.transpose(outputs,";
    "Fxn:switch" -> "Fxn:tf.cast(condition,";
    "Fxn:switch" -> "Fxn:ndim(condition)";
    "Fxn:switch" -> "Fxn:callable(then_expression):";
    "Fxn:then_expression_fn" -> "Fxn:callable(else_expression):";
    "Fxn:else_expression_fn" -> "Fxn:tf.cond(condition,";
    "Fxn:else_expression_fn" -> "Fxn:callable(then_expression):";
    "Fxn:else_expression_fn" -> "Fxn:then_expression()";
    "Fxn:else_expression_fn" -> "Fxn:callable(else_expression):";
    "Fxn:else_expression_fn" -> "Fxn:else_expression()";
    "Fxn:else_expression_fn" -> "Fxn:ndim(then_expression)";
    "Fxn:else_expression_fn" -> "Fxn:ValueError('Rank";
    "Fxn:else_expression_fn" -> "Fxn:ndim(condition)='";
    "Fxn:else_expression_fn" -> "Fxn:str(cond_ndim)";
    "Fxn:else_expression_fn" -> "Fxn:ndim(then_expression)'";
    "Fxn:else_expression_fn" -> "Fxn:str(expr_ndim))";
    "Fxn:else_expression_fn" -> "Fxn:tf.concat([tf.shape(condition),";
    "Fxn:else_expression_fn" -> "Fxn:tf.reshape(condition,";
    "Fxn:else_expression_fn" -> "Fxn:tf.shape(then_expression)";
    "Fxn:else_expression_fn" -> "Fxn:tf.where(shape_diff";
    "Fxn:else_expression_fn" -> "Fxn:tf.ones_like(expr_shape))";
    "Fxn:else_expression_fn" -> "Fxn:tf.tile(condition,";
    "Fxn:else_expression_fn" -> "Fxn:tf.where(condition,";
    "Fxn:in_train_phase" -> "Fxn:`K.learning_phase()`.";
    "Fxn:in_train_phase" -> "Fxn:learning_phase()";
    "Fxn:in_train_phase" -> "Fxn:callable(x):";
    "Fxn:in_train_phase" -> "Fxn:x()";
    "Fxn:in_train_phase" -> "Fxn:callable(alt):";
    "Fxn:in_train_phase" -> "Fxn:alt()";
    "Fxn:in_train_phase" -> "Fxn:switch(training,";
    "Fxn:in_test_phase" -> "Fxn:in_train_phase(alt,";
    "Fxn:relu" -> "Fxn:`max(x,";
    "Fxn:relu" -> "Fxn:tf.nn.leaky_relu(x,";
    "Fxn:relu" -> "Fxn:tf.nn.relu(x)";
    "Fxn:relu" -> "Fxn:_to_tensor(max_value,";
    "Fxn:relu" -> "Fxn:tf.minimum(x,";
    "Fxn:elu" -> "Fxn:tf.nn.elu(x)";
    "Fxn:elu" -> "Fxn:tf.where(x";
    "Fxn:softmax" -> "Fxn:tf.nn.softmax(x,";
    "Fxn:softplus" -> "Fxn:tf.nn.softplus(x)";
    "Fxn:softsign" -> "Fxn:tf.nn.softsign(x)";
    "Fxn:sparse_categorical_crossentropy" -> "Fxn:_to_tensor(epsilon(),";
    "Fxn:sparse_categorical_crossentropy" -> "Fxn:tf.clip_by_value(output,";
    "Fxn:sparse_categorical_crossentropy" -> "Fxn:tf.log(output)";
    "Fxn:sparse_categorical_crossentropy" -> "Fxn:output.get_shape()";
    "Fxn:sparse_categorical_crossentropy" -> "Fxn:cast(flatten(target),";
    "Fxn:sparse_categorical_crossentropy" -> "Fxn:tf.reshape(output,";
    "Fxn:sparse_categorical_crossentropy" -> "Fxn:int(output_shape[-1])])";
    "Fxn:sparse_categorical_crossentropy" -> "Fxn:tf.nn.sparse_softmax_cross_entropy_with_logits(";
    "Fxn:sparse_categorical_crossentropy" -> "Fxn:len(output_shape)";
    "Fxn:sparse_categorical_crossentropy" -> "Fxn:tf.reshape(res,";
    "Fxn:sparse_categorical_crossentropy" -> "Fxn:tf.shape(output)[:-1])";
    "Fxn:binary_crossentropy" -> "Fxn:_to_tensor(epsilon(),";
    "Fxn:binary_crossentropy" -> "Fxn:tf.clip_by_value(output,";
    "Fxn:binary_crossentropy" -> "Fxn:tf.log(output";
    "Fxn:binary_crossentropy" -> "Fxn:tf.nn.sigmoid_cross_entropy_with_logits(labels=target,";
    "Fxn:sigmoid" -> "Fxn:tf.nn.sigmoid(x)";
    "Fxn:hard_sigmoid" -> "Fxn:_to_tensor(0.,";
    "Fxn:hard_sigmoid" -> "Fxn:_to_tensor(1.,";
    "Fxn:hard_sigmoid" -> "Fxn:tf.clip_by_value(x,";
    "Fxn:tanh" -> "Fxn:tf.nn.tanh(x)";
    "Fxn:dropout" -> "Fxn:np.random.randint(10e6)";
    "Fxn:dropout" -> "Fxn:tf.nn.dropout(x";
    "Fxn:l2_normalize" -> "Fxn:tf.nn.l2_normalize(x,";
    "Fxn:in_top_k" -> "Fxn:`(batch_size,";
    "Fxn:in_top_k" -> "Fxn:tf.nn.in_top_k(predictions,";
    "Fxn:_preprocess_conv1d_input" -> "Fxn:dtype(x)";
    "Fxn:_preprocess_conv1d_input" -> "Fxn:tf.cast(x,";
    "Fxn:_preprocess_conv1d_input" -> "Fxn:_has_nchw_support():";
    "Fxn:_preprocess_conv1d_input" -> "Fxn:tf.transpose(x,";
    "Fxn:_preprocess_conv2d_input" -> "Fxn:dtype(x)";
    "Fxn:_preprocess_conv2d_input" -> "Fxn:tf.cast(x,";
    "Fxn:_preprocess_conv2d_input" -> "Fxn:_has_nchw_support():";
    "Fxn:_preprocess_conv2d_input" -> "Fxn:tf.transpose(x,";
    "Fxn:_preprocess_conv3d_input" -> "Fxn:dtype(x)";
    "Fxn:_preprocess_conv3d_input" -> "Fxn:tf.cast(x,";
    "Fxn:_preprocess_conv3d_input" -> "Fxn:_has_nchw_support():";
    "Fxn:_preprocess_conv3d_input" -> "Fxn:tf.transpose(x,";
    "Fxn:_preprocess_padding" -> "Fxn:ValueError('Invalid";
    "Fxn:_preprocess_padding" -> "Fxn:str(padding))";
    "Fxn:conv1d" -> "Fxn:image_data_format()";
    "Fxn:conv1d" -> "Fxn:ValueError('Unknown";
    "Fxn:conv1d" -> "Fxn:str(data_format))";
    "Fxn:conv1d" -> "Fxn:kernel.get_shape().as_list()";
    "Fxn:conv1d" -> "Fxn:temporal_padding(x,";
    "Fxn:conv1d" -> "Fxn:_preprocess_padding(padding)";
    "Fxn:conv1d" -> "Fxn:tf.nn.convolution(";
    "Fxn:conv1d" -> "Fxn:dilation_rate=(dilation_rate,),";
    "Fxn:conv1d" -> "Fxn:strides=(strides,),";
    "Fxn:conv2d" -> "Fxn:strides=(1,";
    "Fxn:conv2d" -> "Fxn:dilation_rate=(1,";
    "Fxn:conv2d" -> "Fxn:image_data_format()";
    "Fxn:conv2d" -> "Fxn:ValueError('Unknown";
    "Fxn:conv2d" -> "Fxn:str(data_format))";
    "Fxn:conv2d" -> "Fxn:_preprocess_conv2d_input(x,";
    "Fxn:conv2d" -> "Fxn:_preprocess_padding(padding)";
    "Fxn:conv2d" -> "Fxn:tf.nn.convolution(";
    "Fxn:conv2d" -> "Fxn:tf.transpose(x,";
    "Fxn:conv2d_transpose" -> "Fxn:strides=(1,";
    "Fxn:conv2d_transpose" -> "Fxn:image_data_format()";
    "Fxn:conv2d_transpose" -> "Fxn:ValueError('Unknown";
    "Fxn:conv2d_transpose" -> "Fxn:str(data_format))";
    "Fxn:conv2d_transpose" -> "Fxn:isinstance(output_shape,";
    "Fxn:conv2d_transpose" -> "Fxn:tf.stack(output_shape)";
    "Fxn:conv2d_transpose" -> "Fxn:_preprocess_conv2d_input(x,";
    "Fxn:conv2d_transpose" -> "Fxn:tuple(output_shape[1:])";
    "Fxn:conv2d_transpose" -> "Fxn:tf.stack(list(output_shape))";
    "Fxn:conv2d_transpose" -> "Fxn:_preprocess_padding(padding)";
    "Fxn:conv2d_transpose" -> "Fxn:tf.nn.conv2d_transpose(x,";
    "Fxn:conv2d_transpose" -> "Fxn:tf.transpose(x,";
    "Fxn:separable_conv1d" -> "Fxn:image_data_format()";
    "Fxn:separable_conv1d" -> "Fxn:ValueError('Unknown";
    "Fxn:separable_conv1d" -> "Fxn:str(data_format))";
    "Fxn:separable_conv1d" -> "Fxn:_preprocess_conv1d_input(x,";
    "Fxn:separable_conv1d" -> "Fxn:_preprocess_padding(padding)";
    "Fxn:separable_conv1d" -> "Fxn:tf.expand_dims(x,";
    "Fxn:separable_conv1d" -> "Fxn:tf.expand_dims(depthwise_kernel,";
    "Fxn:separable_conv1d" -> "Fxn:tf.expand_dims(pointwise_kernel,";
    "Fxn:separable_conv1d" -> "Fxn:tf.nn.separable_conv2d(x,";
    "Fxn:separable_conv1d" -> "Fxn:tf.squeeze(x,";
    "Fxn:separable_conv1d" -> "Fxn:tf.transpose(x,";
    "Fxn:separable_conv2d" -> "Fxn:strides=(1,";
    "Fxn:separable_conv2d" -> "Fxn:dilation_rate=(1,";
    "Fxn:separable_conv2d" -> "Fxn:image_data_format()";
    "Fxn:separable_conv2d" -> "Fxn:ValueError('Unknown";
    "Fxn:separable_conv2d" -> "Fxn:str(data_format))";
    "Fxn:separable_conv2d" -> "Fxn:_preprocess_conv2d_input(x,";
    "Fxn:separable_conv2d" -> "Fxn:_preprocess_padding(padding)";
    "Fxn:separable_conv2d" -> "Fxn:tf.nn.separable_conv2d(x,";
    "Fxn:separable_conv2d" -> "Fxn:tf.transpose(x,";
    "Fxn:depthwise_conv2d" -> "Fxn:strides=(1,";
    "Fxn:depthwise_conv2d" -> "Fxn:dilation_rate=(1,";
    "Fxn:depthwise_conv2d" -> "Fxn:image_data_format()";
    "Fxn:depthwise_conv2d" -> "Fxn:ValueError('Unknown";
    "Fxn:depthwise_conv2d" -> "Fxn:str(data_format))";
    "Fxn:depthwise_conv2d" -> "Fxn:_preprocess_conv2d_input(x,";
    "Fxn:depthwise_conv2d" -> "Fxn:_preprocess_padding(padding)";
    "Fxn:depthwise_conv2d" -> "Fxn:tf.nn.depthwise_conv2d(x,";
    "Fxn:depthwise_conv2d" -> "Fxn:tf.transpose(x,";
    "Fxn:conv3d" -> "Fxn:strides=(1,";
    "Fxn:conv3d" -> "Fxn:dilation_rate=(1,";
    "Fxn:conv3d" -> "Fxn:image_data_format()";
    "Fxn:conv3d" -> "Fxn:ValueError('Unknown";
    "Fxn:conv3d" -> "Fxn:str(data_format))";
    "Fxn:conv3d" -> "Fxn:_preprocess_conv3d_input(x,";
    "Fxn:conv3d" -> "Fxn:_preprocess_padding(padding)";
    "Fxn:conv3d" -> "Fxn:tf.nn.convolution(";
    "Fxn:conv3d" -> "Fxn:tf.transpose(x,";
    "Fxn:conv3d_transpose" -> "Fxn:strides=(1,";
    "Fxn:conv3d_transpose" -> "Fxn:image_data_format()";
    "Fxn:conv3d_transpose" -> "Fxn:ValueError('Unknown";
    "Fxn:conv3d_transpose" -> "Fxn:str(data_format))";
    "Fxn:conv3d_transpose" -> "Fxn:isinstance(output_shape,";
    "Fxn:conv3d_transpose" -> "Fxn:tf.stack(output_shape)";
    "Fxn:conv3d_transpose" -> "Fxn:_preprocess_conv3d_input(x,";
    "Fxn:conv3d_transpose" -> "Fxn:tuple(output_shape[1:])";
    "Fxn:conv3d_transpose" -> "Fxn:tf.stack(list(output_shape))";
    "Fxn:conv3d_transpose" -> "Fxn:_preprocess_padding(padding)";
    "Fxn:conv3d_transpose" -> "Fxn:tf.nn.conv3d_transpose(x,";
    "Fxn:conv3d_transpose" -> "Fxn:tf.transpose(x,";
    "Fxn:pool2d" -> "Fxn:strides=(1,";
    "Fxn:pool2d" -> "Fxn:image_data_format()";
    "Fxn:pool2d" -> "Fxn:ValueError('Unknown";
    "Fxn:pool2d" -> "Fxn:str(data_format))";
    "Fxn:pool2d" -> "Fxn:_preprocess_conv2d_input(x,";
    "Fxn:pool2d" -> "Fxn:_preprocess_padding(padding)";
    "Fxn:pool2d" -> "Fxn:tf.nn.max_pool(x,";
    "Fxn:pool2d" -> "Fxn:tf.nn.avg_pool(x,";
    "Fxn:pool2d" -> "Fxn:ValueError('Invalid";
    "Fxn:pool2d" -> "Fxn:str(pool_mode))";
    "Fxn:pool2d" -> "Fxn:tf.transpose(x,";
    "Fxn:pool3d" -> "Fxn:strides=(1,";
    "Fxn:pool3d" -> "Fxn:image_data_format()";
    "Fxn:pool3d" -> "Fxn:ValueError('Unknown";
    "Fxn:pool3d" -> "Fxn:str(data_format))";
    "Fxn:pool3d" -> "Fxn:_preprocess_conv3d_input(x,";
    "Fxn:pool3d" -> "Fxn:_preprocess_padding(padding)";
    "Fxn:pool3d" -> "Fxn:tf.nn.max_pool3d(x,";
    "Fxn:pool3d" -> "Fxn:tf.nn.avg_pool3d(x,";
    "Fxn:pool3d" -> "Fxn:ValueError('Invalid";
    "Fxn:pool3d" -> "Fxn:str(pool_mode))";
    "Fxn:pool3d" -> "Fxn:tf.transpose(x,";
    "Fxn:bias_add" -> "Fxn:ndim(x)";
    "Fxn:bias_add" -> "Fxn:image_data_format()";
    "Fxn:bias_add" -> "Fxn:ValueError('Unknown";
    "Fxn:bias_add" -> "Fxn:str(data_format))";
    "Fxn:bias_add" -> "Fxn:int_shape(bias)";
    "Fxn:bias_add" -> "Fxn:len(bias_shape)";
    "Fxn:bias_add" -> "Fxn:len(bias_shape)";
    "Fxn:bias_add" -> "Fxn:ndim(x)";
    "Fxn:bias_add" -> "Fxn:ValueError('Unexpected";
    "Fxn:bias_add" -> "Fxn:ndim(x)))";
    "Fxn:bias_add" -> "Fxn:ndim(x)";
    "Fxn:bias_add" -> "Fxn:len(bias_shape)";
    "Fxn:bias_add" -> "Fxn:reshape(bias,";
    "Fxn:bias_add" -> "Fxn:reshape(bias,";
    "Fxn:bias_add" -> "Fxn:len(bias_shape)";
    "Fxn:bias_add" -> "Fxn:reshape(bias,";
    "Fxn:bias_add" -> "Fxn:reshape(bias,";
    "Fxn:bias_add" -> "Fxn:ndim(x)";
    "Fxn:bias_add" -> "Fxn:len(bias_shape)";
    "Fxn:bias_add" -> "Fxn:_has_nchw_support():";
    "Fxn:bias_add" -> "Fxn:tf.nn.bias_add(x,";
    "Fxn:bias_add" -> "Fxn:reshape(bias,";
    "Fxn:bias_add" -> "Fxn:reshape(bias,";
    "Fxn:bias_add" -> "Fxn:len(bias_shape)";
    "Fxn:bias_add" -> "Fxn:tf.nn.bias_add(x,";
    "Fxn:bias_add" -> "Fxn:reshape(bias,";
    "Fxn:bias_add" -> "Fxn:ndim(x)";
    "Fxn:bias_add" -> "Fxn:len(bias_shape)";
    "Fxn:bias_add" -> "Fxn:reshape(bias,";
    "Fxn:bias_add" -> "Fxn:reshape(bias,";
    "Fxn:bias_add" -> "Fxn:len(bias_shape)";
    "Fxn:bias_add" -> "Fxn:reshape(bias,";
    "Fxn:bias_add" -> "Fxn:reshape(bias,";
    "Fxn:bias_add" -> "Fxn:tf.nn.bias_add(x,";
    "Fxn:random_normal" -> "Fxn:floatx()";
    "Fxn:random_normal" -> "Fxn:np.random.randint(10e6)";
    "Fxn:random_normal" -> "Fxn:tf.random_normal(shape,";
    "Fxn:random_uniform" -> "Fxn:floatx()";
    "Fxn:random_uniform" -> "Fxn:np.random.randint(10e6)";
    "Fxn:random_uniform" -> "Fxn:tf.random_uniform(shape,";
    "Fxn:random_binomial" -> "Fxn:floatx()";
    "Fxn:random_binomial" -> "Fxn:np.random.randint(10e6)";
    "Fxn:random_binomial" -> "Fxn:tf.where(tf.random_uniform(shape,";
    "Fxn:random_binomial" -> "Fxn:tf.ones(shape,";
    "Fxn:random_binomial" -> "Fxn:tf.zeros(shape,";
    "Fxn:truncated_normal" -> "Fxn:floatx()";
    "Fxn:truncated_normal" -> "Fxn:np.random.randint(10e6)";
    "Fxn:truncated_normal" -> "Fxn:tf.truncated_normal(shape,";
    "Fxn:ctc_label_dense_to_sparse" -> "Fxn:tf.shape(labels)";
    "Fxn:ctc_label_dense_to_sparse" -> "Fxn:tf.stack([label_shape[0]])";
    "Fxn:ctc_label_dense_to_sparse" -> "Fxn:tf.stack([label_shape[1]])";
    "Fxn:range_less_than" -> "Fxn:tf.expand_dims(tf.range(label_shape[1]),";
    "Fxn:range_less_than" -> "Fxn:tf.fill(";
    "Fxn:range_less_than" -> "Fxn:tf.cast(tf.fill([1,";
    "Fxn:range_less_than" -> "Fxn:functional_ops.scan(range_less_than,";
    "Fxn:range_less_than" -> "Fxn:tf.reshape(tf.tile(tf.range(label_shape[1]),";
    "Fxn:range_less_than" -> "Fxn:tf.boolean_mask(label_array,";
    "Fxn:range_less_than" -> "Fxn:tf.transpose(tf.reshape(tf.tile(tf.range(label_shape[0]),";
    "Fxn:range_less_than" -> "Fxn:reverse(label_shape,";
    "Fxn:range_less_than" -> "Fxn:tf.boolean_mask(batch_array,";
    "Fxn:range_less_than" -> "Fxn:tf.transpose(tf.reshape(concatenate([batch_ind,";
    "Fxn:range_less_than" -> "Fxn:tf.gather_nd(labels,";
    "Fxn:range_less_than" -> "Fxn:tf.SparseTensor(tf.to_int64(indices),";
    "Fxn:range_less_than" -> "Fxn:tf.to_int64(label_shape))";
    "Fxn:ctc_batch_cost" -> "Fxn:`(samples,";
    "Fxn:ctc_batch_cost" -> "Fxn:`(samples,";
    "Fxn:ctc_batch_cost" -> "Fxn:`(samples,";
    "Fxn:ctc_batch_cost" -> "Fxn:`(samples,";
    "Fxn:ctc_batch_cost" -> "Fxn:tf.to_int32(tf.squeeze(label_length))";
    "Fxn:ctc_batch_cost" -> "Fxn:tf.to_int32(tf.squeeze(input_length))";
    "Fxn:ctc_batch_cost" -> "Fxn:tf.to_int32(ctc_label_dense_to_sparse(y_true,";
    "Fxn:ctc_batch_cost" -> "Fxn:tf.log(tf.transpose(y_pred,";
    "Fxn:ctc_batch_cost" -> "Fxn:epsilon())";
    "Fxn:ctc_batch_cost" -> "Fxn:tf.expand_dims(ctc.ctc_loss(inputs=y_pred,";
    "Fxn:ctc_decode" -> "Fxn:`(samples,";
    "Fxn:ctc_decode" -> "Fxn:`(samples,";
    "Fxn:ctc_decode" -> "Fxn:`(top_paths,";
    "Fxn:ctc_decode" -> "Fxn:tf.log(tf.transpose(y_pred,";
    "Fxn:ctc_decode" -> "Fxn:epsilon())";
    "Fxn:ctc_decode" -> "Fxn:tf.to_int32(input_length)";
    "Fxn:ctc_decode" -> "Fxn:ctc.ctc_greedy_decoder(";
    "Fxn:ctc_decode" -> "Fxn:ctc.ctc_beam_search_decoder(";
    "Fxn:ctc_decode" -> "Fxn:[tf.sparse_to_dense(st.indices,";
    "Fxn:map_fn" -> "Fxn:tf.map_fn(fn,";
    "Fxn:foldl" -> "Fxn:tf.foldl(fn,";
    "Fxn:foldr" -> "Fxn:tf.foldr(fn,";
    "Fxn:local_conv1d" -> "Fxn:image_data_format()";
    "Fxn:local_conv1d" -> "Fxn:ValueError('Unknown";
    "Fxn:local_conv1d" -> "Fxn:str(data_format))";
    "Fxn:local_conv1d" -> "Fxn:int_shape(kernel)";
    "Fxn:local_conv1d" -> "Fxn:range(output_length):";
    "Fxn:local_conv1d" -> "Fxn:slice(i";
    "Fxn:local_conv1d" -> "Fxn:xs.append(reshape(inputs[:,";
    "Fxn:local_conv1d" -> "Fxn:concatenate(xs,";
    "Fxn:local_conv1d" -> "Fxn:`(output_length,";
    "Fxn:local_conv1d" -> "Fxn:batch_dot(x_aggregate,";
    "Fxn:local_conv1d" -> "Fxn:permute_dimensions(output,";
    "Fxn:local_conv2d" -> "Fxn:image_data_format()";
    "Fxn:local_conv2d" -> "Fxn:ValueError('Unknown";
    "Fxn:local_conv2d" -> "Fxn:str(data_format))";
    "Fxn:local_conv2d" -> "Fxn:int_shape(kernel)";
    "Fxn:local_conv2d" -> "Fxn:range(output_row):";
    "Fxn:local_conv2d" -> "Fxn:range(output_col):";
    "Fxn:local_conv2d" -> "Fxn:slice(i";
    "Fxn:local_conv2d" -> "Fxn:slice(j";
    "Fxn:local_conv2d" -> "Fxn:xs.append(reshape(inputs[:,";
    "Fxn:local_conv2d" -> "Fxn:xs.append(reshape(inputs[:,";
    "Fxn:local_conv2d" -> "Fxn:concatenate(xs,";
    "Fxn:local_conv2d" -> "Fxn:batch_dot(x_aggregate,";
    "Fxn:local_conv2d" -> "Fxn:reshape(output,";
    "Fxn:local_conv2d" -> "Fxn:permute_dimensions(output,";
    "Fxn:local_conv2d" -> "Fxn:permute_dimensions(output,";
    "/keras/backend/theano_backend.py" -> "Import:absolute_import";
    "/keras/backend/theano_backend.py" -> "Import:division";
    "/keras/backend/theano_backend.py" -> "Import:print_function";
    "/keras/backend/theano_backend.py" -> "Import:defaultdict";
    "/keras/backend/theano_backend.py" -> "Import:contextmanager";
    "/keras/backend/theano_backend.py" -> "Import:theano";
    "/keras/backend/theano_backend.py" -> "Import:tensor";
    "/keras/backend/theano_backend.py" -> "Import:MRG_RandomStreams";
    "/keras/backend/theano_backend.py" -> "Import:pool";
    "/keras/backend/theano_backend.py" -> "Import:Print";
    "/keras/backend/theano_backend.py" -> "Import:ifelse";
    "/keras/backend/theano_backend.py" -> "Import:theano.sparse";
    "/keras/backend/theano_backend.py" -> "Import:softsign";
    "/keras/backend/theano_backend.py" -> "Import:softsign";
    "/keras/backend/theano_backend.py" -> "Import:numpy";
    "/keras/backend/theano_backend.py" -> "Import:floatx,";
    "/keras/backend/theano_backend.py" -> "Import:has_arg";
    "/keras/backend/theano_backend.py" -> "Import:set_image_dim_ordering,";
    "/keras/backend/theano_backend.py" -> "Fxn:learning_phase";
    "/keras/backend/theano_backend.py" -> "Fxn:set_learning_phase";
    "/keras/backend/theano_backend.py" -> "Fxn:get_uid";
    "/keras/backend/theano_backend.py" -> "Fxn:reset_uids";
    "/keras/backend/theano_backend.py" -> "Fxn:_assert_sparse_module";
    "/keras/backend/theano_backend.py" -> "Import:theano.sparse\n"";
    "/keras/backend/theano_backend.py" -> "Fxn:is_sparse";
    "/keras/backend/theano_backend.py" -> "Fxn:to_dense";
    "/keras/backend/theano_backend.py" -> "Fxn:_is_explicit_shape";
    "/keras/backend/theano_backend.py" -> "Fxn:name_scope";
    "/keras/backend/theano_backend.py" -> "Fxn:_prepare_name";
    "/keras/backend/theano_backend.py" -> "Fxn:variable";
    "/keras/backend/theano_backend.py" -> "Fxn:constant";
    "/keras/backend/theano_backend.py" -> "Fxn:is_keras_tensor";
    "/keras/backend/theano_backend.py" -> "Import:backend";
    "/keras/backend/theano_backend.py" -> "Import:Input,";
    "/keras/backend/theano_backend.py" -> "Fxn:placeholder";
    "/keras/backend/theano_backend.py" -> "Fxn:is_placeholder";
    "/keras/backend/theano_backend.py" -> "Fxn:shape";
    "/keras/backend/theano_backend.py" -> "Fxn:int_shape";
    "/keras/backend/theano_backend.py" -> "Fxn:ndim";
    "/keras/backend/theano_backend.py" -> "Fxn:dtype";
    "/keras/backend/theano_backend.py" -> "Fxn:eval";
    "/keras/backend/theano_backend.py" -> "Fxn:zeros";
    "/keras/backend/theano_backend.py" -> "Fxn:ones";
    "/keras/backend/theano_backend.py" -> "Fxn:eye";
    "/keras/backend/theano_backend.py" -> "Fxn:ones_like";
    "/keras/backend/theano_backend.py" -> "Fxn:zeros_like";
    "/keras/backend/theano_backend.py" -> "Fxn:identity";
    "/keras/backend/theano_backend.py" -> "Fxn:random_uniform_variable";
    "/keras/backend/theano_backend.py" -> "Fxn:random_normal_variable";
    "/keras/backend/theano_backend.py" -> "Fxn:count_params";
    "/keras/backend/theano_backend.py" -> "Fxn:cast";
    "/keras/backend/theano_backend.py" -> "Fxn:update";
    "/keras/backend/theano_backend.py" -> "Fxn:update_add";
    "/keras/backend/theano_backend.py" -> "Fxn:update_sub";
    "/keras/backend/theano_backend.py" -> "Fxn:moving_average_update";
    "/keras/backend/theano_backend.py" -> "Fxn:dot";
    "/keras/backend/theano_backend.py" -> "Fxn:batch_dot";
    "/keras/backend/theano_backend.py" -> "Fxn:transpose";
    "/keras/backend/theano_backend.py" -> "Fxn:gather";
    "/keras/backend/theano_backend.py" -> "Fxn:max";
    "/keras/backend/theano_backend.py" -> "Fxn:min";
    "/keras/backend/theano_backend.py" -> "Fxn:sum";
    "/keras/backend/theano_backend.py" -> "Fxn:prod";
    "/keras/backend/theano_backend.py" -> "Fxn:cumsum";
    "/keras/backend/theano_backend.py" -> "Fxn:cumprod";
    "/keras/backend/theano_backend.py" -> "Fxn:mean";
    "/keras/backend/theano_backend.py" -> "Fxn:std";
    "/keras/backend/theano_backend.py" -> "Fxn:var";
    "/keras/backend/theano_backend.py" -> "Fxn:any";
    "/keras/backend/theano_backend.py" -> "Fxn:all";
    "/keras/backend/theano_backend.py" -> "Fxn:argmax";
    "/keras/backend/theano_backend.py" -> "Fxn:argmin";
    "/keras/backend/theano_backend.py" -> "Fxn:square";
    "/keras/backend/theano_backend.py" -> "Fxn:abs";
    "/keras/backend/theano_backend.py" -> "Fxn:sqrt";
    "/keras/backend/theano_backend.py" -> "Fxn:exp";
    "/keras/backend/theano_backend.py" -> "Fxn:log";
    "/keras/backend/theano_backend.py" -> "Fxn:logsumexp";
    "/keras/backend/theano_backend.py" -> "Fxn:round";
    "/keras/backend/theano_backend.py" -> "Fxn:sign";
    "/keras/backend/theano_backend.py" -> "Fxn:pow";
    "/keras/backend/theano_backend.py" -> "Fxn:clip";
    "/keras/backend/theano_backend.py" -> "Fxn:equal";
    "/keras/backend/theano_backend.py" -> "Fxn:not_equal";
    "/keras/backend/theano_backend.py" -> "Fxn:greater";
    "/keras/backend/theano_backend.py" -> "Fxn:greater_equal";
    "/keras/backend/theano_backend.py" -> "Fxn:less";
    "/keras/backend/theano_backend.py" -> "Fxn:less_equal";
    "/keras/backend/theano_backend.py" -> "Fxn:maximum";
    "/keras/backend/theano_backend.py" -> "Fxn:minimum";
    "/keras/backend/theano_backend.py" -> "Fxn:sin";
    "/keras/backend/theano_backend.py" -> "Fxn:cos";
    "/keras/backend/theano_backend.py" -> "Fxn:normalize_batch_in_training";
    "/keras/backend/theano_backend.py" -> "Fxn:batch_normalization";
    "/keras/backend/theano_backend.py" -> "Fxn:_old_normalize_batch_in_training";
    "/keras/backend/theano_backend.py" -> "Fxn:_old_batch_normalization";
    "/keras/backend/theano_backend.py" -> "Fxn:concatenate";
    "/keras/backend/theano_backend.py" -> "Fxn:reshape";
    "/keras/backend/theano_backend.py" -> "Fxn:permute_dimensions";
    "/keras/backend/theano_backend.py" -> "Fxn:repeat_elements";
    "/keras/backend/theano_backend.py" -> "Fxn:resize_images";
    "/keras/backend/theano_backend.py" -> "Fxn:resize_volumes";
    "/keras/backend/theano_backend.py" -> "Fxn:repeat";
    "/keras/backend/theano_backend.py" -> "Fxn:arange";
    "/keras/backend/theano_backend.py" -> "Fxn:tile";
    "/keras/backend/theano_backend.py" -> "Fxn:flatten";
    "/keras/backend/theano_backend.py" -> "Fxn:batch_flatten";
    "/keras/backend/theano_backend.py" -> "Fxn:expand_dims";
    "/keras/backend/theano_backend.py" -> "Fxn:squeeze";
    "/keras/backend/theano_backend.py" -> "Fxn:temporal_padding";
    "/keras/backend/theano_backend.py" -> "Fxn:spatial_2d_padding";
    "/keras/backend/theano_backend.py" -> "Fxn:spatial_3d_padding";
    "/keras/backend/theano_backend.py" -> "Fxn:stack";
    "/keras/backend/theano_backend.py" -> "Fxn:one_hot";
    "/keras/backend/theano_backend.py" -> "Fxn:reverse";
    "/keras/backend/theano_backend.py" -> "Fxn:pattern_broadcast";
    "/keras/backend/theano_backend.py" -> "Fxn:get_value";
    "/keras/backend/theano_backend.py" -> "Fxn:batch_get_value";
    "/keras/backend/theano_backend.py" -> "Fxn:set_value";
    "/keras/backend/theano_backend.py" -> "Fxn:batch_set_value";
    "/keras/backend/theano_backend.py" -> "Fxn:get_variable_shape";
    "/keras/backend/theano_backend.py" -> "Fxn:print_tensor";
    "/keras/backend/theano_backend.py" -> "class:Function(object):";
    "class:Function(object):" -> "Fxn:__init__";
    "class:Function(object):" -> "Fxn:__call__";
    "class:Function(object):" -> "Fxn:function";
    "class:Function(object):" -> "Fxn:gradients";
    "class:Function(object):" -> "Fxn:stop_gradient";
    "class:Function(object):" -> "Fxn:rnn";
    "class:Function(object):" -> "Fxn:_step";
    "class:Function(object):" -> "Fxn:_step";
    "class:Function(object):" -> "Fxn:switch";
    "class:Function(object):" -> "Fxn:in_train_phase";
    "class:Function(object):" -> "Fxn:in_test_phase";
    "class:Function(object):" -> "Fxn:_assert_has_capability";
    "class:Function(object):" -> "Fxn:elu";
    "class:Function(object):" -> "Fxn:relu";
    "class:Function(object):" -> "Fxn:softmax";
    "class:Function(object):" -> "Fxn:softplus";
    "class:Function(object):" -> "Fxn:softsign";
    "class:Function(object):" -> "Fxn:categorical_crossentropy";
    "class:Function(object):" -> "Fxn:sparse_categorical_crossentropy";
    "class:Function(object):" -> "Fxn:binary_crossentropy";
    "class:Function(object):" -> "Fxn:sigmoid";
    "class:Function(object):" -> "Fxn:hard_sigmoid";
    "class:Function(object):" -> "Fxn:tanh";
    "class:Function(object):" -> "Fxn:dropout";
    "class:Function(object):" -> "Fxn:l2_normalize";
    "class:Function(object):" -> "Fxn:in_top_k";
    "class:Function(object):" -> "Fxn:_preprocess_conv2d_input";
    "class:Function(object):" -> "Fxn:_preprocess_conv3d_input";
    "class:Function(object):" -> "Fxn:_preprocess_conv2d_kernel";
    "class:Function(object):" -> "Fxn:_preprocess_conv3d_kernel";
    "class:Function(object):" -> "Fxn:_preprocess_padding";
    "class:Function(object):" -> "Fxn:_preprocess_conv2d_image_shape";
    "class:Function(object):" -> "Fxn:int_or_none";
    "class:Function(object):" -> "Fxn:_preprocess_conv3d_volume_shape";
    "class:Function(object):" -> "Fxn:int_or_none";
    "class:Function(object):" -> "Fxn:_preprocess_conv2d_filter_shape";
    "class:Function(object):" -> "Fxn:int_or_none";
    "class:Function(object):" -> "Fxn:_preprocess_conv3d_filter_shape";
    "class:Function(object):" -> "Fxn:int_or_none";
    "class:Function(object):" -> "Fxn:_postprocess_conv2d_output";
    "class:Function(object):" -> "Fxn:_postprocess_conv3d_output";
    "class:Function(object):" -> "Fxn:conv1d";
    "class:Function(object):" -> "Fxn:conv2d";
    "class:Function(object):" -> "Fxn:conv2d_transpose";
    "class:Function(object):" -> "Fxn:separable_conv1d";
    "class:Function(object):" -> "Fxn:separable_conv2d";
    "class:Function(object):" -> "Fxn:depthwise_conv2d";
    "class:Function(object):" -> "Fxn:conv3d";
    "class:Function(object):" -> "Fxn:conv3d_transpose";
    "class:Function(object):" -> "Fxn:pool2d";
    "class:Function(object):" -> "Fxn:pool3d";
    "class:Function(object):" -> "Fxn:bias_add";
    "class:Function(object):" -> "Fxn:random_normal";
    "class:Function(object):" -> "Fxn:random_uniform";
    "class:Function(object):" -> "Fxn:random_binomial";
    "class:Function(object):" -> "Fxn:truncated_normal";
    "class:Function(object):" -> "Fxn:ctc_interleave_blanks";
    "class:Function(object):" -> "Fxn:ctc_create_skip_idxs";
    "class:Function(object):" -> "Fxn:ctc_update_log_p";
    "class:Function(object):" -> "Fxn:ctc_path_probs";
    "class:Function(object):" -> "Fxn:step";
    "class:Function(object):" -> "Fxn:ctc_cost";
    "class:Function(object):" -> "Fxn:ctc_batch_cost";
    "class:Function(object):" -> "Fxn:ctc_step";
    "class:Function(object):" -> "Fxn:map_fn";
    "class:Function(object):" -> "Fxn:foldl";
    "class:Function(object):" -> "Fxn:foldr";
    "class:Function(object):" -> "Fxn:local_conv1d";
    "class:Function(object):" -> "Fxn:local_conv2d";
    "Fxn:__init__" -> "Fxn:unique_variables_to_update.items()";
    "Fxn:__init__" -> "Fxn:theano.function(inputs,";
    "Fxn:__call__" -> "Fxn:isinstance(inputs,";
    "Fxn:__call__" -> "Fxn:self.function(*inputs)";
    "Fxn:function" -> "Fxn:len(kwargs)";
    "Fxn:function" -> "Fxn:kwargs.keys():";
    "Fxn:function" -> "Fxn:has_arg(theano.function,";
    "Fxn:function" -> "Fxn:ValueError(msg)";
    "Fxn:function" -> "Fxn:Function(inputs,";
    "Fxn:gradients" -> "Fxn:T.grad(loss,";
    "Fxn:stop_gradient" -> "Fxn:isinstance(variables,";
    "Fxn:stop_gradient" -> "Fxn:map(theano.gradient.disconnected_grad,";
    "Fxn:stop_gradient" -> "Fxn:theano.gradient.disconnected_grad(variables)";
    "Fxn:rnn" -> "Fxn:ValueError('When";
    "Fxn:rnn" -> "Fxn:list(range(2,";
    "Fxn:rnn" -> "Fxn:inputs.dimshuffle(axes)";
    "Fxn:rnn" -> "Fxn:expand_dims(mask)";
    "Fxn:rnn" -> "Fxn:mask.dimshuffle(axes)";
    "Fxn:rnn" -> "Fxn:list(range(input_length))";
    "Fxn:rnn" -> "Fxn:step_function(inputs[i],";
    "Fxn:rnn" -> "Fxn:getattr(output,";
    "Fxn:rnn" -> "Fxn:len(successive_outputs)";
    "Fxn:rnn" -> "Fxn:zeros_like(output)";
    "Fxn:rnn" -> "Fxn:T.switch(mask[i],";
    "Fxn:rnn" -> "Fxn:zip(states,";
    "Fxn:rnn" -> "Fxn:kept_states.append(T.switch(mask[i],";
    "Fxn:rnn" -> "Fxn:successive_outputs.append(output)";
    "Fxn:rnn" -> "Fxn:successive_states.append(states)";
    "Fxn:rnn" -> "Fxn:T.stack(*successive_outputs)";
    "Fxn:rnn" -> "Fxn:range(len(successive_states[-1])):";
    "Fxn:rnn" -> "Fxn:states.append(T.stack(*[states_at_step[i]";
    "Fxn:rnn" -> "Fxn:step_function(inputs[0],";
    "Fxn:rnn" -> "Fxn:T.unbroadcast(initial_output,";
    "Fxn:rnn" -> "Fxn:len(initial_states)";
    "Fxn:rnn" -> "Fxn:T.unbroadcast(initial_states[0],";
    "Fxn:_step" -> "Fxn:step_function(inputs,";
    "Fxn:_step" -> "Fxn:getattr(outputs,";
    "Fxn:_step" -> "Fxn:T.switch(mask,";
    "Fxn:_step" -> "Fxn:zip(states,";
    "Fxn:_step" -> "Fxn:return_states.append(T.switch(mask,";
    "Fxn:_step" -> "Fxn:theano.scan(";
    "Fxn:_step" -> "Fxn:isinstance(results,";
    "Fxn:_step" -> "Fxn:list(range(input_length))";
    "Fxn:_step" -> "Fxn:step_function(inputs[i],";
    "Fxn:_step" -> "Fxn:getattr(outputs,";
    "Fxn:_step" -> "Fxn:successive_outputs.append(outputs)";
    "Fxn:_step" -> "Fxn:successive_states.append(states)";
    "Fxn:_step" -> "Fxn:T.stack(*successive_outputs)";
    "Fxn:_step" -> "Fxn:range(len(successive_states[-1])):";
    "Fxn:_step" -> "Fxn:states.append(T.stack(*[states_at_step[i]";
    "Fxn:_step" -> "Fxn:step_function(inputs,";
    "Fxn:_step" -> "Fxn:getattr(outputs,";
    "Fxn:_step" -> "Fxn:len(initial_states)";
    "Fxn:_step" -> "Fxn:T.unbroadcast(initial_states[0],";
    "Fxn:_step" -> "Fxn:theano.scan(";
    "Fxn:_step" -> "Fxn:isinstance(results,";
    "Fxn:_step" -> "Fxn:T.squeeze(outputs)";
    "Fxn:_step" -> "Fxn:list(range(2,";
    "Fxn:_step" -> "Fxn:outputs.dimshuffle(axes)";
    "Fxn:_step" -> "Fxn:[T.squeeze(state[-1])";
    "Fxn:switch" -> "Fxn:callable(then_expression):";
    "Fxn:switch" -> "Fxn:then_expression()";
    "Fxn:switch" -> "Fxn:callable(else_expression):";
    "Fxn:switch" -> "Fxn:else_expression()";
    "Fxn:switch" -> "Fxn:ndim(condition)";
    "Fxn:switch" -> "Fxn:ndim(then_expression)";
    "Fxn:switch" -> "Fxn:range(ndim_diff):";
    "Fxn:switch" -> "Fxn:expand_dims(condition)";
    "Fxn:switch" -> "Fxn:T.switch(condition,";
    "Fxn:in_train_phase" -> "Fxn:`K.learning_phase()`.";
    "Fxn:in_train_phase" -> "Fxn:learning_phase()";
    "Fxn:in_train_phase" -> "Fxn:callable(x):";
    "Fxn:in_train_phase" -> "Fxn:x()";
    "Fxn:in_train_phase" -> "Fxn:callable(alt):";
    "Fxn:in_train_phase" -> "Fxn:alt()";
    "Fxn:in_train_phase" -> "Fxn:callable(x):";
    "Fxn:in_train_phase" -> "Fxn:x()";
    "Fxn:in_train_phase" -> "Fxn:callable(alt):";
    "Fxn:in_train_phase" -> "Fxn:alt()";
    "Fxn:in_train_phase" -> "Fxn:ifelse(training,";
    "Fxn:in_test_phase" -> "Fxn:in_train_phase(alt,";
    "Fxn:_assert_has_capability" -> "Fxn:hasattr(module,";
    "Fxn:_assert_has_capability" -> "Fxn:EnvironmentError(";
    "Fxn:elu" -> "Fxn:_assert_has_capability(T.nnet,";
    "Fxn:elu" -> "Fxn:T.nnet.elu(x,";
    "Fxn:relu" -> "Fxn:_assert_has_capability(T.nnet,";
    "Fxn:relu" -> "Fxn:T.nnet.relu(x,";
    "Fxn:relu" -> "Fxn:T.minimum(x,";
    "Fxn:softmax" -> "Fxn:T.nnet.softmax(x)";
    "Fxn:softmax" -> "Fxn:T.exp(x";
    "Fxn:softmax" -> "Fxn:x.max())";
    "Fxn:softmax" -> "Fxn:T.exp(";
    "Fxn:softmax" -> "Fxn:x.max()).sum(axis=axis,";
    "Fxn:softplus" -> "Fxn:T.nnet.softplus(x)";
    "Fxn:softsign" -> "Fxn:T_softsign(x)";
    "Fxn:categorical_crossentropy" -> "Fxn:T.nnet.softmax(output)";
    "Fxn:sparse_categorical_crossentropy" -> "Fxn:T.cast(T.flatten(target),";
    "Fxn:sparse_categorical_crossentropy" -> "Fxn:T.extra_ops.to_one_hot(target,";
    "Fxn:sparse_categorical_crossentropy" -> "Fxn:reshape(target,";
    "Fxn:sparse_categorical_crossentropy" -> "Fxn:shape(output))";
    "Fxn:sparse_categorical_crossentropy" -> "Fxn:categorical_crossentropy(target,";
    "Fxn:binary_crossentropy" -> "Fxn:T.nnet.sigmoid(output)";
    "Fxn:binary_crossentropy" -> "Fxn:T.clip(output,";
    "Fxn:binary_crossentropy" -> "Fxn:epsilon(),";
    "Fxn:binary_crossentropy" -> "Fxn:epsilon())";
    "Fxn:binary_crossentropy" -> "Fxn:T.nnet.binary_crossentropy(output,";
    "Fxn:sigmoid" -> "Fxn:T.nnet.sigmoid(x)";
    "Fxn:hard_sigmoid" -> "Fxn:T.nnet.hard_sigmoid(x)";
    "Fxn:tanh" -> "Fxn:T.tanh(x)";
    "Fxn:dropout" -> "Fxn:ValueError('Dropout";
    "Fxn:dropout" -> "Fxn:np.random.randint(1,";
    "Fxn:dropout" -> "Fxn:isinstance(noise_shape,";
    "Fxn:dropout" -> "Fxn:tuple(noise_shape)";
    "Fxn:dropout" -> "Fxn:RandomStreams(seed=seed)";
    "Fxn:dropout" -> "Fxn:rng.binomial(x.shape,";
    "Fxn:dropout" -> "Fxn:rng.binomial(noise_shape,";
    "Fxn:dropout" -> "Fxn:T.patternbroadcast(random_tensor,";
    "Fxn:l2_normalize" -> "Fxn:T.sum(T.square(x),";
    "Fxn:l2_normalize" -> "Fxn:T.sqrt(T.maximum(square_sum,";
    "Fxn:l2_normalize" -> "Fxn:epsilon()))";
    "Fxn:in_top_k" -> "Fxn:`(batch_size,";
    "Fxn:in_top_k" -> "Fxn:T.zeros_like(targets,";
    "Fxn:in_top_k" -> "Fxn:T.zeros_like(targets,";
    "Fxn:in_top_k" -> "Fxn:int_shape(predictions)[1]:";
    "Fxn:in_top_k" -> "Fxn:T.ones_like(targets,";
    "Fxn:in_top_k" -> "Fxn:T.ones_like(targets,";
    "Fxn:in_top_k" -> "Fxn:T.sort(predictions)[:,";
    "Fxn:in_top_k" -> "Fxn:predictions[T.arange(targets.shape[0]),";
    "Fxn:in_top_k" -> "Fxn:T.ge(targets_values,";
    "Fxn:_preprocess_conv2d_input" -> "Fxn:x.dimshuffle((0,";
    "Fxn:_preprocess_conv3d_input" -> "Fxn:x.dimshuffle((0,";
    "Fxn:_preprocess_conv2d_kernel" -> "Fxn:`(rows,";
    "Fxn:_preprocess_conv2d_kernel" -> "Fxn:`(depth,";
    "Fxn:_preprocess_conv2d_kernel" -> "Fxn:kernel.dimshuffle((3,";
    "Fxn:_preprocess_conv3d_kernel" -> "Fxn:`(space,";
    "Fxn:_preprocess_conv3d_kernel" -> "Fxn:`(depth,";
    "Fxn:_preprocess_conv3d_kernel" -> "Fxn:kernel.dimshuffle((4,";
    "Fxn:_preprocess_padding" -> "Fxn:ValueError('Border";
    "Fxn:_preprocess_padding" -> "Fxn:str(padding))";
    "Fxn:int_or_none" -> "Fxn:int(value)";
    "Fxn:int_or_none" -> "Fxn:tuple(int_or_none(v)";
    "Fxn:int_or_none" -> "Fxn:int(value)";
    "Fxn:int_or_none" -> "Fxn:tuple(int_or_none(v)";
    "Fxn:int_or_none" -> "Fxn:int(value)";
    "Fxn:int_or_none" -> "Fxn:tuple(int_or_none(v)";
    "Fxn:int_or_none" -> "Fxn:int(value)";
    "Fxn:int_or_none" -> "Fxn:tuple(int_or_none(v)";
    "Fxn:_postprocess_conv2d_output" -> "Fxn::(x.shape[2]";
    "Fxn:_postprocess_conv2d_output" -> "Fxn::(x.shape[3]";
    "Fxn:_postprocess_conv2d_output" -> "Fxn:conv_out.dimshuffle((0,";
    "Fxn:_postprocess_conv3d_output" -> "Fxn::(x.shape[2]";
    "Fxn:_postprocess_conv3d_output" -> "Fxn::(x.shape[3]";
    "Fxn:_postprocess_conv3d_output" -> "Fxn::(x.shape[4]";
    "Fxn:_postprocess_conv3d_output" -> "Fxn:conv_out.dimshuffle((0,";
    "Fxn:conv1d" -> "Fxn:image_data_format()";
    "Fxn:conv1d" -> "Fxn:ValueError('Unknown";
    "Fxn:conv1d" -> "Fxn:hasattr(kernel,";
    "Fxn:conv1d" -> "Fxn:AttributeError('Causal";
    "Fxn:conv1d" -> "Fxn:temporal_padding(x,";
    "Fxn:conv1d" -> "Fxn:hasattr(x,";
    "Fxn:conv1d" -> "Fxn:expand_dims(x,";
    "Fxn:conv1d" -> "Fxn:expand_dims(x,";
    "Fxn:conv1d" -> "Fxn:expand_dims(kernel,";
    "Fxn:conv1d" -> "Fxn:conv2d(x,";
    "Fxn:conv1d" -> "Fxn:squeeze(output,";
    "Fxn:conv1d" -> "Fxn:squeeze(output,";
    "Fxn:conv2d" -> "Fxn:strides=(1,";
    "Fxn:conv2d" -> "Fxn:dilation_rate=(1,";
    "Fxn:conv2d" -> "Fxn:image_data_format()";
    "Fxn:conv2d" -> "Fxn:ValueError('Unknown";
    "Fxn:conv2d" -> "Fxn:hasattr(x,";
    "Fxn:conv2d" -> "Fxn:_preprocess_conv2d_image_shape(int_shape(x),";
    "Fxn:conv2d" -> "Fxn:hasattr(kernel,";
    "Fxn:conv2d" -> "Fxn:kernel.eval().shape";
    "Fxn:conv2d" -> "Fxn:_preprocess_conv2d_filter_shape(kernel_shape,";
    "Fxn:conv2d" -> "Fxn:_preprocess_conv2d_input(x,";
    "Fxn:conv2d" -> "Fxn:_preprocess_conv2d_kernel(kernel,";
    "Fxn:conv2d" -> "Fxn:_preprocess_padding(padding)";
    "Fxn:conv2d" -> "Fxn:T.nnet.conv2d(x,";
    "Fxn:conv2d" -> "Fxn:_postprocess_conv2d_output(conv_out,";
    "Fxn:conv2d_transpose" -> "Fxn:strides=(1,";
    "Fxn:conv2d_transpose" -> "Fxn:image_data_format()";
    "Fxn:conv2d_transpose" -> "Fxn:ValueError('Unknown";
    "Fxn:conv2d_transpose" -> "Fxn:hasattr(kernel,";
    "Fxn:conv2d_transpose" -> "Fxn:kernel.eval().shape";
    "Fxn:conv2d_transpose" -> "Fxn:ValueError('In";
    "Fxn:conv2d_transpose" -> "Fxn:_preprocess_conv2d_filter_shape(kernel_shape,";
    "Fxn:conv2d_transpose" -> "Fxn:_preprocess_conv2d_input(x,";
    "Fxn:conv2d_transpose" -> "Fxn:_preprocess_conv2d_kernel(kernel,";
    "Fxn:conv2d_transpose" -> "Fxn:_preprocess_padding(padding)";
    "Fxn:conv2d_transpose" -> "Fxn:T.nnet.abstract_conv.AbstractConv2d_gradInputs(imshp=None,";
    "Fxn:conv2d_transpose" -> "Fxn:op(kernel,";
    "Fxn:conv2d_transpose" -> "Fxn:_postprocess_conv2d_output(conv_out,";
    "Fxn:separable_conv2d" -> "Fxn:strides=(1,";
    "Fxn:separable_conv2d" -> "Fxn:dilation_rate=(1,";
    "Fxn:depthwise_conv2d" -> "Fxn:strides=(1,";
    "Fxn:depthwise_conv2d" -> "Fxn:dilation_rate=(1,";
    "Fxn:depthwise_conv2d" -> "Fxn:image_data_format()";
    "Fxn:depthwise_conv2d" -> "Fxn:ValueError('Unknown";
    "Fxn:depthwise_conv2d" -> "Fxn:hasattr(x,";
    "Fxn:depthwise_conv2d" -> "Fxn:_preprocess_conv2d_image_shape(int_shape(x),";
    "Fxn:depthwise_conv2d" -> "Fxn:hasattr(depthwise_kernel,";
    "Fxn:depthwise_conv2d" -> "Fxn:depthwise_kernel.eval().shape";
    "Fxn:depthwise_conv2d" -> "Fxn:_preprocess_conv2d_filter_shape(depthwise_kernel_shape,";
    "Fxn:depthwise_conv2d" -> "Fxn:_preprocess_conv2d_input(x,";
    "Fxn:depthwise_conv2d" -> "Fxn:_preprocess_conv2d_kernel(depthwise_kernel,";
    "Fxn:depthwise_conv2d" -> "Fxn:_preprocess_padding(padding)";
    "Fxn:depthwise_conv2d" -> "Fxn:depthwise_kernel.dimshuffle((1,";
    "Fxn:depthwise_conv2d" -> "Fxn:reshape(depthwise_kernel,";
    "Fxn:depthwise_conv2d" -> "Fxn:T.nnet.conv2d(x,";
    "Fxn:depthwise_conv2d" -> "Fxn:_postprocess_conv2d_output(conv_out,";
    "Fxn:conv3d" -> "Fxn:strides=(1,";
    "Fxn:conv3d" -> "Fxn:dilation_rate=(1,";
    "Fxn:conv3d" -> "Fxn:image_data_format()";
    "Fxn:conv3d" -> "Fxn:ValueError('Unknown";
    "Fxn:conv3d" -> "Fxn:hasattr(x,";
    "Fxn:conv3d" -> "Fxn:_preprocess_conv3d_volume_shape(int_shape(x),";
    "Fxn:conv3d" -> "Fxn:hasattr(kernel,";
    "Fxn:conv3d" -> "Fxn:kernel.eval().shape";
    "Fxn:conv3d" -> "Fxn:_preprocess_conv3d_filter_shape(kernel_shape,";
    "Fxn:conv3d" -> "Fxn:_preprocess_conv3d_input(x,";
    "Fxn:conv3d" -> "Fxn:_preprocess_conv3d_kernel(kernel,";
    "Fxn:conv3d" -> "Fxn:_preprocess_padding(padding)";
    "Fxn:conv3d" -> "Fxn:T.nnet.conv3d(x,";
    "Fxn:conv3d" -> "Fxn:_postprocess_conv3d_output(conv_out,";
    "Fxn:conv3d_transpose" -> "Fxn:strides=(1,";
    "Fxn:conv3d_transpose" -> "Fxn:image_data_format()";
    "Fxn:conv3d_transpose" -> "Fxn:ValueError('Unknown";
    "Fxn:conv3d_transpose" -> "Fxn:hasattr(kernel,";
    "Fxn:conv3d_transpose" -> "Fxn:kernel.eval().shape";
    "Fxn:conv3d_transpose" -> "Fxn:ValueError('In";
    "Fxn:conv3d_transpose" -> "Fxn:_preprocess_conv3d_filter_shape(kernel_shape,";
    "Fxn:conv3d_transpose" -> "Fxn:_preprocess_conv3d_input(x,";
    "Fxn:conv3d_transpose" -> "Fxn:_preprocess_conv3d_kernel(kernel,";
    "Fxn:conv3d_transpose" -> "Fxn:_preprocess_padding(padding)";
    "Fxn:conv3d_transpose" -> "Fxn:T.nnet.abstract_conv.AbstractConv3d_gradInputs(imshp=None,";
    "Fxn:conv3d_transpose" -> "Fxn:op(kernel,";
    "Fxn:conv3d_transpose" -> "Fxn:_postprocess_conv3d_output(conv_out,";
    "Fxn:pool2d" -> "Fxn:strides=(1,";
    "Fxn:pool2d" -> "Fxn:image_data_format()";
    "Fxn:pool2d" -> "Fxn:ValueError('Unknown";
    "Fxn:pool2d" -> "Fxn:ValueError('Invalid";
    "Fxn:pool2d" -> "Fxn:x.dimshuffle((0,";
    "Fxn:pool2d" -> "Fxn:pool.pool_2d(x,";
    "Fxn:pool2d" -> "Fxn:pool.pool_2d(x,";
    "Fxn:pool2d" -> "Fxn:ValueError('Invalid";
    "Fxn:pool2d" -> "Fxn:pool_out.dimshuffle((0,";
    "Fxn:pool3d" -> "Fxn:strides=(1,";
    "Fxn:pool3d" -> "Fxn:image_data_format()";
    "Fxn:pool3d" -> "Fxn:ValueError('Unknown";
    "Fxn:pool3d" -> "Fxn:ValueError('Invalid";
    "Fxn:pool3d" -> "Fxn:x.dimshuffle((0,";
    "Fxn:pool3d" -> "Fxn:pool.pool_3d(x,";
    "Fxn:pool3d" -> "Fxn:pool.pool_3d(x,";
    "Fxn:pool3d" -> "Fxn:ValueError('Invalid";
    "Fxn:pool3d" -> "Fxn:pool_out.dimshuffle((0,";
    "Fxn:bias_add" -> "Fxn:image_data_format()";
    "Fxn:bias_add" -> "Fxn:ValueError('Unknown";
    "Fxn:bias_add" -> "Fxn:str(data_format))";
    "Fxn:bias_add" -> "Fxn:ndim(bias)";
    "Fxn:bias_add" -> "Fxn:ndim(bias)";
    "Fxn:bias_add" -> "Fxn:ndim(x)";
    "Fxn:bias_add" -> "Fxn:ValueError('Unexpected";
    "Fxn:bias_add" -> "Fxn:ndim(x)";
    "Fxn:bias_add" -> "Fxn:tuple(bias.shape)";
    "Fxn:bias_add" -> "Fxn:ndim(x)";
    "Fxn:bias_add" -> "Fxn:ndim(bias)";
    "Fxn:bias_add" -> "Fxn:reshape(bias,";
    "Fxn:bias_add" -> "Fxn:reshape(bias,";
    "Fxn:bias_add" -> "Fxn:ndim(bias)";
    "Fxn:bias_add" -> "Fxn:reshape(bias,";
    "Fxn:bias_add" -> "Fxn:reshape(bias,";
    "Fxn:bias_add" -> "Fxn:ndim(x)";
    "Fxn:bias_add" -> "Fxn:ndim(bias)";
    "Fxn:bias_add" -> "Fxn:reshape(bias,";
    "Fxn:bias_add" -> "Fxn:reshape(bias,";
    "Fxn:bias_add" -> "Fxn:ndim(bias)";
    "Fxn:bias_add" -> "Fxn:reshape(bias,";
    "Fxn:bias_add" -> "Fxn:reshape(bias,";
    "Fxn:bias_add" -> "Fxn:ndim(x)";
    "Fxn:bias_add" -> "Fxn:ndim(bias)";
    "Fxn:bias_add" -> "Fxn:reshape(bias,";
    "Fxn:bias_add" -> "Fxn:reshape(bias,";
    "Fxn:bias_add" -> "Fxn:ndim(bias)";
    "Fxn:bias_add" -> "Fxn:reshape(bias,";
    "Fxn:bias_add" -> "Fxn:reshape(bias,";
    "Fxn:random_normal" -> "Fxn:floatx()";
    "Fxn:random_normal" -> "Fxn:np.random.randint(1,";
    "Fxn:random_normal" -> "Fxn:RandomStreams(seed=seed)";
    "Fxn:random_normal" -> "Fxn:rng.normal(size=shape,";
    "Fxn:random_uniform" -> "Fxn:floatx()";
    "Fxn:random_uniform" -> "Fxn:np.random.randint(1,";
    "Fxn:random_uniform" -> "Fxn:RandomStreams(seed=seed)";
    "Fxn:random_uniform" -> "Fxn:rng.uniform(shape,";
    "Fxn:random_binomial" -> "Fxn:floatx()";
    "Fxn:random_binomial" -> "Fxn:np.random.randint(1,";
    "Fxn:random_binomial" -> "Fxn:RandomStreams(seed=seed)";
    "Fxn:random_binomial" -> "Fxn:rng.binomial(shape,";
    "Fxn:truncated_normal" -> "Fxn:floatx()";
    "Fxn:truncated_normal" -> "Fxn:np.random.randint(1,";
    "Fxn:truncated_normal" -> "Fxn:RandomStreams(seed=seed)";
    "Fxn:truncated_normal" -> "Fxn:rng.normal(size=shape,";
    "Fxn:truncated_normal" -> "Fxn:T.clip(normal_tensor,";
    "Fxn:ctc_interleave_blanks" -> "Fxn:T.alloc(-1,";
    "Fxn:ctc_interleave_blanks" -> "Fxn:T.set_subtensor(Y_[T.arange(Y.shape[0])";
    "Fxn:ctc_create_skip_idxs" -> "Fxn:T.arange((Y.shape[0]";
    "Fxn:ctc_create_skip_idxs" -> "Fxn:T.neq(Y[skip_idxs],";
    "Fxn:ctc_create_skip_idxs" -> "Fxn:skip_idxs[non_repeats.nonzero()]";
    "Fxn:ctc_update_log_p" -> "Fxn:skip_idxs[(skip_idxs";
    "Fxn:ctc_update_log_p" -> "Fxn:active).nonzero()]";
    "Fxn:ctc_update_log_p" -> "Fxn:T.cast(T.minimum(";
    "Fxn:ctc_update_log_p" -> "Fxn:T.maximum(";
    "Fxn:ctc_update_log_p" -> "Fxn:T.max(T.concatenate([active_skip_idxs,";
    "Fxn:ctc_update_log_p" -> "Fxn:T.max(log_p_prev[:active])";
    "Fxn:ctc_update_log_p" -> "Fxn:T.exp(log_p_prev[:active]";
    "Fxn:ctc_update_log_p" -> "Fxn:T.set_subtensor(_p_prev[:active],";
    "Fxn:ctc_update_log_p" -> "Fxn:T.inc_subtensor(_p_prev[1:],";
    "Fxn:ctc_update_log_p" -> "Fxn:T.inc_subtensor(_p_prev[active_skip_idxs";
    "Fxn:ctc_update_log_p" -> "Fxn:T.log(_p_prev)";
    "Fxn:ctc_update_log_p" -> "Fxn:T.set_subtensor(";
    "Fxn:ctc_path_probs" -> "Fxn:np.float32(1.)";
    "Fxn:ctc_path_probs" -> "Fxn:T.log(smoothed_predict)";
    "Fxn:ctc_path_probs" -> "Fxn:T.zeros_like(L[0])";
    "Fxn:ctc_path_probs" -> "Fxn:ctc_create_skip_idxs(Y)";
    "Fxn:ctc_path_probs" -> "Fxn:ctc_create_skip_idxs(Y[::-1])";
    "Fxn:step" -> "Fxn:ctc_update_log_p(f_skip_idxs,";
    "Fxn:step" -> "Fxn:ctc_update_log_p(b_skip_idxs,";
    "Fxn:step" -> "Fxn:theano.scan(";
    "Fxn:step" -> "Fxn:outputs_info=[np.int32(1),";
    "Fxn:step" -> "Fxn:np.int32(1),";
    "Fxn:step" -> "Fxn:T.arange(L.shape[1]).dimshuffle('x',";
    "Fxn:step" -> "Fxn:f_active.dimshuffle(0,";
    "Fxn:step" -> "Fxn:b_active.dimshuffle(0,";
    "Fxn:ctc_cost" -> "Fxn:ctc_path_probs(predict,";
    "Fxn:ctc_cost" -> "Fxn:ctc_interleave_blanks(Y))";
    "Fxn:ctc_cost" -> "Fxn:T.max(log_probs)";
    "Fxn:ctc_cost" -> "Fxn:T.log(T.sum(T.exp(log_probs";
    "Fxn:ctc_cost" -> "Fxn:common_factor)[mask.nonzero()]))";
    "Fxn:ctc_step" -> "Fxn:ctc_cost(y_pred_step,";
    "Fxn:ctc_step" -> "Fxn:theano.scan(";
    "Fxn:ctc_step" -> "Fxn:ret.dimshuffle('x',";
    "Fxn:map_fn" -> "Fxn:theano.map(fn,";
    "Fxn:foldl" -> "Fxn:theano.foldl(lambda";
    "Fxn:foldl" -> "Fxn:fn(acc,";
    "Fxn:foldr" -> "Fxn:theano.foldr(lambda";
    "Fxn:foldr" -> "Fxn:fn(acc,";
    "Fxn:local_conv1d" -> "Fxn:image_data_format()";
    "Fxn:local_conv1d" -> "Fxn:ValueError('Unknown";
    "Fxn:local_conv1d" -> "Fxn:str(data_format))";
    "Fxn:local_conv1d" -> "Fxn:int_shape(kernel)";
    "Fxn:local_conv1d" -> "Fxn:range(output_length):";
    "Fxn:local_conv1d" -> "Fxn:slice(i";
    "Fxn:local_conv1d" -> "Fxn:xs.append(reshape(inputs[:,";
    "Fxn:local_conv1d" -> "Fxn:concatenate(xs,";
    "Fxn:local_conv1d" -> "Fxn:`(output_length,";
    "Fxn:local_conv1d" -> "Fxn:batch_dot(x_aggregate,";
    "Fxn:local_conv1d" -> "Fxn:permute_dimensions(output,";
    "Fxn:local_conv2d" -> "Fxn:image_data_format()";
    "Fxn:local_conv2d" -> "Fxn:ValueError('Unknown";
    "Fxn:local_conv2d" -> "Fxn:str(data_format))";
    "Fxn:local_conv2d" -> "Fxn:int_shape(kernel)";
    "Fxn:local_conv2d" -> "Fxn:range(output_row):";
    "Fxn:local_conv2d" -> "Fxn:range(output_col):";
    "Fxn:local_conv2d" -> "Fxn:slice(i";
    "Fxn:local_conv2d" -> "Fxn:slice(j";
    "Fxn:local_conv2d" -> "Fxn:reshape(inputs[:,";
    "Fxn:local_conv2d" -> "Fxn:output.append(dot(x_flatten,";
    "Fxn:local_conv2d" -> "Fxn:concatenate(output,";
    "Fxn:local_conv2d" -> "Fxn:reshape(output,";
    "Fxn:local_conv2d" -> "Fxn:permute_dimensions(output,";
    "Fxn:local_conv2d" -> "Fxn:range(output_row):";
    "Fxn:local_conv2d" -> "Fxn:range(output_col):";
    "Fxn:local_conv2d" -> "Fxn:slice(i";
    "Fxn:local_conv2d" -> "Fxn:slice(j";
    "Fxn:local_conv2d" -> "Fxn:xs.append(reshape(inputs[:,";
    "Fxn:local_conv2d" -> "Fxn:concatenate(xs,";
    "Fxn:local_conv2d" -> "Fxn:batch_dot(x_aggregate,";
    "Fxn:local_conv2d" -> "Fxn:reshape(output,";
    "Fxn:local_conv2d" -> "Fxn:permute_dimensions(output,";
    "/keras/backend/__init__.py" -> "Import:absolute_import";
    "/keras/backend/__init__.py" -> "Import:print_function";
    "/keras/backend/__init__.py" -> "Import:import";
    "/keras/backend/__init__.py" -> "Import:json";
    "/keras/backend/__init__.py" -> "Import:sys";
    "/keras/backend/__init__.py" -> "Import:epsilon";
    "/keras/backend/__init__.py" -> "Import:floatx";
    "/keras/backend/__init__.py" -> "Import:set_epsilon";
    "/keras/backend/__init__.py" -> "Import:set_floatx";
    "/keras/backend/__init__.py" -> "Import:cast_to_floatx";
    "/keras/backend/__init__.py" -> "Import:image_data_format";
    "/keras/backend/__init__.py" -> "Import:set_image_data_format";
    "/keras/backend/__init__.py" -> "Import:elif";
    "/keras/backend/__init__.py" -> "Import:elif";
    "/keras/backend/__init__.py" -> "Import:else:";
    "/keras/backend/__init__.py" -> "Fxn:backend";
    "/keras/datasets/boston_housing.py" -> "Import:absolute_import";
    "/keras/datasets/boston_housing.py" -> "Import:division";
    "/keras/datasets/boston_housing.py" -> "Import:print_function";
    "/keras/datasets/boston_housing.py" -> "Import:get_file";
    "/keras/datasets/boston_housing.py" -> "Import:numpy";
    "/keras/datasets/boston_housing.py" -> "Fxn:load_data";
    "/keras/datasets/cifar.py" -> "Import:absolute_import";
    "/keras/datasets/cifar.py" -> "Import:division";
    "/keras/datasets/cifar.py" -> "Import:print_function";
    "/keras/datasets/cifar.py" -> "Import:sys";
    "/keras/datasets/cifar.py" -> "Import:cPickle";
    "/keras/datasets/cifar.py" -> "Fxn:load_batch";
    "/keras/datasets/cifar10.py" -> "Import:absolute_import";
    "/keras/datasets/cifar10.py" -> "Import:division";
    "/keras/datasets/cifar10.py" -> "Import:print_function";
    "/keras/datasets/cifar10.py" -> "Import:load_batch";
    "/keras/datasets/cifar10.py" -> "Import:get_file";
    "/keras/datasets/cifar10.py" -> "Import:backend";
    "/keras/datasets/cifar10.py" -> "Import:numpy";
    "/keras/datasets/cifar10.py" -> "Import:def";
    "/keras/datasets/cifar10.py" -> "Fxn:load_data";
    "/keras/datasets/cifar100.py" -> "Import:absolute_import";
    "/keras/datasets/cifar100.py" -> "Import:division";
    "/keras/datasets/cifar100.py" -> "Import:print_function";
    "/keras/datasets/cifar100.py" -> "Import:load_batch";
    "/keras/datasets/cifar100.py" -> "Import:get_file";
    "/keras/datasets/cifar100.py" -> "Import:backend";
    "/keras/datasets/cifar100.py" -> "Import:numpy";
    "/keras/datasets/cifar100.py" -> "Import:def";
    "/keras/datasets/cifar100.py" -> "Fxn:load_data";
    "/keras/datasets/fashion_mnist.py" -> "Import:absolute_import";
    "/keras/datasets/fashion_mnist.py" -> "Import:division";
    "/keras/datasets/fashion_mnist.py" -> "Import:print_function";
    "/keras/datasets/fashion_mnist.py" -> "Import:gzip";
    "/keras/datasets/fashion_mnist.py" -> "Import:..utils.data_utils";
    "/keras/datasets/fashion_mnist.py" -> "Import:get_file";
    "/keras/datasets/fashion_mnist.py" -> "Import:numpy";
    "/keras/datasets/fashion_mnist.py" -> "Fxn:load_data";
    "/keras/datasets/imdb.py" -> "Import:absolute_import";
    "/keras/datasets/imdb.py" -> "Import:division";
    "/keras/datasets/imdb.py" -> "Import:print_function";
    "/keras/datasets/imdb.py" -> "Import:get_file";
    "/keras/datasets/imdb.py" -> "Import:_remove_long_seq";
    "/keras/datasets/imdb.py" -> "Import:numpy";
    "/keras/datasets/imdb.py" -> "Import:json";
    "/keras/datasets/imdb.py" -> "Import:warnings";
    "/keras/datasets/imdb.py" -> "Fxn:load_data";
    "/keras/datasets/imdb.py" -> "Fxn:get_word_index";
    "/keras/datasets/mnist.py" -> "Import:absolute_import";
    "/keras/datasets/mnist.py" -> "Import:division";
    "/keras/datasets/mnist.py" -> "Import:print_function";
    "/keras/datasets/mnist.py" -> "Import:get_file";
    "/keras/datasets/mnist.py" -> "Import:numpy";
    "/keras/datasets/mnist.py" -> "Fxn:load_data";
    "/keras/datasets/reuters.py" -> "Import:absolute_import";
    "/keras/datasets/reuters.py" -> "Import:division";
    "/keras/datasets/reuters.py" -> "Import:print_function";
    "/keras/datasets/reuters.py" -> "Import:get_file";
    "/keras/datasets/reuters.py" -> "Import:_remove_long_seq";
    "/keras/datasets/reuters.py" -> "Import:numpy";
    "/keras/datasets/reuters.py" -> "Import:json";
    "/keras/datasets/reuters.py" -> "Import:warnings";
    "/keras/datasets/reuters.py" -> "Fxn:load_data";
    "/keras/datasets/reuters.py" -> "Fxn:get_word_index";
    "/keras/datasets/__init__.py" -> "Import:absolute_import";
    "/keras/datasets/__init__.py" -> "Import:mnist";
    "/keras/datasets/__init__.py" -> "Import:imdb";
    "/keras/datasets/__init__.py" -> "Import:reuters";
    "/keras/datasets/__init__.py" -> "Import:cifar10";
    "/keras/datasets/__init__.py" -> "Import:cifar100";
    "/keras/datasets/__init__.py" -> "Import:boston_housing";
    "/keras/datasets/__init__.py" -> "Import:fashion_mnist";
    "/keras/engine/topology.py" -> "Import:print_function";
    "/keras/engine/topology.py" -> "Import:absolute_import";
    "/keras/engine/topology.py" -> "Import:division";
    "/keras/engine/topology.py" -> "Import:numpy";
    "/keras/engine/topology.py" -> "Import:json";
    "/keras/engine/topology.py" -> "Import:yaml";
    "/keras/engine/topology.py" -> "Import:warnings";
    "/keras/engine/topology.py" -> "Import:copy";
    "/keras/engine/topology.py" -> "Import:import";
    "/keras/engine/topology.py" -> "Import:six.moves";
    "/keras/engine/topology.py" -> "Import:zip";
    "/keras/engine/topology.py" -> "Import:backend";
    "/keras/engine/topology.py" -> "Import:initializers";
    "/keras/engine/topology.py" -> "Import:ask_to_proceed_with_overwrite";
    "/keras/engine/topology.py" -> "Import:print_summary";
    "/keras/engine/topology.py" -> "Import:count_params";
    "/keras/engine/topology.py" -> "Import:has_arg";
    "/keras/engine/topology.py" -> "Import:conv_utils";
    "/keras/engine/topology.py" -> "Import:interfaces";
    "/keras/engine/topology.py" -> "Import:h5py";
    "/keras/engine/topology.py" -> "class:InputSpec(object):";
    "/keras/engine/topology.py" -> "class:Node(object):";
    "/keras/engine/topology.py" -> "class:Layer(object):";
    "/keras/engine/topology.py" -> "class:InputLayer(Layer):";
    "/keras/engine/topology.py" -> "class:Container(Layer):";
    "/keras/engine/topology.py" -> "Import:deserialize";
    "/keras/engine/topology.py" -> "Import:load_model";
    "/keras/engine/topology.py" -> "Import:save_model";
    "/keras/engine/topology.py" -> "Import:__version__";
    "/keras/engine/topology.py" -> "Import:__version__";
    "class:InputSpec(object):" -> "Fxn:__init__";
    "class:InputSpec(object):" -> "Fxn:__repr__";
    "Fxn:__init__" -> "Fxn:len(shape)";
    "Fxn:__repr__" -> "Fxn:[('dtype='";
    "Fxn:__repr__" -> "Fxn:str(self.dtype))";
    "Fxn:__repr__" -> "Fxn:str(self.shape))";
    "Fxn:__repr__" -> "Fxn:str(self.ndim))";
    "Fxn:__repr__" -> "Fxn:str(self.max_ndim))";
    "Fxn:__repr__" -> "Fxn:str(self.min_ndim))";
    "Fxn:__repr__" -> "Fxn:str(self.axes))";
    "Fxn:__repr__" -> "Fxn:'InputSpec(%s)'";
    "Fxn:__repr__" -> "Fxn:'.join(x";
    "class:Node(object):" -> "Fxn:__init__";
    "class:Node(object):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:outbound_layer.call().";
    "Fxn:__init__" -> "Fxn:outbound_layer.compute_mask().";
    "Fxn:__init__" -> "Fxn:layer._outbound_nodes.append(self)";
    "Fxn:__init__" -> "Fxn:outbound_layer._inbound_nodes.append(self)";
    "Fxn:get_config" -> "Fxn:inbound_names.append(layer.name)";
    "Fxn:get_config" -> "Fxn:inbound_names.append(None)";
    "class:Layer(object):" -> "Fxn:__init__";
    "class:Layer(object):" -> "Fxn:_node_key";
    "class:Layer(object):" -> "Fxn:losses";
    "class:Layer(object):" -> "Fxn:updates";
    "class:Layer(object):" -> "Fxn:built";
    "class:Layer(object):" -> "Fxn:built";
    "class:Layer(object):" -> "Fxn:trainable_weights";
    "class:Layer(object):" -> "Fxn:trainable_weights";
    "class:Layer(object):" -> "Fxn:non_trainable_weights";
    "class:Layer(object):" -> "Fxn:non_trainable_weights";
    "class:Layer(object):" -> "Fxn:add_weight";
    "class:Layer(object):" -> "Fxn:assert_input_compatibility";
    "class:Layer(object):" -> "Fxn:call";
    "class:Layer(object):" -> "Fxn:__call__";
    "class:Layer(object):" -> "Fxn:_add_inbound_node";
    "class:Layer(object):" -> "Fxn:compute_output_shape";
    "class:Layer(object):" -> "Fxn:compute_mask";
    "class:Layer(object):" -> "Fxn:build";
    "class:Layer(object):" -> "Fxn:_get_node_attribute_at_index";
    "class:Layer(object):" -> "Fxn:get_input_shape_at";
    "class:Layer(object):" -> "Fxn:get_output_shape_at";
    "class:Layer(object):" -> "Fxn:get_input_at";
    "class:Layer(object):" -> "Fxn:get_output_at";
    "class:Layer(object):" -> "Fxn:get_input_mask_at";
    "class:Layer(object):" -> "Fxn:get_output_mask_at";
    "class:Layer(object):" -> "Fxn:input";
    "class:Layer(object):" -> "Fxn:output";
    "class:Layer(object):" -> "Fxn:input_mask";
    "class:Layer(object):" -> "Fxn:output_mask";
    "class:Layer(object):" -> "Fxn:input_shape";
    "class:Layer(object):" -> "Fxn:output_shape";
    "class:Layer(object):" -> "Fxn:add_loss";
    "class:Layer(object):" -> "Fxn:add_update";
    "class:Layer(object):" -> "Fxn:get_updates_for";
    "class:Layer(object):" -> "Fxn:get_losses_for";
    "class:Layer(object):" -> "Fxn:weights";
    "class:Layer(object):" -> "Fxn:set_weights";
    "class:Layer(object):" -> "Fxn:get_weights";
    "class:Layer(object):" -> "Fxn:get_config";
    "class:Layer(object):" -> "Fxn:from_config";
    "class:Layer(object):" -> "Fxn:count_params";
    "Fxn:__init__" -> "Fxn:self.build()";
    "Fxn:__init__" -> "Fxn:self._add_inbound_node().";
    "Fxn:__init__" -> "Fxn:TypeError('Keyword";
    "Fxn:__init__" -> "Fxn:kwargs.get('name')";
    "Fxn:__init__" -> "Fxn:_to_snake_case(prefix)";
    "Fxn:__init__" -> "Fxn:str(K.get_uid(prefix))";
    "Fxn:__init__" -> "Fxn:kwargs.get('trainable',";
    "Fxn:__init__" -> "Fxn:tuple(kwargs['batch_input_shape'])";
    "Fxn:__init__" -> "Fxn:tuple(kwargs['input_shape'])";
    "Fxn:__init__" -> "Fxn:kwargs.get('dtype')";
    "Fxn:__init__" -> "Fxn:kwargs.get('input_dtype')";
    "Fxn:__init__" -> "Fxn:K.floatx()";
    "Fxn:_node_key" -> "Fxn:str(node_index)";
    "Fxn:trainable_weights" -> "Fxn:getattr(self,";
    "Fxn:non_trainable_weights" -> "Fxn:getattr(self,";
    "Fxn:add_weight" -> "Fxn:initializers.get(initializer)";
    "Fxn:add_weight" -> "Fxn:K.floatx()";
    "Fxn:add_weight" -> "Fxn:K.variable(initializer(shape),";
    "Fxn:add_weight" -> "Fxn:self.add_loss(regularizer(weight))";
    "Fxn:add_weight" -> "Fxn:self._trainable_weights.append(weight)";
    "Fxn:add_weight" -> "Fxn:self._non_trainable_weights.append(weight)";
    "Fxn:assert_input_compatibility" -> "Fxn:tensor(s)";
    "Fxn:assert_input_compatibility" -> "Fxn:_to_list(inputs)";
    "Fxn:assert_input_compatibility" -> "Fxn:K.is_keras_tensor(x)";
    "Fxn:assert_input_compatibility" -> "Fxn:ValueError('Layer";
    "Fxn:assert_input_compatibility" -> "Fxn:str(type(x))";
    "Fxn:assert_input_compatibility" -> "Fxn:str(inputs)";
    "Fxn:assert_input_compatibility" -> "Fxn:isinstance(self.input_spec,";
    "Fxn:assert_input_compatibility" -> "Fxn:_to_list(self.input_spec)";
    "Fxn:assert_input_compatibility" -> "Fxn:len(inputs)";
    "Fxn:assert_input_compatibility" -> "Fxn:len(input_spec):";
    "Fxn:assert_input_compatibility" -> "Fxn:ValueError('Layer";
    "Fxn:assert_input_compatibility" -> "Fxn:str(len(input_spec))";
    "Fxn:assert_input_compatibility" -> "Fxn:str(len(inputs))";
    "Fxn:assert_input_compatibility" -> "Fxn:str(inputs))";
    "Fxn:assert_input_compatibility" -> "Fxn:enumerate(zip(inputs,";
    "Fxn:assert_input_compatibility" -> "Fxn:K.ndim(x)";
    "Fxn:assert_input_compatibility" -> "Fxn:ValueError('Input";
    "Fxn:assert_input_compatibility" -> "Fxn:str(input_index)";
    "Fxn:assert_input_compatibility" -> "Fxn:str(spec.ndim)";
    "Fxn:assert_input_compatibility" -> "Fxn:str(K.ndim(x)))";
    "Fxn:assert_input_compatibility" -> "Fxn:K.ndim(x)";
    "Fxn:assert_input_compatibility" -> "Fxn:ValueError('Input";
    "Fxn:assert_input_compatibility" -> "Fxn:str(input_index)";
    "Fxn:assert_input_compatibility" -> "Fxn:str(spec.max_ndim)";
    "Fxn:assert_input_compatibility" -> "Fxn:str(K.ndim(x)))";
    "Fxn:assert_input_compatibility" -> "Fxn:K.ndim(x)";
    "Fxn:assert_input_compatibility" -> "Fxn:ValueError('Input";
    "Fxn:assert_input_compatibility" -> "Fxn:str(input_index)";
    "Fxn:assert_input_compatibility" -> "Fxn:str(spec.min_ndim)";
    "Fxn:assert_input_compatibility" -> "Fxn:str(K.ndim(x)))";
    "Fxn:assert_input_compatibility" -> "Fxn:K.dtype(x)";
    "Fxn:assert_input_compatibility" -> "Fxn:ValueError('Input";
    "Fxn:assert_input_compatibility" -> "Fxn:str(input_index)";
    "Fxn:assert_input_compatibility" -> "Fxn:str(spec.dtype)";
    "Fxn:assert_input_compatibility" -> "Fxn:str(K.dtype(x)))";
    "Fxn:assert_input_compatibility" -> "Fxn:K.int_shape(x)";
    "Fxn:assert_input_compatibility" -> "Fxn:spec.axes.items():";
    "Fxn:assert_input_compatibility" -> "Fxn:x_shape[int(axis)]";
    "Fxn:assert_input_compatibility" -> "Fxn:ValueError('Input";
    "Fxn:assert_input_compatibility" -> "Fxn:str(input_index)";
    "Fxn:assert_input_compatibility" -> "Fxn:str(axis)";
    "Fxn:assert_input_compatibility" -> "Fxn:str(value)";
    "Fxn:assert_input_compatibility" -> "Fxn:str(x_shape))";
    "Fxn:assert_input_compatibility" -> "Fxn:K.int_shape(x)";
    "Fxn:assert_input_compatibility" -> "Fxn:zip(spec.shape,";
    "Fxn:assert_input_compatibility" -> "Fxn:ValueError(";
    "Fxn:assert_input_compatibility" -> "Fxn:str(input_index)";
    "Fxn:assert_input_compatibility" -> "Fxn:str(spec.shape)";
    "Fxn:assert_input_compatibility" -> "Fxn:str(x_shape))";
    "Fxn:__call__" -> "Fxn:self.call(),";
    "Fxn:__call__" -> "Fxn:self._add_inbound_node().";
    "Fxn:__call__" -> "Fxn:input(s).";
    "Fxn:__call__" -> "Fxn:_add_inbound_node().";
    "Fxn:__call__" -> "Fxn:tensor(s)";
    "Fxn:__call__" -> "Fxn:_add_inbound_node().";
    "Fxn:__call__" -> "Fxn:`call()`.";
    "Fxn:__call__" -> "Fxn:isinstance(inputs,";
    "Fxn:__call__" -> "Fxn:K.name_scope(self.name):";
    "Fxn:__call__" -> "Fxn:self.assert_input_compatibility(inputs)";
    "Fxn:__call__" -> "Fxn:_to_list(inputs):";
    "Fxn:__call__" -> "Fxn:hasattr(x_elem,";
    "Fxn:__call__" -> "Fxn:input_shapes.append(x_elem._keras_shape)";
    "Fxn:__call__" -> "Fxn:hasattr(K,";
    "Fxn:__call__" -> "Fxn:input_shapes.append(K.int_shape(x_elem))";
    "Fxn:__call__" -> "Fxn:ValueError('You";
    "Fxn:__call__" -> "Fxn:'`layer.build(batch_input_shape)`')";
    "Fxn:__call__" -> "Fxn:len(input_shapes)";
    "Fxn:__call__" -> "Fxn:self.build(input_shapes[0])";
    "Fxn:__call__" -> "Fxn:self.build(input_shapes)";
    "Fxn:__call__" -> "Fxn:self.set_weights(self._initial_weights)";
    "Fxn:__call__" -> "Fxn:self.assert_input_compatibility(inputs)";
    "Fxn:__call__" -> "Fxn:_collect_previous_mask(inputs)";
    "Fxn:__call__" -> "Fxn:copy.copy(kwargs)";
    "Fxn:__call__" -> "Fxn:_is_all_none(previous_mask):";
    "Fxn:__call__" -> "Fxn:has_arg(self.call,";
    "Fxn:__call__" -> "Fxn:_collect_input_shape(inputs)";
    "Fxn:__call__" -> "Fxn:output(s),";
    "Fxn:__call__" -> "Fxn:mask(s),";
    "Fxn:__call__" -> "Fxn:shape(s).";
    "Fxn:__call__" -> "Fxn:self.call(inputs,";
    "Fxn:__call__" -> "Fxn:self.compute_mask(inputs,";
    "Fxn:__call__" -> "Fxn:_to_list(output)";
    "Fxn:__call__" -> "Fxn:_to_list(inputs)";
    "Fxn:__call__" -> "Fxn:K.identity(x)";
    "Fxn:__call__" -> "Fxn:output_ls_copy.append(x)";
    "Fxn:__call__" -> "Fxn:len(output_ls_copy)";
    "Fxn:__call__" -> "Fxn:all([s";
    "Fxn:__call__" -> "Fxn:_to_list(input_shape)]):";
    "Fxn:__call__" -> "Fxn:self.compute_output_shape(input_shape)";
    "Fxn:__call__" -> "Fxn:isinstance(input_shape,";
    "Fxn:__call__" -> "Fxn:isinstance(output_mask,";
    "Fxn:__call__" -> "Fxn:len(output_ls)";
    "Fxn:__call__" -> "Fxn:len(output_ls)";
    "Fxn:__call__" -> "Fxn:tensor(s).";
    "Fxn:__call__" -> "Fxn:tensor(s)";
    "Fxn:__call__" -> "Fxn:self._add_inbound_node(input_tensors=inputs,";
    "Fxn:__call__" -> "Fxn:hasattr(self,";
    "Fxn:__call__" -> "Fxn:[self.activity_regularizer(x)";
    "Fxn:__call__" -> "Fxn:_to_list(output)]";
    "Fxn:__call__" -> "Fxn:self.add_loss(regularization_losses,";
    "Fxn:__call__" -> "Fxn:_to_list(inputs))";
    "Fxn:_add_inbound_node" -> "Fxn:_to_list(input_tensors)";
    "Fxn:_add_inbound_node" -> "Fxn:_to_list(output_tensors)";
    "Fxn:_add_inbound_node" -> "Fxn:_to_list(input_masks)";
    "Fxn:_add_inbound_node" -> "Fxn:_to_list(output_masks)";
    "Fxn:_add_inbound_node" -> "Fxn:_to_list(input_shapes)";
    "Fxn:_add_inbound_node" -> "Fxn:_to_list(output_shapes)";
    "Fxn:_add_inbound_node" -> "Fxn:tensor(s)";
    "Fxn:_add_inbound_node" -> "Fxn:hasattr(x,";
    "Fxn:_add_inbound_node" -> "Fxn:inbound_layers.append(inbound_layer)";
    "Fxn:_add_inbound_node" -> "Fxn:node_indices.append(node_index)";
    "Fxn:_add_inbound_node" -> "Fxn:tensor_indices.append(tensor_index)";
    "Fxn:_add_inbound_node" -> "Fxn:inbound_layers.append(None)";
    "Fxn:_add_inbound_node" -> "Fxn:node_indices.append(None)";
    "Fxn:_add_inbound_node" -> "Fxn:tensor_indices.append(None)";
    "Fxn:_add_inbound_node" -> "Fxn:Node(";
    "Fxn:_add_inbound_node" -> "Fxn:range(len(output_tensors)):";
    "Fxn:_add_inbound_node" -> "Fxn:any([getattr(x,";
    "Fxn:_add_inbound_node" -> "Fxn:getattr(self,";
    "Fxn:_add_inbound_node" -> "Fxn:getattr(output_tensors[i],";
    "Fxn:_add_inbound_node" -> "Fxn:len(self._inbound_nodes)";
    "Fxn:compute_output_shape" -> "Fxn:hasattr(self,";
    "Fxn:compute_output_shape" -> "Fxn:warnings.warn(msg.format(type(self).__module__,";
    "Fxn:compute_output_shape" -> "Fxn:type(self).__name__),";
    "Fxn:compute_mask" -> "Fxn:isinstance(mask,";
    "Fxn:compute_mask" -> "Fxn:any(m";
    "Fxn:compute_mask" -> "Fxn:TypeError('Layer";
    "Fxn:compute_mask" -> "Fxn:str(mask))";
    "Fxn:compute_mask" -> "Fxn:TypeError('Layer";
    "Fxn:compute_mask" -> "Fxn:str(mask))";
    "Fxn:_get_node_attribute_at_index" -> "Fxn:RuntimeError('The";
    "Fxn:_get_node_attribute_at_index" -> "Fxn:len(self._inbound_nodes)";
    "Fxn:_get_node_attribute_at_index" -> "Fxn:ValueError('Asked";
    "Fxn:_get_node_attribute_at_index" -> "Fxn:str(node_index)";
    "Fxn:_get_node_attribute_at_index" -> "Fxn:str(len(self._inbound_nodes))";
    "Fxn:_get_node_attribute_at_index" -> "Fxn:getattr(self._inbound_nodes[node_index],";
    "Fxn:_get_node_attribute_at_index" -> "Fxn:len(values)";
    "Fxn:get_input_shape_at" -> "Fxn:shape(s)";
    "Fxn:get_input_shape_at" -> "Fxn:self._get_node_attribute_at_index(node_index,";
    "Fxn:get_output_shape_at" -> "Fxn:shape(s)";
    "Fxn:get_output_shape_at" -> "Fxn:self._get_node_attribute_at_index(node_index,";
    "Fxn:get_input_at" -> "Fxn:tensor(s)";
    "Fxn:get_input_at" -> "Fxn:self._get_node_attribute_at_index(node_index,";
    "Fxn:get_output_at" -> "Fxn:tensor(s)";
    "Fxn:get_output_at" -> "Fxn:self._get_node_attribute_at_index(node_index,";
    "Fxn:get_input_mask_at" -> "Fxn:tensor(s)";
    "Fxn:get_input_mask_at" -> "Fxn:self._get_node_attribute_at_index(node_index,";
    "Fxn:get_output_mask_at" -> "Fxn:tensor(s)";
    "Fxn:get_output_mask_at" -> "Fxn:self._get_node_attribute_at_index(node_index,";
    "Fxn:input" -> "Fxn:tensor(s)";
    "Fxn:input" -> "Fxn:len(self._inbound_nodes)";
    "Fxn:input" -> "Fxn:AttributeError('Layer";
    "Fxn:input" -> "Fxn:`get_input_at(node_index)`";
    "Fxn:input" -> "Fxn:AttributeError('Layer";
    "Fxn:input" -> "Fxn:self._get_node_attribute_at_index(0,";
    "Fxn:output" -> "Fxn:tensor(s)";
    "Fxn:output" -> "Fxn:AttributeError('Layer";
    "Fxn:output" -> "Fxn:len(self._inbound_nodes)";
    "Fxn:output" -> "Fxn:AttributeError('Layer";
    "Fxn:output" -> "Fxn:`get_output_at(node_index)`";
    "Fxn:output" -> "Fxn:self._get_node_attribute_at_index(0,";
    "Fxn:input_mask" -> "Fxn:tensor(s)";
    "Fxn:input_mask" -> "Fxn:len(self._inbound_nodes)";
    "Fxn:input_mask" -> "Fxn:AttributeError('Layer";
    "Fxn:input_mask" -> "Fxn:`get_input_mask_at(node_index)`";
    "Fxn:input_mask" -> "Fxn:self._get_node_attribute_at_index(0,";
    "Fxn:output_mask" -> "Fxn:tensor(s)";
    "Fxn:output_mask" -> "Fxn:len(self._inbound_nodes)";
    "Fxn:output_mask" -> "Fxn:AttributeError('Layer";
    "Fxn:output_mask" -> "Fxn:`get_output_mask_at(node_index)`";
    "Fxn:output_mask" -> "Fxn:self._get_node_attribute_at_index(0,";
    "Fxn:input_shape" -> "Fxn:tuple(s)";
    "Fxn:input_shape" -> "Fxn:AttributeError('The";
    "Fxn:input_shape" -> "Fxn:set([str(node.input_shapes)";
    "Fxn:input_shape" -> "Fxn:len(all_input_shapes)";
    "Fxn:input_shape" -> "Fxn:len(input_shapes)";
    "Fxn:input_shape" -> "Fxn:AttributeError('The";
    "Fxn:input_shape" -> "Fxn:str(self.name)";
    "Fxn:input_shape" -> "Fxn:`get_input_shape_at(node_index)`";
    "Fxn:output_shape" -> "Fxn:tuple(s)";
    "Fxn:output_shape" -> "Fxn:AttributeError('The";
    "Fxn:output_shape" -> "Fxn:set([str(node.output_shapes)";
    "Fxn:output_shape" -> "Fxn:len(all_output_shapes)";
    "Fxn:output_shape" -> "Fxn:len(output_shapes)";
    "Fxn:output_shape" -> "Fxn:AttributeError('The";
    "Fxn:output_shape" -> "Fxn:str(self.name)";
    "Fxn:output_shape" -> "Fxn:`get_output_shape_at(node_index)`";
    "Fxn:add_loss" -> "Fxn:_to_list(losses)";
    "Fxn:add_loss" -> "Fxn:hasattr(self,";
    "Fxn:add_loss" -> "Fxn:isinstance(inputs,";
    "Fxn:add_loss" -> "Fxn:_object_list_uid(inputs)";
    "Fxn:add_update" -> "Fxn:_to_list(updates)";
    "Fxn:add_update" -> "Fxn:hasattr(self,";
    "Fxn:add_update" -> "Fxn:isinstance(inputs,";
    "Fxn:add_update" -> "Fxn:_object_list_uid(inputs)";
    "Fxn:get_updates_for" -> "Fxn:_object_list_uid(inputs)";
    "Fxn:get_losses_for" -> "Fxn:_object_list_uid(inputs)";
    "Fxn:set_weights" -> "Fxn:len(params)";
    "Fxn:set_weights" -> "Fxn:len(weights):";
    "Fxn:set_weights" -> "Fxn:ValueError('You";
    "Fxn:set_weights" -> "Fxn:`set_weights(weights)`";
    "Fxn:set_weights" -> "Fxn:str(len(weights))";
    "Fxn:set_weights" -> "Fxn:str(len(params))";
    "Fxn:set_weights" -> "Fxn:str(weights)[:50]";
    "Fxn:set_weights" -> "Fxn:K.batch_get_value(params)";
    "Fxn:set_weights" -> "Fxn:zip(param_values,";
    "Fxn:set_weights" -> "Fxn:ValueError('Layer";
    "Fxn:set_weights" -> "Fxn:str(pv.shape)";
    "Fxn:set_weights" -> "Fxn:str(w.shape))";
    "Fxn:set_weights" -> "Fxn:weight_value_tuples.append((p,";
    "Fxn:set_weights" -> "Fxn:K.batch_set_value(weight_value_tuples)";
    "Fxn:get_weights" -> "Fxn:K.batch_get_value(params)";
    "Fxn:from_config" -> "Fxn:cls(**config)";
    "Fxn:count_params" -> "Fxn:self.build()";
    "Fxn:count_params" -> "Fxn:RuntimeError('You";
    "Fxn:count_params" -> "Fxn:'.build(batch_input_shape)`.')";
    "Fxn:count_params" -> "Fxn:count_params(self.weights)";
    "class:InputLayer(Layer):" -> "Fxn:__init__";
    "class:InputLayer(Layer):" -> "Fxn:get_config";
    "class:InputLayer(Layer):" -> "Fxn:Input";
    "Fxn:__init__" -> "Fxn:str(K.get_uid(prefix))";
    "Fxn:__init__" -> "Fxn:super(InputLayer,";
    "Fxn:__init__" -> "Fxn:self).__init__(dtype=dtype,";
    "Fxn:__init__" -> "Fxn:ValueError('Only";
    "Fxn:__init__" -> "Fxn:K.int_shape(input_tensor)";
    "Fxn:__init__" -> "Fxn:ValueError('InputLayer";
    "Fxn:__init__" -> "Fxn:ValueError('An";
    "Fxn:__init__" -> "Fxn:tuple(input_shape)";
    "Fxn:__init__" -> "Fxn:tuple(batch_input_shape)";
    "Fxn:__init__" -> "Fxn:K.floatx()";
    "Fxn:__init__" -> "Fxn:K.dtype(input_tensor)";
    "Fxn:__init__" -> "Fxn:K.placeholder(shape=batch_input_shape,";
    "Fxn:__init__" -> "Fxn:Node(self,";
    "Fxn:Input" -> "Fxn:"""`Input()`";
    "Fxn:Input" -> "Fxn:Model(input=[a,";
    "Fxn:Input" -> "Fxn:`shape=(32,)`";
    "Fxn:Input" -> "Fxn:`batch_shape=(10,";
    "Fxn:Input" -> "Fxn:`batch_shape=(None,";
    "Fxn:Input" -> "Fxn:Input(shape=(32,))";
    "Fxn:Input" -> "Fxn:Dense(16,";
    "Fxn:Input" -> "Fxn:activation='softmax')(x)";
    "Fxn:Input" -> "Fxn:Model(x,";
    "Fxn:Input" -> "Fxn:tuple(shape)";
    "Fxn:Input" -> "Fxn:K.floatx()";
    "Fxn:Input" -> "Fxn:InputLayer(batch_input_shape=batch_shape,";
    "Fxn:Input" -> "Fxn:len(outputs)";
    "class:Container(Layer):" -> "Fxn:__init__";
    "class:Container(Layer):" -> "Fxn:build_map_of_graph";
    "class:Container(Layer):" -> "Fxn:get_layer";
    "class:Container(Layer):" -> "Fxn:updates";
    "class:Container(Layer):" -> "Fxn:losses";
    "class:Container(Layer):" -> "Fxn:uses_learning_phase";
    "class:Container(Layer):" -> "Fxn:stateful";
    "class:Container(Layer):" -> "Fxn:reset_states";
    "class:Container(Layer):" -> "Fxn:state_updates";
    "class:Container(Layer):" -> "Fxn:trainable_weights";
    "class:Container(Layer):" -> "Fxn:non_trainable_weights";
    "class:Container(Layer):" -> "Fxn:get_weights";
    "class:Container(Layer):" -> "Fxn:set_weights";
    "class:Container(Layer):" -> "Fxn:input_spec";
    "class:Container(Layer):" -> "Fxn:call";
    "class:Container(Layer):" -> "Fxn:compute_mask";
    "class:Container(Layer):" -> "Fxn:compute_output_shape";
    "class:Container(Layer):" -> "Fxn:run_internal_graph";
    "class:Container(Layer):" -> "Fxn:get_config";
    "class:Container(Layer):" -> "Fxn:from_config";
    "class:Container(Layer):" -> "Fxn:add_unprocessed_node";
    "class:Container(Layer):" -> "Fxn:process_node";
    "class:Container(Layer):" -> "Fxn:process_layer";
    "class:Container(Layer):" -> "Fxn:save";
    "class:Container(Layer):" -> "Fxn:save_weights";
    "class:Container(Layer):" -> "Fxn:load_weights";
    "class:Container(Layer):" -> "Fxn:_updated_config";
    "class:Container(Layer):" -> "Fxn:to_json";
    "class:Container(Layer):" -> "Fxn:get_json_type";
    "class:Container(Layer):" -> "Fxn:to_yaml";
    "class:Container(Layer):" -> "Fxn:summary";
    "class:Container(Layer):" -> "Fxn:get_source_inputs";
    "class:Container(Layer):" -> "Fxn:_to_list";
    "class:Container(Layer):" -> "Fxn:_object_list_uid";
    "class:Container(Layer):" -> "Fxn:_is_all_none";
    "class:Container(Layer):" -> "Fxn:_collect_previous_mask";
    "class:Container(Layer):" -> "Fxn:_to_snake_case";
    "class:Container(Layer):" -> "Fxn:_collect_input_shape";
    "class:Container(Layer):" -> "Fxn:_save_attributes_to_hdf5_group";
    "class:Container(Layer):" -> "Fxn:_load_attributes_from_hdf5_group";
    "class:Container(Layer):" -> "Fxn:save_weights_to_hdf5_group";
    "class:Container(Layer):" -> "Fxn:preprocess_weights_for_loading";
    "class:Container(Layer):" -> "Fxn:_convert_rnn_weights";
    "class:Container(Layer):" -> "Fxn:transform_kernels";
    "class:Container(Layer):" -> "Fxn:transpose_input";
    "class:Container(Layer):" -> "Fxn:transform";
    "class:Container(Layer):" -> "Fxn:convert_weights";
    "class:Container(Layer):" -> "Fxn:convert_weights";
    "class:Container(Layer):" -> "Fxn:_need_convert_kernel";
    "class:Container(Layer):" -> "Fxn:load_weights_from_hdf5_group";
    "class:Container(Layer):" -> "Fxn:load_weights_from_hdf5_group_by_name";
    "Fxn:__init__" -> "Fxn:self.__class__.__name__.lower()";
    "Fxn:__init__" -> "Fxn:str(K.get_uid(prefix))";
    "Fxn:__init__" -> "Fxn:isinstance(inputs,";
    "Fxn:__init__" -> "Fxn:list(inputs)";
    "Fxn:__init__" -> "Fxn:isinstance(outputs,";
    "Fxn:__init__" -> "Fxn:list(outputs)";
    "Fxn:__init__" -> "Fxn:len(set(self.inputs))";
    "Fxn:__init__" -> "Fxn:len(self.inputs):";
    "Fxn:__init__" -> "Fxn:ValueError('The";
    "Fxn:__init__" -> "Fxn:str(self.inputs))";
    "Fxn:__init__" -> "Fxn:len(set(self.outputs))";
    "Fxn:__init__" -> "Fxn:len(self.outputs):";
    "Fxn:__init__" -> "Fxn:warnings.warn('The";
    "Fxn:__init__" -> "Fxn:str(self.outputs))";
    "Fxn:__init__" -> "Fxn:hasattr(x,";
    "Fxn:__init__" -> "Fxn:TypeError('Input";
    "Fxn:__init__" -> "Fxn:str(x)";
    "Fxn:__init__" -> "Fxn:len(layer._inbound_nodes)";
    "Fxn:__init__" -> "Fxn:warnings.warn(cls_name";
    "Fxn:__init__" -> "Fxn:Input(shape)`.\n'";
    "Fxn:__init__" -> "Fxn:str(x.name))";
    "Fxn:__init__" -> "Fxn:hasattr(x,";
    "Fxn:__init__" -> "Fxn:TypeError('Output";
    "Fxn:__init__" -> "Fxn:str(x))";
    "Fxn:__init__" -> "Fxn:self.output_layers.append(layer)";
    "Fxn:__init__" -> "Fxn:self.output_layers_node_indices.append(node_index)";
    "Fxn:__init__" -> "Fxn:self.output_layers_tensor_indices.append(tensor_index)";
    "Fxn:__init__" -> "Fxn:masks.append(mask)";
    "Fxn:__init__" -> "Fxn:','.join([str(id(x))";
    "Fxn:__init__" -> "Fxn:','.join([str(id(x))";
    "Fxn:__init__" -> "Fxn:masks.append(mask)";
    "Fxn:__init__" -> "Fxn:len(masks)";
    "Fxn:__init__" -> "Fxn:self.input_layers.append(layer)";
    "Fxn:__init__" -> "Fxn:self.input_layers_node_indices.append(node_index)";
    "Fxn:__init__" -> "Fxn:self.input_layers_tensor_indices.append(tensor_index)";
    "Fxn:__init__" -> "Fxn:enumerate(self.input_layers):";
    "Fxn:__init__" -> "Fxn:isinstance(layer,";
    "Fxn:__init__" -> "Fxn:TypeError(";
    "Fxn:__init__" -> "Fxn:`{}`.'.format(inputs,";
    "Fxn:__init__" -> "Fxn:self.input_names.append(layer.name)";
    "Fxn:__init__" -> "Fxn:self._feed_input_names.append(layer.name)";
    "Fxn:__init__" -> "Fxn:self._feed_inputs.append(layer.input)";
    "Fxn:__init__" -> "Fxn:self._feed_input_shapes.append(self.inputs[i]._keras_shape)";
    "Fxn:__init__" -> "Fxn:self.output_names.append(layer.name)";
    "Fxn:__init__" -> "Fxn:set()";
    "Fxn:build_map_of_graph" -> "Fxn:RuntimeError(";
    "Fxn:build_map_of_graph" -> "Fxn:str(tensor)";
    "Fxn:build_map_of_graph" -> "Fxn:container_nodes.add(self._node_key(layer,";
    "Fxn:build_map_of_graph" -> "Fxn:len(layer_indices)";
    "Fxn:build_map_of_graph" -> "Fxn:nodes_in_progress.add(node)";
    "Fxn:build_map_of_graph" -> "Fxn:range(len(node.inbound_layers)):";
    "Fxn:build_map_of_graph" -> "Fxn:build_map_of_graph(x,";
    "Fxn:build_map_of_graph" -> "Fxn:finished_nodes.add(node)";
    "Fxn:build_map_of_graph" -> "Fxn:nodes_in_progress.remove(node)";
    "Fxn:build_map_of_graph" -> "Fxn:nodes_in_decreasing_depth.append(node)";
    "Fxn:build_map_of_graph" -> "Fxn:set()";
    "Fxn:build_map_of_graph" -> "Fxn:set()";
    "Fxn:build_map_of_graph" -> "Fxn:build_map_of_graph(x,";
    "Fxn:build_map_of_graph" -> "Fxn:reversed(nodes_in_decreasing_depth):";
    "Fxn:build_map_of_graph" -> "Fxn:nodes_depths.setdefault(node,";
    "Fxn:build_map_of_graph" -> "Fxn:layers_depths.get(node.outbound_layer,";
    "Fxn:build_map_of_graph" -> "Fxn:max(depth,";
    "Fxn:build_map_of_graph" -> "Fxn:range(len(node.inbound_layers)):";
    "Fxn:build_map_of_graph" -> "Fxn:nodes_depths.get(inbound_node,";
    "Fxn:build_map_of_graph" -> "Fxn:max(depth";
    "Fxn:build_map_of_graph" -> "Fxn:nodes_depths.items():";
    "Fxn:build_map_of_graph" -> "Fxn:nodes_by_depth[depth].append(node)";
    "Fxn:build_map_of_graph" -> "Fxn:layers_depths.items():";
    "Fxn:build_map_of_graph" -> "Fxn:layers_by_depth[depth].append(layer)";
    "Fxn:build_map_of_graph" -> "Fxn:list(layers_by_depth.keys())";
    "Fxn:build_map_of_graph" -> "Fxn:depth_keys.sort(reverse=True)";
    "Fxn:build_map_of_graph" -> "Fxn:layers_for_depth.sort(key=lambda";
    "Fxn:build_map_of_graph" -> "Fxn:layers.append(layer)";
    "Fxn:build_map_of_graph" -> "Fxn:list(nodes_by_depth.keys())";
    "Fxn:build_map_of_graph" -> "Fxn:depth_keys.sort(reverse=True)";
    "Fxn:build_map_of_graph" -> "Fxn:computable_tensors.append(x)";
    "Fxn:build_map_of_graph" -> "Fxn:RuntimeError(";
    "Fxn:build_map_of_graph" -> "Fxn:str(x)";
    "Fxn:build_map_of_graph" -> "Fxn:str(layers_with_complete_input))";
    "Fxn:build_map_of_graph" -> "Fxn:computable_tensors.append(x)";
    "Fxn:build_map_of_graph" -> "Fxn:layers_with_complete_input.append(layer.name)";
    "Fxn:build_map_of_graph" -> "Fxn:all_names.count(name)";
    "Fxn:build_map_of_graph" -> "Fxn:RuntimeError('The";
    "Fxn:build_map_of_graph" -> "Fxn:str(all_names.count(name))";
    "Fxn:build_map_of_graph" -> "Fxn:Node(outbound_layer=self,";
    "Fxn:get_layer" -> "Fxn:len(self.layers)";
    "Fxn:get_layer" -> "Fxn:ValueError('Was";
    "Fxn:get_layer" -> "Fxn:str(index)";
    "Fxn:get_layer" -> "Fxn:str(len(self.layers))";
    "Fxn:get_layer" -> "Fxn:ValueError('Provide";
    "Fxn:get_layer" -> "Fxn:ValueError('No";
    "Fxn:updates" -> "Fxn:hasattr(layer,";
    "Fxn:updates" -> "Fxn:enumerate(layer._inbound_nodes):";
    "Fxn:updates" -> "Fxn:self._node_key(layer,";
    "Fxn:updates" -> "Fxn:layer.get_updates_for(inputs)";
    "Fxn:updates" -> "Fxn:layer.get_updates_for(None)";
    "Fxn:losses" -> "Fxn:hasattr(layer,";
    "Fxn:losses" -> "Fxn:enumerate(layer._inbound_nodes):";
    "Fxn:losses" -> "Fxn:self._node_key(layer,";
    "Fxn:losses" -> "Fxn:layer.get_losses_for(inputs)";
    "Fxn:losses" -> "Fxn:layer.get_losses_for(None)";
    "Fxn:losses" -> "Fxn:self.get_losses_for(None)";
    "Fxn:losses" -> "Fxn:list(set(x";
    "Fxn:losses" -> "Fxn:isinstance(x,";
    "Fxn:losses" -> "Fxn:isinstance(x,";
    "Fxn:uses_learning_phase" -> "Fxn:any([x._uses_learning_phase";
    "Fxn:stateful" -> "Fxn:any([(hasattr(layer,";
    "Fxn:reset_states" -> "Fxn:hasattr(layer,";
    "Fxn:reset_states" -> "Fxn:getattr(layer,";
    "Fxn:reset_states" -> "Fxn:layer.reset_states()";
    "Fxn:get_weights" -> "Fxn:K.batch_get_value(weights)";
    "Fxn:set_weights" -> "Fxn:`model.get_weights()`.";
    "Fxn:set_weights" -> "Fxn:len(layer.weights)";
    "Fxn:set_weights" -> "Fxn:zip(layer.weights,";
    "Fxn:set_weights" -> "Fxn:tuples.append((sw,";
    "Fxn:set_weights" -> "Fxn:K.batch_set_value(tuples)";
    "Fxn:input_spec" -> "Fxn:getattr(self,";
    "Fxn:input_spec" -> "Fxn:specs.append(None)";
    "Fxn:input_spec" -> "Fxn:isinstance(layer.input_spec,";
    "Fxn:input_spec" -> "Fxn:TypeError('Layer";
    "Fxn:input_spec" -> "Fxn:str(layer.input_spec))";
    "Fxn:input_spec" -> "Fxn:len(specs)";
    "Fxn:call" -> "Fxn:_to_list(inputs)";
    "Fxn:call" -> "Fxn:range(len(inputs))]";
    "Fxn:call" -> "Fxn:_to_list(mask)";
    "Fxn:call" -> "Fxn:','.join([str(id(x))";
    "Fxn:call" -> "Fxn:','.join([str(id(x))";
    "Fxn:call" -> "Fxn:self.run_internal_graph(inputs,";
    "Fxn:compute_mask" -> "Fxn:_to_list(inputs)";
    "Fxn:compute_mask" -> "Fxn:range(len(inputs))]";
    "Fxn:compute_mask" -> "Fxn:_to_list(mask)";
    "Fxn:compute_mask" -> "Fxn:','.join([str(id(x))";
    "Fxn:compute_mask" -> "Fxn:','.join([str(id(x))";
    "Fxn:compute_mask" -> "Fxn:self.run_internal_graph(inputs,";
    "Fxn:compute_output_shape" -> "Fxn:_to_list(input_shape)";
    "Fxn:compute_output_shape" -> "Fxn:len(input_shapes)";
    "Fxn:compute_output_shape" -> "Fxn:len(self.input_layers):";
    "Fxn:compute_output_shape" -> "Fxn:ValueError('Invalid";
    "Fxn:compute_output_shape" -> "Fxn:str(input_shape)";
    "Fxn:compute_output_shape" -> "Fxn:str(len(self.input_layers))";
    "Fxn:compute_output_shape" -> "Fxn:','.join([str(x)";
    "Fxn:compute_output_shape" -> "Fxn:isinstance(output_shapes,";
    "Fxn:compute_output_shape" -> "Fxn:len(output_shapes)";
    "Fxn:compute_output_shape" -> "Fxn:range(len(input_shapes)):";
    "Fxn:compute_output_shape" -> "Fxn:list(self._nodes_by_depth.keys())";
    "Fxn:compute_output_shape" -> "Fxn:depth_keys.sort(reverse=True)";
    "Fxn:compute_output_shape" -> "Fxn:len(depth_keys)";
    "Fxn:compute_output_shape" -> "Fxn:range(len(node.inbound_layers)):";
    "Fxn:compute_output_shape" -> "Fxn:input_shapes.append(input_shape)";
    "Fxn:compute_output_shape" -> "Fxn:len(input_shapes)";
    "Fxn:compute_output_shape" -> "Fxn:layer.compute_output_shape(input_shapes[0])";
    "Fxn:compute_output_shape" -> "Fxn:layer.compute_output_shape(input_shapes)";
    "Fxn:compute_output_shape" -> "Fxn:_to_list(output_shape)";
    "Fxn:compute_output_shape" -> "Fxn:layer._inbound_nodes.index(node)";
    "Fxn:compute_output_shape" -> "Fxn:range(len(output_shapes)):";
    "Fxn:compute_output_shape" -> "Fxn:range(len(self.output_layers)):";
    "Fxn:compute_output_shape" -> "Fxn:output_shape_keys.append(shape_key)";
    "Fxn:compute_output_shape" -> "Fxn:enumerate(output_shape_keys):";
    "Fxn:compute_output_shape" -> "Fxn:output_shapes.append(layers_to_output_shapes[key])";
    "Fxn:compute_output_shape" -> "Fxn:isinstance(output_shapes,";
    "Fxn:compute_output_shape" -> "Fxn:len(output_shapes)";
    "Fxn:run_internal_graph" -> "Fxn:range(len(inputs))]";
    "Fxn:run_internal_graph" -> "Fxn:`.compute_mask()`";
    "Fxn:run_internal_graph" -> "Fxn:zip(self.inputs,";
    "Fxn:run_internal_graph" -> "Fxn:tensor_map[str(id(x))]";
    "Fxn:run_internal_graph" -> "Fxn:list(self._nodes_by_depth.keys())";
    "Fxn:run_internal_graph" -> "Fxn:depth_keys.sort(reverse=True)";
    "Fxn:run_internal_graph" -> "Fxn:str(id(x))";
    "Fxn:run_internal_graph" -> "Fxn:computed_data.append(tensor_map[str(id(x))])";
    "Fxn:run_internal_graph" -> "Fxn:len(computed_data)";
    "Fxn:run_internal_graph" -> "Fxn:len(reference_input_tensors):";
    "Fxn:run_internal_graph" -> "Fxn:K.name_scope(layer.name):";
    "Fxn:run_internal_graph" -> "Fxn:len(computed_data)";
    "Fxn:run_internal_graph" -> "Fxn:has_arg(layer.call,";
    "Fxn:run_internal_graph" -> "Fxn:_to_list(layer.call(computed_tensor,";
    "Fxn:run_internal_graph" -> "Fxn:layer.compute_mask(computed_tensor,";
    "Fxn:run_internal_graph" -> "Fxn:_to_list(output_masks)";
    "Fxn:run_internal_graph" -> "Fxn:has_arg(layer.call,";
    "Fxn:run_internal_graph" -> "Fxn:_to_list(layer.call(computed_tensors,";
    "Fxn:run_internal_graph" -> "Fxn:layer.compute_mask(computed_tensors,";
    "Fxn:run_internal_graph" -> "Fxn:_to_list(output_masks)";
    "Fxn:run_internal_graph" -> "Fxn:hasattr(layer,";
    "Fxn:run_internal_graph" -> "Fxn:[layer.activity_regularizer(x)";
    "Fxn:run_internal_graph" -> "Fxn:layer.add_loss(regularization_losses,";
    "Fxn:run_internal_graph" -> "Fxn:len(output_masks)";
    "Fxn:run_internal_graph" -> "Fxn:len(output_tensors):";
    "Fxn:run_internal_graph" -> "Fxn:Exception('Layers";
    "Fxn:run_internal_graph" -> "Fxn:str(layer.name)";
    "Fxn:run_internal_graph" -> "Fxn:str(len(output_tensors))";
    "Fxn:run_internal_graph" -> "Fxn:str(len(output_masks))";
    "Fxn:run_internal_graph" -> "Fxn:self.add_update(layer.get_updates_for(computed_tensors),";
    "Fxn:run_internal_graph" -> "Fxn:self.add_update(layer.get_updates_for(None),";
    "Fxn:run_internal_graph" -> "Fxn:self.add_loss(layer.get_losses_for(computed_tensors),";
    "Fxn:run_internal_graph" -> "Fxn:self.add_loss(layer.get_losses_for(None),";
    "Fxn:run_internal_graph" -> "Fxn:all([hasattr(x,";
    "Fxn:run_internal_graph" -> "Fxn:len(computed_tensors)";
    "Fxn:run_internal_graph" -> "Fxn:_to_list(layer.compute_output_shape(computed_tensors[0]._keras_shape))";
    "Fxn:run_internal_graph" -> "Fxn:_to_list(layer.compute_output_shape([x._keras_shape";
    "Fxn:run_internal_graph" -> "Fxn:any([x._uses_learning_phase";
    "Fxn:run_internal_graph" -> "Fxn:zip(output_tensors,";
    "Fxn:run_internal_graph" -> "Fxn:getattr(x,";
    "Fxn:run_internal_graph" -> "Fxn:zip(reference_output_tensors,";
    "Fxn:run_internal_graph" -> "Fxn:tensor_map[str(id(x))]";
    "Fxn:run_internal_graph" -> "Fxn:str(id(x))";
    "Fxn:run_internal_graph" -> "Fxn:str(x)";
    "Fxn:run_internal_graph" -> "Fxn:tensor_map[str(id(x))]";
    "Fxn:run_internal_graph" -> "Fxn:hasattr(tensor,";
    "Fxn:run_internal_graph" -> "Fxn:output_shapes.append(shape)";
    "Fxn:run_internal_graph" -> "Fxn:output_tensors.append(tensor)";
    "Fxn:run_internal_graph" -> "Fxn:output_masks.append(mask)";
    "Fxn:run_internal_graph" -> "Fxn:','.join([str(id(x))";
    "Fxn:run_internal_graph" -> "Fxn:','.join([str(id(x))";
    "Fxn:run_internal_graph" -> "Fxn:len(output_tensors)";
    "Fxn:run_internal_graph" -> "Fxn:len(output_masks)";
    "Fxn:run_internal_graph" -> "Fxn:','.join([str(x)";
    "Fxn:run_internal_graph" -> "Fxn:len(output_shapes)";
    "Fxn:get_config" -> "Fxn:issubclass(layer.__class__,";
    "Fxn:get_config" -> "Fxn:enumerate(layer._inbound_nodes):";
    "Fxn:get_config" -> "Fxn:self._node_key(layer,";
    "Fxn:get_config" -> "Fxn:layer.get_config()";
    "Fxn:get_config" -> "Fxn:enumerate(layer._inbound_nodes):";
    "Fxn:get_config" -> "Fxn:self._node_key(layer,";
    "Fxn:get_config" -> "Fxn:json.dumps(node.arguments)";
    "Fxn:get_config" -> "Fxn:warnings.warn(";
    "Fxn:get_config" -> "Fxn:str(node.arguments)";
    "Fxn:get_config" -> "Fxn:range(len(node.inbound_layers)):";
    "Fxn:get_config" -> "Fxn:node_conversion_map.get(";
    "Fxn:get_config" -> "Fxn:self._node_key(inbound_layer,";
    "Fxn:get_config" -> "Fxn:node_data.append([inbound_layer.name,";
    "Fxn:get_config" -> "Fxn:filtered_inbound_nodes.append(node_data)";
    "Fxn:get_config" -> "Fxn:layer_configs.append({";
    "Fxn:get_config" -> "Fxn:range(len(self.input_layers)):";
    "Fxn:get_config" -> "Fxn:self._node_key(layer,";
    "Fxn:get_config" -> "Fxn:model_inputs.append([layer.name,";
    "Fxn:get_config" -> "Fxn:range(len(self.output_layers)):";
    "Fxn:get_config" -> "Fxn:self._node_key(layer,";
    "Fxn:get_config" -> "Fxn:model_outputs.append([layer.name,";
    "Fxn:get_config" -> "Fxn:copy.deepcopy(config)";
    "Fxn:from_config" -> "Fxn:`get_config()`).";
    "Fxn:add_unprocessed_node" -> "Fxn:unprocessed_nodes[layer].append(node_data)";
    "Fxn:process_node" -> "Fxn:len(input_data)";
    "Fxn:process_node" -> "Fxn:len(input_data)";
    "Fxn:process_node" -> "Fxn:ValueError('Improperly";
    "Fxn:process_node" -> "Fxn:add_unprocessed_node(layer,";
    "Fxn:process_node" -> "Fxn:len(inbound_layer._inbound_nodes)";
    "Fxn:process_node" -> "Fxn:add_unprocessed_node(layer,";
    "Fxn:process_node" -> "Fxn:input_tensors.append(inbound_node.output_tensors[inbound_tensor_index])";
    "Fxn:process_node" -> "Fxn:len(input_tensors)";
    "Fxn:process_node" -> "Fxn:layer(input_tensors[0],";
    "Fxn:process_node" -> "Fxn:layer(input_tensors,";
    "Fxn:process_layer" -> "Fxn:deserialize_layer(layer_data,";
    "Fxn:process_layer" -> "Fxn:A(B(A(B(x)))))";
    "Fxn:process_layer" -> "Fxn:add_unprocessed_node(layer,";
    "Fxn:process_layer" -> "Fxn:process_layer(layer_data)";
    "Fxn:process_layer" -> "Fxn:unprocessed_nodes.pop(layer):";
    "Fxn:process_layer" -> "Fxn:process_node(layer,";
    "Fxn:process_layer" -> "Fxn:config.get('name')";
    "Fxn:process_layer" -> "Fxn:input_tensors.append(layer_output_tensors[tensor_index])";
    "Fxn:process_layer" -> "Fxn:output_tensors.append(layer_output_tensors[tensor_index])";
    "Fxn:process_layer" -> "Fxn:cls(inputs=input_tensors,";
    "Fxn:save" -> "Fxn:model.save('my_model.h5')";
    "Fxn:save" -> "Fxn:load_model('my_model.h5')";
    "Fxn:save" -> "Fxn:save_model(self,";
    "Fxn:save_weights" -> "Fxn:ImportError('`save_weights`";
    "Fxn:save_weights" -> "Fxn:os.path.isfile(filepath):";
    "Fxn:save_weights" -> "Fxn:ask_to_proceed_with_overwrite(filepath)";
    "Fxn:save_weights" -> "Fxn:h5py.File(filepath,";
    "Fxn:save_weights" -> "Fxn:save_weights_to_hdf5_group(f,";
    "Fxn:save_weights" -> "Fxn:f.flush()";
    "Fxn:load_weights" -> "Fxn:ImportError('`load_weights`";
    "Fxn:load_weights" -> "Fxn:h5py.File(filepath,";
    "Fxn:load_weights" -> "Fxn:load_weights_from_hdf5_group_by_name(";
    "Fxn:load_weights" -> "Fxn:load_weights_from_hdf5_group(";
    "Fxn:_updated_config" -> "Fxn:self.get_config()";
    "Fxn:_updated_config" -> "Fxn:K.backend()";
    "Fxn:to_json" -> "Fxn:`keras.models.model_from_json(json_string,";
    "Fxn:to_json" -> "Fxn:`json.dumps()`.";
    "Fxn:get_json_type" -> "Fxn:type(obj).__module__";
    "Fxn:get_json_type" -> "Fxn:obj.item()";
    "Fxn:get_json_type" -> "Fxn:type(obj).__name__";
    "Fxn:get_json_type" -> "Fxn:TypeError('Not";
    "Fxn:get_json_type" -> "Fxn:self._updated_config()";
    "Fxn:get_json_type" -> "Fxn:json.dumps(model_config,";
    "Fxn:to_yaml" -> "Fxn:`keras.models.model_from_yaml(yaml_string,";
    "Fxn:to_yaml" -> "Fxn:`yaml.dump()`.";
    "Fxn:to_yaml" -> "Fxn:yaml.dump(self._updated_config(),";
    "Fxn:summary" -> "Fxn:print_layer_summary(self,";
    "Fxn:get_source_inputs" -> "Fxn:hasattr(tensor,";
    "Fxn:get_source_inputs" -> "Fxn:range(len(node.inbound_layers)):";
    "Fxn:get_source_inputs" -> "Fxn:get_source_inputs(x,";
    "Fxn:get_source_inputs" -> "Fxn:source_tensors.append(x)";
    "Fxn:_to_list" -> "Fxn:isinstance(x,";
    "Fxn:_object_list_uid" -> "Fxn:_to_list(object_list)";
    "Fxn:_object_list_uid" -> "Fxn:'.join([str(abs(id(x)))";
    "Fxn:_is_all_none" -> "Fxn:isinstance(iterable_or_element,";
    "Fxn:_collect_previous_mask" -> "Fxn:mask(s)";
    "Fxn:_collect_previous_mask" -> "Fxn:_to_list(input_tensors)";
    "Fxn:_collect_previous_mask" -> "Fxn:hasattr(x,";
    "Fxn:_collect_previous_mask" -> "Fxn:masks.append(mask)";
    "Fxn:_collect_previous_mask" -> "Fxn:masks.append(None)";
    "Fxn:_collect_previous_mask" -> "Fxn:len(masks)";
    "Fxn:_to_snake_case" -> "Fxn:re.sub('(.)([A-Z][a-z0-9]+)',";
    "Fxn:_to_snake_case" -> "Fxn:re.sub('([a-z])([A-Z])',";
    "Fxn:_to_snake_case" -> "Fxn:intermediate).lower()";
    "Fxn:_collect_input_shape" -> "Fxn:shape(s)";
    "Fxn:_collect_input_shape" -> "Fxn:_to_list(input_tensors)";
    "Fxn:_collect_input_shape" -> "Fxn:shapes.append(K.int_shape(x))";
    "Fxn:_collect_input_shape" -> "Fxn:shapes.append(None)";
    "Fxn:_collect_input_shape" -> "Fxn:len(shapes)";
    "Fxn:_save_attributes_to_hdf5_group" -> "Fxn:len(x)";
    "Fxn:_save_attributes_to_hdf5_group" -> "Fxn:len(bad_attributes)";
    "Fxn:_save_attributes_to_hdf5_group" -> "Fxn:RuntimeError('The";
    "Fxn:_save_attributes_to_hdf5_group" -> "Fxn:'.join([x";
    "Fxn:_save_attributes_to_hdf5_group" -> "Fxn:np.asarray(data)";
    "Fxn:_save_attributes_to_hdf5_group" -> "Fxn:np.array_split(data_npy,";
    "Fxn:_save_attributes_to_hdf5_group" -> "Fxn:any(map(lambda";
    "Fxn:_save_attributes_to_hdf5_group" -> "Fxn:np.array_split(data_npy,";
    "Fxn:_save_attributes_to_hdf5_group" -> "Fxn:enumerate(chunked_data):";
    "Fxn:_load_attributes_from_hdf5_group" -> "Fxn:[n.decode('utf8')";
    "Fxn:_load_attributes_from_hdf5_group" -> "Fxn:data.extend([n.decode('utf8')";
    "Fxn:save_weights_to_hdf5_group" -> "Fxn:_save_attributes_to_hdf5_group(";
    "Fxn:save_weights_to_hdf5_group" -> "Fxn:[layer.name.encode('utf8')";
    "Fxn:save_weights_to_hdf5_group" -> "Fxn:K.backend().encode('utf8')";
    "Fxn:save_weights_to_hdf5_group" -> "Fxn:str(keras_version).encode('utf8')";
    "Fxn:save_weights_to_hdf5_group" -> "Fxn:f.create_group(layer.name)";
    "Fxn:save_weights_to_hdf5_group" -> "Fxn:K.batch_get_value(symbolic_weights)";
    "Fxn:save_weights_to_hdf5_group" -> "Fxn:enumerate(zip(symbolic_weights,";
    "Fxn:save_weights_to_hdf5_group" -> "Fxn:hasattr(w,";
    "Fxn:save_weights_to_hdf5_group" -> "Fxn:str(w.name)";
    "Fxn:save_weights_to_hdf5_group" -> "Fxn:str(i)";
    "Fxn:save_weights_to_hdf5_group" -> "Fxn:weight_names.append(name.encode('utf8'))";
    "Fxn:save_weights_to_hdf5_group" -> "Fxn:_save_attributes_to_hdf5_group(g,";
    "Fxn:save_weights_to_hdf5_group" -> "Fxn:zip(weight_names,";
    "Fxn:save_weights_to_hdf5_group" -> "Fxn:g.create_dataset(name,";
    "Fxn:save_weights_to_hdf5_group" -> "Fxn:param_dset[()]";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:len(weights)";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:preprocess_weights_for_loading(layer.forward_layer,";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:preprocess_weights_for_loading(layer.backward_layer,";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:preprocess_weights_for_loading(layer.layer,";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:np.transpose(weights[0],";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:np.transpose(weights[0],";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:np.transpose(weights[0],";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:np.transpose(weights[0],";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:np.transpose(weights[0],";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:len(weights)";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:np.concatenate([weights[0],";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:np.concatenate([weights[1],";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:np.concatenate([weights[2],";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:len(weights)";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:np.concatenate([weights[0],";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:np.concatenate([weights[1],";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:np.concatenate([weights[2],";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:len(weights)";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:np.concatenate([weights[0],";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:np.concatenate([weights[1],";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:np.concatenate([weights[2],";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:np.transpose(kernel,";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:np.transpose(recurrent_kernel,";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:len(sublayer.trainable_weights)";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:new_weights.extend(preprocess_weights_for_loading(";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:len([l";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:new_weights.extend(preprocess_weights_for_loading(";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:K.int_shape(layer.weights[0])";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:_need_convert_kernel(original_backend):";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:conv_utils.convert_kernel(weights[0])";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:conv_utils.convert_kernel(weights[1])";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:np.prod(layer_weights_shape):";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:ValueError('Weights";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:str(layer_weights_shape)";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:str(np.prod(layer_weights_shape))";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:str(weights[0].shape)";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:str(weights[0].size)";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:np.reshape(weights[0],";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:np.transpose(weights[0],";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:np.transpose(weights[1],";
    "Fxn:preprocess_weights_for_loading" -> "Fxn:_convert_rnn_weights(layer,";
    "Fxn:_convert_rnn_weights" -> "Fxn:`GRU(reset_after=True)`.";
    "Fxn:transform_kernels" -> "Fxn:np.hstack([func(k)";
    "Fxn:transform_kernels" -> "Fxn:np.hsplit(kernels,";
    "Fxn:transpose_input" -> "Fxn:`transform_kernels()`.";
    "Fxn:transform" -> "Fxn:kernel.T.reshape(kernel.shape,";
    "Fxn:transform" -> "Fxn:len(weights)";
    "Fxn:transform" -> "Fxn:ValueError('Invalid";
    "Fxn:transform" -> "Fxn:str(bias_shape))";
    "Fxn:convert_weights" -> "Fxn:transform_kernels(weights[0],";
    "Fxn:convert_weights" -> "Fxn:transpose_input(from_cudnn),";
    "Fxn:convert_weights" -> "Fxn:transform_kernels(weights[1],";
    "Fxn:convert_weights" -> "Fxn:np.sum(np.split(weights[2],";
    "Fxn:convert_weights" -> "Fxn:np.tile(0.5";
    "Fxn:convert_weights" -> "Fxn:convert_weights(weights,";
    "Fxn:convert_weights" -> "Fxn:GRU(reset_after=True)";
    "Fxn:convert_weights" -> "Fxn:len(weights)";
    "Fxn:convert_weights" -> "Fxn:transform_kernels(weights[0],";
    "Fxn:convert_weights" -> "Fxn:transpose_input(from_cudnn),";
    "Fxn:convert_weights" -> "Fxn:transform_kernels(weights[1],";
    "Fxn:convert_weights" -> "Fxn:weights[2].reshape((2,";
    "Fxn:convert_weights" -> "Fxn:'GRU(reset_after=True)'";
    "Fxn:convert_weights" -> "Fxn:'GRU(reset_after=False)'";
    "Fxn:convert_weights" -> "Fxn:ValueError('Invalid";
    "Fxn:convert_weights" -> "Fxn:str(bias_shape))";
    "Fxn:convert_weights" -> "Fxn:'GRU(reset_after=True)'";
    "Fxn:convert_weights" -> "Fxn:'GRU(reset_after=False)'";
    "Fxn:convert_weights" -> "Fxn:'GRU(reset_after=False)'";
    "Fxn:convert_weights" -> "Fxn:ValueError('%s";
    "Fxn:convert_weights" -> "Fxn:convert_weights(weights,";
    "Fxn:convert_weights" -> "Fxn:'GRU(reset_after=True)':";
    "Fxn:convert_weights" -> "Fxn:convert_weights(weights,";
    "Fxn:_need_convert_kernel" -> "Fxn:uses_correlation[K.backend()]";
    "Fxn:load_weights_from_hdf5_group" -> "Fxn:f.attrs['keras_version'].decode('utf8')";
    "Fxn:load_weights_from_hdf5_group" -> "Fxn:f.attrs['backend'].decode('utf8')";
    "Fxn:load_weights_from_hdf5_group" -> "Fxn:filtered_layers.append(layer)";
    "Fxn:load_weights_from_hdf5_group" -> "Fxn:_load_attributes_from_hdf5_group(f,";
    "Fxn:load_weights_from_hdf5_group" -> "Fxn:_load_attributes_from_hdf5_group(g,";
    "Fxn:load_weights_from_hdf5_group" -> "Fxn:filtered_layer_names.append(name)";
    "Fxn:load_weights_from_hdf5_group" -> "Fxn:len(layer_names)";
    "Fxn:load_weights_from_hdf5_group" -> "Fxn:len(filtered_layers):";
    "Fxn:load_weights_from_hdf5_group" -> "Fxn:ValueError('You";
    "Fxn:load_weights_from_hdf5_group" -> "Fxn:str(len(layer_names))";
    "Fxn:load_weights_from_hdf5_group" -> "Fxn:str(len(filtered_layers))";
    "Fxn:load_weights_from_hdf5_group" -> "Fxn:enumerate(layer_names):";
    "Fxn:load_weights_from_hdf5_group" -> "Fxn:_load_attributes_from_hdf5_group(g,";
    "Fxn:load_weights_from_hdf5_group" -> "Fxn:preprocess_weights_for_loading(layer,";
    "Fxn:load_weights_from_hdf5_group" -> "Fxn:len(weight_values)";
    "Fxn:load_weights_from_hdf5_group" -> "Fxn:len(symbolic_weights):";
    "Fxn:load_weights_from_hdf5_group" -> "Fxn:ValueError('Layer";
    "Fxn:load_weights_from_hdf5_group" -> "Fxn:str(k)";
    "Fxn:load_weights_from_hdf5_group" -> "Fxn:str(len(symbolic_weights))";
    "Fxn:load_weights_from_hdf5_group" -> "Fxn:str(len(weight_values))";
    "Fxn:load_weights_from_hdf5_group" -> "Fxn:zip(symbolic_weights,";
    "Fxn:load_weights_from_hdf5_group" -> "Fxn:K.batch_set_value(weight_value_tuples)";
    "Fxn:load_weights_from_hdf5_group_by_name" -> "Fxn:f.attrs['keras_version'].decode('utf8')";
    "Fxn:load_weights_from_hdf5_group_by_name" -> "Fxn:f.attrs['backend'].decode('utf8')";
    "Fxn:load_weights_from_hdf5_group_by_name" -> "Fxn:_load_attributes_from_hdf5_group(f,";
    "Fxn:load_weights_from_hdf5_group_by_name" -> "Fxn:index.setdefault(layer.name,";
    "Fxn:load_weights_from_hdf5_group_by_name" -> "Fxn:[]).append(layer)";
    "Fxn:load_weights_from_hdf5_group_by_name" -> "Fxn:enumerate(layer_names):";
    "Fxn:load_weights_from_hdf5_group_by_name" -> "Fxn:_load_attributes_from_hdf5_group(g,";
    "Fxn:load_weights_from_hdf5_group_by_name" -> "Fxn:index.get(name,";
    "Fxn:load_weights_from_hdf5_group_by_name" -> "Fxn:preprocess_weights_for_loading(";
    "Fxn:load_weights_from_hdf5_group_by_name" -> "Fxn:len(weight_values)";
    "Fxn:load_weights_from_hdf5_group_by_name" -> "Fxn:len(symbolic_weights):";
    "Fxn:load_weights_from_hdf5_group_by_name" -> "Fxn:warnings.warn('Skipping";
    "Fxn:load_weights_from_hdf5_group_by_name" -> "Fxn:{}'.format(layer.name)";
    "Fxn:load_weights_from_hdf5_group_by_name" -> "Fxn:{}).'.format(len(symbolic_weights),";
    "Fxn:load_weights_from_hdf5_group_by_name" -> "Fxn:len(weight_values)))";
    "Fxn:load_weights_from_hdf5_group_by_name" -> "Fxn:ValueError('Layer";
    "Fxn:load_weights_from_hdf5_group_by_name" -> "Fxn:str(k)";
    "Fxn:load_weights_from_hdf5_group_by_name" -> "Fxn:str(len(symbolic_weights))";
    "Fxn:load_weights_from_hdf5_group_by_name" -> "Fxn:weight(s),";
    "Fxn:load_weights_from_hdf5_group_by_name" -> "Fxn:str(len(weight_values))";
    "Fxn:load_weights_from_hdf5_group_by_name" -> "Fxn:element(s).')";
    "Fxn:load_weights_from_hdf5_group_by_name" -> "Fxn:range(len(weight_values)):";
    "Fxn:load_weights_from_hdf5_group_by_name" -> "Fxn:K.int_shape(symbolic_weights[i])";
    "Fxn:load_weights_from_hdf5_group_by_name" -> "Fxn:warnings.warn('Skipping";
    "Fxn:load_weights_from_hdf5_group_by_name" -> "Fxn:{}'.format(layer.name)";
    "Fxn:load_weights_from_hdf5_group_by_name" -> "Fxn:{}).'.format(";
    "Fxn:load_weights_from_hdf5_group_by_name" -> "Fxn:weight_value_tuples.append((symbolic_weights[i],";
    "Fxn:load_weights_from_hdf5_group_by_name" -> "Fxn:K.batch_set_value(weight_value_tuples)";
    "/keras/engine/training.py" -> "Import:absolute_import";
    "/keras/engine/training.py" -> "Import:division";
    "/keras/engine/training.py" -> "Import:print_function";
    "/keras/engine/training.py" -> "Import:warnings";
    "/keras/engine/training.py" -> "Import:copy";
    "/keras/engine/training.py" -> "Import:numpy";
    "/keras/engine/training.py" -> "Import:issparse";
    "/keras/engine/training.py" -> "Import:Container";
    "/keras/engine/training.py" -> "Import:Layer";
    "/keras/engine/training.py" -> "Import:backend";
    "/keras/engine/training.py" -> "Import:optimizers";
    "/keras/engine/training.py" -> "Import:losses";
    "/keras/engine/training.py" -> "Import:metrics";
    "/keras/engine/training.py" -> "Import:Sequence";
    "/keras/engine/training.py" -> "Import:GeneratorEnqueuer";
    "/keras/engine/training.py" -> "Import:OrderedEnqueuer";
    "/keras/engine/training.py" -> "Import:Progbar";
    "/keras/engine/training.py" -> "Import:callbacks";
    "/keras/engine/training.py" -> "Import:interfaces";
    "/keras/engine/training.py" -> "Fxn:_standardize_input_data";
    "/keras/engine/training.py" -> "Fxn:_standardize_sample_or_class_weights";
    "/keras/engine/training.py" -> "Fxn:_standardize_class_weights";
    "/keras/engine/training.py" -> "Fxn:_standardize_sample_weights";
    "/keras/engine/training.py" -> "Fxn:_check_array_lengths";
    "/keras/engine/training.py" -> "Fxn:set_of_lengths";
    "/keras/engine/training.py" -> "Fxn:_check_loss_and_target_compatibility";
    "/keras/engine/training.py" -> "Import:to_categorical\n'";
    "/keras/engine/training.py" -> "Fxn:_collect_metrics";
    "/keras/engine/training.py" -> "Fxn:_batch_shuffle";
    "/keras/engine/training.py" -> "Fxn:_make_batches";
    "/keras/engine/training.py" -> "Fxn:_slice_arrays";
    "/keras/engine/training.py" -> "Fxn:_weighted_masked_objective";
    "/keras/engine/training.py" -> "Fxn:weighted";
    "/keras/engine/training.py" -> "Fxn:_standardize_weights";
    "/keras/engine/training.py" -> "class:Model(Container):";
    "class:Model(Container):" -> "Fxn:compile";
    "class:Model(Container):" -> "Fxn:handle_metrics";
    "class:Model(Container):" -> "Fxn:_check_trainable_weights_consistency";
    "class:Model(Container):" -> "Fxn:_make_train_function";
    "class:Model(Container):" -> "Fxn:_make_test_function";
    "class:Model(Container):" -> "Fxn:_make_predict_function";
    "class:Model(Container):" -> "Fxn:_check_num_samples";
    "class:Model(Container):" -> "Fxn:_fit_loop";
    "class:Model(Container):" -> "Fxn:_predict_loop";
    "class:Model(Container):" -> "Fxn:_test_loop";
    "class:Model(Container):" -> "Fxn:_standardize_user_data";
    "class:Model(Container):" -> "Fxn:fit";
    "class:Model(Container):" -> "Fxn:evaluate";
    "class:Model(Container):" -> "Fxn:predict";
    "class:Model(Container):" -> "Fxn:train_on_batch";
    "class:Model(Container):" -> "Fxn:test_on_batch";
    "class:Model(Container):" -> "Fxn:predict_on_batch";
    "class:Model(Container):" -> "Fxn:fit_generator";
    "class:Model(Container):" -> "Fxn:generate_arrays_from_file";
    "class:Model(Container):" -> "Fxn:evaluate_generator";
    "class:Model(Container):" -> "Fxn:predict_generator";
    "Fxn:compile" -> "Fxn:[optimizers](/optimizers).";
    "Fxn:compile" -> "Fxn:[losses](/losses).";
    "Fxn:compile" -> "Fxn:optimizers.get(optimizer)";
    "Fxn:compile" -> "Fxn:isinstance(loss,";
    "Fxn:compile" -> "Fxn:ValueError('Unknown";
    "Fxn:compile" -> "Fxn:str(self.output_names))";
    "Fxn:compile" -> "Fxn:warnings.warn('Output";
    "Fxn:compile" -> "Fxn:loss_functions.append(losses.get(loss.get(name)))";
    "Fxn:compile" -> "Fxn:isinstance(loss,";
    "Fxn:compile" -> "Fxn:len(loss)";
    "Fxn:compile" -> "Fxn:len(self.outputs):";
    "Fxn:compile" -> "Fxn:ValueError('When";
    "Fxn:compile" -> "Fxn:str(len(self.outputs))";
    "Fxn:compile" -> "Fxn:str(loss))";
    "Fxn:compile" -> "Fxn:[losses.get(l)";
    "Fxn:compile" -> "Fxn:losses.get(loss)";
    "Fxn:compile" -> "Fxn:range(len(self.outputs))]";
    "Fxn:compile" -> "Fxn:[_weighted_masked_objective(fn)";
    "Fxn:compile" -> "Fxn:range(len(weighted_losses)):";
    "Fxn:compile" -> "Fxn:skip_target_indices.append(i)";
    "Fxn:compile" -> "Fxn:skip_target_weighing_indices.append(i)";
    "Fxn:compile" -> "Fxn:self.compute_mask(self.inputs,";
    "Fxn:compile" -> "Fxn:isinstance(masks,";
    "Fxn:compile" -> "Fxn:range(len(self.outputs))]";
    "Fxn:compile" -> "Fxn:isinstance(loss_weights,";
    "Fxn:compile" -> "Fxn:ValueError('Unknown";
    "Fxn:compile" -> "Fxn:str(self.output_names))";
    "Fxn:compile" -> "Fxn:loss_weights_list.append(loss_weights.get(name,";
    "Fxn:compile" -> "Fxn:isinstance(loss_weights,";
    "Fxn:compile" -> "Fxn:len(loss_weights)";
    "Fxn:compile" -> "Fxn:len(self.outputs):";
    "Fxn:compile" -> "Fxn:ValueError('When";
    "Fxn:compile" -> "Fxn:str(len(self.outputs))";
    "Fxn:compile" -> "Fxn:str(loss_weights))";
    "Fxn:compile" -> "Fxn:TypeError('Could";
    "Fxn:compile" -> "Fxn:str(loss_weights)";
    "Fxn:compile" -> "Fxn:isinstance(target_tensors,";
    "Fxn:compile" -> "Fxn:len(target_tensors)";
    "Fxn:compile" -> "Fxn:len(self.outputs):";
    "Fxn:compile" -> "Fxn:ValueError(";
    "Fxn:compile" -> "Fxn:str(len(self.outputs))";
    "Fxn:compile" -> "Fxn:str(target_tensors))";
    "Fxn:compile" -> "Fxn:isinstance(target_tensors,";
    "Fxn:compile" -> "Fxn:ValueError('Unknown";
    "Fxn:compile" -> "Fxn:str(self.output_names))";
    "Fxn:compile" -> "Fxn:tmp_target_tensors.append(target_tensors.get(name,";
    "Fxn:compile" -> "Fxn:TypeError('Expected";
    "Fxn:compile" -> "Fxn:range(len(self.outputs)):";
    "Fxn:compile" -> "Fxn:self.targets.append(None)";
    "Fxn:compile" -> "Fxn:K.is_placeholder(target):";
    "Fxn:compile" -> "Fxn:K.placeholder(ndim=len(shape),";
    "Fxn:compile" -> "Fxn:sparse=K.is_sparse(self.outputs[i]),";
    "Fxn:compile" -> "Fxn:dtype=K.dtype(self.outputs[i]))";
    "Fxn:compile" -> "Fxn:self._feed_targets.append(target)";
    "Fxn:compile" -> "Fxn:self._feed_outputs.append(self.outputs[i])";
    "Fxn:compile" -> "Fxn:self._feed_output_names.append(name)";
    "Fxn:compile" -> "Fxn:self._feed_output_shapes.append(shape)";
    "Fxn:compile" -> "Fxn:self._feed_loss_fns.append(self.loss_functions[i])";
    "Fxn:compile" -> "Fxn:skip_target_weighing_indices.append(i)";
    "Fxn:compile" -> "Fxn:self.targets.append(target)";
    "Fxn:compile" -> "Fxn:isinstance(sample_weight_mode,";
    "Fxn:compile" -> "Fxn:ValueError('Unknown";
    "Fxn:compile" -> "Fxn:str(self.output_names))";
    "Fxn:compile" -> "Fxn:enumerate(self.output_names):";
    "Fxn:compile" -> "Fxn:sample_weight_modes.append(None)";
    "Fxn:compile" -> "Fxn:ValueError('Output";
    "Fxn:compile" -> "Fxn:sample_weight_mode.get(name)";
    "Fxn:compile" -> "Fxn:K.placeholder(ndim=2,";
    "Fxn:compile" -> "Fxn:sample_weight_modes.append('temporal')";
    "Fxn:compile" -> "Fxn:K.placeholder(ndim=1,";
    "Fxn:compile" -> "Fxn:sample_weight_modes.append(None)";
    "Fxn:compile" -> "Fxn:sample_weights.append(weight)";
    "Fxn:compile" -> "Fxn:isinstance(sample_weight_mode,";
    "Fxn:compile" -> "Fxn:len(sample_weight_mode)";
    "Fxn:compile" -> "Fxn:len(self.outputs):";
    "Fxn:compile" -> "Fxn:ValueError('When";
    "Fxn:compile" -> "Fxn:str(len(self.outputs))";
    "Fxn:compile" -> "Fxn:str(sample_weight_mode))";
    "Fxn:compile" -> "Fxn:range(len(self.output_names)):";
    "Fxn:compile" -> "Fxn:sample_weight_modes.append(None)";
    "Fxn:compile" -> "Fxn:K.placeholder(ndim=2,";
    "Fxn:compile" -> "Fxn:sample_weight_modes.append('temporal')";
    "Fxn:compile" -> "Fxn:K.placeholder(ndim=1,";
    "Fxn:compile" -> "Fxn:sample_weight_modes.append(None)";
    "Fxn:compile" -> "Fxn:sample_weights.append(weight)";
    "Fxn:compile" -> "Fxn:enumerate(self.output_names):";
    "Fxn:compile" -> "Fxn:sample_weight_modes.append(None)";
    "Fxn:compile" -> "Fxn:sample_weights.append(None)";
    "Fxn:compile" -> "Fxn:sample_weights.append(";
    "Fxn:compile" -> "Fxn:K.placeholder(ndim=2,";
    "Fxn:compile" -> "Fxn:sample_weight_modes.append('temporal')";
    "Fxn:compile" -> "Fxn:sample_weights.append(";
    "Fxn:compile" -> "Fxn:K.placeholder(ndim=1,";
    "Fxn:compile" -> "Fxn:sample_weight_modes.append(None)";
    "Fxn:compile" -> "Fxn:range(len(self.outputs)):";
    "Fxn:compile" -> "Fxn:self._feed_sample_weight_modes.append(self.sample_weight_modes[i])";
    "Fxn:compile" -> "Fxn:K.name_scope('loss'):";
    "Fxn:compile" -> "Fxn:range(len(self.outputs)):";
    "Fxn:compile" -> "Fxn:K.name_scope(self.output_names[i]";
    "Fxn:compile" -> "Fxn:weighted_loss(y_true,";
    "Fxn:compile" -> "Fxn:len(self.outputs)";
    "Fxn:compile" -> "Fxn:self.metrics_tensors.append(output_loss)";
    "Fxn:compile" -> "Fxn:self.metrics_names.append(self.output_names[i]";
    "Fxn:compile" -> "Fxn:ValueError('The";
    "Fxn:compile" -> "Fxn:_collect_metrics(metrics,";
    "Fxn:compile" -> "Fxn:_collect_metrics(weighted_metrics,";
    "Fxn:compile" -> "Fxn:K.name_scope('metrics'):";
    "Fxn:compile" -> "Fxn:range(len(self.outputs)):";
    "Fxn:_check_trainable_weights_consistency" -> "Fxn:hasattr(self,";
    "Fxn:_check_trainable_weights_consistency" -> "Fxn:len(self._collected_trainable_weights)):";
    "Fxn:_check_trainable_weights_consistency" -> "Fxn:warnings.warn(UserWarning(";
    "Fxn:_make_train_function" -> "Fxn:hasattr(self,";
    "Fxn:_make_train_function" -> "Fxn:RuntimeError('You";
    "Fxn:_make_train_function" -> "Fxn:self._check_trainable_weights_consistency()";
    "Fxn:_make_train_function" -> "Fxn:isinstance(K.learning_phase(),";
    "Fxn:_make_train_function" -> "Fxn:[K.learning_phase()]";
    "Fxn:_make_train_function" -> "Fxn:K.name_scope('training'):";
    "Fxn:_make_train_function" -> "Fxn:K.name_scope(self.optimizer.__class__.__name__):";
    "Fxn:_make_train_function" -> "Fxn:self.optimizer.get_updates(";
    "Fxn:_make_train_function" -> "Fxn:K.function(inputs,";
    "Fxn:_make_test_function" -> "Fxn:hasattr(self,";
    "Fxn:_make_test_function" -> "Fxn:RuntimeError('You";
    "Fxn:_make_test_function" -> "Fxn:isinstance(K.learning_phase(),";
    "Fxn:_make_test_function" -> "Fxn:[K.learning_phase()]";
    "Fxn:_make_test_function" -> "Fxn:K.function(inputs,";
    "Fxn:_make_predict_function" -> "Fxn:hasattr(self,";
    "Fxn:_make_predict_function" -> "Fxn:isinstance(K.learning_phase(),";
    "Fxn:_make_predict_function" -> "Fxn:[K.learning_phase()]";
    "Fxn:_make_predict_function" -> "Fxn:getattr(self,";
    "Fxn:_make_predict_function" -> "Fxn:K.function(inputs,";
    "Fxn:_check_num_samples" -> "Fxn:ValueError('If";
    "Fxn:_check_num_samples" -> "Fxn:hasattr(ins[0],";
    "Fxn:_check_num_samples" -> "Fxn:ValueError('Either";
    "Fxn:_fit_loop" -> "Fxn:`f(ins)`.";
    "Fxn:_fit_loop" -> "Fxn:hasattr(ins[0],";
    "Fxn:_fit_loop" -> "Fxn:hasattr(val_ins[0],";
    "Fxn:_fit_loop" -> "Fxn:print('Train";
    "Fxn:_fit_loop" -> "Fxn:ValueError('Can";
    "Fxn:_fit_loop" -> "Fxn:self._check_num_samples(ins,";
    "Fxn:_fit_loop" -> "Fxn:np.arange(num_train_samples)";
    "Fxn:_fit_loop" -> "Fxn:cbks.History()";
    "Fxn:_fit_loop" -> "Fxn:[cbks.BaseLogger(";
    "Fxn:_fit_loop" -> "Fxn:_callbacks.append(";
    "Fxn:_fit_loop" -> "Fxn:cbks.ProgbarLogger(";
    "Fxn:_fit_loop" -> "Fxn:cbks.CallbackList(_callbacks)";
    "Fxn:_fit_loop" -> "Fxn:hasattr(self,";
    "Fxn:_fit_loop" -> "Fxn:callbacks.set_model(callback_model)";
    "Fxn:_fit_loop" -> "Fxn:callbacks.set_params({";
    "Fxn:_fit_loop" -> "Fxn:callbacks.on_train_begin()";
    "Fxn:_fit_loop" -> "Fxn:range(len(feed)):";
    "Fxn:_fit_loop" -> "Fxn:issparse(ins[i])";
    "Fxn:_fit_loop" -> "Fxn:K.is_sparse(feed[i]):";
    "Fxn:_fit_loop" -> "Fxn:indices_for_conversion_to_dense.append(i)";
    "Fxn:_fit_loop" -> "Fxn:range(initial_epoch,";
    "Fxn:_fit_loop" -> "Fxn:isinstance(m,";
    "Fxn:_fit_loop" -> "Fxn:m.reset_states()";
    "Fxn:_fit_loop" -> "Fxn:callbacks.on_epoch_begin(epoch)";
    "Fxn:_fit_loop" -> "Fxn:range(steps_per_epoch):";
    "Fxn:_fit_loop" -> "Fxn:callbacks.on_batch_begin(step_index,";
    "Fxn:_fit_loop" -> "Fxn:f(ins)";
    "Fxn:_fit_loop" -> "Fxn:isinstance(outs,";
    "Fxn:_fit_loop" -> "Fxn:zip(out_labels,";
    "Fxn:_fit_loop" -> "Fxn:callbacks.on_batch_end(step_index,";
    "Fxn:_fit_loop" -> "Fxn:self._test_loop(val_f,";
    "Fxn:_fit_loop" -> "Fxn:isinstance(val_outs,";
    "Fxn:_fit_loop" -> "Fxn:zip(out_labels,";
    "Fxn:_fit_loop" -> "Fxn:_batch_shuffle(index_array,";
    "Fxn:_fit_loop" -> "Fxn:np.random.shuffle(index_array)";
    "Fxn:_fit_loop" -> "Fxn:_make_batches(num_train_samples,";
    "Fxn:_fit_loop" -> "Fxn:enumerate(batches):";
    "Fxn:_fit_loop" -> "Fxn:isinstance(ins[-1],";
    "Fxn:_fit_loop" -> "Fxn:_slice_arrays(ins[:-1],";
    "Fxn:_fit_loop" -> "Fxn:_slice_arrays(ins,";
    "Fxn:_fit_loop" -> "Fxn:TypeError('TypeError";
    "Fxn:_fit_loop" -> "Fxn:len(batch_ids)";
    "Fxn:_fit_loop" -> "Fxn:callbacks.on_batch_begin(batch_index,";
    "Fxn:_fit_loop" -> "Fxn:ins_batch[i].toarray()";
    "Fxn:_fit_loop" -> "Fxn:f(ins_batch)";
    "Fxn:_fit_loop" -> "Fxn:isinstance(outs,";
    "Fxn:_fit_loop" -> "Fxn:zip(out_labels,";
    "Fxn:_fit_loop" -> "Fxn:callbacks.on_batch_end(batch_index,";
    "Fxn:_fit_loop" -> "Fxn:len(batches)";
    "Fxn:_fit_loop" -> "Fxn:self._test_loop(val_f,";
    "Fxn:_fit_loop" -> "Fxn:isinstance(val_outs,";
    "Fxn:_fit_loop" -> "Fxn:zip(out_labels,";
    "Fxn:_fit_loop" -> "Fxn:callbacks.on_epoch_end(epoch,";
    "Fxn:_fit_loop" -> "Fxn:callbacks.on_train_end()";
    "Fxn:_predict_loop" -> "Fxn:self._check_num_samples(ins,";
    "Fxn:_predict_loop" -> "Fxn:Progbar(target=steps)";
    "Fxn:_predict_loop" -> "Fxn:Progbar(target=num_samples)";
    "Fxn:_predict_loop" -> "Fxn:range(len(self._feed_inputs)):";
    "Fxn:_predict_loop" -> "Fxn:issparse(ins[i])";
    "Fxn:_predict_loop" -> "Fxn:K.is_sparse(self._feed_inputs[i]):";
    "Fxn:_predict_loop" -> "Fxn:indices_for_conversion_to_dense.append(i)";
    "Fxn:_predict_loop" -> "Fxn:range(steps):";
    "Fxn:_predict_loop" -> "Fxn:f(ins)";
    "Fxn:_predict_loop" -> "Fxn:isinstance(batch_outs,";
    "Fxn:_predict_loop" -> "Fxn:unconcatenated_outs.append([])";
    "Fxn:_predict_loop" -> "Fxn:enumerate(batch_outs):";
    "Fxn:_predict_loop" -> "Fxn:unconcatenated_outs[i].append(batch_out)";
    "Fxn:_predict_loop" -> "Fxn:progbar.update(step";
    "Fxn:_predict_loop" -> "Fxn:len(unconcatenated_outs)";
    "Fxn:_predict_loop" -> "Fxn:np.concatenate(unconcatenated_outs[0],";
    "Fxn:_predict_loop" -> "Fxn:[np.concatenate(unconcatenated_outs[i],";
    "Fxn:_predict_loop" -> "Fxn:range(len(unconcatenated_outs))]";
    "Fxn:_predict_loop" -> "Fxn:_make_batches(num_samples,";
    "Fxn:_predict_loop" -> "Fxn:np.arange(num_samples)";
    "Fxn:_predict_loop" -> "Fxn:enumerate(batches):";
    "Fxn:_predict_loop" -> "Fxn:isinstance(ins[-1],";
    "Fxn:_predict_loop" -> "Fxn:_slice_arrays(ins[:-1],";
    "Fxn:_predict_loop" -> "Fxn:_slice_arrays(ins,";
    "Fxn:_predict_loop" -> "Fxn:ins_batch[i].toarray()";
    "Fxn:_predict_loop" -> "Fxn:f(ins_batch)";
    "Fxn:_predict_loop" -> "Fxn:isinstance(batch_outs,";
    "Fxn:_predict_loop" -> "Fxn:outs.append(np.zeros(shape,";
    "Fxn:_predict_loop" -> "Fxn:enumerate(batch_outs):";
    "Fxn:_predict_loop" -> "Fxn:progbar.update(batch_end)";
    "Fxn:_predict_loop" -> "Fxn:len(outs)";
    "Fxn:_test_loop" -> "Fxn:hasattr(self,";
    "Fxn:_test_loop" -> "Fxn:isinstance(m,";
    "Fxn:_test_loop" -> "Fxn:m.reset_states()";
    "Fxn:_test_loop" -> "Fxn:enumerate(self.metrics_names)";
    "Fxn:_test_loop" -> "Fxn:str(name)";
    "Fxn:_test_loop" -> "Fxn:self._check_num_samples(ins,";
    "Fxn:_test_loop" -> "Fxn:Progbar(target=steps)";
    "Fxn:_test_loop" -> "Fxn:Progbar(target=num_samples)";
    "Fxn:_test_loop" -> "Fxn:range(len(feed)):";
    "Fxn:_test_loop" -> "Fxn:issparse(ins[i])";
    "Fxn:_test_loop" -> "Fxn:K.is_sparse(feed[i]):";
    "Fxn:_test_loop" -> "Fxn:indices_for_conversion_to_dense.append(i)";
    "Fxn:_test_loop" -> "Fxn:range(steps):";
    "Fxn:_test_loop" -> "Fxn:f(ins)";
    "Fxn:_test_loop" -> "Fxn:isinstance(batch_outs,";
    "Fxn:_test_loop" -> "Fxn:enumerate(batch_outs):";
    "Fxn:_test_loop" -> "Fxn:outs.append(0.)";
    "Fxn:_test_loop" -> "Fxn:enumerate(batch_outs):";
    "Fxn:_test_loop" -> "Fxn:outs.append(0.)";
    "Fxn:_test_loop" -> "Fxn:progbar.update(step";
    "Fxn:_test_loop" -> "Fxn:range(len(outs)):";
    "Fxn:_test_loop" -> "Fxn:_make_batches(num_samples,";
    "Fxn:_test_loop" -> "Fxn:np.arange(num_samples)";
    "Fxn:_test_loop" -> "Fxn:enumerate(batches):";
    "Fxn:_test_loop" -> "Fxn:isinstance(ins[-1],";
    "Fxn:_test_loop" -> "Fxn:_slice_arrays(ins[:-1],";
    "Fxn:_test_loop" -> "Fxn:_slice_arrays(ins,";
    "Fxn:_test_loop" -> "Fxn:ins_batch[i].toarray()";
    "Fxn:_test_loop" -> "Fxn:f(ins_batch)";
    "Fxn:_test_loop" -> "Fxn:isinstance(batch_outs,";
    "Fxn:_test_loop" -> "Fxn:enumerate(batch_outs):";
    "Fxn:_test_loop" -> "Fxn:outs.append(0.)";
    "Fxn:_test_loop" -> "Fxn:enumerate(batch_outs):";
    "Fxn:_test_loop" -> "Fxn:len(batch_ids)";
    "Fxn:_test_loop" -> "Fxn:outs.append(0.)";
    "Fxn:_test_loop" -> "Fxn:len(batch_ids)";
    "Fxn:_test_loop" -> "Fxn:progbar.update(batch_end)";
    "Fxn:_test_loop" -> "Fxn:range(len(outs)):";
    "Fxn:_test_loop" -> "Fxn:len(outs)";
    "Fxn:_standardize_user_data" -> "Fxn:hasattr(self,";
    "Fxn:_standardize_user_data" -> "Fxn:RuntimeError('You";
    "Fxn:_standardize_user_data" -> "Fxn:`model.compile(optimizer,";
    "Fxn:_standardize_user_data" -> "Fxn:zip(self._feed_output_shapes,";
    "Fxn:_standardize_user_data" -> "Fxn:output_shapes.append(output_shape[:-1]";
    "Fxn:_standardize_user_data" -> "Fxn:hasattr(loss_fn,";
    "Fxn:_standardize_user_data" -> "Fxn:getattr(losses,";
    "Fxn:_standardize_user_data" -> "Fxn:output_shapes.append(None)";
    "Fxn:_standardize_user_data" -> "Fxn:output_shapes.append(output_shape)";
    "Fxn:_standardize_user_data" -> "Fxn:_standardize_input_data(x,";
    "Fxn:_standardize_user_data" -> "Fxn:_standardize_input_data(y,";
    "Fxn:_standardize_user_data" -> "Fxn:_standardize_sample_weights(sample_weight,";
    "Fxn:_standardize_user_data" -> "Fxn:_standardize_class_weights(class_weight,";
    "Fxn:_standardize_user_data" -> "Fxn:[_standardize_weights(ref,";
    "Fxn:_standardize_user_data" -> "Fxn:zip(y,";
    "Fxn:_standardize_user_data" -> "Fxn:_check_array_lengths(x,";
    "Fxn:_standardize_user_data" -> "Fxn:_check_loss_and_target_compatibility(y,";
    "Fxn:_standardize_user_data" -> "Fxn:ValueError('In";
    "Fxn:_standardize_user_data" -> "Fxn:str(x[0].shape[0])";
    "Fxn:fit" -> "Fxn:[callbacks](/callbacks).";
    "Fxn:fit" -> "Fxn:`(x_val,";
    "Fxn:fit" -> "Fxn:`(x_val,";
    "Fxn:evaluate" -> "Fxn:`(samples,";
    "Fxn:evaluate" -> "Fxn:`compile()`.";
    "Fxn:evaluate" -> "Fxn:ValueError('If";
    "Fxn:evaluate" -> "Fxn:self._standardize_user_data(";
    "Fxn:evaluate" -> "Fxn:isinstance(K.learning_phase(),";
    "Fxn:evaluate" -> "Fxn:self._make_test_function()";
    "Fxn:evaluate" -> "Fxn:self._test_loop(f,";
    "Fxn:predict" -> "Fxn:array(s)";
    "Fxn:predict" -> "Fxn:ValueError('If";
    "Fxn:predict" -> "Fxn:_standardize_input_data(x,";
    "Fxn:predict" -> "Fxn:ValueError('In";
    "Fxn:predict" -> "Fxn:str(x[0].shape[0])";
    "Fxn:predict" -> "Fxn:str(batch_size)";
    "Fxn:predict" -> "Fxn:isinstance(K.learning_phase(),";
    "Fxn:predict" -> "Fxn:self._make_predict_function()";
    "Fxn:predict" -> "Fxn:self._predict_loop(f,";
    "Fxn:train_on_batch" -> "Fxn:compile().";
    "Fxn:test_on_batch" -> "Fxn:compile().";
    "Fxn:test_on_batch" -> "Fxn:self._standardize_user_data(";
    "Fxn:test_on_batch" -> "Fxn:isinstance(K.learning_phase(),";
    "Fxn:test_on_batch" -> "Fxn:self._make_test_function()";
    "Fxn:test_on_batch" -> "Fxn:self.test_function(ins)";
    "Fxn:test_on_batch" -> "Fxn:len(outputs)";
    "Fxn:predict_on_batch" -> "Fxn:array(s)";
    "Fxn:predict_on_batch" -> "Fxn:_standardize_input_data(x,";
    "Fxn:predict_on_batch" -> "Fxn:isinstance(K.learning_phase(),";
    "Fxn:predict_on_batch" -> "Fxn:self._make_predict_function()";
    "Fxn:predict_on_batch" -> "Fxn:self.predict_function(ins)";
    "Fxn:predict_on_batch" -> "Fxn:len(outputs)";
    "Fxn:fit_generator" -> "Fxn:`(inputs,";
    "Fxn:fit_generator" -> "Fxn:`(inputs,";
    "Fxn:fit_generator" -> "Fxn:`len(generator)`";
    "Fxn:fit_generator" -> "Fxn:[callbacks](/callbacks).";
    "Fxn:fit_generator" -> "Fxn:`(x_val,";
    "Fxn:fit_generator" -> "Fxn:`(x_val,";
    "Fxn:fit_generator" -> "Fxn:`len(validation_data)`";
    "Fxn:generate_arrays_from_file" -> "Fxn:open(path)";
    "Fxn:generate_arrays_from_file" -> "Fxn:process_line(line)";
    "Fxn:generate_arrays_from_file" -> "Fxn:model.fit_generator(generate_arrays_from_file('/my_file.txt'),";
    "Fxn:generate_arrays_from_file" -> "Fxn:bool(validation_data)";
    "Fxn:generate_arrays_from_file" -> "Fxn:self._make_train_function()";
    "Fxn:generate_arrays_from_file" -> "Fxn:self._make_test_function()";
    "Fxn:generate_arrays_from_file" -> "Fxn:isinstance(generator,";
    "Fxn:generate_arrays_from_file" -> "Fxn:warnings.warn(";
    "Fxn:generate_arrays_from_file" -> "Fxn:UserWarning('Using";
    "Fxn:generate_arrays_from_file" -> "Fxn:len(generator)";
    "Fxn:generate_arrays_from_file" -> "Fxn:ValueError('`steps_per_epoch=None`";
    "Fxn:generate_arrays_from_file" -> "Fxn:hasattr(validation_data,";
    "Fxn:generate_arrays_from_file" -> "Fxn:isinstance(validation_data,";
    "Fxn:generate_arrays_from_file" -> "Fxn:isinstance(validation_data,";
    "Fxn:generate_arrays_from_file" -> "Fxn:ValueError('`validation_steps=None`";
    "Fxn:generate_arrays_from_file" -> "Fxn:cbks.History()";
    "Fxn:generate_arrays_from_file" -> "Fxn:[cbks.BaseLogger(";
    "Fxn:generate_arrays_from_file" -> "Fxn:_callbacks.append(";
    "Fxn:generate_arrays_from_file" -> "Fxn:cbks.ProgbarLogger(";
    "Fxn:generate_arrays_from_file" -> "Fxn:cbks.CallbackList(_callbacks)";
    "Fxn:generate_arrays_from_file" -> "Fxn:hasattr(self,";
    "Fxn:generate_arrays_from_file" -> "Fxn:callbacks.set_model(callback_model)";
    "Fxn:generate_arrays_from_file" -> "Fxn:callbacks.set_params({";
    "Fxn:generate_arrays_from_file" -> "Fxn:callbacks.on_train_begin()";
    "Fxn:generate_arrays_from_file" -> "Fxn:len(validation_data)";
    "Fxn:generate_arrays_from_file" -> "Fxn:len(validation_data)";
    "Fxn:generate_arrays_from_file" -> "Fxn:ValueError('`validation_data`";
    "Fxn:generate_arrays_from_file" -> "Fxn:'`(val_x,";
    "Fxn:generate_arrays_from_file" -> "Fxn:`(val_x,";
    "Fxn:generate_arrays_from_file" -> "Fxn:str(validation_data))";
    "Fxn:generate_arrays_from_file" -> "Fxn:self._standardize_user_data(";
    "Fxn:generate_arrays_from_file" -> "Fxn:isinstance(K.learning_phase(),";
    "Fxn:generate_arrays_from_file" -> "Fxn:OrderedEnqueuer(generator,";
    "Fxn:generate_arrays_from_file" -> "Fxn:GeneratorEnqueuer(generator,";
    "Fxn:generate_arrays_from_file" -> "Fxn:enqueuer.start(workers=workers,";
    "Fxn:generate_arrays_from_file" -> "Fxn:enqueuer.get()";
    "Fxn:generate_arrays_from_file" -> "Fxn:iter(generator)";
    "Fxn:generate_arrays_from_file" -> "Fxn:callbacks.on_epoch_begin(epoch)";
    "Fxn:generate_arrays_from_file" -> "Fxn:next(output_generator)";
    "Fxn:generate_arrays_from_file" -> "Fxn:hasattr(generator_output,";
    "Fxn:generate_arrays_from_file" -> "Fxn:ValueError('Output";
    "Fxn:generate_arrays_from_file" -> "Fxn:`(x,";
    "Fxn:generate_arrays_from_file" -> "Fxn:`(x,";
    "Fxn:generate_arrays_from_file" -> "Fxn:str(generator_output))";
    "Fxn:generate_arrays_from_file" -> "Fxn:len(generator_output)";
    "Fxn:generate_arrays_from_file" -> "Fxn:len(generator_output)";
    "Fxn:generate_arrays_from_file" -> "Fxn:ValueError('Output";
    "Fxn:generate_arrays_from_file" -> "Fxn:`(x,";
    "Fxn:generate_arrays_from_file" -> "Fxn:`(x,";
    "Fxn:generate_arrays_from_file" -> "Fxn:str(generator_output))";
    "Fxn:generate_arrays_from_file" -> "Fxn:isinstance(x,";
    "Fxn:generate_arrays_from_file" -> "Fxn:isinstance(x,";
    "Fxn:generate_arrays_from_file" -> "Fxn:list(x.values())[0].shape[0]";
    "Fxn:generate_arrays_from_file" -> "Fxn:callbacks.on_batch_begin(batch_index,";
    "Fxn:generate_arrays_from_file" -> "Fxn:self.train_on_batch(x,";
    "Fxn:generate_arrays_from_file" -> "Fxn:isinstance(outs,";
    "Fxn:generate_arrays_from_file" -> "Fxn:zip(out_labels,";
    "Fxn:generate_arrays_from_file" -> "Fxn:callbacks.on_batch_end(batch_index,";
    "Fxn:generate_arrays_from_file" -> "Fxn:self.evaluate_generator(";
    "Fxn:generate_arrays_from_file" -> "Fxn:self.evaluate(";
    "Fxn:generate_arrays_from_file" -> "Fxn:isinstance(val_outs,";
    "Fxn:generate_arrays_from_file" -> "Fxn:zip(out_labels,";
    "Fxn:generate_arrays_from_file" -> "Fxn:callbacks.on_epoch_end(epoch,";
    "Fxn:generate_arrays_from_file" -> "Fxn:enqueuer.stop()";
    "Fxn:generate_arrays_from_file" -> "Fxn:val_enqueuer.stop()";
    "Fxn:generate_arrays_from_file" -> "Fxn:callbacks.on_train_end()";
    "Fxn:evaluate_generator" -> "Fxn:`len(generator)`";
    "Fxn:evaluate_generator" -> "Fxn:self._make_test_function()";
    "Fxn:evaluate_generator" -> "Fxn:isinstance(generator,";
    "Fxn:evaluate_generator" -> "Fxn:warnings.warn(";
    "Fxn:evaluate_generator" -> "Fxn:UserWarning('Using";
    "Fxn:evaluate_generator" -> "Fxn:len(generator)";
    "Fxn:evaluate_generator" -> "Fxn:ValueError('`steps=None`";
    "Fxn:evaluate_generator" -> "Fxn:OrderedEnqueuer(generator,";
    "Fxn:evaluate_generator" -> "Fxn:GeneratorEnqueuer(generator,";
    "Fxn:evaluate_generator" -> "Fxn:enqueuer.start(workers=workers,";
    "Fxn:evaluate_generator" -> "Fxn:enqueuer.get()";
    "Fxn:evaluate_generator" -> "Fxn:iter(generator)";
    "Fxn:evaluate_generator" -> "Fxn:next(output_generator)";
    "Fxn:evaluate_generator" -> "Fxn:hasattr(generator_output,";
    "Fxn:evaluate_generator" -> "Fxn:ValueError('Output";
    "Fxn:evaluate_generator" -> "Fxn:'(x,";
    "Fxn:evaluate_generator" -> "Fxn:str(generator_output))";
    "Fxn:evaluate_generator" -> "Fxn:len(generator_output)";
    "Fxn:evaluate_generator" -> "Fxn:len(generator_output)";
    "Fxn:evaluate_generator" -> "Fxn:ValueError('Output";
    "Fxn:evaluate_generator" -> "Fxn:'(x,";
    "Fxn:evaluate_generator" -> "Fxn:str(generator_output))";
    "Fxn:evaluate_generator" -> "Fxn:self.test_on_batch(x,";
    "Fxn:evaluate_generator" -> "Fxn:isinstance(x,";
    "Fxn:evaluate_generator" -> "Fxn:isinstance(x,";
    "Fxn:evaluate_generator" -> "Fxn:list(x.values())[0].shape[0]";
    "Fxn:evaluate_generator" -> "Fxn:ValueError('Received";
    "Fxn:evaluate_generator" -> "Fxn:all_outs.append(outs)";
    "Fxn:evaluate_generator" -> "Fxn:batch_sizes.append(batch_size)";
    "Fxn:evaluate_generator" -> "Fxn:enqueuer.stop()";
    "Fxn:evaluate_generator" -> "Fxn:isinstance(outs,";
    "Fxn:evaluate_generator" -> "Fxn:np.average(np.asarray(all_outs),";
    "Fxn:evaluate_generator" -> "Fxn:range(len(outs)):";
    "Fxn:evaluate_generator" -> "Fxn:averages.append(np.average([out[i]";
    "Fxn:predict_generator" -> "Fxn:`len(generator)`";
    "Fxn:predict_generator" -> "Fxn:array(s)";
    "Fxn:predict_generator" -> "Fxn:self._make_predict_function()";
    "Fxn:predict_generator" -> "Fxn:isinstance(generator,";
    "Fxn:predict_generator" -> "Fxn:warnings.warn(";
    "Fxn:predict_generator" -> "Fxn:UserWarning('Using";
    "Fxn:predict_generator" -> "Fxn:len(generator)";
    "Fxn:predict_generator" -> "Fxn:ValueError('`steps=None`";
    "Fxn:predict_generator" -> "Fxn:OrderedEnqueuer(generator,";
    "Fxn:predict_generator" -> "Fxn:GeneratorEnqueuer(generator,";
    "Fxn:predict_generator" -> "Fxn:enqueuer.start(workers=workers,";
    "Fxn:predict_generator" -> "Fxn:enqueuer.get()";
    "Fxn:predict_generator" -> "Fxn:iter(generator)";
    "Fxn:predict_generator" -> "Fxn:Progbar(target=steps)";
    "Fxn:predict_generator" -> "Fxn:next(output_generator)";
    "Fxn:predict_generator" -> "Fxn:isinstance(generator_output,";
    "Fxn:predict_generator" -> "Fxn:len(generator_output)";
    "Fxn:predict_generator" -> "Fxn:len(generator_output)";
    "Fxn:predict_generator" -> "Fxn:ValueError('Output";
    "Fxn:predict_generator" -> "Fxn:`(x,";
    "Fxn:predict_generator" -> "Fxn:`(x,";
    "Fxn:predict_generator" -> "Fxn:str(generator_output))";
    "Fxn:predict_generator" -> "Fxn:self.predict_on_batch(x)";
    "Fxn:predict_generator" -> "Fxn:isinstance(outs,";
    "Fxn:predict_generator" -> "Fxn:all_outs.append([])";
    "Fxn:predict_generator" -> "Fxn:enumerate(outs):";
    "Fxn:predict_generator" -> "Fxn:all_outs[i].append(out)";
    "Fxn:predict_generator" -> "Fxn:progbar.update(steps_done)";
    "Fxn:predict_generator" -> "Fxn:enqueuer.stop()";
    "Fxn:predict_generator" -> "Fxn:len(all_outs)";
    "Fxn:predict_generator" -> "Fxn:np.concatenate(all_outs[0])";
    "Fxn:predict_generator" -> "Fxn:[np.concatenate(out)";
    "/keras/engine/__init__.py" -> "Import:InputSpec";
    "/keras/engine/__init__.py" -> "Import:Input";
    "/keras/engine/__init__.py" -> "Import:InputLayer";
    "/keras/engine/__init__.py" -> "Import:Layer";
    "/keras/engine/__init__.py" -> "Import:get_source_inputs";
    "/keras/engine/__init__.py" -> "Import:Model";
    "/keras/layers/advanced_activations.py" -> "Import:absolute_import";
    "/keras/layers/advanced_activations.py" -> "Import:division";
    "/keras/layers/advanced_activations.py" -> "Import:print_function";
    "/keras/layers/advanced_activations.py" -> "Import:activations";
    "/keras/layers/advanced_activations.py" -> "Import:initializers";
    "/keras/layers/advanced_activations.py" -> "Import:regularizers";
    "/keras/layers/advanced_activations.py" -> "Import:constraints";
    "/keras/layers/advanced_activations.py" -> "Import:Layer";
    "/keras/layers/advanced_activations.py" -> "Import:InputSpec";
    "/keras/layers/advanced_activations.py" -> "Import:backend";
    "/keras/layers/advanced_activations.py" -> "Import:interfaces";
    "/keras/layers/advanced_activations.py" -> "class:LeakyReLU(Layer):";
    "/keras/layers/advanced_activations.py" -> "class:PReLU(Layer):";
    "/keras/layers/advanced_activations.py" -> "class:ELU(Layer):";
    "/keras/layers/advanced_activations.py" -> "class:ThresholdedReLU(Layer):";
    "/keras/layers/advanced_activations.py" -> "class:Softmax(Layer):";
    "class:LeakyReLU(Layer):" -> "Fxn:__init__";
    "class:LeakyReLU(Layer):" -> "Fxn:call";
    "class:LeakyReLU(Layer):" -> "Fxn:get_config";
    "class:LeakyReLU(Layer):" -> "Fxn:compute_output_shape";
    "Fxn:__init__" -> "Fxn:super(LeakyReLU,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:K.cast_to_floatx(alpha)";
    "Fxn:call" -> "Fxn:K.relu(inputs,";
    "Fxn:get_config" -> "Fxn:float(self.alpha)}";
    "Fxn:get_config" -> "Fxn:super(LeakyReLU,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:PReLU(Layer):" -> "Fxn:__init__";
    "class:PReLU(Layer):" -> "Fxn:build";
    "class:PReLU(Layer):" -> "Fxn:call";
    "class:PReLU(Layer):" -> "Fxn:get_config";
    "class:PReLU(Layer):" -> "Fxn:compute_output_shape";
    "Fxn:__init__" -> "Fxn:super(PReLU,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:initializers.get(alpha_initializer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(alpha_regularizer)";
    "Fxn:__init__" -> "Fxn:constraints.get(alpha_constraint)";
    "Fxn:__init__" -> "Fxn:isinstance(shared_axes,";
    "Fxn:__init__" -> "Fxn:list(shared_axes)";
    "Fxn:build" -> "Fxn:list(input_shape[1:])";
    "Fxn:build" -> "Fxn:len(param_shape)";
    "Fxn:build" -> "Fxn:self.add_weight(shape=param_shape,";
    "Fxn:build" -> "Fxn:range(1,";
    "Fxn:build" -> "Fxn:len(input_shape)):";
    "Fxn:build" -> "Fxn:InputSpec(ndim=len(input_shape),";
    "Fxn:call" -> "Fxn:K.relu(inputs)";
    "Fxn:call" -> "Fxn:K.backend()";
    "Fxn:call" -> "Fxn:K.abs(inputs))";
    "Fxn:call" -> "Fxn:K.relu(-inputs)";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.alpha_initializer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.alpha_regularizer),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.alpha_constraint),";
    "Fxn:get_config" -> "Fxn:super(PReLU,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:ELU(Layer):" -> "Fxn:__init__";
    "class:ELU(Layer):" -> "Fxn:call";
    "class:ELU(Layer):" -> "Fxn:get_config";
    "class:ELU(Layer):" -> "Fxn:compute_output_shape";
    "Fxn:__init__" -> "Fxn:super(ELU,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:K.cast_to_floatx(alpha)";
    "Fxn:call" -> "Fxn:K.elu(inputs,";
    "Fxn:get_config" -> "Fxn:float(self.alpha)}";
    "Fxn:get_config" -> "Fxn:super(ELU,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:ThresholdedReLU(Layer):" -> "Fxn:__init__";
    "class:ThresholdedReLU(Layer):" -> "Fxn:call";
    "class:ThresholdedReLU(Layer):" -> "Fxn:get_config";
    "class:ThresholdedReLU(Layer):" -> "Fxn:compute_output_shape";
    "Fxn:__init__" -> "Fxn:super(ThresholdedReLU,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:K.cast_to_floatx(theta)";
    "Fxn:call" -> "Fxn:K.cast(K.greater(inputs,";
    "Fxn:call" -> "Fxn:K.floatx())";
    "Fxn:get_config" -> "Fxn:float(self.theta)}";
    "Fxn:get_config" -> "Fxn:super(ThresholdedReLU,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:Softmax(Layer):" -> "Fxn:__init__";
    "class:Softmax(Layer):" -> "Fxn:call";
    "class:Softmax(Layer):" -> "Fxn:get_config";
    "class:Softmax(Layer):" -> "Fxn:compute_output_shape";
    "Fxn:__init__" -> "Fxn:super(Softmax,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:call" -> "Fxn:activations.softmax(inputs,";
    "Fxn:get_config" -> "Fxn:super(Softmax,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "/keras/layers/convolutional.py" -> "Import:absolute_import";
    "/keras/layers/convolutional.py" -> "Import:division";
    "/keras/layers/convolutional.py" -> "Import:print_function";
    "/keras/layers/convolutional.py" -> "Import:backend";
    "/keras/layers/convolutional.py" -> "Import:activations";
    "/keras/layers/convolutional.py" -> "Import:initializers";
    "/keras/layers/convolutional.py" -> "Import:regularizers";
    "/keras/layers/convolutional.py" -> "Import:constraints";
    "/keras/layers/convolutional.py" -> "Import:Layer";
    "/keras/layers/convolutional.py" -> "Import:InputSpec";
    "/keras/layers/convolutional.py" -> "Import:conv_utils";
    "/keras/layers/convolutional.py" -> "Import:interfaces";
    "/keras/layers/convolutional.py" -> "Import:AveragePooling1D";
    "/keras/layers/convolutional.py" -> "Import:AveragePooling2D";
    "/keras/layers/convolutional.py" -> "Import:AveragePooling3D";
    "/keras/layers/convolutional.py" -> "Import:MaxPooling1D";
    "/keras/layers/convolutional.py" -> "Import:MaxPooling2D";
    "/keras/layers/convolutional.py" -> "Import:MaxPooling3D";
    "/keras/layers/convolutional.py" -> "Import:AtrousConvolution1D";
    "/keras/layers/convolutional.py" -> "Import:AtrousConvolution2D";
    "/keras/layers/convolutional.py" -> "class:_Conv(Layer):";
    "/keras/layers/convolutional.py" -> "class:Conv1D(_Conv):";
    "/keras/layers/convolutional.py" -> "class:Conv2D(_Conv):";
    "/keras/layers/convolutional.py" -> "class:Conv3D(_Conv):";
    "/keras/layers/convolutional.py" -> "class:Conv2DTranspose(Conv2D):";
    "/keras/layers/convolutional.py" -> "class:Conv3DTranspose(Conv3D):";
    "/keras/layers/convolutional.py" -> "class:_SeparableConv(_Conv):";
    "/keras/layers/convolutional.py" -> "class:SeparableConv1D(_SeparableConv):";
    "/keras/layers/convolutional.py" -> "class:SeparableConv2D(_SeparableConv):";
    "/keras/layers/convolutional.py" -> "class:DepthwiseConv2D(Conv2D):";
    "/keras/layers/convolutional.py" -> "class:UpSampling1D(Layer):";
    "/keras/layers/convolutional.py" -> "class:UpSampling2D(Layer):";
    "/keras/layers/convolutional.py" -> "class:UpSampling3D(Layer):";
    "/keras/layers/convolutional.py" -> "class:ZeroPadding1D(Layer):";
    "/keras/layers/convolutional.py" -> "class:ZeroPadding2D(Layer):";
    "/keras/layers/convolutional.py" -> "class:ZeroPadding3D(Layer):";
    "/keras/layers/convolutional.py" -> "class:Cropping1D(Layer):";
    "/keras/layers/convolutional.py" -> "class:Cropping2D(Layer):";
    "/keras/layers/convolutional.py" -> "class:Cropping3D(Layer):";
    "class:_Conv(Layer):" -> "Fxn:__init__";
    "class:_Conv(Layer):" -> "Fxn:build";
    "class:_Conv(Layer):" -> "Fxn:call";
    "class:_Conv(Layer):" -> "Fxn:compute_output_shape";
    "class:_Conv(Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(_Conv,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(kernel_size,";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(strides,";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_padding(padding)";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(dilation_rate,";
    "Fxn:__init__" -> "Fxn:activations.get(activation)";
    "Fxn:__init__" -> "Fxn:initializers.get(kernel_initializer)";
    "Fxn:__init__" -> "Fxn:initializers.get(bias_initializer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(kernel_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(bias_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(activity_regularizer)";
    "Fxn:__init__" -> "Fxn:constraints.get(kernel_constraint)";
    "Fxn:__init__" -> "Fxn:constraints.get(bias_constraint)";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=self.rank";
    "Fxn:build" -> "Fxn:ValueError('The";
    "Fxn:build" -> "Fxn:self.add_weight(shape=kernel_shape,";
    "Fxn:build" -> "Fxn:self.add_weight(shape=(self.filters,),";
    "Fxn:build" -> "Fxn:InputSpec(ndim=self.rank";
    "Fxn:call" -> "Fxn:K.conv1d(";
    "Fxn:call" -> "Fxn:K.conv2d(";
    "Fxn:call" -> "Fxn:K.conv3d(";
    "Fxn:call" -> "Fxn:K.bias_add(";
    "Fxn:call" -> "Fxn:self.activation(outputs)";
    "Fxn:compute_output_shape" -> "Fxn:range(len(space)):";
    "Fxn:compute_output_shape" -> "Fxn:conv_utils.conv_output_length(";
    "Fxn:compute_output_shape" -> "Fxn:new_space.append(new_dim)";
    "Fxn:compute_output_shape" -> "Fxn:tuple(new_space)";
    "Fxn:compute_output_shape" -> "Fxn:range(len(space)):";
    "Fxn:compute_output_shape" -> "Fxn:conv_utils.conv_output_length(";
    "Fxn:compute_output_shape" -> "Fxn:new_space.append(new_dim)";
    "Fxn:compute_output_shape" -> "Fxn:tuple(new_space)";
    "Fxn:get_config" -> "Fxn:activations.serialize(self.activation),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.kernel_initializer),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.bias_initializer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.kernel_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.bias_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.activity_regularizer),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.kernel_constraint),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.bias_constraint)";
    "Fxn:get_config" -> "Fxn:super(_Conv,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:Conv1D(_Conv):" -> "Fxn:__init__";
    "class:Conv1D(_Conv):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(Conv1D,";
    "Fxn:__init__" -> "Fxn:self).__init__(";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=3)";
    "Fxn:get_config" -> "Fxn:super(Conv1D,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:config.pop('rank')";
    "Fxn:get_config" -> "Fxn:config.pop('data_format')";
    "class:Conv2D(_Conv):" -> "Fxn:__init__";
    "class:Conv2D(_Conv):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:strides=(1,";
    "Fxn:__init__" -> "Fxn:dilation_rate=(1,";
    "Fxn:__init__" -> "Fxn:super(Conv2D,";
    "Fxn:__init__" -> "Fxn:self).__init__(";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=4)";
    "Fxn:get_config" -> "Fxn:super(Conv2D,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:config.pop('rank')";
    "class:Conv3D(_Conv):" -> "Fxn:__init__";
    "class:Conv3D(_Conv):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:strides=(1,";
    "Fxn:__init__" -> "Fxn:dilation_rate=(1,";
    "Fxn:__init__" -> "Fxn:super(Conv3D,";
    "Fxn:__init__" -> "Fxn:self).__init__(";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=5)";
    "Fxn:get_config" -> "Fxn:super(Conv3D,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:config.pop('rank')";
    "class:Conv2DTranspose(Conv2D):" -> "Fxn:__init__";
    "class:Conv2DTranspose(Conv2D):" -> "Fxn:build";
    "class:Conv2DTranspose(Conv2D):" -> "Fxn:call";
    "class:Conv2DTranspose(Conv2D):" -> "Fxn:compute_output_shape";
    "class:Conv2DTranspose(Conv2D):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:strides=(1,";
    "Fxn:__init__" -> "Fxn:super(Conv2DTranspose,";
    "Fxn:__init__" -> "Fxn:self).__init__(";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=4)";
    "Fxn:build" -> "Fxn:len(input_shape)";
    "Fxn:build" -> "Fxn:ValueError('Inputs";
    "Fxn:build" -> "Fxn:str(4)";
    "Fxn:build" -> "Fxn:str(input_shape))";
    "Fxn:build" -> "Fxn:ValueError('The";
    "Fxn:build" -> "Fxn:self.add_weight(shape=kernel_shape,";
    "Fxn:build" -> "Fxn:self.add_weight(shape=(self.filters,),";
    "Fxn:build" -> "Fxn:InputSpec(ndim=4,";
    "Fxn:call" -> "Fxn:K.shape(inputs)";
    "Fxn:call" -> "Fxn:conv_utils.deconv_length(height,";
    "Fxn:call" -> "Fxn:conv_utils.deconv_length(width,";
    "Fxn:call" -> "Fxn:K.conv2d_transpose(";
    "Fxn:call" -> "Fxn:K.bias_add(";
    "Fxn:call" -> "Fxn:self.activation(outputs)";
    "Fxn:compute_output_shape" -> "Fxn:list(input_shape)";
    "Fxn:compute_output_shape" -> "Fxn:conv_utils.deconv_length(";
    "Fxn:compute_output_shape" -> "Fxn:conv_utils.deconv_length(";
    "Fxn:compute_output_shape" -> "Fxn:tuple(output_shape)";
    "Fxn:get_config" -> "Fxn:super(Conv2DTranspose,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:config.pop('dilation_rate')";
    "class:Conv3DTranspose(Conv3D):" -> "Fxn:__init__";
    "class:Conv3DTranspose(Conv3D):" -> "Fxn:build";
    "class:Conv3DTranspose(Conv3D):" -> "Fxn:call";
    "class:Conv3DTranspose(Conv3D):" -> "Fxn:compute_output_shape";
    "class:Conv3DTranspose(Conv3D):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:strides=(1,";
    "Fxn:__init__" -> "Fxn:super(Conv3DTranspose,";
    "Fxn:__init__" -> "Fxn:self).__init__(";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=5)";
    "Fxn:build" -> "Fxn:len(input_shape)";
    "Fxn:build" -> "Fxn:ValueError('Inputs";
    "Fxn:build" -> "Fxn:str(5)";
    "Fxn:build" -> "Fxn:str(input_shape))";
    "Fxn:build" -> "Fxn:ValueError('The";
    "Fxn:build" -> "Fxn:self.add_weight(shape=kernel_shape,";
    "Fxn:build" -> "Fxn:self.add_weight(shape=(self.filters,),";
    "Fxn:build" -> "Fxn:InputSpec(ndim=5,";
    "Fxn:call" -> "Fxn:K.shape(inputs)";
    "Fxn:call" -> "Fxn:conv_utils.deconv_length(depth,";
    "Fxn:call" -> "Fxn:conv_utils.deconv_length(height,";
    "Fxn:call" -> "Fxn:conv_utils.deconv_length(width,";
    "Fxn:call" -> "Fxn:K.conv3d_transpose(inputs,";
    "Fxn:call" -> "Fxn:K.bias_add(";
    "Fxn:call" -> "Fxn:self.activation(outputs)";
    "Fxn:compute_output_shape" -> "Fxn:list(input_shape)";
    "Fxn:compute_output_shape" -> "Fxn:conv_utils.deconv_length(output_shape[d_axis],";
    "Fxn:compute_output_shape" -> "Fxn:conv_utils.deconv_length(output_shape[h_axis],";
    "Fxn:compute_output_shape" -> "Fxn:conv_utils.deconv_length(output_shape[w_axis],";
    "Fxn:compute_output_shape" -> "Fxn:tuple(output_shape)";
    "Fxn:get_config" -> "Fxn:super(Conv3DTranspose,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:config.pop('dilation_rate')";
    "class:_SeparableConv(_Conv):" -> "Fxn:__init__";
    "class:_SeparableConv(_Conv):" -> "Fxn:build";
    "class:_SeparableConv(_Conv):" -> "Fxn:call";
    "class:_SeparableConv(_Conv):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(_SeparableConv,";
    "Fxn:__init__" -> "Fxn:self).__init__(";
    "Fxn:__init__" -> "Fxn:initializers.get(depthwise_initializer)";
    "Fxn:__init__" -> "Fxn:initializers.get(pointwise_initializer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(depthwise_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(pointwise_regularizer)";
    "Fxn:__init__" -> "Fxn:constraints.get(depthwise_constraint)";
    "Fxn:__init__" -> "Fxn:constraints.get(pointwise_constraint)";
    "Fxn:build" -> "Fxn:len(input_shape)";
    "Fxn:build" -> "Fxn:ValueError('Inputs";
    "Fxn:build" -> "Fxn:str(self.rank)";
    "Fxn:build" -> "Fxn:str(self.rank";
    "Fxn:build" -> "Fxn:str(input_shape))";
    "Fxn:build" -> "Fxn:ValueError('The";
    "Fxn:build" -> "Fxn:int(input_shape[channel_axis])";
    "Fxn:build" -> "Fxn:self.add_weight(";
    "Fxn:build" -> "Fxn:self.add_weight(";
    "Fxn:build" -> "Fxn:self.add_weight(shape=(self.filters,),";
    "Fxn:build" -> "Fxn:InputSpec(ndim=self.rank";
    "Fxn:call" -> "Fxn:K.separable_conv1d(";
    "Fxn:call" -> "Fxn:K.separable_conv2d(";
    "Fxn:call" -> "Fxn:K.bias_add(";
    "Fxn:call" -> "Fxn:self.activation(outputs)";
    "Fxn:get_config" -> "Fxn:super(_SeparableConv,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:config.pop('rank')";
    "Fxn:get_config" -> "Fxn:config.pop('kernel_initializer')";
    "Fxn:get_config" -> "Fxn:config.pop('kernel_regularizer')";
    "Fxn:get_config" -> "Fxn:config.pop('kernel_constraint')";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.depthwise_initializer)";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.pointwise_initializer)";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.depthwise_regularizer)";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.pointwise_regularizer)";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.depthwise_constraint)";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.pointwise_constraint)";
    "class:SeparableConv1D(_SeparableConv):" -> "Fxn:__init__";
    "Fxn:__init__" -> "Fxn:super(SeparableConv1D,";
    "Fxn:__init__" -> "Fxn:self).__init__(";
    "class:SeparableConv2D(_SeparableConv):" -> "Fxn:__init__";
    "Fxn:__init__" -> "Fxn:strides=(1,";
    "Fxn:__init__" -> "Fxn:super(SeparableConv2D,";
    "Fxn:__init__" -> "Fxn:self).__init__(";
    "class:DepthwiseConv2D(Conv2D):" -> "Fxn:__init__";
    "class:DepthwiseConv2D(Conv2D):" -> "Fxn:build";
    "class:DepthwiseConv2D(Conv2D):" -> "Fxn:call";
    "class:DepthwiseConv2D(Conv2D):" -> "Fxn:compute_output_shape";
    "class:DepthwiseConv2D(Conv2D):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:strides=(1,";
    "Fxn:__init__" -> "Fxn:super(DepthwiseConv2D,";
    "Fxn:__init__" -> "Fxn:self).__init__(";
    "Fxn:__init__" -> "Fxn:initializers.get(depthwise_initializer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(depthwise_regularizer)";
    "Fxn:__init__" -> "Fxn:constraints.get(depthwise_constraint)";
    "Fxn:__init__" -> "Fxn:initializers.get(bias_initializer)";
    "Fxn:build" -> "Fxn:len(input_shape)";
    "Fxn:build" -> "Fxn:ValueError('Inputs";
    "Fxn:build" -> "Fxn:str(input_shape))";
    "Fxn:build" -> "Fxn:ValueError('The";
    "Fxn:build" -> "Fxn:int(input_shape[channel_axis])";
    "Fxn:build" -> "Fxn:self.add_weight(";
    "Fxn:build" -> "Fxn:self.add_weight(shape=(input_dim";
    "Fxn:build" -> "Fxn:InputSpec(ndim=4,";
    "Fxn:call" -> "Fxn:K.depthwise_conv2d(";
    "Fxn:call" -> "Fxn:K.bias_add(";
    "Fxn:call" -> "Fxn:self.activation(outputs)";
    "Fxn:compute_output_shape" -> "Fxn:conv_utils.conv_output_length(rows,";
    "Fxn:compute_output_shape" -> "Fxn:conv_utils.conv_output_length(cols,";
    "Fxn:get_config" -> "Fxn:super(DepthwiseConv2D,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:config.pop('filters')";
    "Fxn:get_config" -> "Fxn:config.pop('kernel_initializer')";
    "Fxn:get_config" -> "Fxn:config.pop('kernel_regularizer')";
    "Fxn:get_config" -> "Fxn:config.pop('kernel_constraint')";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.depthwise_initializer)";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.depthwise_regularizer)";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.depthwise_constraint)";
    "class:UpSampling1D(Layer):" -> "Fxn:__init__";
    "class:UpSampling1D(Layer):" -> "Fxn:compute_output_shape";
    "class:UpSampling1D(Layer):" -> "Fxn:call";
    "class:UpSampling1D(Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(UpSampling1D,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:int(size)";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=3)";
    "Fxn:call" -> "Fxn:K.repeat_elements(inputs,";
    "Fxn:get_config" -> "Fxn:super(UpSampling1D,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:UpSampling2D(Layer):" -> "Fxn:__init__";
    "class:UpSampling2D(Layer):" -> "Fxn:compute_output_shape";
    "class:UpSampling2D(Layer):" -> "Fxn:call";
    "class:UpSampling2D(Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:size=(2,";
    "Fxn:__init__" -> "Fxn:super(UpSampling2D,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(size,";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=4)";
    "Fxn:call" -> "Fxn:K.resize_images(inputs,";
    "Fxn:get_config" -> "Fxn:super(UpSampling2D,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:UpSampling3D(Layer):" -> "Fxn:__init__";
    "class:UpSampling3D(Layer):" -> "Fxn:compute_output_shape";
    "class:UpSampling3D(Layer):" -> "Fxn:call";
    "class:UpSampling3D(Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:size=(2,";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(size,";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=5)";
    "Fxn:__init__" -> "Fxn:super(UpSampling3D,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:call" -> "Fxn:K.resize_volumes(inputs,";
    "Fxn:get_config" -> "Fxn:super(UpSampling3D,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:ZeroPadding1D(Layer):" -> "Fxn:__init__";
    "class:ZeroPadding1D(Layer):" -> "Fxn:compute_output_shape";
    "class:ZeroPadding1D(Layer):" -> "Fxn:call";
    "class:ZeroPadding1D(Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(ZeroPadding1D,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(padding,";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=3)";
    "Fxn:call" -> "Fxn:K.temporal_padding(inputs,";
    "Fxn:get_config" -> "Fxn:super(ZeroPadding1D,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:ZeroPadding2D(Layer):" -> "Fxn:__init__";
    "class:ZeroPadding2D(Layer):" -> "Fxn:compute_output_shape";
    "class:ZeroPadding2D(Layer):" -> "Fxn:call";
    "class:ZeroPadding2D(Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:padding=(1,";
    "Fxn:__init__" -> "Fxn:super(ZeroPadding2D,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:__init__" -> "Fxn:isinstance(padding,";
    "Fxn:__init__" -> "Fxn:hasattr(padding,";
    "Fxn:__init__" -> "Fxn:len(padding)";
    "Fxn:__init__" -> "Fxn:ValueError('`padding`";
    "Fxn:__init__" -> "Fxn:str(padding))";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(padding[0],";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(padding[1],";
    "Fxn:__init__" -> "Fxn:ValueError('`padding`";
    "Fxn:__init__" -> "Fxn:'(symmetric_height_pad,";
    "Fxn:__init__" -> "Fxn:'((top_pad,";
    "Fxn:__init__" -> "Fxn:str(padding))";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=4)";
    "Fxn:call" -> "Fxn:K.spatial_2d_padding(inputs,";
    "Fxn:get_config" -> "Fxn:super(ZeroPadding2D,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:ZeroPadding3D(Layer):" -> "Fxn:__init__";
    "class:ZeroPadding3D(Layer):" -> "Fxn:compute_output_shape";
    "class:ZeroPadding3D(Layer):" -> "Fxn:call";
    "class:ZeroPadding3D(Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:padding=(1,";
    "Fxn:__init__" -> "Fxn:super(ZeroPadding3D,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:__init__" -> "Fxn:isinstance(padding,";
    "Fxn:__init__" -> "Fxn:hasattr(padding,";
    "Fxn:__init__" -> "Fxn:len(padding)";
    "Fxn:__init__" -> "Fxn:ValueError('`padding`";
    "Fxn:__init__" -> "Fxn:str(padding))";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(padding[0],";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(padding[1],";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(padding[2],";
    "Fxn:__init__" -> "Fxn:ValueError('`padding`";
    "Fxn:__init__" -> "Fxn:'(symmetric_dim1_pad,";
    "Fxn:__init__" -> "Fxn:'((left_dim1_pad,";
    "Fxn:__init__" -> "Fxn:str(padding))";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=5)";
    "Fxn:call" -> "Fxn:K.spatial_3d_padding(inputs,";
    "Fxn:get_config" -> "Fxn:super(ZeroPadding3D,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:Cropping1D(Layer):" -> "Fxn:__init__";
    "class:Cropping1D(Layer):" -> "Fxn:compute_output_shape";
    "class:Cropping1D(Layer):" -> "Fxn:call";
    "class:Cropping1D(Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:cropping=(1,";
    "Fxn:__init__" -> "Fxn:super(Cropping1D,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(cropping,";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=3)";
    "Fxn:get_config" -> "Fxn:super(Cropping1D,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:Cropping2D(Layer):" -> "Fxn:__init__";
    "class:Cropping2D(Layer):" -> "Fxn:compute_output_shape";
    "class:Cropping2D(Layer):" -> "Fxn:call";
    "class:Cropping2D(Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:cropping=((0,";
    "Fxn:__init__" -> "Fxn:super(Cropping2D,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:__init__" -> "Fxn:isinstance(cropping,";
    "Fxn:__init__" -> "Fxn:hasattr(cropping,";
    "Fxn:__init__" -> "Fxn:len(cropping)";
    "Fxn:__init__" -> "Fxn:ValueError('`cropping`";
    "Fxn:__init__" -> "Fxn:str(cropping))";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(";
    "Fxn:__init__" -> "Fxn:ValueError('`cropping`";
    "Fxn:__init__" -> "Fxn:'(symmetric_height_crop,";
    "Fxn:__init__" -> "Fxn:'((top_crop,";
    "Fxn:__init__" -> "Fxn:str(cropping))";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=4)";
    "Fxn:get_config" -> "Fxn:super(Cropping2D,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:Cropping3D(Layer):" -> "Fxn:__init__";
    "class:Cropping3D(Layer):" -> "Fxn:compute_output_shape";
    "class:Cropping3D(Layer):" -> "Fxn:call";
    "class:Cropping3D(Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:cropping=((1,";
    "Fxn:__init__" -> "Fxn:super(Cropping3D,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:__init__" -> "Fxn:isinstance(cropping,";
    "Fxn:__init__" -> "Fxn:hasattr(cropping,";
    "Fxn:__init__" -> "Fxn:len(cropping)";
    "Fxn:__init__" -> "Fxn:ValueError('`cropping`";
    "Fxn:__init__" -> "Fxn:str(cropping))";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(cropping[0],";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(cropping[1],";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(cropping[2],";
    "Fxn:__init__" -> "Fxn:ValueError('`cropping`";
    "Fxn:__init__" -> "Fxn:'(symmetric_dim1_crop,";
    "Fxn:__init__" -> "Fxn:'((left_dim1_crop,";
    "Fxn:__init__" -> "Fxn:str(cropping))";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=5)";
    "Fxn:get_config" -> "Fxn:super(Cropping3D,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "/keras/layers/convolutional_recurrent.py" -> "Import:absolute_import";
    "/keras/layers/convolutional_recurrent.py" -> "Import:division";
    "/keras/layers/convolutional_recurrent.py" -> "Import:print_function";
    "/keras/layers/convolutional_recurrent.py" -> "Import:backend";
    "/keras/layers/convolutional_recurrent.py" -> "Import:activations";
    "/keras/layers/convolutional_recurrent.py" -> "Import:initializers";
    "/keras/layers/convolutional_recurrent.py" -> "Import:regularizers";
    "/keras/layers/convolutional_recurrent.py" -> "Import:constraints";
    "/keras/layers/convolutional_recurrent.py" -> "Import:_generate_dropout_mask";
    "/keras/layers/convolutional_recurrent.py" -> "Import:numpy";
    "/keras/layers/convolutional_recurrent.py" -> "Import:warnings";
    "/keras/layers/convolutional_recurrent.py" -> "Import:InputSpec,";
    "/keras/layers/convolutional_recurrent.py" -> "Import:conv_utils";
    "/keras/layers/convolutional_recurrent.py" -> "Import:interfaces";
    "/keras/layers/convolutional_recurrent.py" -> "Import:Recurrent,";
    "/keras/layers/convolutional_recurrent.py" -> "Import:RNN";
    "/keras/layers/convolutional_recurrent.py" -> "Import:has_arg";
    "/keras/layers/convolutional_recurrent.py" -> "class:ConvRNN2D(RNN):";
    "/keras/layers/convolutional_recurrent.py" -> "class:ConvLSTM2DCell(Layer):";
    "/keras/layers/convolutional_recurrent.py" -> "class:ConvLSTM2D(ConvRNN2D):";
    "class:ConvRNN2D(RNN):" -> "Fxn:__init__";
    "class:ConvRNN2D(RNN):" -> "Fxn:compute_output_shape";
    "class:ConvRNN2D(RNN):" -> "Fxn:build";
    "class:ConvRNN2D(RNN):" -> "Fxn:get_initial_state";
    "class:ConvRNN2D(RNN):" -> "Fxn:__call__";
    "class:ConvRNN2D(RNN):" -> "Fxn:call";
    "class:ConvRNN2D(RNN):" -> "Fxn:step";
    "class:ConvRNN2D(RNN):" -> "Fxn:step";
    "class:ConvRNN2D(RNN):" -> "Fxn:reset_states";
    "class:ConvRNN2D(RNN):" -> "Fxn:get_tuple_shape";
    "Fxn:__init__" -> "Fxn:TypeError('Unrolling";
    "Fxn:__init__" -> "Fxn:isinstance(cell,";
    "Fxn:__init__" -> "Fxn:TypeError('It";
    "Fxn:__init__" -> "Fxn:super(ConvRNN2D,";
    "Fxn:__init__" -> "Fxn:self).__init__(cell,";
    "Fxn:__init__" -> "Fxn:[InputSpec(ndim=5)]";
    "Fxn:compute_output_shape" -> "Fxn:isinstance(input_shape,";
    "Fxn:compute_output_shape" -> "Fxn:conv_utils.conv_output_length(rows,";
    "Fxn:compute_output_shape" -> "Fxn:conv_utils.conv_output_length(cols,";
    "Fxn:compute_output_shape" -> "Fxn:[(input_shape[0],";
    "Fxn:compute_output_shape" -> "Fxn:range(2)]";
    "Fxn:compute_output_shape" -> "Fxn:[(input_shape[0],";
    "Fxn:compute_output_shape" -> "Fxn:range(2)]";
    "Fxn:build" -> "Fxn:isinstance(input_shape,";
    "Fxn:build" -> "Fxn:InputSpec(shape=(batch_size,";
    "Fxn:build" -> "Fxn:isinstance(self.cell,";
    "Fxn:build" -> "Fxn:self.cell.build([step_input_shape]";
    "Fxn:build" -> "Fxn:self.cell.build(step_input_shape)";
    "Fxn:build" -> "Fxn:hasattr(self.cell.state_size,";
    "Fxn:build" -> "Fxn:list(self.cell.state_size)";
    "Fxn:build" -> "Fxn:ValueError(";
    "Fxn:build" -> "Fxn:'{}'.format([spec.shape";
    "Fxn:build" -> "Fxn:[InputSpec(shape=(None,";
    "Fxn:build" -> "Fxn:[InputSpec(shape=(None,";
    "Fxn:build" -> "Fxn:self.reset_states()";
    "Fxn:get_initial_state" -> "Fxn:K.zeros_like(inputs)";
    "Fxn:get_initial_state" -> "Fxn:K.sum(initial_state,";
    "Fxn:get_initial_state" -> "Fxn:list(self.cell.kernel_shape)";
    "Fxn:get_initial_state" -> "Fxn:self.cell.input_conv(initial_state,";
    "Fxn:get_initial_state" -> "Fxn:K.zeros(tuple(shape)),";
    "Fxn:get_initial_state" -> "Fxn:call()";
    "Fxn:get_initial_state" -> "Fxn:list(K.int_shape(inputs))";
    "Fxn:get_initial_state" -> "Fxn:keras_shape.pop(1)";
    "Fxn:get_initial_state" -> "Fxn:K.image_data_format()";
    "Fxn:get_initial_state" -> "Fxn:enumerate(indices):";
    "Fxn:get_initial_state" -> "Fxn:conv_utils.conv_output_length(";
    "Fxn:get_initial_state" -> "Fxn:hasattr(self.cell.state_size,";
    "Fxn:__call__" -> "Fxn:self._standardize_args(";
    "Fxn:__call__" -> "Fxn:super(ConvRNN2D,";
    "Fxn:__call__" -> "Fxn:self).__call__(inputs,";
    "Fxn:__call__" -> "Fxn:K.int_shape(state)";
    "Fxn:__call__" -> "Fxn:tuple(None";
    "Fxn:__call__" -> "Fxn:range(K.ndim(state)))";
    "Fxn:__call__" -> "Fxn:self.state_spec.append(InputSpec(shape=shape))";
    "Fxn:__call__" -> "Fxn:[InputSpec(shape=K.int_shape(constant))";
    "Fxn:__call__" -> "Fxn:len(constants)";
    "Fxn:__call__" -> "Fxn:K.is_keras_tensor(tensor)";
    "Fxn:__call__" -> "Fxn:K.is_keras_tensor(additional_inputs[0]):";
    "Fxn:__call__" -> "Fxn:ValueError('The";
    "Fxn:__call__" -> "Fxn:K.is_keras_tensor(additional_inputs[0]):";
    "Fxn:__call__" -> "Fxn:super(ConvRNN2D,";
    "Fxn:__call__" -> "Fxn:self).__call__(full_input,";
    "Fxn:__call__" -> "Fxn:super(ConvRNN2D,";
    "Fxn:__call__" -> "Fxn:self).__call__(inputs,";
    "Fxn:call" -> "Fxn:.build()";
    "Fxn:call" -> "Fxn:isinstance(inputs,";
    "Fxn:call" -> "Fxn:self.get_initial_state(inputs)";
    "Fxn:call" -> "Fxn:isinstance(mask,";
    "Fxn:call" -> "Fxn:len(initial_state)";
    "Fxn:call" -> "Fxn:len(self.states):";
    "Fxn:call" -> "Fxn:ValueError('Layer";
    "Fxn:call" -> "Fxn:str(len(self.states))";
    "Fxn:call" -> "Fxn:str(len(initial_state))";
    "Fxn:call" -> "Fxn:K.int_shape(inputs)[1]";
    "Fxn:call" -> "Fxn:has_arg(self.cell.call,";
    "Fxn:call" -> "Fxn:has_arg(self.cell.call,";
    "Fxn:call" -> "Fxn:ValueError('RNN";
    "Fxn:step" -> "Fxn:self.cell.call(inputs,";
    "Fxn:step" -> "Fxn:self.cell.call(inputs,";
    "Fxn:step" -> "Fxn:K.rnn(step,";
    "Fxn:step" -> "Fxn:range(len(states)):";
    "Fxn:step" -> "Fxn:updates.append((self.states[i],";
    "Fxn:step" -> "Fxn:self.add_update(updates,";
    "Fxn:step" -> "Fxn:getattr(last_output,";
    "Fxn:step" -> "Fxn:isinstance(states,";
    "Fxn:step" -> "Fxn:list(states)";
    "Fxn:reset_states" -> "Fxn:AttributeError('Layer";
    "Fxn:reset_states" -> "Fxn:self.compute_output_shape(input_shape)";
    "Fxn:reset_states" -> "Fxn:ValueError('If";
    "Fxn:get_tuple_shape" -> "Fxn:list(state_shape)";
    "Fxn:get_tuple_shape" -> "Fxn:tuple(result)";
    "Fxn:get_tuple_shape" -> "Fxn:hasattr(self.cell.state_size,";
    "Fxn:get_tuple_shape" -> "Fxn:[K.zeros(get_tuple_shape(dim))";
    "Fxn:get_tuple_shape" -> "Fxn:[K.zeros(get_tuple_shape(self.cell.state_size))]";
    "Fxn:get_tuple_shape" -> "Fxn:hasattr(self.cell.state_size,";
    "Fxn:get_tuple_shape" -> "Fxn:zip(self.states,";
    "Fxn:get_tuple_shape" -> "Fxn:K.set_value(state,";
    "Fxn:get_tuple_shape" -> "Fxn:np.zeros(get_tuple_shape(dim)))";
    "Fxn:get_tuple_shape" -> "Fxn:K.set_value(self.states[0],";
    "Fxn:get_tuple_shape" -> "Fxn:np.zeros(get_tuple_shape(self.cell.state_size)))";
    "Fxn:get_tuple_shape" -> "Fxn:isinstance(states,";
    "Fxn:get_tuple_shape" -> "Fxn:len(states)";
    "Fxn:get_tuple_shape" -> "Fxn:len(self.states):";
    "Fxn:get_tuple_shape" -> "Fxn:ValueError('Layer";
    "Fxn:get_tuple_shape" -> "Fxn:str(len(self.states))";
    "Fxn:get_tuple_shape" -> "Fxn:str(len(states))";
    "Fxn:get_tuple_shape" -> "Fxn:str(states))";
    "Fxn:get_tuple_shape" -> "Fxn:enumerate(zip(states,";
    "Fxn:get_tuple_shape" -> "Fxn:hasattr(self.cell.state_size,";
    "Fxn:get_tuple_shape" -> "Fxn:get_tuple_shape(dim):";
    "Fxn:get_tuple_shape" -> "Fxn:ValueError('State";
    "Fxn:get_tuple_shape" -> "Fxn:str(index)";
    "Fxn:get_tuple_shape" -> "Fxn:str(get_tuple_shape(dim))";
    "Fxn:get_tuple_shape" -> "Fxn:str(value.shape))";
    "Fxn:get_tuple_shape" -> "Fxn:K.set_value(state,";
    "class:ConvLSTM2DCell(Layer):" -> "Fxn:__init__";
    "class:ConvLSTM2DCell(Layer):" -> "Fxn:build";
    "class:ConvLSTM2DCell(Layer):" -> "Fxn:call";
    "class:ConvLSTM2DCell(Layer):" -> "Fxn:input_conv";
    "class:ConvLSTM2DCell(Layer):" -> "Fxn:recurrent_conv";
    "class:ConvLSTM2DCell(Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:strides=(1,";
    "Fxn:__init__" -> "Fxn:dilation_rate=(1,";
    "Fxn:__init__" -> "Fxn:super(ConvLSTM2DCell,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(kernel_size,";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(strides,";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_padding(padding)";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(dilation_rate,";
    "Fxn:__init__" -> "Fxn:activations.get(activation)";
    "Fxn:__init__" -> "Fxn:activations.get(recurrent_activation)";
    "Fxn:__init__" -> "Fxn:initializers.get(kernel_initializer)";
    "Fxn:__init__" -> "Fxn:initializers.get(recurrent_initializer)";
    "Fxn:__init__" -> "Fxn:initializers.get(bias_initializer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(kernel_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(recurrent_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(bias_regularizer)";
    "Fxn:__init__" -> "Fxn:constraints.get(kernel_constraint)";
    "Fxn:__init__" -> "Fxn:constraints.get(recurrent_constraint)";
    "Fxn:__init__" -> "Fxn:constraints.get(bias_constraint)";
    "Fxn:__init__" -> "Fxn:K.backend()";
    "Fxn:__init__" -> "Fxn:warnings.warn(";
    "Fxn:__init__" -> "Fxn:min(1.,";
    "Fxn:__init__" -> "Fxn:max(0.,";
    "Fxn:__init__" -> "Fxn:min(1.,";
    "Fxn:__init__" -> "Fxn:max(0.,";
    "Fxn:build" -> "Fxn:ValueError('The";
    "Fxn:build" -> "Fxn:self.add_weight(shape=kernel_shape,";
    "Fxn:build" -> "Fxn:self.add_weight(";
    "Fxn:build" -> "Fxn:self.add_weight(shape=(self.filters";
    "Fxn:build" -> "Fxn:np.zeros((self.filters";
    "Fxn:build" -> "Fxn:K.set_value(self.bias,";
    "Fxn:call" -> "Fxn:_generate_dropout_mask(";
    "Fxn:call" -> "Fxn:K.ones_like(inputs),";
    "Fxn:call" -> "Fxn:_generate_dropout_mask(";
    "Fxn:call" -> "Fxn:K.ones_like(states[1]),";
    "Fxn:call" -> "Fxn:self.input_conv(inputs_i,";
    "Fxn:call" -> "Fxn:self.input_conv(inputs_f,";
    "Fxn:call" -> "Fxn:self.input_conv(inputs_c,";
    "Fxn:call" -> "Fxn:self.input_conv(inputs_o,";
    "Fxn:call" -> "Fxn:self.recurrent_conv(h_tm1_i,";
    "Fxn:call" -> "Fxn:self.recurrent_conv(h_tm1_f,";
    "Fxn:call" -> "Fxn:self.recurrent_conv(h_tm1_c,";
    "Fxn:call" -> "Fxn:self.recurrent_conv(h_tm1_o,";
    "Fxn:call" -> "Fxn:self.recurrent_activation(x_i";
    "Fxn:call" -> "Fxn:self.recurrent_activation(x_f";
    "Fxn:call" -> "Fxn:self.activation(x_c";
    "Fxn:call" -> "Fxn:self.recurrent_activation(x_o";
    "Fxn:call" -> "Fxn:self.activation(c)";
    "Fxn:input_conv" -> "Fxn:K.conv2d(x,";
    "Fxn:input_conv" -> "Fxn:K.bias_add(conv_out,";
    "Fxn:recurrent_conv" -> "Fxn:K.conv2d(x,";
    "Fxn:recurrent_conv" -> "Fxn:strides=(1,";
    "Fxn:get_config" -> "Fxn:activations.serialize(self.activation),";
    "Fxn:get_config" -> "Fxn:activations.serialize(self.recurrent_activation),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.kernel_initializer),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.recurrent_initializer),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.bias_initializer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.kernel_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.recurrent_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.bias_regularizer),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.kernel_constraint),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.recurrent_constraint),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.bias_constraint),";
    "Fxn:get_config" -> "Fxn:super(ConvLSTM2DCell,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:ConvLSTM2D(ConvRNN2D):" -> "Fxn:__init__";
    "class:ConvLSTM2D(ConvRNN2D):" -> "Fxn:call";
    "class:ConvLSTM2D(ConvRNN2D):" -> "Fxn:filters";
    "class:ConvLSTM2D(ConvRNN2D):" -> "Fxn:kernel_size";
    "class:ConvLSTM2D(ConvRNN2D):" -> "Fxn:strides";
    "class:ConvLSTM2D(ConvRNN2D):" -> "Fxn:padding";
    "class:ConvLSTM2D(ConvRNN2D):" -> "Fxn:data_format";
    "class:ConvLSTM2D(ConvRNN2D):" -> "Fxn:dilation_rate";
    "class:ConvLSTM2D(ConvRNN2D):" -> "Fxn:activation";
    "class:ConvLSTM2D(ConvRNN2D):" -> "Fxn:recurrent_activation";
    "class:ConvLSTM2D(ConvRNN2D):" -> "Fxn:use_bias";
    "class:ConvLSTM2D(ConvRNN2D):" -> "Fxn:kernel_initializer";
    "class:ConvLSTM2D(ConvRNN2D):" -> "Fxn:recurrent_initializer";
    "class:ConvLSTM2D(ConvRNN2D):" -> "Fxn:bias_initializer";
    "class:ConvLSTM2D(ConvRNN2D):" -> "Fxn:unit_forget_bias";
    "class:ConvLSTM2D(ConvRNN2D):" -> "Fxn:kernel_regularizer";
    "class:ConvLSTM2D(ConvRNN2D):" -> "Fxn:recurrent_regularizer";
    "class:ConvLSTM2D(ConvRNN2D):" -> "Fxn:bias_regularizer";
    "class:ConvLSTM2D(ConvRNN2D):" -> "Fxn:kernel_constraint";
    "class:ConvLSTM2D(ConvRNN2D):" -> "Fxn:recurrent_constraint";
    "class:ConvLSTM2D(ConvRNN2D):" -> "Fxn:bias_constraint";
    "class:ConvLSTM2D(ConvRNN2D):" -> "Fxn:dropout";
    "class:ConvLSTM2D(ConvRNN2D):" -> "Fxn:recurrent_dropout";
    "class:ConvLSTM2D(ConvRNN2D):" -> "Fxn:get_config";
    "class:ConvLSTM2D(ConvRNN2D):" -> "Fxn:from_config";
    "Fxn:__init__" -> "Fxn:strides=(1,";
    "Fxn:__init__" -> "Fxn:dilation_rate=(1,";
    "Fxn:__init__" -> "Fxn:ConvLSTM2DCell(filters=filters,";
    "Fxn:__init__" -> "Fxn:super(ConvLSTM2D,";
    "Fxn:__init__" -> "Fxn:self).__init__(cell,";
    "Fxn:__init__" -> "Fxn:regularizers.get(activity_regularizer)";
    "Fxn:call" -> "Fxn:super(ConvLSTM2D,";
    "Fxn:call" -> "Fxn:self).call(inputs,";
    "Fxn:get_config" -> "Fxn:activations.serialize(self.activation),";
    "Fxn:get_config" -> "Fxn:activations.serialize(self.recurrent_activation),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.kernel_initializer),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.recurrent_initializer),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.bias_initializer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.kernel_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.recurrent_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.bias_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.activity_regularizer),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.kernel_constraint),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.recurrent_constraint),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.bias_constraint),";
    "Fxn:get_config" -> "Fxn:super(ConvLSTM2D,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "Fxn:from_config" -> "Fxn:cls(**config)";
    "/keras/layers/core.py" -> "Import:absolute_import";
    "/keras/layers/core.py" -> "Import:division";
    "/keras/layers/core.py" -> "Import:print_function";
    "/keras/layers/core.py" -> "Import:numpy";
    "/keras/layers/core.py" -> "Import:copy";
    "/keras/layers/core.py" -> "Import:types";
    "/keras/layers/core.py" -> "Import:warnings";
    "/keras/layers/core.py" -> "Import:backend";
    "/keras/layers/core.py" -> "Import:activations";
    "/keras/layers/core.py" -> "Import:initializers";
    "/keras/layers/core.py" -> "Import:regularizers";
    "/keras/layers/core.py" -> "Import:constraints";
    "/keras/layers/core.py" -> "Import:InputSpec";
    "/keras/layers/core.py" -> "Import:Layer";
    "/keras/layers/core.py" -> "Import:func_dump";
    "/keras/layers/core.py" -> "Import:func_load";
    "/keras/layers/core.py" -> "Import:deserialize_keras_object";
    "/keras/layers/core.py" -> "Import:has_arg";
    "/keras/layers/core.py" -> "Import:interfaces";
    "/keras/layers/core.py" -> "class:Masking(Layer):";
    "/keras/layers/core.py" -> "class:Dropout(Layer):";
    "/keras/layers/core.py" -> "class:SpatialDropout1D(Dropout):";
    "/keras/layers/core.py" -> "class:SpatialDropout2D(Dropout):";
    "/keras/layers/core.py" -> "class:SpatialDropout3D(Dropout):";
    "/keras/layers/core.py" -> "class:Activation(Layer):";
    "/keras/layers/core.py" -> "class:Reshape(Layer):";
    "/keras/layers/core.py" -> "class:Permute(Layer):";
    "/keras/layers/core.py" -> "class:Flatten(Layer):";
    "/keras/layers/core.py" -> "class:RepeatVector(Layer):";
    "/keras/layers/core.py" -> "class:Lambda(Layer):";
    "/keras/layers/core.py" -> "class:Dense(Layer):";
    "/keras/layers/core.py" -> "class:ActivityRegularization(Layer):";
    "class:Masking(Layer):" -> "Fxn:__init__";
    "class:Masking(Layer):" -> "Fxn:compute_mask";
    "class:Masking(Layer):" -> "Fxn:call";
    "class:Masking(Layer):" -> "Fxn:get_config";
    "class:Masking(Layer):" -> "Fxn:compute_output_shape";
    "Fxn:__init__" -> "Fxn:super(Masking,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:compute_mask" -> "Fxn:K.any(K.not_equal(inputs,";
    "Fxn:call" -> "Fxn:K.any(K.not_equal(inputs,";
    "Fxn:call" -> "Fxn:K.cast(boolean_mask,";
    "Fxn:call" -> "Fxn:K.dtype(inputs))";
    "Fxn:get_config" -> "Fxn:super(Masking,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:Dropout(Layer):" -> "Fxn:__init__";
    "class:Dropout(Layer):" -> "Fxn:_get_noise_shape";
    "class:Dropout(Layer):" -> "Fxn:call";
    "class:Dropout(Layer):" -> "Fxn:dropped_inputs";
    "class:Dropout(Layer):" -> "Fxn:get_config";
    "class:Dropout(Layer):" -> "Fxn:compute_output_shape";
    "Fxn:__init__" -> "Fxn:super(Dropout,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:min(1.,";
    "Fxn:__init__" -> "Fxn:max(0.,";
    "Fxn:_get_noise_shape" -> "Fxn:K.shape(inputs)";
    "Fxn:_get_noise_shape" -> "Fxn:enumerate(self.noise_shape)]";
    "Fxn:_get_noise_shape" -> "Fxn:tuple(noise_shape)";
    "Fxn:call" -> "Fxn:self._get_noise_shape(inputs)";
    "Fxn:dropped_inputs" -> "Fxn:K.dropout(inputs,";
    "Fxn:dropped_inputs" -> "Fxn:K.in_train_phase(dropped_inputs,";
    "Fxn:get_config" -> "Fxn:super(Dropout,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:SpatialDropout1D(Dropout):" -> "Fxn:__init__";
    "class:SpatialDropout1D(Dropout):" -> "Fxn:_get_noise_shape";
    "Fxn:__init__" -> "Fxn:super(SpatialDropout1D,";
    "Fxn:__init__" -> "Fxn:self).__init__(rate,";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=3)";
    "Fxn:_get_noise_shape" -> "Fxn:K.shape(inputs)";
    "class:SpatialDropout2D(Dropout):" -> "Fxn:__init__";
    "class:SpatialDropout2D(Dropout):" -> "Fxn:_get_noise_shape";
    "Fxn:__init__" -> "Fxn:super(SpatialDropout2D,";
    "Fxn:__init__" -> "Fxn:self).__init__(rate,";
    "Fxn:__init__" -> "Fxn:K.image_data_format()";
    "Fxn:__init__" -> "Fxn:ValueError('`data_format`";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=4)";
    "Fxn:_get_noise_shape" -> "Fxn:K.shape(inputs)";
    "class:SpatialDropout3D(Dropout):" -> "Fxn:__init__";
    "class:SpatialDropout3D(Dropout):" -> "Fxn:_get_noise_shape";
    "Fxn:__init__" -> "Fxn:super(SpatialDropout3D,";
    "Fxn:__init__" -> "Fxn:self).__init__(rate,";
    "Fxn:__init__" -> "Fxn:K.image_data_format()";
    "Fxn:__init__" -> "Fxn:ValueError('`data_format`";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=5)";
    "Fxn:_get_noise_shape" -> "Fxn:K.shape(inputs)";
    "class:Activation(Layer):" -> "Fxn:__init__";
    "class:Activation(Layer):" -> "Fxn:call";
    "class:Activation(Layer):" -> "Fxn:get_config";
    "class:Activation(Layer):" -> "Fxn:compute_output_shape";
    "Fxn:__init__" -> "Fxn:super(Activation,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:activations.get(activation)";
    "Fxn:call" -> "Fxn:self.activation(inputs)";
    "Fxn:get_config" -> "Fxn:activations.serialize(self.activation)}";
    "Fxn:get_config" -> "Fxn:super(Activation,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:Reshape(Layer):" -> "Fxn:__init__";
    "class:Reshape(Layer):" -> "Fxn:_fix_unknown_dimension";
    "class:Reshape(Layer):" -> "Fxn:compute_output_shape";
    "class:Reshape(Layer):" -> "Fxn:call";
    "class:Reshape(Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(Reshape,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:tuple(target_shape)";
    "Fxn:_fix_unknown_dimension" -> "Fxn:list(output_shape)";
    "Fxn:_fix_unknown_dimension" -> "Fxn:enumerate(output_shape):";
    "Fxn:_fix_unknown_dimension" -> "Fxn:ValueError('Can";
    "Fxn:_fix_unknown_dimension" -> "Fxn:np.prod(input_shape,";
    "Fxn:_fix_unknown_dimension" -> "Fxn:ValueError(msg)";
    "Fxn:_fix_unknown_dimension" -> "Fxn:ValueError(msg)";
    "Fxn:_fix_unknown_dimension" -> "Fxn:tuple(output_shape)";
    "Fxn:compute_output_shape" -> "Fxn:tuple(s";
    "Fxn:compute_output_shape" -> "Fxn:self._fix_unknown_dimension(";
    "Fxn:call" -> "Fxn:K.reshape(inputs,";
    "Fxn:get_config" -> "Fxn:super(Reshape,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:Permute(Layer):" -> "Fxn:__init__";
    "class:Permute(Layer):" -> "Fxn:compute_output_shape";
    "class:Permute(Layer):" -> "Fxn:call";
    "class:Permute(Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(Permute,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:tuple(dims)";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=len(self.dims)";
    "Fxn:compute_output_shape" -> "Fxn:list(input_shape)";
    "Fxn:compute_output_shape" -> "Fxn:copy.copy(input_shape)";
    "Fxn:compute_output_shape" -> "Fxn:enumerate(self.dims):";
    "Fxn:compute_output_shape" -> "Fxn:tuple(output_shape)";
    "Fxn:call" -> "Fxn:K.permute_dimensions(inputs,";
    "Fxn:get_config" -> "Fxn:super(Permute,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:Flatten(Layer):" -> "Fxn:__init__";
    "class:Flatten(Layer):" -> "Fxn:compute_output_shape";
    "class:Flatten(Layer):" -> "Fxn:call";
    "Fxn:__init__" -> "Fxn:super(Flatten,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:InputSpec(min_ndim=3)";
    "Fxn:compute_output_shape" -> "Fxn:all(input_shape[1:]):";
    "Fxn:compute_output_shape" -> "Fxn:ValueError('The";
    "Fxn:compute_output_shape" -> "Fxn:'(got";
    "Fxn:compute_output_shape" -> "Fxn:str(input_shape[1:])";
    "Fxn:compute_output_shape" -> "Fxn:np.prod(input_shape[1:]))";
    "Fxn:call" -> "Fxn:K.batch_flatten(inputs)";
    "class:RepeatVector(Layer):" -> "Fxn:__init__";
    "class:RepeatVector(Layer):" -> "Fxn:compute_output_shape";
    "class:RepeatVector(Layer):" -> "Fxn:call";
    "class:RepeatVector(Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(RepeatVector,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=2)";
    "Fxn:call" -> "Fxn:K.repeat(inputs,";
    "Fxn:get_config" -> "Fxn:super(RepeatVector,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:Lambda(Layer):" -> "Fxn:antirectifier";
    "class:Lambda(Layer):" -> "Fxn:antirectifier_output_shape";
    "class:Lambda(Layer):" -> "Fxn:__init__";
    "class:Lambda(Layer):" -> "Fxn:compute_output_shape";
    "class:Lambda(Layer):" -> "Fxn:call";
    "class:Lambda(Layer):" -> "Fxn:compute_mask";
    "class:Lambda(Layer):" -> "Fxn:get_config";
    "class:Lambda(Layer):" -> "Fxn:from_config";
    "Fxn:antirectifier" -> "Fxn:K.mean(x,";
    "Fxn:antirectifier" -> "Fxn:K.l2_normalize(x,";
    "Fxn:antirectifier" -> "Fxn:K.relu(x)";
    "Fxn:antirectifier" -> "Fxn:K.relu(-x)";
    "Fxn:antirectifier" -> "Fxn:K.concatenate([pos,";
    "Fxn:antirectifier_output_shape" -> "Fxn:list(input_shape)";
    "Fxn:antirectifier_output_shape" -> "Fxn:len(shape)";
    "Fxn:antirectifier_output_shape" -> "Fxn:tuple(shape)";
    "Fxn:antirectifier_output_shape" -> "Fxn:model.add(Lambda(antirectifier,";
    "Fxn:antirectifier_output_shape" -> "Fxn:f(input_shape)`";
    "Fxn:__init__" -> "Fxn:super(Lambda,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:isinstance(output_shape,";
    "Fxn:__init__" -> "Fxn:tuple(output_shape)";
    "Fxn:__init__" -> "Fxn:callable(output_shape):";
    "Fxn:__init__" -> "Fxn:TypeError('In";
    "Fxn:compute_output_shape" -> "Fxn:K.backend()";
    "Fxn:compute_output_shape" -> "Fxn:isinstance(input_shape,";
    "Fxn:compute_output_shape" -> "Fxn:[K.placeholder(shape=shape)";
    "Fxn:compute_output_shape" -> "Fxn:self.call(xs)";
    "Fxn:compute_output_shape" -> "Fxn:K.placeholder(shape=input_shape)";
    "Fxn:compute_output_shape" -> "Fxn:self.call(x)";
    "Fxn:compute_output_shape" -> "Fxn:isinstance(x,";
    "Fxn:compute_output_shape" -> "Fxn:[K.int_shape(x_elem)";
    "Fxn:compute_output_shape" -> "Fxn:K.int_shape(x)";
    "Fxn:compute_output_shape" -> "Fxn:warnings.warn('`output_shape`";
    "Fxn:compute_output_shape" -> "Fxn:'(same";
    "Fxn:compute_output_shape" -> "Fxn:.format(self.name,";
    "Fxn:compute_output_shape" -> "Fxn:isinstance(self._output_shape,";
    "Fxn:compute_output_shape" -> "Fxn:isinstance(input_shape,";
    "Fxn:compute_output_shape" -> "Fxn:tuple(self._output_shape)";
    "Fxn:compute_output_shape" -> "Fxn:self._output_shape(input_shape)";
    "Fxn:compute_output_shape" -> "Fxn:isinstance(shape,";
    "Fxn:compute_output_shape" -> "Fxn:ValueError('`output_shape`";
    "Fxn:compute_output_shape" -> "Fxn:isinstance(shape,";
    "Fxn:compute_output_shape" -> "Fxn:isinstance(shape[0],";
    "Fxn:compute_output_shape" -> "Fxn:tuple(shape)";
    "Fxn:call" -> "Fxn:has_arg(self.function,";
    "Fxn:call" -> "Fxn:self.function(inputs,";
    "Fxn:compute_mask" -> "Fxn:callable(self.mask):";
    "Fxn:compute_mask" -> "Fxn:self.mask(inputs,";
    "Fxn:get_config" -> "Fxn:isinstance(self.function,";
    "Fxn:get_config" -> "Fxn:func_dump(self.function)";
    "Fxn:get_config" -> "Fxn:isinstance(self._output_shape,";
    "Fxn:get_config" -> "Fxn:func_dump(self._output_shape)";
    "Fxn:get_config" -> "Fxn:callable(self._output_shape):";
    "Fxn:get_config" -> "Fxn:super(Lambda,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "Fxn:from_config" -> "Fxn:config.copy()";
    "Fxn:from_config" -> "Fxn:globals()";
    "Fxn:from_config" -> "Fxn:dict(list(globs.items())";
    "Fxn:from_config" -> "Fxn:list(custom_objects.items()))";
    "Fxn:from_config" -> "Fxn:config.pop('function_type')";
    "Fxn:from_config" -> "Fxn:deserialize_keras_object(";
    "Fxn:from_config" -> "Fxn:func_load(config['function'],";
    "Fxn:from_config" -> "Fxn:TypeError('Unknown";
    "Fxn:from_config" -> "Fxn:config.pop('output_shape_type')";
    "Fxn:from_config" -> "Fxn:deserialize_keras_object(";
    "Fxn:from_config" -> "Fxn:func_load(config['output_shape'],";
    "Fxn:from_config" -> "Fxn:isinstance(config['arguments'][key],";
    "Fxn:from_config" -> "Fxn:np.array(arg_dict['value'])";
    "Fxn:from_config" -> "Fxn:cls(**config)";
    "class:Dense(Layer):" -> "Fxn:__init__";
    "class:Dense(Layer):" -> "Fxn:build";
    "class:Dense(Layer):" -> "Fxn:call";
    "class:Dense(Layer):" -> "Fxn:compute_output_shape";
    "class:Dense(Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(Dense,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:activations.get(activation)";
    "Fxn:__init__" -> "Fxn:initializers.get(kernel_initializer)";
    "Fxn:__init__" -> "Fxn:initializers.get(bias_initializer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(kernel_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(bias_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(activity_regularizer)";
    "Fxn:__init__" -> "Fxn:constraints.get(kernel_constraint)";
    "Fxn:__init__" -> "Fxn:constraints.get(bias_constraint)";
    "Fxn:__init__" -> "Fxn:InputSpec(min_ndim=2)";
    "Fxn:build" -> "Fxn:len(input_shape)";
    "Fxn:build" -> "Fxn:self.add_weight(shape=(input_dim,";
    "Fxn:build" -> "Fxn:self.add_weight(shape=(self.units,),";
    "Fxn:build" -> "Fxn:InputSpec(min_ndim=2,";
    "Fxn:call" -> "Fxn:K.dot(inputs,";
    "Fxn:call" -> "Fxn:K.bias_add(output,";
    "Fxn:call" -> "Fxn:self.activation(output)";
    "Fxn:compute_output_shape" -> "Fxn:len(input_shape)";
    "Fxn:compute_output_shape" -> "Fxn:list(input_shape)";
    "Fxn:compute_output_shape" -> "Fxn:tuple(output_shape)";
    "Fxn:get_config" -> "Fxn:activations.serialize(self.activation),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.kernel_initializer),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.bias_initializer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.kernel_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.bias_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.activity_regularizer),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.kernel_constraint),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.bias_constraint)";
    "Fxn:get_config" -> "Fxn:super(Dense,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:ActivityRegularization(Layer):" -> "Fxn:__init__";
    "class:ActivityRegularization(Layer):" -> "Fxn:get_config";
    "class:ActivityRegularization(Layer):" -> "Fxn:compute_output_shape";
    "Fxn:__init__" -> "Fxn:super(ActivityRegularization,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:regularizers.L1L2(l1=l1,";
    "Fxn:get_config" -> "Fxn:super(ActivityRegularization,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "/keras/layers/cudnn_recurrent.py" -> "Import:absolute_import";
    "/keras/layers/cudnn_recurrent.py" -> "Import:division";
    "/keras/layers/cudnn_recurrent.py" -> "Import:print_function";
    "/keras/layers/cudnn_recurrent.py" -> "Import:backend";
    "/keras/layers/cudnn_recurrent.py" -> "Import:initializers";
    "/keras/layers/cudnn_recurrent.py" -> "Import:regularizers";
    "/keras/layers/cudnn_recurrent.py" -> "Import:constraints";
    "/keras/layers/cudnn_recurrent.py" -> "Import:RNN";
    "/keras/layers/cudnn_recurrent.py" -> "Import:InputSpec";
    "/keras/layers/cudnn_recurrent.py" -> "Import:namedtuple";
    "/keras/layers/cudnn_recurrent.py" -> "class:_CuDNNRNN(RNN):";
    "/keras/layers/cudnn_recurrent.py" -> "Import:tensorflow";
    "/keras/layers/cudnn_recurrent.py" -> "class:CuDNNGRU(_CuDNNRNN):";
    "/keras/layers/cudnn_recurrent.py" -> "Import:cudnn_rnn_ops";
    "/keras/layers/cudnn_recurrent.py" -> "Import:tensorflow";
    "/keras/layers/cudnn_recurrent.py" -> "class:CuDNNLSTM(_CuDNNRNN):";
    "/keras/layers/cudnn_recurrent.py" -> "Import:cudnn_rnn_ops";
    "/keras/layers/cudnn_recurrent.py" -> "Import:tensorflow";
    "class:_CuDNNRNN(RNN):" -> "Fxn:__init__";
    "class:_CuDNNRNN(RNN):" -> "Fxn:_canonical_to_params";
    "class:_CuDNNRNN(RNN):" -> "Fxn:call";
    "class:_CuDNNRNN(RNN):" -> "Fxn:get_config";
    "class:_CuDNNRNN(RNN):" -> "Fxn:from_config";
    "class:_CuDNNRNN(RNN):" -> "Fxn:trainable_weights";
    "class:_CuDNNRNN(RNN):" -> "Fxn:non_trainable_weights";
    "class:_CuDNNRNN(RNN):" -> "Fxn:losses";
    "class:_CuDNNRNN(RNN):" -> "Fxn:get_losses_for";
    "Fxn:__init__" -> "Fxn:K.backend()";
    "Fxn:__init__" -> "Fxn:RuntimeError('CuDNN";
    "Fxn:__init__" -> "Fxn:super(RNN,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:[InputSpec(ndim=3)]";
    "Fxn:__init__" -> "Fxn:hasattr(self.cell.state_size,";
    "Fxn:__init__" -> "Fxn:[InputSpec(shape=(None,";
    "Fxn:_canonical_to_params" -> "Fxn:[tf.reshape(x,";
    "Fxn:_canonical_to_params" -> "Fxn:[tf.reshape(x,";
    "Fxn:_canonical_to_params" -> "Fxn:tf.concat(weights";
    "Fxn:call" -> "Fxn:isinstance(mask,";
    "Fxn:call" -> "Fxn:ValueError('Masking";
    "Fxn:call" -> "Fxn:`(samples,";
    "Fxn:call" -> "Fxn:.build()";
    "Fxn:call" -> "Fxn:isinstance(inputs,";
    "Fxn:call" -> "Fxn:self.get_initial_state(inputs)";
    "Fxn:call" -> "Fxn:len(initial_state)";
    "Fxn:call" -> "Fxn:len(self.states):";
    "Fxn:call" -> "Fxn:ValueError('Layer";
    "Fxn:call" -> "Fxn:str(len(self.states))";
    "Fxn:call" -> "Fxn:str(len(initial_state))";
    "Fxn:call" -> "Fxn:K.reverse(inputs,";
    "Fxn:call" -> "Fxn:self._process_batch(inputs,";
    "Fxn:call" -> "Fxn:range(len(states)):";
    "Fxn:call" -> "Fxn:updates.append((self.states[i],";
    "Fxn:call" -> "Fxn:self.add_update(updates,";
    "Fxn:get_config" -> "Fxn:super(RNN,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "Fxn:from_config" -> "Fxn:cls(**config)";
    "Fxn:losses" -> "Fxn:super(RNN,";
    "Fxn:get_losses_for" -> "Fxn:super(RNN,";
    "Fxn:get_losses_for" -> "Fxn:self).get_losses_for(inputs=inputs)";
    "class:CuDNNGRU(_CuDNNRNN):" -> "Fxn:__init__";
    "class:CuDNNGRU(_CuDNNRNN):" -> "Fxn:cell";
    "class:CuDNNGRU(_CuDNNRNN):" -> "Fxn:build";
    "class:CuDNNGRU(_CuDNNRNN):" -> "Fxn:_process_batch";
    "class:CuDNNGRU(_CuDNNRNN):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(CuDNNGRU,";
    "Fxn:__init__" -> "Fxn:self).__init__(";
    "Fxn:__init__" -> "Fxn:initializers.get(kernel_initializer)";
    "Fxn:__init__" -> "Fxn:initializers.get(recurrent_initializer)";
    "Fxn:__init__" -> "Fxn:initializers.get(bias_initializer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(kernel_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(recurrent_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(bias_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(activity_regularizer)";
    "Fxn:__init__" -> "Fxn:constraints.get(kernel_constraint)";
    "Fxn:__init__" -> "Fxn:constraints.get(recurrent_constraint)";
    "Fxn:__init__" -> "Fxn:constraints.get(bias_constraint)";
    "Fxn:cell" -> "Fxn:namedtuple('cell',";
    "Fxn:cell" -> "Fxn:Cell(state_size=self.units)";
    "Fxn:build" -> "Fxn:super(CuDNNGRU,";
    "Fxn:build" -> "Fxn:self).build(input_shape)";
    "Fxn:build" -> "Fxn:isinstance(input_shape,";
    "Fxn:build" -> "Fxn:cudnn_rnn_ops.CudnnGRU(";
    "Fxn:build" -> "Fxn:self.add_weight(shape=(input_dim,";
    "Fxn:build" -> "Fxn:self.add_weight(";
    "Fxn:build" -> "Fxn:shape=(self.units,";
    "Fxn:build" -> "Fxn:self.add_weight(shape=(self.units";
    "Fxn:_process_batch" -> "Fxn:tf.transpose(inputs,";
    "Fxn:_process_batch" -> "Fxn:tf.expand_dims(input_h,";
    "Fxn:_process_batch" -> "Fxn:self._canonical_to_params(";
    "Fxn:_process_batch" -> "Fxn:self._cudnn_gru(";
    "Fxn:_process_batch" -> "Fxn:tf.transpose(outputs,";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.kernel_initializer),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.recurrent_initializer),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.bias_initializer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.kernel_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.recurrent_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.bias_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.activity_regularizer),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.kernel_constraint),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.recurrent_constraint),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.bias_constraint)}";
    "Fxn:get_config" -> "Fxn:super(CuDNNGRU,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:CuDNNLSTM(_CuDNNRNN):" -> "Fxn:__init__";
    "class:CuDNNLSTM(_CuDNNRNN):" -> "Fxn:cell";
    "class:CuDNNLSTM(_CuDNNRNN):" -> "Fxn:build";
    "class:CuDNNLSTM(_CuDNNRNN):" -> "Fxn:bias_initializer";
    "class:CuDNNLSTM(_CuDNNRNN):" -> "Fxn:_process_batch";
    "class:CuDNNLSTM(_CuDNNRNN):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(CuDNNLSTM,";
    "Fxn:__init__" -> "Fxn:self).__init__(";
    "Fxn:__init__" -> "Fxn:initializers.get(kernel_initializer)";
    "Fxn:__init__" -> "Fxn:initializers.get(recurrent_initializer)";
    "Fxn:__init__" -> "Fxn:initializers.get(bias_initializer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(kernel_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(recurrent_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(bias_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(activity_regularizer)";
    "Fxn:__init__" -> "Fxn:constraints.get(kernel_constraint)";
    "Fxn:__init__" -> "Fxn:constraints.get(recurrent_constraint)";
    "Fxn:__init__" -> "Fxn:constraints.get(bias_constraint)";
    "Fxn:cell" -> "Fxn:namedtuple('cell',";
    "Fxn:cell" -> "Fxn:Cell(state_size=(self.units,";
    "Fxn:build" -> "Fxn:super(CuDNNLSTM,";
    "Fxn:build" -> "Fxn:self).build(input_shape)";
    "Fxn:build" -> "Fxn:isinstance(input_shape,";
    "Fxn:build" -> "Fxn:cudnn_rnn_ops.CudnnLSTM(";
    "Fxn:build" -> "Fxn:self.add_weight(shape=(input_dim,";
    "Fxn:build" -> "Fxn:self.add_weight(";
    "Fxn:build" -> "Fxn:shape=(self.units,";
    "Fxn:bias_initializer" -> "Fxn:K.concatenate([";
    "Fxn:bias_initializer" -> "Fxn:self.bias_initializer((self.units";
    "Fxn:bias_initializer" -> "Fxn:initializers.Ones()((self.units,),";
    "Fxn:bias_initializer" -> "Fxn:self.bias_initializer((self.units";
    "Fxn:bias_initializer" -> "Fxn:self.add_weight(shape=(self.units";
    "Fxn:_process_batch" -> "Fxn:tf.transpose(inputs,";
    "Fxn:_process_batch" -> "Fxn:tf.expand_dims(input_h,";
    "Fxn:_process_batch" -> "Fxn:tf.expand_dims(input_c,";
    "Fxn:_process_batch" -> "Fxn:self._canonical_to_params(";
    "Fxn:_process_batch" -> "Fxn:self._cudnn_lstm(";
    "Fxn:_process_batch" -> "Fxn:tf.transpose(outputs,";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.kernel_initializer),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.recurrent_initializer),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.bias_initializer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.kernel_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.recurrent_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.bias_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.activity_regularizer),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.kernel_constraint),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.recurrent_constraint),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.bias_constraint)}";
    "Fxn:get_config" -> "Fxn:super(CuDNNLSTM,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "/keras/layers/embeddings.py" -> "Import:absolute_import";
    "/keras/layers/embeddings.py" -> "Import:division";
    "/keras/layers/embeddings.py" -> "Import:print_function";
    "/keras/layers/embeddings.py" -> "Import:backend";
    "/keras/layers/embeddings.py" -> "Import:initializers";
    "/keras/layers/embeddings.py" -> "Import:regularizers";
    "/keras/layers/embeddings.py" -> "Import:constraints";
    "/keras/layers/embeddings.py" -> "Import:Layer";
    "/keras/layers/embeddings.py" -> "Import:interfaces";
    "/keras/layers/embeddings.py" -> "class:Embedding(Layer):";
    "class:Embedding(Layer):" -> "Fxn:__init__";
    "class:Embedding(Layer):" -> "Fxn:build";
    "class:Embedding(Layer):" -> "Fxn:compute_mask";
    "class:Embedding(Layer):" -> "Fxn:compute_output_shape";
    "class:Embedding(Layer):" -> "Fxn:call";
    "class:Embedding(Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(Embedding,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:initializers.get(embeddings_initializer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(embeddings_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(activity_regularizer)";
    "Fxn:__init__" -> "Fxn:constraints.get(embeddings_constraint)";
    "Fxn:build" -> "Fxn:self.add_weight(";
    "Fxn:build" -> "Fxn:shape=(self.input_dim,";
    "Fxn:compute_mask" -> "Fxn:K.not_equal(inputs,";
    "Fxn:compute_output_shape" -> "Fxn:isinstance(self.input_length,";
    "Fxn:compute_output_shape" -> "Fxn:list(self.input_length)";
    "Fxn:compute_output_shape" -> "Fxn:len(in_lens)";
    "Fxn:compute_output_shape" -> "Fxn:len(input_shape)";
    "Fxn:compute_output_shape" -> "Fxn:ValueError('"input_length"";
    "Fxn:compute_output_shape" -> "Fxn:str(input_shape)))";
    "Fxn:compute_output_shape" -> "Fxn:enumerate(zip(in_lens,";
    "Fxn:compute_output_shape" -> "Fxn:ValueError('"input_length"";
    "Fxn:compute_output_shape" -> "Fxn:str(input_shape)))";
    "Fxn:compute_output_shape" -> "Fxn:tuple(in_lens)";
    "Fxn:call" -> "Fxn:K.dtype(inputs)";
    "Fxn:call" -> "Fxn:K.cast(inputs,";
    "Fxn:call" -> "Fxn:K.gather(self.embeddings,";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.embeddings_initializer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.embeddings_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.activity_regularizer),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.embeddings_constraint),";
    "Fxn:get_config" -> "Fxn:super(Embedding,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "/keras/layers/local.py" -> "Import:absolute_import";
    "/keras/layers/local.py" -> "Import:division";
    "/keras/layers/local.py" -> "Import:print_function";
    "/keras/layers/local.py" -> "Import:backend";
    "/keras/layers/local.py" -> "Import:activations";
    "/keras/layers/local.py" -> "Import:initializers";
    "/keras/layers/local.py" -> "Import:regularizers";
    "/keras/layers/local.py" -> "Import:constraints";
    "/keras/layers/local.py" -> "Import:Layer";
    "/keras/layers/local.py" -> "Import:InputSpec";
    "/keras/layers/local.py" -> "Import:conv_utils";
    "/keras/layers/local.py" -> "Import:interfaces";
    "/keras/layers/local.py" -> "class:LocallyConnected1D(Layer):";
    "/keras/layers/local.py" -> "class:LocallyConnected2D(Layer):";
    "class:LocallyConnected1D(Layer):" -> "Fxn:__init__";
    "class:LocallyConnected1D(Layer):" -> "Fxn:build";
    "class:LocallyConnected1D(Layer):" -> "Fxn:compute_output_shape";
    "class:LocallyConnected1D(Layer):" -> "Fxn:call";
    "class:LocallyConnected1D(Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(LocallyConnected1D,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(kernel_size,";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(strides,";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_padding(padding)";
    "Fxn:__init__" -> "Fxn:ValueError('Invalid";
    "Fxn:__init__" -> "Fxn:'(only";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:__init__" -> "Fxn:activations.get(activation)";
    "Fxn:__init__" -> "Fxn:initializers.get(kernel_initializer)";
    "Fxn:__init__" -> "Fxn:initializers.get(bias_initializer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(kernel_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(bias_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(activity_regularizer)";
    "Fxn:__init__" -> "Fxn:constraints.get(kernel_constraint)";
    "Fxn:__init__" -> "Fxn:constraints.get(bias_constraint)";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=3)";
    "Fxn:build" -> "Fxn:ValueError('Axis";
    "Fxn:build" -> "Fxn:conv_utils.conv_output_length(input_shape[1],";
    "Fxn:build" -> "Fxn:self.add_weight(";
    "Fxn:build" -> "Fxn:self.add_weight(";
    "Fxn:build" -> "Fxn:shape=(output_length,";
    "Fxn:build" -> "Fxn:InputSpec(ndim=3,";
    "Fxn:compute_output_shape" -> "Fxn:conv_utils.conv_output_length(input_shape[1],";
    "Fxn:call" -> "Fxn:K.local_conv1d(inputs,";
    "Fxn:call" -> "Fxn:K.bias_add(output,";
    "Fxn:call" -> "Fxn:self.activation(output)";
    "Fxn:get_config" -> "Fxn:activations.serialize(self.activation),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.kernel_initializer),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.bias_initializer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.kernel_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.bias_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.activity_regularizer),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.kernel_constraint),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.bias_constraint)";
    "Fxn:get_config" -> "Fxn:super(LocallyConnected1D,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:LocallyConnected2D(Layer):" -> "Fxn:__init__";
    "class:LocallyConnected2D(Layer):" -> "Fxn:build";
    "class:LocallyConnected2D(Layer):" -> "Fxn:compute_output_shape";
    "class:LocallyConnected2D(Layer):" -> "Fxn:call";
    "class:LocallyConnected2D(Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:strides=(1,";
    "Fxn:__init__" -> "Fxn:super(LocallyConnected2D,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(kernel_size,";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(strides,";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_padding(padding)";
    "Fxn:__init__" -> "Fxn:ValueError('Invalid";
    "Fxn:__init__" -> "Fxn:'(only";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:__init__" -> "Fxn:activations.get(activation)";
    "Fxn:__init__" -> "Fxn:initializers.get(kernel_initializer)";
    "Fxn:__init__" -> "Fxn:initializers.get(bias_initializer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(kernel_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(bias_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(activity_regularizer)";
    "Fxn:__init__" -> "Fxn:constraints.get(kernel_constraint)";
    "Fxn:__init__" -> "Fxn:constraints.get(bias_constraint)";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=4)";
    "Fxn:build" -> "Fxn:ValueError('The";
    "Fxn:build" -> "Fxn:str(input_shape))";
    "Fxn:build" -> "Fxn:conv_utils.conv_output_length(input_row,";
    "Fxn:build" -> "Fxn:conv_utils.conv_output_length(input_col,";
    "Fxn:build" -> "Fxn:self.add_weight(shape=self.kernel_shape,";
    "Fxn:build" -> "Fxn:self.add_weight(shape=(output_row,";
    "Fxn:build" -> "Fxn:InputSpec(ndim=4,";
    "Fxn:build" -> "Fxn:InputSpec(ndim=4,";
    "Fxn:compute_output_shape" -> "Fxn:conv_utils.conv_output_length(rows,";
    "Fxn:compute_output_shape" -> "Fxn:conv_utils.conv_output_length(cols,";
    "Fxn:call" -> "Fxn:K.local_conv2d(inputs,";
    "Fxn:call" -> "Fxn:K.bias_add(output,";
    "Fxn:call" -> "Fxn:self.activation(output)";
    "Fxn:get_config" -> "Fxn:activations.serialize(self.activation),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.kernel_initializer),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.bias_initializer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.kernel_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.bias_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.activity_regularizer),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.kernel_constraint),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.bias_constraint)";
    "Fxn:get_config" -> "Fxn:super(LocallyConnected2D,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "/keras/layers/merge.py" -> "Import:absolute_import";
    "/keras/layers/merge.py" -> "Import:division";
    "/keras/layers/merge.py" -> "Import:print_function";
    "/keras/layers/merge.py" -> "Import:Layer";
    "/keras/layers/merge.py" -> "Import:backend";
    "/keras/layers/merge.py" -> "class:_Merge(Layer):";
    "/keras/layers/merge.py" -> "class:Add(_Merge):";
    "/keras/layers/merge.py" -> "Import:keras";
    "/keras/layers/merge.py" -> "class:Subtract(_Merge):";
    "/keras/layers/merge.py" -> "Import:keras";
    "/keras/layers/merge.py" -> "class:Multiply(_Merge):";
    "/keras/layers/merge.py" -> "class:Average(_Merge):";
    "/keras/layers/merge.py" -> "class:Maximum(_Merge):";
    "/keras/layers/merge.py" -> "class:Minimum(_Merge):";
    "/keras/layers/merge.py" -> "class:Concatenate(_Merge):";
    "/keras/layers/merge.py" -> "class:Dot(_Merge):";
    "/keras/layers/merge.py" -> "Import:keras";
    "/keras/layers/merge.py" -> "Import:keras";
    "class:_Merge(Layer):" -> "Fxn:__init__";
    "class:_Merge(Layer):" -> "Fxn:_merge_function";
    "class:_Merge(Layer):" -> "Fxn:_compute_elemwise_op_output_shape";
    "class:_Merge(Layer):" -> "Fxn:build";
    "class:_Merge(Layer):" -> "Fxn:call";
    "class:_Merge(Layer):" -> "Fxn:compute_output_shape";
    "class:_Merge(Layer):" -> "Fxn:compute_mask";
    "Fxn:__init__" -> "Fxn:super(_Merge,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:_compute_elemwise_op_output_shape" -> "Fxn:len(shape1)";
    "Fxn:_compute_elemwise_op_output_shape" -> "Fxn:len(shape2):";
    "Fxn:_compute_elemwise_op_output_shape" -> "Fxn:self._compute_elemwise_op_output_shape(shape2,";
    "Fxn:_compute_elemwise_op_output_shape" -> "Fxn:list(shape1[:-len(shape2)])";
    "Fxn:_compute_elemwise_op_output_shape" -> "Fxn:zip(shape1[-len(shape2):],";
    "Fxn:_compute_elemwise_op_output_shape" -> "Fxn:output_shape.append(None)";
    "Fxn:_compute_elemwise_op_output_shape" -> "Fxn:output_shape.append(j)";
    "Fxn:_compute_elemwise_op_output_shape" -> "Fxn:output_shape.append(i)";
    "Fxn:_compute_elemwise_op_output_shape" -> "Fxn:ValueError('Operands";
    "Fxn:_compute_elemwise_op_output_shape" -> "Fxn:str(shape1)";
    "Fxn:_compute_elemwise_op_output_shape" -> "Fxn:str(shape2))";
    "Fxn:_compute_elemwise_op_output_shape" -> "Fxn:output_shape.append(i)";
    "Fxn:_compute_elemwise_op_output_shape" -> "Fxn:tuple(output_shape)";
    "Fxn:build" -> "Fxn:isinstance(input_shape,";
    "Fxn:build" -> "Fxn:ValueError('A";
    "Fxn:build" -> "Fxn:len(input_shape)";
    "Fxn:build" -> "Fxn:ValueError('A";
    "Fxn:build" -> "Fxn:str(len(input_shape))";
    "Fxn:build" -> "Fxn:set(batch_sizes)";
    "Fxn:build" -> "Fxn:set([None])";
    "Fxn:build" -> "Fxn:len(batch_sizes)";
    "Fxn:build" -> "Fxn:ValueError('Can";
    "Fxn:build" -> "Fxn:str(input_shape))";
    "Fxn:build" -> "Fxn:range(1,";
    "Fxn:build" -> "Fxn:len(input_shape)):";
    "Fxn:build" -> "Fxn:self._compute_elemwise_op_output_shape(output_shape,";
    "Fxn:build" -> "Fxn:len(set(map(len,";
    "Fxn:call" -> "Fxn:isinstance(inputs,";
    "Fxn:call" -> "Fxn:ValueError('A";
    "Fxn:call" -> "Fxn:list(map(K.ndim,";
    "Fxn:call" -> "Fxn:max(input_ndims)";
    "Fxn:call" -> "Fxn:K.ndim(x)";
    "Fxn:call" -> "Fxn:range(max_ndim";
    "Fxn:call" -> "Fxn:K.expand_dims(x,";
    "Fxn:call" -> "Fxn:reshaped_inputs.append(x)";
    "Fxn:call" -> "Fxn:self._merge_function(reshaped_inputs)";
    "Fxn:call" -> "Fxn:K.ndim(x)";
    "Fxn:call" -> "Fxn:K.shape(x)";
    "Fxn:call" -> "Fxn:K.concatenate([x_shape[1:],";
    "Fxn:call" -> "Fxn:K.expand_dims(batch_size)])";
    "Fxn:call" -> "Fxn:K.reshape(x,";
    "Fxn:call" -> "Fxn:K.stack([batch_size,";
    "Fxn:call" -> "Fxn:K.prod(x_shape[1:])]))";
    "Fxn:call" -> "Fxn:K.permute_dimensions(x_transposed,";
    "Fxn:call" -> "Fxn:K.reshape(x_transposed,";
    "Fxn:call" -> "Fxn:reshaped_inputs.append(x_transposed)";
    "Fxn:call" -> "Fxn:list(range(1,";
    "Fxn:call" -> "Fxn:reshaped_inputs.append(K.permute_dimensions(x,";
    "Fxn:call" -> "Fxn:reshaped_inputs.append(x)";
    "Fxn:call" -> "Fxn:self._merge_function(reshaped_inputs)";
    "Fxn:call" -> "Fxn:K.ndim(y)";
    "Fxn:call" -> "Fxn:K.shape(y)";
    "Fxn:call" -> "Fxn:K.shape(y_shape)[0]";
    "Fxn:call" -> "Fxn:K.concatenate([K.expand_dims(batch_size),";
    "Fxn:call" -> "Fxn:K.reshape(y,";
    "Fxn:call" -> "Fxn:K.permute_dimensions(y,";
    "Fxn:call" -> "Fxn:K.reshape(y,";
    "Fxn:call" -> "Fxn:list(range(y_ndim";
    "Fxn:call" -> "Fxn:K.permute_dimensions(y,";
    "Fxn:call" -> "Fxn:self._merge_function(inputs)";
    "Fxn:compute_output_shape" -> "Fxn:range(1,";
    "Fxn:compute_output_shape" -> "Fxn:len(input_shape)):";
    "Fxn:compute_output_shape" -> "Fxn:self._compute_elemwise_op_output_shape(output_shape,";
    "Fxn:compute_output_shape" -> "Fxn:set(batch_sizes)";
    "Fxn:compute_output_shape" -> "Fxn:set([None])";
    "Fxn:compute_output_shape" -> "Fxn:len(batch_sizes)";
    "Fxn:compute_mask" -> "Fxn:isinstance(mask,";
    "Fxn:compute_mask" -> "Fxn:ValueError('`mask`";
    "Fxn:compute_mask" -> "Fxn:isinstance(inputs,";
    "Fxn:compute_mask" -> "Fxn:ValueError('`inputs`";
    "Fxn:compute_mask" -> "Fxn:len(mask)";
    "Fxn:compute_mask" -> "Fxn:len(inputs):";
    "Fxn:compute_mask" -> "Fxn:ValueError('The";
    "Fxn:compute_mask" -> "Fxn:all([m";
    "Fxn:compute_mask" -> "Fxn:[K.expand_dims(m,";
    "Fxn:compute_mask" -> "Fxn:K.all(K.concatenate(masks,";
    "class:Add(_Merge):" -> "Fxn:_merge_function";
    "Fxn:_merge_function" -> "Fxn:range(1,";
    "Fxn:_merge_function" -> "Fxn:len(inputs)):";
    "class:Subtract(_Merge):" -> "Fxn:build";
    "class:Subtract(_Merge):" -> "Fxn:_merge_function";
    "Fxn:build" -> "Fxn:super(Subtract,";
    "Fxn:build" -> "Fxn:self).build(input_shape)";
    "Fxn:build" -> "Fxn:len(input_shape)";
    "Fxn:build" -> "Fxn:ValueError('A";
    "Fxn:_merge_function" -> "Fxn:len(inputs)";
    "Fxn:_merge_function" -> "Fxn:ValueError('A";
    "class:Multiply(_Merge):" -> "Fxn:_merge_function";
    "Fxn:_merge_function" -> "Fxn:range(1,";
    "Fxn:_merge_function" -> "Fxn:len(inputs)):";
    "class:Average(_Merge):" -> "Fxn:_merge_function";
    "Fxn:_merge_function" -> "Fxn:range(1,";
    "Fxn:_merge_function" -> "Fxn:len(inputs)):";
    "Fxn:_merge_function" -> "Fxn:len(inputs)";
    "class:Maximum(_Merge):" -> "Fxn:_merge_function";
    "Fxn:_merge_function" -> "Fxn:range(1,";
    "Fxn:_merge_function" -> "Fxn:len(inputs)):";
    "Fxn:_merge_function" -> "Fxn:K.maximum(output,";
    "class:Minimum(_Merge):" -> "Fxn:_merge_function";
    "Fxn:_merge_function" -> "Fxn:range(1,";
    "Fxn:_merge_function" -> "Fxn:len(inputs)):";
    "Fxn:_merge_function" -> "Fxn:K.minimum(output,";
    "class:Concatenate(_Merge):" -> "Fxn:__init__";
    "class:Concatenate(_Merge):" -> "Fxn:build";
    "class:Concatenate(_Merge):" -> "Fxn:_merge_function";
    "class:Concatenate(_Merge):" -> "Fxn:compute_output_shape";
    "class:Concatenate(_Merge):" -> "Fxn:compute_mask";
    "class:Concatenate(_Merge):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(Concatenate,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:build" -> "Fxn:isinstance(input_shape,";
    "Fxn:build" -> "Fxn:len(input_shape)";
    "Fxn:build" -> "Fxn:ValueError('A";
    "Fxn:build" -> "Fxn:all([shape";
    "Fxn:build" -> "Fxn:[list(shape)";
    "Fxn:build" -> "Fxn:set()";
    "Fxn:build" -> "Fxn:range(len(reduced_inputs_shapes)):";
    "Fxn:build" -> "Fxn:shape_set.add(tuple(reduced_inputs_shapes[i]))";
    "Fxn:build" -> "Fxn:len(shape_set)";
    "Fxn:build" -> "Fxn:ValueError('A";
    "Fxn:_merge_function" -> "Fxn:K.concatenate(inputs,";
    "Fxn:compute_output_shape" -> "Fxn:isinstance(input_shape,";
    "Fxn:compute_output_shape" -> "Fxn:ValueError('A";
    "Fxn:compute_output_shape" -> "Fxn:list(input_shapes[0])";
    "Fxn:compute_output_shape" -> "Fxn:tuple(output_shape)";
    "Fxn:compute_mask" -> "Fxn:isinstance(mask,";
    "Fxn:compute_mask" -> "Fxn:ValueError('`mask`";
    "Fxn:compute_mask" -> "Fxn:isinstance(inputs,";
    "Fxn:compute_mask" -> "Fxn:ValueError('`inputs`";
    "Fxn:compute_mask" -> "Fxn:len(mask)";
    "Fxn:compute_mask" -> "Fxn:len(inputs):";
    "Fxn:compute_mask" -> "Fxn:ValueError('The";
    "Fxn:compute_mask" -> "Fxn:all([m";
    "Fxn:compute_mask" -> "Fxn:zip(inputs,";
    "Fxn:compute_mask" -> "Fxn:masks.append(K.ones_like(input_i,";
    "Fxn:compute_mask" -> "Fxn:K.ndim(mask_i)";
    "Fxn:compute_mask" -> "Fxn:K.ndim(input_i):";
    "Fxn:compute_mask" -> "Fxn:masks.append(K.expand_dims(mask_i))";
    "Fxn:compute_mask" -> "Fxn:masks.append(mask_i)";
    "Fxn:compute_mask" -> "Fxn:K.concatenate(masks,";
    "Fxn:compute_mask" -> "Fxn:K.all(concatenated,";
    "Fxn:get_config" -> "Fxn:super(Concatenate,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:Dot(_Merge):" -> "Fxn:__init__";
    "class:Dot(_Merge):" -> "Fxn:build";
    "class:Dot(_Merge):" -> "Fxn:_merge_function";
    "class:Dot(_Merge):" -> "Fxn:compute_output_shape";
    "class:Dot(_Merge):" -> "Fxn:compute_mask";
    "class:Dot(_Merge):" -> "Fxn:get_config";
    "class:Dot(_Merge):" -> "Fxn:add";
    "class:Dot(_Merge):" -> "Fxn:subtract";
    "class:Dot(_Merge):" -> "Fxn:multiply";
    "class:Dot(_Merge):" -> "Fxn:average";
    "class:Dot(_Merge):" -> "Fxn:maximum";
    "class:Dot(_Merge):" -> "Fxn:minimum";
    "class:Dot(_Merge):" -> "Fxn:concatenate";
    "class:Dot(_Merge):" -> "Fxn:dot";
    "Fxn:__init__" -> "Fxn:super(Dot,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:isinstance(axes,";
    "Fxn:__init__" -> "Fxn:isinstance(axes,";
    "Fxn:__init__" -> "Fxn:TypeError('Invalid";
    "Fxn:__init__" -> "Fxn:len(axes)";
    "Fxn:__init__" -> "Fxn:ValueError('Invalid";
    "Fxn:__init__" -> "Fxn:isinstance(axes[0],";
    "Fxn:__init__" -> "Fxn:isinstance(axes[1],";
    "Fxn:__init__" -> "Fxn:ValueError('Invalid";
    "Fxn:build" -> "Fxn:isinstance(input_shape,";
    "Fxn:build" -> "Fxn:len(input_shape)";
    "Fxn:build" -> "Fxn:ValueError('A";
    "Fxn:build" -> "Fxn:isinstance(self.axes,";
    "Fxn:build" -> "Fxn:len(shape1),";
    "Fxn:build" -> "Fxn:len(shape2)]";
    "Fxn:build" -> "Fxn:ValueError(";
    "Fxn:_merge_function" -> "Fxn:len(inputs)";
    "Fxn:_merge_function" -> "Fxn:ValueError('A";
    "Fxn:_merge_function" -> "Fxn:isinstance(self.axes,";
    "Fxn:_merge_function" -> "Fxn:K.ndim(x1),";
    "Fxn:_merge_function" -> "Fxn:K.ndim(x2)]";
    "Fxn:_merge_function" -> "Fxn:range(len(self.axes)):";
    "Fxn:_merge_function" -> "Fxn:axes.append(self.axes[i]";
    "Fxn:_merge_function" -> "Fxn:K.ndim(inputs[i]))";
    "Fxn:_merge_function" -> "Fxn:axes.append(self.axes[i])";
    "Fxn:_merge_function" -> "Fxn:K.l2_normalize(x1,";
    "Fxn:_merge_function" -> "Fxn:K.l2_normalize(x2,";
    "Fxn:_merge_function" -> "Fxn:K.batch_dot(x1,";
    "Fxn:compute_output_shape" -> "Fxn:isinstance(input_shape,";
    "Fxn:compute_output_shape" -> "Fxn:len(input_shape)";
    "Fxn:compute_output_shape" -> "Fxn:ValueError('A";
    "Fxn:compute_output_shape" -> "Fxn:list(input_shape[0])";
    "Fxn:compute_output_shape" -> "Fxn:list(input_shape[1])";
    "Fxn:compute_output_shape" -> "Fxn:isinstance(self.axes,";
    "Fxn:compute_output_shape" -> "Fxn:len(shape1),";
    "Fxn:compute_output_shape" -> "Fxn:len(shape2)]";
    "Fxn:compute_output_shape" -> "Fxn:shape1.pop(axes[0])";
    "Fxn:compute_output_shape" -> "Fxn:shape2.pop(axes[1])";
    "Fxn:compute_output_shape" -> "Fxn:shape2.pop(0)";
    "Fxn:compute_output_shape" -> "Fxn:len(output_shape)";
    "Fxn:compute_output_shape" -> "Fxn:tuple(output_shape)";
    "Fxn:get_config" -> "Fxn:super(Dot,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "Fxn:add" -> "Fxn:keras.layers.Input(shape=(16,))";
    "Fxn:add" -> "Fxn:keras.layers.Dense(8,";
    "Fxn:add" -> "Fxn:activation='relu')(input1)";
    "Fxn:add" -> "Fxn:keras.layers.Input(shape=(32,))";
    "Fxn:add" -> "Fxn:keras.layers.Dense(8,";
    "Fxn:add" -> "Fxn:activation='relu')(input2)";
    "Fxn:add" -> "Fxn:keras.layers.add([x1,";
    "Fxn:add" -> "Fxn:keras.layers.Dense(4)(added)";
    "Fxn:add" -> "Fxn:keras.models.Model(inputs=[input1,";
    "Fxn:add" -> "Fxn:Add(**kwargs)(inputs)";
    "Fxn:subtract" -> "Fxn:keras.layers.Input(shape=(16,))";
    "Fxn:subtract" -> "Fxn:keras.layers.Dense(8,";
    "Fxn:subtract" -> "Fxn:activation='relu')(input1)";
    "Fxn:subtract" -> "Fxn:keras.layers.Input(shape=(32,))";
    "Fxn:subtract" -> "Fxn:keras.layers.Dense(8,";
    "Fxn:subtract" -> "Fxn:activation='relu')(input2)";
    "Fxn:subtract" -> "Fxn:keras.layers.subtract([x1,";
    "Fxn:subtract" -> "Fxn:keras.layers.Dense(4)(subtracted)";
    "Fxn:subtract" -> "Fxn:keras.models.Model(inputs=[input1,";
    "Fxn:subtract" -> "Fxn:Subtract(**kwargs)(inputs)";
    "Fxn:multiply" -> "Fxn:Multiply(**kwargs)(inputs)";
    "Fxn:average" -> "Fxn:Average(**kwargs)(inputs)";
    "Fxn:maximum" -> "Fxn:Maximum(**kwargs)(inputs)";
    "Fxn:minimum" -> "Fxn:Minimum(**kwargs)(inputs)";
    "Fxn:concatenate" -> "Fxn:Concatenate(axis=axis,";
    "Fxn:concatenate" -> "Fxn:**kwargs)(inputs)";
    "Fxn:dot" -> "Fxn:Dot(axes=axes,";
    "Fxn:dot" -> "Fxn:**kwargs)(inputs)";
    "/keras/layers/noise.py" -> "Import:absolute_import";
    "/keras/layers/noise.py" -> "Import:division";
    "/keras/layers/noise.py" -> "Import:print_function";
    "/keras/layers/noise.py" -> "Import:Layer";
    "/keras/layers/noise.py" -> "Import:backend";
    "/keras/layers/noise.py" -> "Import:numpy";
    "/keras/layers/noise.py" -> "Import:interfaces";
    "/keras/layers/noise.py" -> "class:GaussianNoise(Layer):";
    "/keras/layers/noise.py" -> "class:GaussianDropout(Layer):";
    "/keras/layers/noise.py" -> "class:AlphaDropout(Layer):";
    "class:GaussianNoise(Layer):" -> "Fxn:__init__";
    "class:GaussianNoise(Layer):" -> "Fxn:call";
    "class:GaussianNoise(Layer):" -> "Fxn:noised";
    "class:GaussianNoise(Layer):" -> "Fxn:get_config";
    "class:GaussianNoise(Layer):" -> "Fxn:compute_output_shape";
    "Fxn:__init__" -> "Fxn:super(GaussianNoise,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:noised" -> "Fxn:K.random_normal(shape=K.shape(inputs),";
    "Fxn:noised" -> "Fxn:K.in_train_phase(noised,";
    "Fxn:get_config" -> "Fxn:super(GaussianNoise,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:GaussianDropout(Layer):" -> "Fxn:__init__";
    "class:GaussianDropout(Layer):" -> "Fxn:call";
    "class:GaussianDropout(Layer):" -> "Fxn:noised";
    "class:GaussianDropout(Layer):" -> "Fxn:get_config";
    "class:GaussianDropout(Layer):" -> "Fxn:compute_output_shape";
    "Fxn:__init__" -> "Fxn:super(GaussianDropout,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:noised" -> "Fxn:np.sqrt(self.rate";
    "Fxn:noised" -> "Fxn:K.random_normal(shape=K.shape(inputs),";
    "Fxn:noised" -> "Fxn:K.in_train_phase(noised,";
    "Fxn:get_config" -> "Fxn:super(GaussianDropout,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:AlphaDropout(Layer):" -> "Fxn:__init__";
    "class:AlphaDropout(Layer):" -> "Fxn:_get_noise_shape";
    "class:AlphaDropout(Layer):" -> "Fxn:call";
    "class:AlphaDropout(Layer):" -> "Fxn:dropped_inputs";
    "class:AlphaDropout(Layer):" -> "Fxn:get_config";
    "class:AlphaDropout(Layer):" -> "Fxn:compute_output_shape";
    "Fxn:__init__" -> "Fxn:super(AlphaDropout,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:_get_noise_shape" -> "Fxn:K.shape(inputs)";
    "Fxn:call" -> "Fxn:self._get_noise_shape(inputs)";
    "Fxn:dropped_inputs" -> "Fxn:K.greater_equal(K.random_uniform(noise_shape,";
    "Fxn:dropped_inputs" -> "Fxn:K.cast(kept_idx,";
    "Fxn:dropped_inputs" -> "Fxn:K.floatx())";
    "Fxn:dropped_inputs" -> "Fxn:K.in_train_phase(dropped_inputs,";
    "Fxn:get_config" -> "Fxn:super(AlphaDropout,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "/keras/layers/normalization.py" -> "Import:absolute_import";
    "/keras/layers/normalization.py" -> "Import:division";
    "/keras/layers/normalization.py" -> "Import:print_function";
    "/keras/layers/normalization.py" -> "Import:Layer,";
    "/keras/layers/normalization.py" -> "Import:initializers";
    "/keras/layers/normalization.py" -> "Import:regularizers";
    "/keras/layers/normalization.py" -> "Import:constraints";
    "/keras/layers/normalization.py" -> "Import:backend";
    "/keras/layers/normalization.py" -> "Import:interfaces";
    "/keras/layers/normalization.py" -> "class:BatchNormalization(Layer):";
    "class:BatchNormalization(Layer):" -> "Fxn:__init__";
    "class:BatchNormalization(Layer):" -> "Fxn:build";
    "class:BatchNormalization(Layer):" -> "Fxn:call";
    "class:BatchNormalization(Layer):" -> "Fxn:normalize_inference";
    "class:BatchNormalization(Layer):" -> "Fxn:get_config";
    "class:BatchNormalization(Layer):" -> "Fxn:compute_output_shape";
    "Fxn:__init__" -> "Fxn:super(BatchNormalization,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:initializers.get(beta_initializer)";
    "Fxn:__init__" -> "Fxn:initializers.get(gamma_initializer)";
    "Fxn:__init__" -> "Fxn:initializers.get(moving_mean_initializer)";
    "Fxn:__init__" -> "Fxn:initializers.get(moving_variance_initializer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(beta_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(gamma_regularizer)";
    "Fxn:__init__" -> "Fxn:constraints.get(beta_constraint)";
    "Fxn:__init__" -> "Fxn:constraints.get(gamma_constraint)";
    "Fxn:build" -> "Fxn:ValueError('Axis";
    "Fxn:build" -> "Fxn:str(self.axis)";
    "Fxn:build" -> "Fxn:str(input_shape)";
    "Fxn:build" -> "Fxn:InputSpec(ndim=len(input_shape),";
    "Fxn:build" -> "Fxn:self.add_weight(shape=shape,";
    "Fxn:build" -> "Fxn:self.add_weight(shape=shape,";
    "Fxn:build" -> "Fxn:self.add_weight(";
    "Fxn:build" -> "Fxn:self.add_weight(";
    "Fxn:call" -> "Fxn:K.int_shape(inputs)";
    "Fxn:call" -> "Fxn:len(input_shape)";
    "Fxn:call" -> "Fxn:list(range(len(input_shape)))";
    "Fxn:call" -> "Fxn:len(input_shape)";
    "Fxn:call" -> "Fxn:list(range(ndim))[:-1])";
    "Fxn:normalize_inference" -> "Fxn:K.reshape(self.moving_mean,";
    "Fxn:normalize_inference" -> "Fxn:K.reshape(self.moving_variance,";
    "Fxn:normalize_inference" -> "Fxn:K.reshape(self.beta,";
    "Fxn:normalize_inference" -> "Fxn:K.reshape(self.gamma,";
    "Fxn:normalize_inference" -> "Fxn:K.batch_normalization(";
    "Fxn:normalize_inference" -> "Fxn:K.batch_normalization(";
    "Fxn:normalize_inference" -> "Fxn:normalize_inference()";
    "Fxn:normalize_inference" -> "Fxn:K.normalize_batch_in_training(";
    "Fxn:normalize_inference" -> "Fxn:K.backend()";
    "Fxn:normalize_inference" -> "Fxn:K.prod([K.shape(inputs)[axis]";
    "Fxn:normalize_inference" -> "Fxn:K.cast(sample_size,";
    "Fxn:normalize_inference" -> "Fxn:dtype=K.dtype(inputs))";
    "Fxn:normalize_inference" -> "Fxn:self.add_update([K.moving_average_update(self.moving_mean,";
    "Fxn:normalize_inference" -> "Fxn:K.moving_average_update(self.moving_variance,";
    "Fxn:normalize_inference" -> "Fxn:K.in_train_phase(normed_training,";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.beta_initializer),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.gamma_initializer),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.moving_mean_initializer),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.moving_variance_initializer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.beta_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.gamma_regularizer),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.beta_constraint),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.gamma_constraint)";
    "Fxn:get_config" -> "Fxn:super(BatchNormalization,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "/keras/layers/pooling.py" -> "Import:absolute_import";
    "/keras/layers/pooling.py" -> "Import:division";
    "/keras/layers/pooling.py" -> "Import:print_function";
    "/keras/layers/pooling.py" -> "Import:backend";
    "/keras/layers/pooling.py" -> "Import:Layer";
    "/keras/layers/pooling.py" -> "Import:InputSpec";
    "/keras/layers/pooling.py" -> "Import:conv_utils";
    "/keras/layers/pooling.py" -> "Import:interfaces";
    "/keras/layers/pooling.py" -> "class:_Pooling1D(Layer):";
    "/keras/layers/pooling.py" -> "class:MaxPooling1D(_Pooling1D):";
    "/keras/layers/pooling.py" -> "class:AveragePooling1D(_Pooling1D):";
    "/keras/layers/pooling.py" -> "class:_Pooling2D(Layer):";
    "/keras/layers/pooling.py" -> "class:MaxPooling2D(_Pooling2D):";
    "/keras/layers/pooling.py" -> "class:AveragePooling2D(_Pooling2D):";
    "/keras/layers/pooling.py" -> "class:_Pooling3D(Layer):";
    "/keras/layers/pooling.py" -> "class:MaxPooling3D(_Pooling3D):";
    "/keras/layers/pooling.py" -> "class:AveragePooling3D(_Pooling3D):";
    "/keras/layers/pooling.py" -> "class:_GlobalPooling1D(Layer):";
    "/keras/layers/pooling.py" -> "class:GlobalAveragePooling1D(_GlobalPooling1D):";
    "/keras/layers/pooling.py" -> "class:GlobalMaxPooling1D(_GlobalPooling1D):";
    "/keras/layers/pooling.py" -> "class:_GlobalPooling2D(Layer):";
    "/keras/layers/pooling.py" -> "class:GlobalAveragePooling2D(_GlobalPooling2D):";
    "/keras/layers/pooling.py" -> "class:GlobalMaxPooling2D(_GlobalPooling2D):";
    "/keras/layers/pooling.py" -> "class:_GlobalPooling3D(Layer):";
    "/keras/layers/pooling.py" -> "class:GlobalAveragePooling3D(_GlobalPooling3D):";
    "/keras/layers/pooling.py" -> "class:GlobalMaxPooling3D(_GlobalPooling3D):";
    "class:_Pooling1D(Layer):" -> "Fxn:__init__";
    "class:_Pooling1D(Layer):" -> "Fxn:compute_output_shape";
    "class:_Pooling1D(Layer):" -> "Fxn:_pooling_function";
    "class:_Pooling1D(Layer):" -> "Fxn:call";
    "class:_Pooling1D(Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(_Pooling1D,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(pool_size,";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(strides,";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_padding(padding)";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=3)";
    "Fxn:compute_output_shape" -> "Fxn:conv_utils.conv_output_length(input_shape[1],";
    "Fxn:call" -> "Fxn:K.expand_dims(inputs,";
    "Fxn:call" -> "Fxn:self._pooling_function(inputs=inputs,";
    "Fxn:call" -> "Fxn:K.squeeze(output,";
    "Fxn:get_config" -> "Fxn:super(_Pooling1D,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:MaxPooling1D(_Pooling1D):" -> "Fxn:__init__";
    "class:MaxPooling1D(_Pooling1D):" -> "Fxn:_pooling_function";
    "Fxn:__init__" -> "Fxn:super(MaxPooling1D,";
    "Fxn:__init__" -> "Fxn:self).__init__(pool_size,";
    "Fxn:_pooling_function" -> "Fxn:K.pool2d(inputs,";
    "class:AveragePooling1D(_Pooling1D):" -> "Fxn:__init__";
    "class:AveragePooling1D(_Pooling1D):" -> "Fxn:_pooling_function";
    "Fxn:__init__" -> "Fxn:super(AveragePooling1D,";
    "Fxn:__init__" -> "Fxn:self).__init__(pool_size,";
    "Fxn:_pooling_function" -> "Fxn:K.pool2d(inputs,";
    "class:_Pooling2D(Layer):" -> "Fxn:__init__";
    "class:_Pooling2D(Layer):" -> "Fxn:compute_output_shape";
    "class:_Pooling2D(Layer):" -> "Fxn:_pooling_function";
    "class:_Pooling2D(Layer):" -> "Fxn:call";
    "class:_Pooling2D(Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:pool_size=(2,";
    "Fxn:__init__" -> "Fxn:super(_Pooling2D,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(pool_size,";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(strides,";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_padding(padding)";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=4)";
    "Fxn:compute_output_shape" -> "Fxn:conv_utils.conv_output_length(rows,";
    "Fxn:compute_output_shape" -> "Fxn:conv_utils.conv_output_length(cols,";
    "Fxn:call" -> "Fxn:self._pooling_function(inputs=inputs,";
    "Fxn:get_config" -> "Fxn:super(_Pooling2D,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:MaxPooling2D(_Pooling2D):" -> "Fxn:__init__";
    "class:MaxPooling2D(_Pooling2D):" -> "Fxn:_pooling_function";
    "Fxn:__init__" -> "Fxn:pool_size=(2,";
    "Fxn:__init__" -> "Fxn:super(MaxPooling2D,";
    "Fxn:__init__" -> "Fxn:self).__init__(pool_size,";
    "Fxn:_pooling_function" -> "Fxn:K.pool2d(inputs,";
    "class:AveragePooling2D(_Pooling2D):" -> "Fxn:__init__";
    "class:AveragePooling2D(_Pooling2D):" -> "Fxn:_pooling_function";
    "Fxn:__init__" -> "Fxn:pool_size=(2,";
    "Fxn:__init__" -> "Fxn:super(AveragePooling2D,";
    "Fxn:__init__" -> "Fxn:self).__init__(pool_size,";
    "Fxn:_pooling_function" -> "Fxn:K.pool2d(inputs,";
    "class:_Pooling3D(Layer):" -> "Fxn:__init__";
    "class:_Pooling3D(Layer):" -> "Fxn:compute_output_shape";
    "class:_Pooling3D(Layer):" -> "Fxn:_pooling_function";
    "class:_Pooling3D(Layer):" -> "Fxn:call";
    "class:_Pooling3D(Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:pool_size=(2,";
    "Fxn:__init__" -> "Fxn:super(_Pooling3D,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(pool_size,";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(strides,";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_padding(padding)";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=5)";
    "Fxn:compute_output_shape" -> "Fxn:conv_utils.conv_output_length(len_dim1,";
    "Fxn:compute_output_shape" -> "Fxn:conv_utils.conv_output_length(len_dim2,";
    "Fxn:compute_output_shape" -> "Fxn:conv_utils.conv_output_length(len_dim3,";
    "Fxn:call" -> "Fxn:self._pooling_function(inputs=inputs,";
    "Fxn:get_config" -> "Fxn:super(_Pooling3D,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:MaxPooling3D(_Pooling3D):" -> "Fxn:__init__";
    "class:MaxPooling3D(_Pooling3D):" -> "Fxn:_pooling_function";
    "Fxn:__init__" -> "Fxn:pool_size=(2,";
    "Fxn:__init__" -> "Fxn:super(MaxPooling3D,";
    "Fxn:__init__" -> "Fxn:self).__init__(pool_size,";
    "Fxn:_pooling_function" -> "Fxn:K.pool3d(inputs,";
    "class:AveragePooling3D(_Pooling3D):" -> "Fxn:__init__";
    "class:AveragePooling3D(_Pooling3D):" -> "Fxn:_pooling_function";
    "Fxn:__init__" -> "Fxn:pool_size=(2,";
    "Fxn:__init__" -> "Fxn:super(AveragePooling3D,";
    "Fxn:__init__" -> "Fxn:self).__init__(pool_size,";
    "Fxn:_pooling_function" -> "Fxn:K.pool3d(inputs,";
    "class:_GlobalPooling1D(Layer):" -> "Fxn:__init__";
    "class:_GlobalPooling1D(Layer):" -> "Fxn:compute_output_shape";
    "class:_GlobalPooling1D(Layer):" -> "Fxn:call";
    "Fxn:__init__" -> "Fxn:super(_GlobalPooling1D,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=3)";
    "class:GlobalAveragePooling1D(_GlobalPooling1D):" -> "Fxn:call";
    "Fxn:call" -> "Fxn:K.mean(inputs,";
    "class:GlobalMaxPooling1D(_GlobalPooling1D):" -> "Fxn:call";
    "Fxn:call" -> "Fxn:K.max(inputs,";
    "class:_GlobalPooling2D(Layer):" -> "Fxn:__init__";
    "class:_GlobalPooling2D(Layer):" -> "Fxn:compute_output_shape";
    "class:_GlobalPooling2D(Layer):" -> "Fxn:call";
    "class:_GlobalPooling2D(Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(_GlobalPooling2D,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=4)";
    "Fxn:get_config" -> "Fxn:super(_GlobalPooling2D,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:GlobalAveragePooling2D(_GlobalPooling2D):" -> "Fxn:call";
    "Fxn:call" -> "Fxn:K.mean(inputs,";
    "Fxn:call" -> "Fxn:K.mean(inputs,";
    "class:GlobalMaxPooling2D(_GlobalPooling2D):" -> "Fxn:call";
    "Fxn:call" -> "Fxn:K.max(inputs,";
    "Fxn:call" -> "Fxn:K.max(inputs,";
    "class:_GlobalPooling3D(Layer):" -> "Fxn:__init__";
    "class:_GlobalPooling3D(Layer):" -> "Fxn:compute_output_shape";
    "class:_GlobalPooling3D(Layer):" -> "Fxn:call";
    "class:_GlobalPooling3D(Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(_GlobalPooling3D,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=5)";
    "Fxn:get_config" -> "Fxn:super(_GlobalPooling3D,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:GlobalAveragePooling3D(_GlobalPooling3D):" -> "Fxn:call";
    "Fxn:call" -> "Fxn:K.mean(inputs,";
    "Fxn:call" -> "Fxn:K.mean(inputs,";
    "class:GlobalMaxPooling3D(_GlobalPooling3D):" -> "Fxn:call";
    "Fxn:call" -> "Fxn:K.max(inputs,";
    "Fxn:call" -> "Fxn:K.max(inputs,";
    "/keras/layers/recurrent.py" -> "Import:absolute_import";
    "/keras/layers/recurrent.py" -> "Import:division";
    "/keras/layers/recurrent.py" -> "Import:print_function";
    "/keras/layers/recurrent.py" -> "Import:numpy";
    "/keras/layers/recurrent.py" -> "Import:warnings";
    "/keras/layers/recurrent.py" -> "Import:backend";
    "/keras/layers/recurrent.py" -> "Import:activations";
    "/keras/layers/recurrent.py" -> "Import:initializers";
    "/keras/layers/recurrent.py" -> "Import:regularizers";
    "/keras/layers/recurrent.py" -> "Import:constraints";
    "/keras/layers/recurrent.py" -> "Import:Layer";
    "/keras/layers/recurrent.py" -> "Import:InputSpec";
    "/keras/layers/recurrent.py" -> "Import:has_arg";
    "/keras/layers/recurrent.py" -> "Import:Recurrent";
    "/keras/layers/recurrent.py" -> "Import:interfaces";
    "/keras/layers/recurrent.py" -> "class:StackedRNNCells(Layer):";
    "/keras/layers/recurrent.py" -> "Import:deserialize";
    "/keras/layers/recurrent.py" -> "class:RNN(Layer):";
    "/keras/layers/recurrent.py" -> "class:MinimalRNNCell(keras.layers.Layer):";
    "/keras/layers/recurrent.py" -> "Import:deserialize";
    "/keras/layers/recurrent.py" -> "class:SimpleRNNCell(Layer):";
    "/keras/layers/recurrent.py" -> "class:SimpleRNN(RNN):";
    "/keras/layers/recurrent.py" -> "class:GRUCell(Layer):";
    "/keras/layers/recurrent.py" -> "class:GRU(RNN):";
    "/keras/layers/recurrent.py" -> "class:LSTMCell(Layer):";
    "/keras/layers/recurrent.py" -> "class:LSTM(RNN):";
    "class:StackedRNNCells(Layer):" -> "Fxn:__init__";
    "class:StackedRNNCells(Layer):" -> "Fxn:state_size";
    "class:StackedRNNCells(Layer):" -> "Fxn:call";
    "class:StackedRNNCells(Layer):" -> "Fxn:build";
    "class:StackedRNNCells(Layer):" -> "Fxn:get_config";
    "class:StackedRNNCells(Layer):" -> "Fxn:from_config";
    "class:StackedRNNCells(Layer):" -> "Fxn:trainable_weights";
    "class:StackedRNNCells(Layer):" -> "Fxn:non_trainable_weights";
    "class:StackedRNNCells(Layer):" -> "Fxn:get_weights";
    "class:StackedRNNCells(Layer):" -> "Fxn:set_weights";
    "class:StackedRNNCells(Layer):" -> "Fxn:losses";
    "class:StackedRNNCells(Layer):" -> "Fxn:get_losses_for";
    "Fxn:__init__" -> "Fxn:hasattr(cell,";
    "Fxn:__init__" -> "Fxn:ValueError('All";
    "Fxn:__init__" -> "Fxn:hasattr(cell,";
    "Fxn:__init__" -> "Fxn:ValueError('All";
    "Fxn:__init__" -> "Fxn:super(StackedRNNCells,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:state_size" -> "Fxn:hasattr(cell.state_size,";
    "Fxn:state_size" -> "Fxn:list(cell.state_size)";
    "Fxn:state_size" -> "Fxn:state_size.append(cell.state_size)";
    "Fxn:state_size" -> "Fxn:tuple(state_size)";
    "Fxn:call" -> "Fxn:hasattr(cell.state_size,";
    "Fxn:call" -> "Fxn:nested_states.append(states[:len(cell.state_size)])";
    "Fxn:call" -> "Fxn:states[len(cell.state_size):]";
    "Fxn:call" -> "Fxn:nested_states.append([states[0]])";
    "Fxn:call" -> "Fxn:zip(self.cells,";
    "Fxn:call" -> "Fxn:has_arg(cell.call,";
    "Fxn:call" -> "Fxn:cell.call(inputs,";
    "Fxn:call" -> "Fxn:cell.call(inputs,";
    "Fxn:call" -> "Fxn:new_nested_states.append(states)";
    "Fxn:build" -> "Fxn:isinstance(input_shape,";
    "Fxn:build" -> "Fxn:isinstance(cell,";
    "Fxn:build" -> "Fxn:has_arg(cell.call,";
    "Fxn:build" -> "Fxn:cell.build([input_shape]";
    "Fxn:build" -> "Fxn:cell.build(input_shape)";
    "Fxn:build" -> "Fxn:hasattr(cell.state_size,";
    "Fxn:get_config" -> "Fxn:cells.append({'class_name':";
    "Fxn:get_config" -> "Fxn:cell.get_config()})";
    "Fxn:get_config" -> "Fxn:super(StackedRNNCells,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "Fxn:from_config" -> "Fxn:config.pop('cells'):";
    "Fxn:from_config" -> "Fxn:cells.append(deserialize_layer(cell_config,";
    "Fxn:from_config" -> "Fxn:cls(cells,";
    "Fxn:trainable_weights" -> "Fxn:isinstance(cell,";
    "Fxn:non_trainable_weights" -> "Fxn:isinstance(cell,";
    "Fxn:non_trainable_weights" -> "Fxn:isinstance(cell,";
    "Fxn:get_weights" -> "Fxn:isinstance(cell,";
    "Fxn:get_weights" -> "Fxn:K.batch_get_value(weights)";
    "Fxn:set_weights" -> "Fxn:`model.get_weights()`.";
    "Fxn:set_weights" -> "Fxn:isinstance(cell,";
    "Fxn:set_weights" -> "Fxn:len(cell.weights)";
    "Fxn:set_weights" -> "Fxn:zip(cell.weights,";
    "Fxn:set_weights" -> "Fxn:tuples.append((sw,";
    "Fxn:set_weights" -> "Fxn:K.batch_set_value(tuples)";
    "Fxn:losses" -> "Fxn:isinstance(cell,";
    "Fxn:get_losses_for" -> "Fxn:isinstance(cell,";
    "Fxn:get_losses_for" -> "Fxn:cell.get_losses_for(inputs)";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:__init__";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:build";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:call";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:__init__";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:states";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:states";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:compute_output_shape";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:compute_mask";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:build";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:get_initial_state";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:__call__";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:call";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:step";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:step";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:_standardize_args";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:to_list_or_none";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:reset_states";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:get_config";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:from_config";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:trainable_weights";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:non_trainable_weights";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:losses";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:get_losses_for";
    "Fxn:__init__" -> "Fxn:super(MinimalRNNCell,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:build" -> "Fxn:self.add_weight(shape=(input_shape[-1],";
    "Fxn:build" -> "Fxn:self.add_weight(";
    "Fxn:build" -> "Fxn:shape=(self.units,";
    "Fxn:call" -> "Fxn:K.dot(inputs,";
    "Fxn:call" -> "Fxn:K.dot(prev_output,";
    "Fxn:call" -> "Fxn:MinimalRNNCell(32)";
    "Fxn:call" -> "Fxn:keras.Input((None,";
    "Fxn:call" -> "Fxn:RNN(cell)";
    "Fxn:call" -> "Fxn:layer(x)";
    "Fxn:call" -> "Fxn:[MinimalRNNCell(32),";
    "Fxn:call" -> "Fxn:MinimalRNNCell(64)]";
    "Fxn:call" -> "Fxn:keras.Input((None,";
    "Fxn:call" -> "Fxn:RNN(cells)";
    "Fxn:call" -> "Fxn:layer(x)";
    "Fxn:__init__" -> "Fxn:isinstance(cell,";
    "Fxn:__init__" -> "Fxn:StackedRNNCells(cell)";
    "Fxn:__init__" -> "Fxn:hasattr(cell,";
    "Fxn:__init__" -> "Fxn:ValueError('`cell`";
    "Fxn:__init__" -> "Fxn:hasattr(cell,";
    "Fxn:__init__" -> "Fxn:ValueError('The";
    "Fxn:__init__" -> "Fxn:'(tuple";
    "Fxn:__init__" -> "Fxn:super(RNN,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:[InputSpec(ndim=3)]";
    "Fxn:states" -> "Fxn:isinstance(self.cell.state_size,";
    "Fxn:states" -> "Fxn:len(self.cell.state_size)";
    "Fxn:states" -> "Fxn:range(num_states)]";
    "Fxn:compute_output_shape" -> "Fxn:isinstance(input_shape,";
    "Fxn:compute_output_shape" -> "Fxn:hasattr(self.cell.state_size,";
    "Fxn:compute_output_shape" -> "Fxn:[(input_shape[0],";
    "Fxn:compute_mask" -> "Fxn:isinstance(mask,";
    "Fxn:build" -> "Fxn:isinstance(input_shape,";
    "Fxn:build" -> "Fxn:InputSpec(shape=(batch_size,";
    "Fxn:build" -> "Fxn:isinstance(self.cell,";
    "Fxn:build" -> "Fxn:self.cell.build([step_input_shape]";
    "Fxn:build" -> "Fxn:self.cell.build(step_input_shape)";
    "Fxn:build" -> "Fxn:hasattr(self.cell.state_size,";
    "Fxn:build" -> "Fxn:list(self.cell.state_size)";
    "Fxn:build" -> "Fxn:ValueError(";
    "Fxn:build" -> "Fxn:'{}'.format(self.state_spec,";
    "Fxn:build" -> "Fxn:[InputSpec(shape=(None,";
    "Fxn:build" -> "Fxn:self.reset_states()";
    "Fxn:get_initial_state" -> "Fxn:K.zeros_like(inputs)";
    "Fxn:get_initial_state" -> "Fxn:K.sum(initial_state,";
    "Fxn:get_initial_state" -> "Fxn:axis=(1,";
    "Fxn:get_initial_state" -> "Fxn:K.expand_dims(initial_state)";
    "Fxn:get_initial_state" -> "Fxn:hasattr(self.cell.state_size,";
    "Fxn:get_initial_state" -> "Fxn:[K.tile(initial_state,";
    "Fxn:get_initial_state" -> "Fxn:[K.tile(initial_state,";
    "Fxn:__call__" -> "Fxn:self._standardize_args(";
    "Fxn:__call__" -> "Fxn:super(RNN,";
    "Fxn:__call__" -> "Fxn:self).__call__(inputs,";
    "Fxn:__call__" -> "Fxn:[InputSpec(shape=K.int_shape(state))";
    "Fxn:__call__" -> "Fxn:[InputSpec(shape=K.int_shape(constant))";
    "Fxn:__call__" -> "Fxn:len(constants)";
    "Fxn:__call__" -> "Fxn:K.is_keras_tensor(additional_inputs[0])";
    "Fxn:__call__" -> "Fxn:K.is_keras_tensor(tensor)";
    "Fxn:__call__" -> "Fxn:ValueError('The";
    "Fxn:__call__" -> "Fxn:super(RNN,";
    "Fxn:__call__" -> "Fxn:self).__call__(full_input,";
    "Fxn:__call__" -> "Fxn:super(RNN,";
    "Fxn:__call__" -> "Fxn:self).__call__(inputs,";
    "Fxn:call" -> "Fxn:`(samples,";
    "Fxn:call" -> "Fxn:.build()";
    "Fxn:call" -> "Fxn:isinstance(inputs,";
    "Fxn:call" -> "Fxn:self.get_initial_state(inputs)";
    "Fxn:call" -> "Fxn:isinstance(mask,";
    "Fxn:call" -> "Fxn:len(initial_state)";
    "Fxn:call" -> "Fxn:len(self.states):";
    "Fxn:call" -> "Fxn:ValueError('Layer";
    "Fxn:call" -> "Fxn:str(len(self.states))";
    "Fxn:call" -> "Fxn:str(len(initial_state))";
    "Fxn:call" -> "Fxn:K.int_shape(inputs)";
    "Fxn:call" -> "Fxn:ValueError('Cannot";
    "Fxn:call" -> "Fxn:has_arg(self.cell.call,";
    "Fxn:call" -> "Fxn:has_arg(self.cell.call,";
    "Fxn:call" -> "Fxn:ValueError('RNN";
    "Fxn:step" -> "Fxn:self.cell.call(inputs,";
    "Fxn:step" -> "Fxn:self.cell.call(inputs,";
    "Fxn:step" -> "Fxn:K.rnn(step,";
    "Fxn:step" -> "Fxn:range(len(states)):";
    "Fxn:step" -> "Fxn:updates.append((self.states[i],";
    "Fxn:step" -> "Fxn:self.add_update(updates,";
    "Fxn:step" -> "Fxn:getattr(last_output,";
    "Fxn:step" -> "Fxn:isinstance(states,";
    "Fxn:step" -> "Fxn:list(states)";
    "Fxn:_standardize_args" -> "Fxn:isinstance(inputs,";
    "Fxn:_standardize_args" -> "Fxn:len(inputs)";
    "Fxn:to_list_or_none" -> "Fxn:isinstance(x,";
    "Fxn:to_list_or_none" -> "Fxn:isinstance(x,";
    "Fxn:to_list_or_none" -> "Fxn:list(x)";
    "Fxn:to_list_or_none" -> "Fxn:to_list_or_none(initial_state)";
    "Fxn:to_list_or_none" -> "Fxn:to_list_or_none(constants)";
    "Fxn:reset_states" -> "Fxn:AttributeError('Layer";
    "Fxn:reset_states" -> "Fxn:ValueError('If";
    "Fxn:reset_states" -> "Fxn:hasattr(self.cell.state_size,";
    "Fxn:reset_states" -> "Fxn:[K.zeros((batch_size,";
    "Fxn:reset_states" -> "Fxn:[K.zeros((batch_size,";
    "Fxn:reset_states" -> "Fxn:hasattr(self.cell.state_size,";
    "Fxn:reset_states" -> "Fxn:zip(self.states,";
    "Fxn:reset_states" -> "Fxn:K.set_value(state,";
    "Fxn:reset_states" -> "Fxn:np.zeros((batch_size,";
    "Fxn:reset_states" -> "Fxn:K.set_value(self.states[0],";
    "Fxn:reset_states" -> "Fxn:np.zeros((batch_size,";
    "Fxn:reset_states" -> "Fxn:isinstance(states,";
    "Fxn:reset_states" -> "Fxn:len(states)";
    "Fxn:reset_states" -> "Fxn:len(self.states):";
    "Fxn:reset_states" -> "Fxn:ValueError('Layer";
    "Fxn:reset_states" -> "Fxn:str(len(self.states))";
    "Fxn:reset_states" -> "Fxn:str(len(states))";
    "Fxn:reset_states" -> "Fxn:str(states))";
    "Fxn:reset_states" -> "Fxn:enumerate(zip(states,";
    "Fxn:reset_states" -> "Fxn:hasattr(self.cell.state_size,";
    "Fxn:reset_states" -> "Fxn:ValueError('State";
    "Fxn:reset_states" -> "Fxn:str(index)";
    "Fxn:reset_states" -> "Fxn:str((batch_size,";
    "Fxn:reset_states" -> "Fxn:str(value.shape))";
    "Fxn:reset_states" -> "Fxn:K.set_value(state,";
    "Fxn:get_config" -> "Fxn:self.cell.get_config()";
    "Fxn:get_config" -> "Fxn:super(RNN,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "Fxn:from_config" -> "Fxn:deserialize_layer(config.pop('cell'),";
    "Fxn:from_config" -> "Fxn:config.pop('num_constants',";
    "Fxn:from_config" -> "Fxn:cls(cell,";
    "Fxn:trainable_weights" -> "Fxn:isinstance(self.cell,";
    "Fxn:non_trainable_weights" -> "Fxn:isinstance(self.cell,";
    "Fxn:losses" -> "Fxn:super(RNN,";
    "Fxn:losses" -> "Fxn:isinstance(self.cell,";
    "Fxn:get_losses_for" -> "Fxn:isinstance(self.cell,";
    "Fxn:get_losses_for" -> "Fxn:self.cell.get_losses_for(inputs)";
    "Fxn:get_losses_for" -> "Fxn:super(RNN,";
    "Fxn:get_losses_for" -> "Fxn:self).get_losses_for(inputs)";
    "Fxn:get_losses_for" -> "Fxn:super(RNN,";
    "Fxn:get_losses_for" -> "Fxn:self).get_losses_for(inputs)";
    "class:SimpleRNNCell(Layer):" -> "Fxn:__init__";
    "class:SimpleRNNCell(Layer):" -> "Fxn:build";
    "class:SimpleRNNCell(Layer):" -> "Fxn:call";
    "class:SimpleRNNCell(Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(SimpleRNNCell,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:activations.get(activation)";
    "Fxn:__init__" -> "Fxn:initializers.get(kernel_initializer)";
    "Fxn:__init__" -> "Fxn:initializers.get(recurrent_initializer)";
    "Fxn:__init__" -> "Fxn:initializers.get(bias_initializer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(kernel_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(recurrent_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(bias_regularizer)";
    "Fxn:__init__" -> "Fxn:constraints.get(kernel_constraint)";
    "Fxn:__init__" -> "Fxn:constraints.get(recurrent_constraint)";
    "Fxn:__init__" -> "Fxn:constraints.get(bias_constraint)";
    "Fxn:__init__" -> "Fxn:min(1.,";
    "Fxn:__init__" -> "Fxn:max(0.,";
    "Fxn:__init__" -> "Fxn:min(1.,";
    "Fxn:__init__" -> "Fxn:max(0.,";
    "Fxn:build" -> "Fxn:self.add_weight(shape=(input_shape[-1],";
    "Fxn:build" -> "Fxn:self.add_weight(";
    "Fxn:build" -> "Fxn:shape=(self.units,";
    "Fxn:build" -> "Fxn:self.add_weight(shape=(self.units,),";
    "Fxn:call" -> "Fxn:_generate_dropout_mask(";
    "Fxn:call" -> "Fxn:_generate_dropout_ones(inputs,";
    "Fxn:call" -> "Fxn:K.shape(inputs)[-1]),";
    "Fxn:call" -> "Fxn:_generate_dropout_mask(";
    "Fxn:call" -> "Fxn:_generate_dropout_ones(inputs,";
    "Fxn:call" -> "Fxn:K.dot(inputs";
    "Fxn:call" -> "Fxn:K.dot(inputs,";
    "Fxn:call" -> "Fxn:K.bias_add(h,";
    "Fxn:call" -> "Fxn:K.dot(prev_output,";
    "Fxn:call" -> "Fxn:self.activation(output)";
    "Fxn:get_config" -> "Fxn:activations.serialize(self.activation),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.kernel_initializer),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.recurrent_initializer),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.bias_initializer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.kernel_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.recurrent_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.bias_regularizer),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.kernel_constraint),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.recurrent_constraint),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.bias_constraint),";
    "Fxn:get_config" -> "Fxn:super(SimpleRNNCell,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:SimpleRNN(RNN):" -> "Fxn:__init__";
    "class:SimpleRNN(RNN):" -> "Fxn:call";
    "class:SimpleRNN(RNN):" -> "Fxn:units";
    "class:SimpleRNN(RNN):" -> "Fxn:activation";
    "class:SimpleRNN(RNN):" -> "Fxn:use_bias";
    "class:SimpleRNN(RNN):" -> "Fxn:kernel_initializer";
    "class:SimpleRNN(RNN):" -> "Fxn:recurrent_initializer";
    "class:SimpleRNN(RNN):" -> "Fxn:bias_initializer";
    "class:SimpleRNN(RNN):" -> "Fxn:kernel_regularizer";
    "class:SimpleRNN(RNN):" -> "Fxn:recurrent_regularizer";
    "class:SimpleRNN(RNN):" -> "Fxn:bias_regularizer";
    "class:SimpleRNN(RNN):" -> "Fxn:kernel_constraint";
    "class:SimpleRNN(RNN):" -> "Fxn:recurrent_constraint";
    "class:SimpleRNN(RNN):" -> "Fxn:bias_constraint";
    "class:SimpleRNN(RNN):" -> "Fxn:dropout";
    "class:SimpleRNN(RNN):" -> "Fxn:recurrent_dropout";
    "class:SimpleRNN(RNN):" -> "Fxn:get_config";
    "class:SimpleRNN(RNN):" -> "Fxn:from_config";
    "Fxn:__init__" -> "Fxn:kwargs.pop('implementation')";
    "Fxn:__init__" -> "Fxn:warnings.warn('The";
    "Fxn:__init__" -> "Fxn:K.backend()";
    "Fxn:__init__" -> "Fxn:warnings.warn(";
    "Fxn:__init__" -> "Fxn:SimpleRNNCell(units,";
    "Fxn:__init__" -> "Fxn:super(SimpleRNN,";
    "Fxn:__init__" -> "Fxn:self).__init__(cell,";
    "Fxn:__init__" -> "Fxn:regularizers.get(activity_regularizer)";
    "Fxn:call" -> "Fxn:super(SimpleRNN,";
    "Fxn:call" -> "Fxn:self).call(inputs,";
    "Fxn:get_config" -> "Fxn:activations.serialize(self.activation),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.kernel_initializer),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.recurrent_initializer),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.bias_initializer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.kernel_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.recurrent_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.bias_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.activity_regularizer),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.kernel_constraint),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.recurrent_constraint),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.bias_constraint),";
    "Fxn:get_config" -> "Fxn:super(SimpleRNN,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "Fxn:from_config" -> "Fxn:config.pop('implementation')";
    "Fxn:from_config" -> "Fxn:cls(**config)";
    "class:GRUCell(Layer):" -> "Fxn:__init__";
    "class:GRUCell(Layer):" -> "Fxn:build";
    "class:GRUCell(Layer):" -> "Fxn:call";
    "class:GRUCell(Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(GRUCell,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:activations.get(activation)";
    "Fxn:__init__" -> "Fxn:activations.get(recurrent_activation)";
    "Fxn:__init__" -> "Fxn:initializers.get(kernel_initializer)";
    "Fxn:__init__" -> "Fxn:initializers.get(recurrent_initializer)";
    "Fxn:__init__" -> "Fxn:initializers.get(bias_initializer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(kernel_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(recurrent_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(bias_regularizer)";
    "Fxn:__init__" -> "Fxn:constraints.get(kernel_constraint)";
    "Fxn:__init__" -> "Fxn:constraints.get(recurrent_constraint)";
    "Fxn:__init__" -> "Fxn:constraints.get(bias_constraint)";
    "Fxn:__init__" -> "Fxn:min(1.,";
    "Fxn:__init__" -> "Fxn:max(0.,";
    "Fxn:__init__" -> "Fxn:min(1.,";
    "Fxn:__init__" -> "Fxn:max(0.,";
    "Fxn:build" -> "Fxn:self.add_weight(shape=(input_dim,";
    "Fxn:build" -> "Fxn:self.add_weight(";
    "Fxn:build" -> "Fxn:shape=(self.units,";
    "Fxn:build" -> "Fxn:`(2";
    "Fxn:build" -> "Fxn:self.add_weight(shape=bias_shape,";
    "Fxn:build" -> "Fxn:K.flatten(self.bias[0])";
    "Fxn:build" -> "Fxn:K.flatten(self.bias[1])";
    "Fxn:call" -> "Fxn:_generate_dropout_mask(";
    "Fxn:call" -> "Fxn:_generate_dropout_ones(inputs,";
    "Fxn:call" -> "Fxn:K.shape(inputs)[-1]),";
    "Fxn:call" -> "Fxn:_generate_dropout_mask(";
    "Fxn:call" -> "Fxn:_generate_dropout_ones(inputs,";
    "Fxn:call" -> "Fxn:K.dot(inputs_z,";
    "Fxn:call" -> "Fxn:K.dot(inputs_r,";
    "Fxn:call" -> "Fxn:K.dot(inputs_h,";
    "Fxn:call" -> "Fxn:K.bias_add(x_z,";
    "Fxn:call" -> "Fxn:K.bias_add(x_r,";
    "Fxn:call" -> "Fxn:K.bias_add(x_h,";
    "Fxn:call" -> "Fxn:K.dot(h_tm1_z,";
    "Fxn:call" -> "Fxn:K.dot(h_tm1_r,";
    "Fxn:call" -> "Fxn:K.bias_add(recurrent_z,";
    "Fxn:call" -> "Fxn:K.bias_add(recurrent_r,";
    "Fxn:call" -> "Fxn:self.recurrent_activation(x_z";
    "Fxn:call" -> "Fxn:self.recurrent_activation(x_r";
    "Fxn:call" -> "Fxn:K.dot(h_tm1_h,";
    "Fxn:call" -> "Fxn:K.bias_add(recurrent_h,";
    "Fxn:call" -> "Fxn:K.dot(r";
    "Fxn:call" -> "Fxn:self.activation(x_h";
    "Fxn:call" -> "Fxn:K.dot(inputs,";
    "Fxn:call" -> "Fxn:K.bias_add(matrix_x,";
    "Fxn:call" -> "Fxn:K.dot(h_tm1,";
    "Fxn:call" -> "Fxn:K.bias_add(matrix_inner,";
    "Fxn:call" -> "Fxn:K.dot(h_tm1,";
    "Fxn:call" -> "Fxn:self.recurrent_activation(x_z";
    "Fxn:call" -> "Fxn:self.recurrent_activation(x_r";
    "Fxn:call" -> "Fxn:K.dot(r";
    "Fxn:call" -> "Fxn:self.activation(x_h";
    "Fxn:get_config" -> "Fxn:activations.serialize(self.activation),";
    "Fxn:get_config" -> "Fxn:activations.serialize(self.recurrent_activation),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.kernel_initializer),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.recurrent_initializer),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.bias_initializer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.kernel_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.recurrent_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.bias_regularizer),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.kernel_constraint),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.recurrent_constraint),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.bias_constraint),";
    "Fxn:get_config" -> "Fxn:super(GRUCell,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:GRU(RNN):" -> "Fxn:__init__";
    "class:GRU(RNN):" -> "Fxn:call";
    "class:GRU(RNN):" -> "Fxn:units";
    "class:GRU(RNN):" -> "Fxn:activation";
    "class:GRU(RNN):" -> "Fxn:recurrent_activation";
    "class:GRU(RNN):" -> "Fxn:use_bias";
    "class:GRU(RNN):" -> "Fxn:kernel_initializer";
    "class:GRU(RNN):" -> "Fxn:recurrent_initializer";
    "class:GRU(RNN):" -> "Fxn:bias_initializer";
    "class:GRU(RNN):" -> "Fxn:kernel_regularizer";
    "class:GRU(RNN):" -> "Fxn:recurrent_regularizer";
    "class:GRU(RNN):" -> "Fxn:bias_regularizer";
    "class:GRU(RNN):" -> "Fxn:kernel_constraint";
    "class:GRU(RNN):" -> "Fxn:recurrent_constraint";
    "class:GRU(RNN):" -> "Fxn:bias_constraint";
    "class:GRU(RNN):" -> "Fxn:dropout";
    "class:GRU(RNN):" -> "Fxn:recurrent_dropout";
    "class:GRU(RNN):" -> "Fxn:implementation";
    "class:GRU(RNN):" -> "Fxn:reset_after";
    "class:GRU(RNN):" -> "Fxn:get_config";
    "class:GRU(RNN):" -> "Fxn:from_config";
    "Fxn:__init__" -> "Fxn:warnings.warn('`implementation=0`";
    "Fxn:__init__" -> "Fxn:K.backend()";
    "Fxn:__init__" -> "Fxn:warnings.warn(";
    "Fxn:__init__" -> "Fxn:GRUCell(units,";
    "Fxn:__init__" -> "Fxn:super(GRU,";
    "Fxn:__init__" -> "Fxn:self).__init__(cell,";
    "Fxn:__init__" -> "Fxn:regularizers.get(activity_regularizer)";
    "Fxn:call" -> "Fxn:super(GRU,";
    "Fxn:call" -> "Fxn:self).call(inputs,";
    "Fxn:get_config" -> "Fxn:activations.serialize(self.activation),";
    "Fxn:get_config" -> "Fxn:activations.serialize(self.recurrent_activation),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.kernel_initializer),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.recurrent_initializer),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.bias_initializer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.kernel_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.recurrent_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.bias_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.activity_regularizer),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.kernel_constraint),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.recurrent_constraint),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.bias_constraint),";
    "Fxn:get_config" -> "Fxn:super(GRU,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "Fxn:from_config" -> "Fxn:cls(**config)";
    "class:LSTMCell(Layer):" -> "Fxn:__init__";
    "class:LSTMCell(Layer):" -> "Fxn:build";
    "class:LSTMCell(Layer):" -> "Fxn:bias_initializer";
    "class:LSTMCell(Layer):" -> "Fxn:call";
    "class:LSTMCell(Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(LSTMCell,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:activations.get(activation)";
    "Fxn:__init__" -> "Fxn:activations.get(recurrent_activation)";
    "Fxn:__init__" -> "Fxn:initializers.get(kernel_initializer)";
    "Fxn:__init__" -> "Fxn:initializers.get(recurrent_initializer)";
    "Fxn:__init__" -> "Fxn:initializers.get(bias_initializer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(kernel_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(recurrent_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(bias_regularizer)";
    "Fxn:__init__" -> "Fxn:constraints.get(kernel_constraint)";
    "Fxn:__init__" -> "Fxn:constraints.get(recurrent_constraint)";
    "Fxn:__init__" -> "Fxn:constraints.get(bias_constraint)";
    "Fxn:__init__" -> "Fxn:min(1.,";
    "Fxn:__init__" -> "Fxn:max(0.,";
    "Fxn:__init__" -> "Fxn:min(1.,";
    "Fxn:__init__" -> "Fxn:max(0.,";
    "Fxn:build" -> "Fxn:self.add_weight(shape=(input_dim,";
    "Fxn:build" -> "Fxn:self.add_weight(";
    "Fxn:build" -> "Fxn:shape=(self.units,";
    "Fxn:bias_initializer" -> "Fxn:K.concatenate([";
    "Fxn:bias_initializer" -> "Fxn:self.bias_initializer((self.units,),";
    "Fxn:bias_initializer" -> "Fxn:initializers.Ones()((self.units,),";
    "Fxn:bias_initializer" -> "Fxn:self.bias_initializer((self.units";
    "Fxn:bias_initializer" -> "Fxn:self.add_weight(shape=(self.units";
    "Fxn:call" -> "Fxn:_generate_dropout_mask(";
    "Fxn:call" -> "Fxn:_generate_dropout_ones(inputs,";
    "Fxn:call" -> "Fxn:K.shape(inputs)[-1]),";
    "Fxn:call" -> "Fxn:_generate_dropout_mask(";
    "Fxn:call" -> "Fxn:_generate_dropout_ones(inputs,";
    "Fxn:call" -> "Fxn:K.dot(inputs_i,";
    "Fxn:call" -> "Fxn:K.dot(inputs_f,";
    "Fxn:call" -> "Fxn:K.dot(inputs_c,";
    "Fxn:call" -> "Fxn:K.dot(inputs_o,";
    "Fxn:call" -> "Fxn:K.bias_add(x_i,";
    "Fxn:call" -> "Fxn:K.bias_add(x_f,";
    "Fxn:call" -> "Fxn:K.bias_add(x_c,";
    "Fxn:call" -> "Fxn:K.bias_add(x_o,";
    "Fxn:call" -> "Fxn:self.recurrent_activation(x_i";
    "Fxn:call" -> "Fxn:K.dot(h_tm1_i,";
    "Fxn:call" -> "Fxn:self.recurrent_activation(x_f";
    "Fxn:call" -> "Fxn:K.dot(h_tm1_f,";
    "Fxn:call" -> "Fxn:self.activation(x_c";
    "Fxn:call" -> "Fxn:K.dot(h_tm1_c,";
    "Fxn:call" -> "Fxn:self.recurrent_activation(x_o";
    "Fxn:call" -> "Fxn:K.dot(h_tm1_o,";
    "Fxn:call" -> "Fxn:K.dot(inputs,";
    "Fxn:call" -> "Fxn:K.dot(h_tm1,";
    "Fxn:call" -> "Fxn:K.bias_add(z,";
    "Fxn:call" -> "Fxn:self.recurrent_activation(z0)";
    "Fxn:call" -> "Fxn:self.recurrent_activation(z1)";
    "Fxn:call" -> "Fxn:self.activation(z2)";
    "Fxn:call" -> "Fxn:self.recurrent_activation(z3)";
    "Fxn:call" -> "Fxn:self.activation(c)";
    "Fxn:get_config" -> "Fxn:activations.serialize(self.activation),";
    "Fxn:get_config" -> "Fxn:activations.serialize(self.recurrent_activation),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.kernel_initializer),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.recurrent_initializer),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.bias_initializer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.kernel_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.recurrent_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.bias_regularizer),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.kernel_constraint),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.recurrent_constraint),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.bias_constraint),";
    "Fxn:get_config" -> "Fxn:super(LSTMCell,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:LSTM(RNN):" -> "Fxn:__init__";
    "class:LSTM(RNN):" -> "Fxn:call";
    "class:LSTM(RNN):" -> "Fxn:units";
    "class:LSTM(RNN):" -> "Fxn:activation";
    "class:LSTM(RNN):" -> "Fxn:recurrent_activation";
    "class:LSTM(RNN):" -> "Fxn:use_bias";
    "class:LSTM(RNN):" -> "Fxn:kernel_initializer";
    "class:LSTM(RNN):" -> "Fxn:recurrent_initializer";
    "class:LSTM(RNN):" -> "Fxn:bias_initializer";
    "class:LSTM(RNN):" -> "Fxn:unit_forget_bias";
    "class:LSTM(RNN):" -> "Fxn:kernel_regularizer";
    "class:LSTM(RNN):" -> "Fxn:recurrent_regularizer";
    "class:LSTM(RNN):" -> "Fxn:bias_regularizer";
    "class:LSTM(RNN):" -> "Fxn:kernel_constraint";
    "class:LSTM(RNN):" -> "Fxn:recurrent_constraint";
    "class:LSTM(RNN):" -> "Fxn:bias_constraint";
    "class:LSTM(RNN):" -> "Fxn:dropout";
    "class:LSTM(RNN):" -> "Fxn:recurrent_dropout";
    "class:LSTM(RNN):" -> "Fxn:implementation";
    "class:LSTM(RNN):" -> "Fxn:get_config";
    "class:LSTM(RNN):" -> "Fxn:from_config";
    "class:LSTM(RNN):" -> "Fxn:_generate_dropout_ones";
    "class:LSTM(RNN):" -> "Fxn:_generate_dropout_mask";
    "class:LSTM(RNN):" -> "Fxn:dropped_inputs";
    "Fxn:__init__" -> "Fxn:warnings.warn('`implementation=0`";
    "Fxn:__init__" -> "Fxn:K.backend()";
    "Fxn:__init__" -> "Fxn:warnings.warn(";
    "Fxn:__init__" -> "Fxn:LSTMCell(units,";
    "Fxn:__init__" -> "Fxn:super(LSTM,";
    "Fxn:__init__" -> "Fxn:self).__init__(cell,";
    "Fxn:__init__" -> "Fxn:regularizers.get(activity_regularizer)";
    "Fxn:call" -> "Fxn:super(LSTM,";
    "Fxn:call" -> "Fxn:self).call(inputs,";
    "Fxn:get_config" -> "Fxn:activations.serialize(self.activation),";
    "Fxn:get_config" -> "Fxn:activations.serialize(self.recurrent_activation),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.kernel_initializer),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.recurrent_initializer),";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.bias_initializer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.kernel_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.recurrent_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.bias_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.activity_regularizer),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.kernel_constraint),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.recurrent_constraint),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.bias_constraint),";
    "Fxn:get_config" -> "Fxn:super(LSTM,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "Fxn:from_config" -> "Fxn:cls(**config)";
    "Fxn:_generate_dropout_ones" -> "Fxn:K.backend()";
    "Fxn:_generate_dropout_ones" -> "Fxn:K.ones_like(K.reshape(inputs[:,";
    "Fxn:_generate_dropout_ones" -> "Fxn:K.tile(ones,";
    "Fxn:_generate_dropout_ones" -> "Fxn:K.ones((K.shape(inputs)[0],";
    "Fxn:dropped_inputs" -> "Fxn:K.dropout(ones,";
    "Fxn:dropped_inputs" -> "Fxn:[K.in_train_phase(";
    "Fxn:dropped_inputs" -> "Fxn:range(count)]";
    "Fxn:dropped_inputs" -> "Fxn:K.in_train_phase(";
    "/keras/layers/wrappers.py" -> "Import:absolute_import";
    "/keras/layers/wrappers.py" -> "Import:division";
    "/keras/layers/wrappers.py" -> "Import:print_function";
    "/keras/layers/wrappers.py" -> "Import:copy";
    "/keras/layers/wrappers.py" -> "Import:Layer";
    "/keras/layers/wrappers.py" -> "Import:InputSpec";
    "/keras/layers/wrappers.py" -> "Import:_object_list_uid";
    "/keras/layers/wrappers.py" -> "Import:has_arg";
    "/keras/layers/wrappers.py" -> "Import:backend";
    "/keras/layers/wrappers.py" -> "class:Wrapper(Layer):";
    "/keras/layers/wrappers.py" -> "Import:deserialize";
    "/keras/layers/wrappers.py" -> "class:TimeDistributed(Wrapper):";
    "/keras/layers/wrappers.py" -> "class:Bidirectional(Wrapper):";
    "class:Wrapper(Layer):" -> "Fxn:__init__";
    "class:Wrapper(Layer):" -> "Fxn:build";
    "class:Wrapper(Layer):" -> "Fxn:activity_regularizer";
    "class:Wrapper(Layer):" -> "Fxn:trainable";
    "class:Wrapper(Layer):" -> "Fxn:trainable";
    "class:Wrapper(Layer):" -> "Fxn:trainable_weights";
    "class:Wrapper(Layer):" -> "Fxn:non_trainable_weights";
    "class:Wrapper(Layer):" -> "Fxn:updates";
    "class:Wrapper(Layer):" -> "Fxn:get_updates_for";
    "class:Wrapper(Layer):" -> "Fxn:losses";
    "class:Wrapper(Layer):" -> "Fxn:get_losses_for";
    "class:Wrapper(Layer):" -> "Fxn:get_weights";
    "class:Wrapper(Layer):" -> "Fxn:set_weights";
    "class:Wrapper(Layer):" -> "Fxn:get_config";
    "class:Wrapper(Layer):" -> "Fxn:from_config";
    "Fxn:__init__" -> "Fxn:super(Wrapper,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:activity_regularizer" -> "Fxn:hasattr(self.layer,";
    "Fxn:updates" -> "Fxn:hasattr(self.layer,";
    "Fxn:get_updates_for" -> "Fxn:_object_list_uid(inputs)";
    "Fxn:get_updates_for" -> "Fxn:self.layer.get_updates_for(inner_inputs)";
    "Fxn:get_updates_for" -> "Fxn:super(Wrapper,";
    "Fxn:get_updates_for" -> "Fxn:self).get_updates_for(inputs)";
    "Fxn:losses" -> "Fxn:hasattr(self.layer,";
    "Fxn:get_losses_for" -> "Fxn:self.layer.get_losses_for(None)";
    "Fxn:get_losses_for" -> "Fxn:super(Wrapper,";
    "Fxn:get_losses_for" -> "Fxn:self).get_losses_for(None)";
    "Fxn:get_losses_for" -> "Fxn:super(Wrapper,";
    "Fxn:get_losses_for" -> "Fxn:self).get_losses_for(inputs)";
    "Fxn:get_weights" -> "Fxn:self.layer.get_weights()";
    "Fxn:set_weights" -> "Fxn:self.layer.set_weights(weights)";
    "Fxn:get_config" -> "Fxn:self.layer.get_config()}}";
    "Fxn:get_config" -> "Fxn:super(Wrapper,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "Fxn:from_config" -> "Fxn:deserialize_layer(config.pop('layer'),";
    "Fxn:from_config" -> "Fxn:cls(layer,";
    "class:TimeDistributed(Wrapper):" -> "Fxn:__init__";
    "class:TimeDistributed(Wrapper):" -> "Fxn:build";
    "class:TimeDistributed(Wrapper):" -> "Fxn:compute_output_shape";
    "class:TimeDistributed(Wrapper):" -> "Fxn:call";
    "class:TimeDistributed(Wrapper):" -> "Fxn:step";
    "Fxn:__init__" -> "Fxn:super(TimeDistributed,";
    "Fxn:__init__" -> "Fxn:self).__init__(layer,";
    "Fxn:build" -> "Fxn:len(input_shape)";
    "Fxn:build" -> "Fxn:InputSpec(shape=input_shape)";
    "Fxn:build" -> "Fxn:self.layer.build(child_input_shape)";
    "Fxn:build" -> "Fxn:super(TimeDistributed,";
    "Fxn:build" -> "Fxn:self).build()";
    "Fxn:compute_output_shape" -> "Fxn:self.layer.compute_output_shape(child_input_shape)";
    "Fxn:call" -> "Fxn:has_arg(self.layer.call,";
    "Fxn:call" -> "Fxn:K.int_shape(inputs)";
    "Fxn:step" -> "Fxn:self.layer.call(x,";
    "Fxn:step" -> "Fxn:hasattr(output,";
    "Fxn:step" -> "Fxn:K.rnn(step,";
    "Fxn:step" -> "Fxn:K.shape(inputs)[1]";
    "Fxn:step" -> "Fxn:_object_list_uid(inputs)";
    "Fxn:step" -> "Fxn:K.reshape(inputs,";
    "Fxn:step" -> "Fxn:self.layer.call(inputs,";
    "Fxn:step" -> "Fxn:hasattr(y,";
    "Fxn:step" -> "Fxn:self.compute_output_shape(input_shape)";
    "Fxn:step" -> "Fxn:K.reshape(y,";
    "Fxn:step" -> "Fxn:self.layer.activity_regularizer(y)";
    "Fxn:step" -> "Fxn:self.add_loss(regularization_loss,";
    "class:Bidirectional(Wrapper):" -> "Fxn:__init__";
    "class:Bidirectional(Wrapper):" -> "Fxn:trainable";
    "class:Bidirectional(Wrapper):" -> "Fxn:trainable";
    "class:Bidirectional(Wrapper):" -> "Fxn:get_weights";
    "class:Bidirectional(Wrapper):" -> "Fxn:set_weights";
    "class:Bidirectional(Wrapper):" -> "Fxn:compute_output_shape";
    "class:Bidirectional(Wrapper):" -> "Fxn:__call__";
    "class:Bidirectional(Wrapper):" -> "Fxn:call";
    "class:Bidirectional(Wrapper):" -> "Fxn:reset_states";
    "class:Bidirectional(Wrapper):" -> "Fxn:build";
    "class:Bidirectional(Wrapper):" -> "Fxn:compute_mask";
    "class:Bidirectional(Wrapper):" -> "Fxn:trainable_weights";
    "class:Bidirectional(Wrapper):" -> "Fxn:non_trainable_weights";
    "class:Bidirectional(Wrapper):" -> "Fxn:updates";
    "class:Bidirectional(Wrapper):" -> "Fxn:losses";
    "class:Bidirectional(Wrapper):" -> "Fxn:constraints";
    "class:Bidirectional(Wrapper):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:ValueError('Invalid";
    "Fxn:__init__" -> "Fxn:copy.copy(layer)";
    "Fxn:__init__" -> "Fxn:layer.get_config()";
    "Fxn:__init__" -> "Fxn:layer.__class__.from_config(config)";
    "Fxn:__init__" -> "Fxn:len(weights)";
    "Fxn:__init__" -> "Fxn:super(Bidirectional,";
    "Fxn:__init__" -> "Fxn:self).__init__(layer,";
    "Fxn:get_weights" -> "Fxn:self.forward_layer.get_weights()";
    "Fxn:get_weights" -> "Fxn:self.backward_layer.get_weights()";
    "Fxn:set_weights" -> "Fxn:len(weights)";
    "Fxn:set_weights" -> "Fxn:self.forward_layer.set_weights(weights[:nw";
    "Fxn:set_weights" -> "Fxn:self.backward_layer.set_weights(weights[nw";
    "Fxn:compute_output_shape" -> "Fxn:self.forward_layer.compute_output_shape(input_shape)";
    "Fxn:compute_output_shape" -> "Fxn:list(output_shape)";
    "Fxn:compute_output_shape" -> "Fxn:tuple(output_shape)";
    "Fxn:compute_output_shape" -> "Fxn:copy.copy(output_shape)]";
    "Fxn:compute_output_shape" -> "Fxn:copy.copy(state_shape)";
    "Fxn:compute_output_shape" -> "Fxn:copy.copy(state_shape)";
    "Fxn:__call__" -> "Fxn:isinstance(inputs,";
    "Fxn:__call__" -> "Fxn:len(inputs)";
    "Fxn:__call__" -> "Fxn:super(Bidirectional,";
    "Fxn:__call__" -> "Fxn:self).__call__(inputs,";
    "Fxn:__call__" -> "Fxn:isinstance(initial_state,";
    "Fxn:__call__" -> "Fxn:list(initial_state)";
    "Fxn:__call__" -> "Fxn:isinstance(initial_state,";
    "Fxn:__call__" -> "Fxn:len(initial_state)";
    "Fxn:__call__" -> "Fxn:ValueError(";
    "Fxn:__call__" -> "Fxn:str(initial_state))";
    "Fxn:__call__" -> "Fxn:[InputSpec(shape=K.int_shape(state))";
    "Fxn:__call__" -> "Fxn:K.is_keras_tensor(additional_inputs[0])";
    "Fxn:__call__" -> "Fxn:K.is_keras_tensor(tensor)";
    "Fxn:__call__" -> "Fxn:ValueError('The";
    "Fxn:__call__" -> "Fxn:super(Bidirectional,";
    "Fxn:__call__" -> "Fxn:self).__call__(full_input,";
    "Fxn:__call__" -> "Fxn:super(Bidirectional,";
    "Fxn:__call__" -> "Fxn:self).__call__(inputs,";
    "Fxn:call" -> "Fxn:has_arg(self.layer.call,";
    "Fxn:call" -> "Fxn:has_arg(self.layer.call,";
    "Fxn:call" -> "Fxn:has_arg(self.layer.call,";
    "Fxn:call" -> "Fxn:initial_state[:len(initial_state)";
    "Fxn:call" -> "Fxn:initial_state[len(initial_state)";
    "Fxn:call" -> "Fxn:self.forward_layer.call(inputs,";
    "Fxn:call" -> "Fxn:self.backward_layer.call(inputs,";
    "Fxn:call" -> "Fxn:self.forward_layer.call(inputs,";
    "Fxn:call" -> "Fxn:self.backward_layer.call(inputs,";
    "Fxn:call" -> "Fxn:K.reverse(y_rev,";
    "Fxn:call" -> "Fxn:K.concatenate([y,";
    "Fxn:call" -> "Fxn:getattr(y_rev,";
    "Fxn:reset_states" -> "Fxn:self.forward_layer.reset_states()";
    "Fxn:reset_states" -> "Fxn:self.backward_layer.reset_states()";
    "Fxn:build" -> "Fxn:K.name_scope(self.forward_layer.name):";
    "Fxn:build" -> "Fxn:self.forward_layer.build(input_shape)";
    "Fxn:build" -> "Fxn:K.name_scope(self.backward_layer.name):";
    "Fxn:build" -> "Fxn:self.backward_layer.build(input_shape)";
    "Fxn:trainable_weights" -> "Fxn:hasattr(self.forward_layer,";
    "Fxn:non_trainable_weights" -> "Fxn:hasattr(self.forward_layer,";
    "Fxn:updates" -> "Fxn:hasattr(self.forward_layer,";
    "Fxn:losses" -> "Fxn:hasattr(self.forward_layer,";
    "Fxn:constraints" -> "Fxn:hasattr(self.forward_layer,";
    "Fxn:constraints" -> "Fxn:constraints.update(self.forward_layer.constraints)";
    "Fxn:constraints" -> "Fxn:constraints.update(self.backward_layer.constraints)";
    "Fxn:get_config" -> "Fxn:super(Bidirectional,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "/keras/layers/__init__.py" -> "Import:absolute_import";
    "/keras/layers/__init__.py" -> "Import:deserialize_keras_object";
    "/keras/layers/__init__.py" -> "Import:Layer";
    "/keras/layers/__init__.py" -> "Import:Input";
    "/keras/layers/__init__.py" -> "Import:InputLayer";
    "/keras/layers/__init__.py" -> "Import:InputSpec";
    "/keras/layers/__init__.py" -> "Import:.core";
    "/keras/layers/__init__.py" -> "Import:.convolutional";
    "/keras/layers/__init__.py" -> "Import:.pooling";
    "/keras/layers/__init__.py" -> "Import:.local";
    "/keras/layers/__init__.py" -> "Import:.recurrent";
    "/keras/layers/__init__.py" -> "Import:.cudnn_recurrent";
    "/keras/layers/__init__.py" -> "Import:.normalization";
    "/keras/layers/__init__.py" -> "Import:.embeddings";
    "/keras/layers/__init__.py" -> "Import:.noise";
    "/keras/layers/__init__.py" -> "Import:.advanced_activations";
    "/keras/layers/__init__.py" -> "Import:.wrappers";
    "/keras/layers/__init__.py" -> "Import:.convolutional_recurrent";
    "/keras/layers/__init__.py" -> "Import:..legacy.layers";
    "/keras/layers/__init__.py" -> "Import:def";
    "/keras/layers/__init__.py" -> "Fxn:serialize";
    "/keras/layers/__init__.py" -> "Fxn:deserialize";
    "/keras/layers/__init__.py" -> "Import:models";
    "/keras/legacy/interfaces.py" -> "Import:absolute_import";
    "/keras/legacy/interfaces.py" -> "Import:division";
    "/keras/legacy/interfaces.py" -> "Import:print_function";
    "/keras/legacy/interfaces.py" -> "Import:six";
    "/keras/legacy/interfaces.py" -> "Import:warnings";
    "/keras/legacy/interfaces.py" -> "Import:functools";
    "/keras/legacy/interfaces.py" -> "Import:numpy";
    "/keras/legacy/interfaces.py" -> "Fxn:generate_legacy_interface";
    "/keras/legacy/interfaces.py" -> "Fxn:legacy_support";
    "/keras/legacy/interfaces.py" -> "Fxn:wrapper";
    "/keras/legacy/interfaces.py" -> "Fxn:raise_duplicate_arg_error";
    "/keras/legacy/interfaces.py" -> "Fxn:embedding_kwargs_preprocessor";
    "/keras/legacy/interfaces.py" -> "Fxn:recurrent_args_preprocessor";
    "/keras/legacy/interfaces.py" -> "Fxn:conv1d_args_preprocessor";
    "/keras/legacy/interfaces.py" -> "Fxn:conv2d_args_preprocessor";
    "/keras/legacy/interfaces.py" -> "Fxn:separable_conv2d_args_preprocessor";
    "/keras/legacy/interfaces.py" -> "Fxn:deconv2d_args_preprocessor";
    "/keras/legacy/interfaces.py" -> "Fxn:conv3d_args_preprocessor";
    "/keras/legacy/interfaces.py" -> "Fxn:batchnorm_args_preprocessor";
    "/keras/legacy/interfaces.py" -> "Fxn:convlstm2d_args_preprocessor";
    "/keras/legacy/interfaces.py" -> "Fxn:zeropadding2d_args_preprocessor";
    "/keras/legacy/interfaces.py" -> "Fxn:generator_methods_args_preprocessor";
    "/keras/legacy/interfaces.py" -> "Fxn:add_weight_args_preprocessing";
    "/keras/legacy/interfaces.py" -> "Fxn:get_updates_arg_preprocessing";
    "/keras/legacy/layers.py" -> "Import:absolute_import";
    "/keras/legacy/layers.py" -> "Import:division";
    "/keras/legacy/layers.py" -> "Import:print_function";
    "/keras/legacy/layers.py" -> "Import:numpy";
    "/keras/legacy/layers.py" -> "Import:types";
    "/keras/legacy/layers.py" -> "Import:warnings";
    "/keras/legacy/layers.py" -> "Import:Layer,";
    "/keras/legacy/layers.py" -> "Import:backend";
    "/keras/legacy/layers.py" -> "Import:func_dump,";
    "/keras/legacy/layers.py" -> "Import:conv_utils";
    "/keras/legacy/layers.py" -> "Import:regularizers";
    "/keras/legacy/layers.py" -> "Import:constraints";
    "/keras/legacy/layers.py" -> "Import:activations";
    "/keras/legacy/layers.py" -> "Import:initializers";
    "/keras/legacy/layers.py" -> "class:Merge(Layer):";
    "/keras/legacy/layers.py" -> "class:MaxoutDense(Layer):";
    "/keras/legacy/layers.py" -> "class:Highway(Layer):";
    "/keras/legacy/layers.py" -> "Import:Conv1D";
    "/keras/legacy/layers.py" -> "Import:Conv2D";
    "/keras/legacy/layers.py" -> "class:Recurrent(Layer):";
    "/keras/legacy/layers.py" -> "class:ConvRecurrent2D(Recurrent):";
    "class:Merge(Layer):" -> "Fxn:__init__";
    "class:Merge(Layer):" -> "Fxn:_arguments_validation";
    "class:Merge(Layer):" -> "Fxn:call";
    "class:Merge(Layer):" -> "Fxn:compute_output_shape";
    "class:Merge(Layer):" -> "Fxn:compute_mask";
    "class:Merge(Layer):" -> "Fxn:get_config";
    "class:Merge(Layer):" -> "Fxn:from_config";
    "class:Merge(Layer):" -> "Fxn:merge";
    "Fxn:__init__" -> "Fxn:warnings.warn('The";
    "Fxn:__init__" -> "Fxn:self.__class__.__name__.lower()";
    "Fxn:__init__" -> "Fxn:str(K.get_uid(prefix))";
    "Fxn:__init__" -> "Fxn:Merge(layers=None)";
    "Fxn:__init__" -> "Fxn:merge([input_tensor_1,";
    "Fxn:__init__" -> "Fxn:range(len(layers))]";
    "Fxn:__init__" -> "Fxn:range(len(layers))]";
    "Fxn:__init__" -> "Fxn:self._arguments_validation(layers,";
    "Fxn:__init__" -> "Fxn:enumerate(layers):";
    "Fxn:__init__" -> "Fxn:input_tensors.append(inbound_node.output_tensors[tensor_index])";
    "Fxn:__init__" -> "Fxn:input_masks.append(inbound_node.output_masks[tensor_index])";
    "Fxn:__init__" -> "Fxn:self(input_tensors,";
    "Fxn:_arguments_validation" -> "Fxn:callable(mode):";
    "Fxn:_arguments_validation" -> "Fxn:ValueError('Invalid";
    "Fxn:_arguments_validation" -> "Fxn:str(mode))";
    "Fxn:_arguments_validation" -> "Fxn:isinstance(layers,";
    "Fxn:_arguments_validation" -> "Fxn:len(layers)";
    "Fxn:_arguments_validation" -> "Fxn:TypeError('A";
    "Fxn:_arguments_validation" -> "Fxn:str(layers))";
    "Fxn:_arguments_validation" -> "Fxn:range(len(layers))]";
    "Fxn:_arguments_validation" -> "Fxn:enumerate(layers):";
    "Fxn:_arguments_validation" -> "Fxn:layer.get_output_shape_at(node_indices[i])";
    "Fxn:_arguments_validation" -> "Fxn:isinstance(layer_output_shape,";
    "Fxn:_arguments_validation" -> "Fxn:input_shapes.append(layer_output_shape)";
    "Fxn:_arguments_validation" -> "Fxn:set(input_shapes)";
    "Fxn:_arguments_validation" -> "Fxn:len(input_shapes_set)";
    "Fxn:_arguments_validation" -> "Fxn:ValueError('Only";
    "Fxn:_arguments_validation" -> "Fxn:len(layers)";
    "Fxn:_arguments_validation" -> "Fxn:ValueError(mode";
    "Fxn:_arguments_validation" -> "Fxn:len(shape1)";
    "Fxn:_arguments_validation" -> "Fxn:len(shape2)";
    "Fxn:_arguments_validation" -> "Fxn:isinstance(dot_axes,";
    "Fxn:_arguments_validation" -> "Fxn:isinstance(self.dot_axes,";
    "Fxn:_arguments_validation" -> "Fxn:TypeError('Invalid";
    "Fxn:_arguments_validation" -> "Fxn:len(self.dot_axes)";
    "Fxn:_arguments_validation" -> "Fxn:ValueError('Invalid";
    "Fxn:_arguments_validation" -> "Fxn:isinstance(self.dot_axes[0],";
    "Fxn:_arguments_validation" -> "Fxn:isinstance(self.dot_axes[1],";
    "Fxn:_arguments_validation" -> "Fxn:ValueError('Invalid";
    "Fxn:_arguments_validation" -> "Fxn:ValueError('Dimension";
    "Fxn:_arguments_validation" -> "Fxn:[list(shape)";
    "Fxn:_arguments_validation" -> "Fxn:set()";
    "Fxn:_arguments_validation" -> "Fxn:range(len(reduced_inputs_shapes)):";
    "Fxn:_arguments_validation" -> "Fxn:shape_set.add(tuple(reduced_inputs_shapes[i]))";
    "Fxn:_arguments_validation" -> "Fxn:len(shape_set)";
    "Fxn:_arguments_validation" -> "Fxn:ValueError('"concat"";
    "Fxn:call" -> "Fxn:isinstance(inputs,";
    "Fxn:call" -> "Fxn:len(inputs)";
    "Fxn:call" -> "Fxn:TypeError('Merge";
    "Fxn:call" -> "Fxn:'(at";
    "Fxn:call" -> "Fxn:str(inputs))";
    "Fxn:call" -> "Fxn:callable(self.mode):";
    "Fxn:call" -> "Fxn:has_arg(self.mode,";
    "Fxn:call" -> "Fxn:self.mode(inputs,";
    "Fxn:call" -> "Fxn:range(1,";
    "Fxn:call" -> "Fxn:len(inputs)):";
    "Fxn:call" -> "Fxn:len(inputs)";
    "Fxn:call" -> "Fxn:K.concatenate(inputs,";
    "Fxn:call" -> "Fxn:range(1,";
    "Fxn:call" -> "Fxn:len(inputs)):";
    "Fxn:call" -> "Fxn:range(1,";
    "Fxn:call" -> "Fxn:len(inputs)):";
    "Fxn:call" -> "Fxn:K.maximum(s,";
    "Fxn:call" -> "Fxn:K.batch_dot(l1,";
    "Fxn:call" -> "Fxn:K.sqrt(K.batch_dot(l1,";
    "Fxn:call" -> "Fxn:K.batch_dot(l2,";
    "Fxn:call" -> "Fxn:K.maximum(denominator,";
    "Fxn:call" -> "Fxn:K.epsilon())";
    "Fxn:call" -> "Fxn:K.batch_dot(l1,";
    "Fxn:call" -> "Fxn:K.expand_dims(output,";
    "Fxn:call" -> "Fxn:ValueError('Unknown";
    "Fxn:compute_output_shape" -> "Fxn:isinstance(input_shape,";
    "Fxn:compute_output_shape" -> "Fxn:callable(self.mode):";
    "Fxn:compute_output_shape" -> "Fxn:callable(self._output_shape):";
    "Fxn:compute_output_shape" -> "Fxn:self._output_shape(input_shape)";
    "Fxn:compute_output_shape" -> "Fxn:tuple(self._output_shape)";
    "Fxn:compute_output_shape" -> "Fxn:ValueError('The";
    "Fxn:compute_output_shape" -> "Fxn:'(or";
    "Fxn:compute_output_shape" -> "Fxn:list(input_shapes[0])";
    "Fxn:compute_output_shape" -> "Fxn:tuple(output_shape)";
    "Fxn:compute_output_shape" -> "Fxn:list(input_shapes[0])";
    "Fxn:compute_output_shape" -> "Fxn:list(input_shapes[1])";
    "Fxn:compute_output_shape" -> "Fxn:shape1.pop(self.dot_axes[0])";
    "Fxn:compute_output_shape" -> "Fxn:shape2.pop(self.dot_axes[1])";
    "Fxn:compute_output_shape" -> "Fxn:shape2.pop(0)";
    "Fxn:compute_output_shape" -> "Fxn:len(output_shape)";
    "Fxn:compute_output_shape" -> "Fxn:tuple(output_shape)";
    "Fxn:compute_mask" -> "Fxn:all([m";
    "Fxn:compute_mask" -> "Fxn:hasattr(mask,";
    "Fxn:compute_mask" -> "Fxn:len(mask)";
    "Fxn:compute_mask" -> "Fxn:len(inputs)";
    "Fxn:compute_mask" -> "Fxn:[K.expand_dims(m,";
    "Fxn:compute_mask" -> "Fxn:K.all(K.concatenate(masks,";
    "Fxn:compute_mask" -> "Fxn:zip(inputs,";
    "Fxn:compute_mask" -> "Fxn:masks.append(K.ones_like(input_i,";
    "Fxn:compute_mask" -> "Fxn:K.ndim(mask_i)";
    "Fxn:compute_mask" -> "Fxn:K.ndim(input_i):";
    "Fxn:compute_mask" -> "Fxn:masks.append(K.expand_dims(mask_i))";
    "Fxn:compute_mask" -> "Fxn:masks.append(mask_i)";
    "Fxn:compute_mask" -> "Fxn:K.concatenate(masks,";
    "Fxn:compute_mask" -> "Fxn:K.all(concatenated,";
    "Fxn:compute_mask" -> "Fxn:callable(self.mode):";
    "Fxn:compute_mask" -> "Fxn:callable(self._output_mask):";
    "Fxn:compute_mask" -> "Fxn:self._output_mask(mask)";
    "Fxn:compute_mask" -> "Fxn:ValueError('Invalid";
    "Fxn:compute_mask" -> "Fxn:{}'.format(self.mode))";
    "Fxn:get_config" -> "Fxn:isinstance(self.mode,";
    "Fxn:get_config" -> "Fxn:func_dump(self.mode)";
    "Fxn:get_config" -> "Fxn:callable(self.mode):";
    "Fxn:get_config" -> "Fxn:isinstance(self._output_shape,";
    "Fxn:get_config" -> "Fxn:func_dump(self._output_shape)";
    "Fxn:get_config" -> "Fxn:callable(self._output_shape):";
    "Fxn:get_config" -> "Fxn:isinstance(self._output_mask,";
    "Fxn:get_config" -> "Fxn:func_dump(self._output_mask)";
    "Fxn:get_config" -> "Fxn:callable(self._output_mask):";
    "Fxn:from_config" -> "Fxn:config.copy()";
    "Fxn:from_config" -> "Fxn:config.pop('mode_type')";
    "Fxn:from_config" -> "Fxn:globals()[config['mode']]";
    "Fxn:from_config" -> "Fxn:func_load(config['mode'],";
    "Fxn:from_config" -> "Fxn:globs=globals())";
    "Fxn:from_config" -> "Fxn:config.pop('output_shape_type',";
    "Fxn:from_config" -> "Fxn:globals()[config['output_shape']]";
    "Fxn:from_config" -> "Fxn:func_load(config['output_shape'],";
    "Fxn:from_config" -> "Fxn:globs=globals())";
    "Fxn:from_config" -> "Fxn:config.get('output_shape')";
    "Fxn:from_config" -> "Fxn:config.pop('output_mask_type',";
    "Fxn:from_config" -> "Fxn:globals()[config['output_mask']]";
    "Fxn:from_config" -> "Fxn:func_load(config['output_mask'],";
    "Fxn:from_config" -> "Fxn:globs=globals())";
    "Fxn:from_config" -> "Fxn:config.get('output_mask')";
    "Fxn:from_config" -> "Fxn:super(Merge,";
    "Fxn:from_config" -> "Fxn:cls).from_config(config)";
    "Fxn:merge" -> "Fxn:Input(shape=(32,))";
    "Fxn:merge" -> "Fxn:Input(shape=(32,))";
    "Fxn:merge" -> "Fxn:merge([tensor_a,";
    "Fxn:merge" -> "Fxn:warnings.warn('The";
    "Fxn:merge" -> "Fxn:hasattr(x,";
    "Fxn:merge" -> "Fxn:input_layers.append(input_layer)";
    "Fxn:merge" -> "Fxn:node_indices.append(node_index)";
    "Fxn:merge" -> "Fxn:tensor_indices.append(tensor_index)";
    "Fxn:merge" -> "Fxn:Merge(input_layers,";
    "Fxn:merge" -> "Fxn:Merge(mode=mode,";
    "Fxn:merge" -> "Fxn:merge_layer(inputs)";
    "class:MaxoutDense(Layer):" -> "Fxn:__init__";
    "class:MaxoutDense(Layer):" -> "Fxn:build";
    "class:MaxoutDense(Layer):" -> "Fxn:compute_output_shape";
    "class:MaxoutDense(Layer):" -> "Fxn:call";
    "class:MaxoutDense(Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:warnings.warn('The";
    "Fxn:__init__" -> "Fxn:initializers.get(init)";
    "Fxn:__init__" -> "Fxn:regularizers.get(W_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(b_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(activity_regularizer)";
    "Fxn:__init__" -> "Fxn:constraints.get(W_constraint)";
    "Fxn:__init__" -> "Fxn:constraints.get(b_constraint)";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=2)";
    "Fxn:__init__" -> "Fxn:super(MaxoutDense,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:build" -> "Fxn:InputSpec(dtype=K.floatx(),";
    "Fxn:build" -> "Fxn:shape=(None,";
    "Fxn:build" -> "Fxn:self.add_weight((self.nb_feature,";
    "Fxn:build" -> "Fxn:self.add_weight((self.nb_feature,";
    "Fxn:build" -> "Fxn:self.set_weights(self.initial_weights)";
    "Fxn:compute_output_shape" -> "Fxn:len(input_shape)";
    "Fxn:call" -> "Fxn:K.dot(x,";
    "Fxn:call" -> "Fxn:K.max(output,";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.init),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.W_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.b_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.activity_regularizer),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.W_constraint),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.b_constraint),";
    "Fxn:get_config" -> "Fxn:super(MaxoutDense,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:Highway(Layer):" -> "Fxn:__init__";
    "class:Highway(Layer):" -> "Fxn:build";
    "class:Highway(Layer):" -> "Fxn:call";
    "class:Highway(Layer):" -> "Fxn:get_config";
    "class:Highway(Layer):" -> "Fxn:AtrousConvolution1D";
    "class:Highway(Layer):" -> "Fxn:AtrousConvolution2D";
    "Fxn:__init__" -> "Fxn:warnings.warn('The";
    "Fxn:__init__" -> "Fxn:kwargs.pop('transform_bias')";
    "Fxn:__init__" -> "Fxn:warnings.warn('`transform_bias`";
    "Fxn:__init__" -> "Fxn:initializers.get(init)";
    "Fxn:__init__" -> "Fxn:activations.get(activation)";
    "Fxn:__init__" -> "Fxn:regularizers.get(W_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(b_regularizer)";
    "Fxn:__init__" -> "Fxn:regularizers.get(activity_regularizer)";
    "Fxn:__init__" -> "Fxn:constraints.get(W_constraint)";
    "Fxn:__init__" -> "Fxn:constraints.get(b_constraint)";
    "Fxn:__init__" -> "Fxn:InputSpec(ndim=2)";
    "Fxn:__init__" -> "Fxn:super(Highway,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:build" -> "Fxn:InputSpec(dtype=K.floatx(),";
    "Fxn:build" -> "Fxn:shape=(None,";
    "Fxn:build" -> "Fxn:self.add_weight((input_dim,";
    "Fxn:build" -> "Fxn:self.add_weight((input_dim,";
    "Fxn:build" -> "Fxn:self.add_weight((input_dim,),";
    "Fxn:build" -> "Fxn:self.add_weight((input_dim,),";
    "Fxn:build" -> "Fxn:self.set_weights(self.initial_weights)";
    "Fxn:call" -> "Fxn:K.dot(x,";
    "Fxn:call" -> "Fxn:activations.sigmoid(y)";
    "Fxn:call" -> "Fxn:K.dot(x,";
    "Fxn:call" -> "Fxn:self.activation(y)";
    "Fxn:get_config" -> "Fxn:initializers.serialize(self.init),";
    "Fxn:get_config" -> "Fxn:activations.serialize(self.activation),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.W_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.b_regularizer),";
    "Fxn:get_config" -> "Fxn:regularizers.serialize(self.activity_regularizer),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.W_constraint),";
    "Fxn:get_config" -> "Fxn:constraints.serialize(self.b_constraint),";
    "Fxn:get_config" -> "Fxn:super(Highway,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "Fxn:AtrousConvolution1D" -> "Fxn:kwargs.pop('atrous_rate')";
    "Fxn:AtrousConvolution1D" -> "Fxn:warnings.warn('The";
    "Fxn:AtrousConvolution1D" -> "Fxn:Conv1D(*args,";
    "Fxn:AtrousConvolution2D" -> "Fxn:kwargs.pop('atrous_rate')";
    "Fxn:AtrousConvolution2D" -> "Fxn:warnings.warn('The";
    "Fxn:AtrousConvolution2D" -> "Fxn:Conv2D(*args,";
    "class:Recurrent(Layer):" -> "Fxn:__init__";
    "class:Recurrent(Layer):" -> "Fxn:compute_output_shape";
    "class:Recurrent(Layer):" -> "Fxn:compute_mask";
    "class:Recurrent(Layer):" -> "Fxn:step";
    "class:Recurrent(Layer):" -> "Fxn:get_constants";
    "class:Recurrent(Layer):" -> "Fxn:get_initial_state";
    "class:Recurrent(Layer):" -> "Fxn:preprocess_input";
    "class:Recurrent(Layer):" -> "Fxn:__call__";
    "class:Recurrent(Layer):" -> "Fxn:call";
    "class:Recurrent(Layer):" -> "Fxn:reset_states";
    "class:Recurrent(Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(Recurrent,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:[InputSpec(ndim=3)]";
    "Fxn:compute_output_shape" -> "Fxn:isinstance(input_shape,";
    "Fxn:compute_output_shape" -> "Fxn:[(input_shape[0],";
    "Fxn:compute_mask" -> "Fxn:isinstance(mask,";
    "Fxn:get_initial_state" -> "Fxn:K.zeros_like(inputs)";
    "Fxn:get_initial_state" -> "Fxn:K.sum(initial_state,";
    "Fxn:get_initial_state" -> "Fxn:axis=(1,";
    "Fxn:get_initial_state" -> "Fxn:K.expand_dims(initial_state)";
    "Fxn:get_initial_state" -> "Fxn:K.tile(initial_state,";
    "Fxn:get_initial_state" -> "Fxn:range(len(self.states))]";
    "Fxn:__call__" -> "Fxn:isinstance(inputs,";
    "Fxn:__call__" -> "Fxn:len(inputs)";
    "Fxn:__call__" -> "Fxn:super(Recurrent,";
    "Fxn:__call__" -> "Fxn:self).__call__(inputs,";
    "Fxn:__call__" -> "Fxn:isinstance(initial_state,";
    "Fxn:__call__" -> "Fxn:hasattr(initial_state[0],";
    "Fxn:__call__" -> "Fxn:hasattr(tensor,";
    "Fxn:__call__" -> "Fxn:ValueError('The";
    "Fxn:__call__" -> "Fxn:isinstance(input_spec,";
    "Fxn:__call__" -> "Fxn:isinstance(state_spec,";
    "Fxn:__call__" -> "Fxn:list(initial_state)";
    "Fxn:__call__" -> "Fxn:super(Recurrent,";
    "Fxn:__call__" -> "Fxn:self).__call__(inputs,";
    "Fxn:__call__" -> "Fxn:super(Recurrent,";
    "Fxn:__call__" -> "Fxn:self).__call__(inputs,";
    "Fxn:call" -> "Fxn:`(samples,";
    "Fxn:call" -> "Fxn:.build()";
    "Fxn:call" -> "Fxn:isinstance(inputs,";
    "Fxn:call" -> "Fxn:self.get_initial_state(inputs)";
    "Fxn:call" -> "Fxn:isinstance(mask,";
    "Fxn:call" -> "Fxn:len(initial_state)";
    "Fxn:call" -> "Fxn:len(self.states):";
    "Fxn:call" -> "Fxn:ValueError('Layer";
    "Fxn:call" -> "Fxn:str(len(self.states))";
    "Fxn:call" -> "Fxn:str(len(initial_state))";
    "Fxn:call" -> "Fxn:K.int_shape(inputs)";
    "Fxn:call" -> "Fxn:ValueError('Cannot";
    "Fxn:call" -> "Fxn:self.get_constants(inputs,";
    "Fxn:call" -> "Fxn:self.preprocess_input(inputs,";
    "Fxn:call" -> "Fxn:K.rnn(self.step,";
    "Fxn:call" -> "Fxn:range(len(states)):";
    "Fxn:call" -> "Fxn:updates.append((self.states[i],";
    "Fxn:call" -> "Fxn:self.add_update(updates,";
    "Fxn:call" -> "Fxn:isinstance(states,";
    "Fxn:call" -> "Fxn:list(states)";
    "Fxn:reset_states" -> "Fxn:AttributeError('Layer";
    "Fxn:reset_states" -> "Fxn:ValueError('If";
    "Fxn:reset_states" -> "Fxn:[K.zeros((batch_size,";
    "Fxn:reset_states" -> "Fxn:K.set_value(state,";
    "Fxn:reset_states" -> "Fxn:np.zeros((batch_size,";
    "Fxn:reset_states" -> "Fxn:isinstance(states,";
    "Fxn:reset_states" -> "Fxn:len(states)";
    "Fxn:reset_states" -> "Fxn:len(self.states):";
    "Fxn:reset_states" -> "Fxn:ValueError('Layer";
    "Fxn:reset_states" -> "Fxn:str(len(self.states))";
    "Fxn:reset_states" -> "Fxn:str(len(states))";
    "Fxn:reset_states" -> "Fxn:str(states))";
    "Fxn:reset_states" -> "Fxn:enumerate(zip(states,";
    "Fxn:reset_states" -> "Fxn:ValueError('State";
    "Fxn:reset_states" -> "Fxn:str(index)";
    "Fxn:reset_states" -> "Fxn:str((batch_size,";
    "Fxn:reset_states" -> "Fxn:str(value.shape))";
    "Fxn:reset_states" -> "Fxn:K.set_value(state,";
    "Fxn:get_config" -> "Fxn:super(Recurrent,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "class:ConvRecurrent2D(Recurrent):" -> "Fxn:__init__";
    "class:ConvRecurrent2D(Recurrent):" -> "Fxn:compute_output_shape";
    "class:ConvRecurrent2D(Recurrent):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:strides=(1,";
    "Fxn:__init__" -> "Fxn:dilation_rate=(1,";
    "Fxn:__init__" -> "Fxn:super(ConvRecurrent2D,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(kernel_size,";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(strides,";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_padding(padding)";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_data_format(data_format)";
    "Fxn:__init__" -> "Fxn:conv_utils.normalize_tuple(dilation_rate,";
    "Fxn:__init__" -> "Fxn:[InputSpec(ndim=5)]";
    "Fxn:compute_output_shape" -> "Fxn:isinstance(input_shape,";
    "Fxn:compute_output_shape" -> "Fxn:conv_utils.conv_output_length(rows,";
    "Fxn:compute_output_shape" -> "Fxn:conv_utils.conv_output_length(cols,";
    "Fxn:compute_output_shape" -> "Fxn:[(input_shape[0],";
    "Fxn:compute_output_shape" -> "Fxn:range(2)]";
    "Fxn:compute_output_shape" -> "Fxn:[(input_shape[0],";
    "Fxn:compute_output_shape" -> "Fxn:range(2)]";
    "Fxn:get_config" -> "Fxn:super(ConvRecurrent2D,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "/keras/legacy/models.py" -> "Import:absolute_import";
    "/keras/legacy/models.py" -> "Import:division";
    "/keras/legacy/models.py" -> "Import:print_function";
    "/keras/legacy/models.py" -> "Import:Merge";
    "/keras/legacy/models.py" -> "Fxn:needs_legacy_support";
    "/keras/legacy/models.py" -> "Fxn:legacy_sequential_layers";
    "/keras/preprocessing/image.py" -> "Import:absolute_import";
    "/keras/preprocessing/image.py" -> "Import:division";
    "/keras/preprocessing/image.py" -> "Import:print_function";
    "/keras/preprocessing/image.py" -> "Import:numpy";
    "/keras/preprocessing/image.py" -> "Import:scipy";
    "/keras/preprocessing/image.py" -> "Import:linalg";
    "/keras/preprocessing/image.py" -> "Import:scipy.ndimage";
    "/keras/preprocessing/image.py" -> "Import:range";
    "/keras/preprocessing/image.py" -> "Import:import";
    "/keras/preprocessing/image.py" -> "Import:threading";
    "/keras/preprocessing/image.py" -> "Import:warnings";
    "/keras/preprocessing/image.py" -> "Import:multiprocessing.pool";
    "/keras/preprocessing/image.py" -> "Import:partial";
    "/keras/preprocessing/image.py" -> "Import:backend";
    "/keras/preprocessing/image.py" -> "Import:Sequence";
    "/keras/preprocessing/image.py" -> "Import:ImageEnhance";
    "/keras/preprocessing/image.py" -> "Import:Image";
    "/keras/preprocessing/image.py" -> "Fxn:random_rotation";
    "/keras/preprocessing/image.py" -> "Fxn:random_shift";
    "/keras/preprocessing/image.py" -> "Fxn:random_shear";
    "/keras/preprocessing/image.py" -> "Fxn:random_zoom";
    "/keras/preprocessing/image.py" -> "Fxn:random_channel_shift";
    "/keras/preprocessing/image.py" -> "Fxn:random_brightness";
    "/keras/preprocessing/image.py" -> "Fxn:transform_matrix_offset_center";
    "/keras/preprocessing/image.py" -> "Fxn:apply_transform";
    "/keras/preprocessing/image.py" -> "Fxn:flip_axis";
    "/keras/preprocessing/image.py" -> "Fxn:array_to_img";
    "/keras/preprocessing/image.py" -> "Import:PIL.Image.";
    "/keras/preprocessing/image.py" -> "Fxn:img_to_array";
    "/keras/preprocessing/image.py" -> "Fxn:load_img";
    "/keras/preprocessing/image.py" -> "Import:PIL.Image.";
    "/keras/preprocessing/image.py" -> "Fxn:list_pictures";
    "/keras/preprocessing/image.py" -> "class:ImageDataGenerator(object):";
    "/keras/preprocessing/image.py" -> "class:Iterator(Sequence):";
    "/keras/preprocessing/image.py" -> "class:NumpyArrayIterator(Iterator):";
    "/keras/preprocessing/image.py" -> "class:DirectoryIterator(Iterator):";
    "class:ImageDataGenerator(object):" -> "Fxn:__init__";
    "class:ImageDataGenerator(object):" -> "Fxn:flow";
    "class:ImageDataGenerator(object):" -> "Fxn:flow_from_directory";
    "class:ImageDataGenerator(object):" -> "Fxn:standardize";
    "class:ImageDataGenerator(object):" -> "Fxn:random_transform";
    "class:ImageDataGenerator(object):" -> "Fxn:fit";
    "Fxn:__init__" -> "Fxn:K.image_data_format()";
    "Fxn:__init__" -> "Fxn:ValueError('`data_format`";
    "Fxn:__init__" -> "Fxn:ValueError('`validation_split`";
    "Fxn:__init__" -> "Fxn:np.isscalar(zoom_range):";
    "Fxn:__init__" -> "Fxn:len(zoom_range)";
    "Fxn:__init__" -> "Fxn:ValueError('`zoom_range`";
    "Fxn:__init__" -> "Fxn:warnings.warn('This";
    "Fxn:__init__" -> "Fxn:warnings.warn('This";
    "Fxn:__init__" -> "Fxn:warnings.warn('This";
    "Fxn:__init__" -> "Fxn:warnings.warn('This";
    "Fxn:flow" -> "Fxn:NumpyArrayIterator(";
    "Fxn:flow_from_directory" -> "Fxn:target_size=(256,";
    "Fxn:flow_from_directory" -> "Fxn:DirectoryIterator(";
    "Fxn:standardize" -> "Fxn:np.mean(x,";
    "Fxn:standardize" -> "Fxn:K.epsilon())";
    "Fxn:standardize" -> "Fxn:warnings.warn('This";
    "Fxn:standardize" -> "Fxn:`.fit(numpy_data)`.')";
    "Fxn:standardize" -> "Fxn:K.epsilon())";
    "Fxn:standardize" -> "Fxn:warnings.warn('This";
    "Fxn:standardize" -> "Fxn:`.fit(numpy_data)`.')";
    "Fxn:standardize" -> "Fxn:np.reshape(x,";
    "Fxn:standardize" -> "Fxn:np.prod(x.shape[-3:])))";
    "Fxn:standardize" -> "Fxn:np.dot(flatx,";
    "Fxn:standardize" -> "Fxn:np.reshape(whitex,";
    "Fxn:standardize" -> "Fxn:warnings.warn('This";
    "Fxn:standardize" -> "Fxn:`.fit(numpy_data)`.')";
    "Fxn:random_transform" -> "Fxn:np.random.seed(seed)";
    "Fxn:random_transform" -> "Fxn:np.deg2rad(np.random.uniform(-self.rotation_range,";
    "Fxn:random_transform" -> "Fxn:np.random.uniform(-self.height_shift_range,";
    "Fxn:random_transform" -> "Fxn:np.random.uniform(-self.width_shift_range,";
    "Fxn:random_transform" -> "Fxn:np.deg2rad(np.random.uniform(-self.shear_range,";
    "Fxn:random_transform" -> "Fxn:np.random.uniform(self.zoom_range[0],";
    "Fxn:random_transform" -> "Fxn:np.array([[np.cos(theta),";
    "Fxn:random_transform" -> "Fxn:-np.sin(theta),";
    "Fxn:random_transform" -> "Fxn:[np.sin(theta),";
    "Fxn:random_transform" -> "Fxn:np.cos(theta),";
    "Fxn:random_transform" -> "Fxn:np.array([[1,";
    "Fxn:random_transform" -> "Fxn:np.dot(transform_matrix,";
    "Fxn:random_transform" -> "Fxn:np.array([[1,";
    "Fxn:random_transform" -> "Fxn:-np.sin(shear),";
    "Fxn:random_transform" -> "Fxn:np.cos(shear),";
    "Fxn:random_transform" -> "Fxn:np.dot(transform_matrix,";
    "Fxn:random_transform" -> "Fxn:np.array([[zx,";
    "Fxn:random_transform" -> "Fxn:np.dot(transform_matrix,";
    "Fxn:random_transform" -> "Fxn:transform_matrix_offset_center(transform_matrix,";
    "Fxn:random_transform" -> "Fxn:apply_transform(x,";
    "Fxn:random_transform" -> "Fxn:random_channel_shift(x,";
    "Fxn:random_transform" -> "Fxn:np.random.random()";
    "Fxn:random_transform" -> "Fxn:flip_axis(x,";
    "Fxn:random_transform" -> "Fxn:np.random.random()";
    "Fxn:random_transform" -> "Fxn:flip_axis(x,";
    "Fxn:random_transform" -> "Fxn:random_brightness(x,";
    "Fxn:fit" -> "Fxn:np.asarray(x,";
    "Fxn:fit" -> "Fxn:dtype=K.floatx())";
    "Fxn:fit" -> "Fxn:ValueError('Input";
    "Fxn:fit" -> "Fxn:`.fit()`";
    "Fxn:fit" -> "Fxn:str(x.shape))";
    "Fxn:fit" -> "Fxn:warnings.warn(";
    "Fxn:fit" -> "Fxn:'(channels";
    "Fxn:fit" -> "Fxn:str(self.channel_axis)";
    "Fxn:fit" -> "Fxn:str(self.channel_axis)";
    "Fxn:fit" -> "Fxn:str(x.shape)";
    "Fxn:fit" -> "Fxn:str(x.shape[self.channel_axis])";
    "Fxn:fit" -> "Fxn:np.random.seed(seed)";
    "Fxn:fit" -> "Fxn:np.copy(x)";
    "Fxn:fit" -> "Fxn:np.zeros(tuple([rounds";
    "Fxn:fit" -> "Fxn:list(x.shape)[1:]),";
    "Fxn:fit" -> "Fxn:dtype=K.floatx())";
    "Fxn:fit" -> "Fxn:range(rounds):";
    "Fxn:fit" -> "Fxn:range(x.shape[0]):";
    "Fxn:fit" -> "Fxn:self.random_transform(x[i])";
    "Fxn:fit" -> "Fxn:np.mean(x,";
    "Fxn:fit" -> "Fxn:axis=(0,";
    "Fxn:fit" -> "Fxn:np.reshape(self.mean,";
    "Fxn:fit" -> "Fxn:np.std(x,";
    "Fxn:fit" -> "Fxn:axis=(0,";
    "Fxn:fit" -> "Fxn:np.reshape(self.std,";
    "Fxn:fit" -> "Fxn:K.epsilon())";
    "Fxn:fit" -> "Fxn:np.reshape(x,";
    "Fxn:fit" -> "Fxn:np.dot(flat_x.T,";
    "Fxn:fit" -> "Fxn:linalg.svd(sigma)";
    "Fxn:fit" -> "Fxn:np.sqrt(s[np.newaxis]";
    "Fxn:fit" -> "Fxn:s_inv).dot(u.T)";
    "class:Iterator(Sequence):" -> "Fxn:__init__";
    "class:Iterator(Sequence):" -> "Fxn:_set_index_array";
    "class:Iterator(Sequence):" -> "Fxn:__getitem__";
    "class:Iterator(Sequence):" -> "Fxn:__len__";
    "class:Iterator(Sequence):" -> "Fxn:on_epoch_end";
    "class:Iterator(Sequence):" -> "Fxn:reset";
    "class:Iterator(Sequence):" -> "Fxn:_flow_index";
    "class:Iterator(Sequence):" -> "Fxn:__iter__";
    "class:Iterator(Sequence):" -> "Fxn:__next__";
    "class:Iterator(Sequence):" -> "Fxn:_get_batches_of_transformed_samples";
    "Fxn:__init__" -> "Fxn:threading.Lock()";
    "Fxn:__init__" -> "Fxn:self._flow_index()";
    "Fxn:_set_index_array" -> "Fxn:np.arange(self.n)";
    "Fxn:_set_index_array" -> "Fxn:np.random.permutation(self.n)";
    "Fxn:__getitem__" -> "Fxn:len(self):";
    "Fxn:__getitem__" -> "Fxn:ValueError('Asked";
    "Fxn:__getitem__" -> "Fxn:{length}'.format(idx=idx,";
    "Fxn:__getitem__" -> "Fxn:length=len(self)))";
    "Fxn:__getitem__" -> "Fxn:np.random.seed(self.seed";
    "Fxn:__getitem__" -> "Fxn:self._set_index_array()";
    "Fxn:__getitem__" -> "Fxn:self._get_batches_of_transformed_samples(index_array)";
    "Fxn:on_epoch_end" -> "Fxn:self._set_index_array()";
    "Fxn:_flow_index" -> "Fxn:self.reset()";
    "Fxn:_flow_index" -> "Fxn:np.random.seed(self.seed";
    "Fxn:_flow_index" -> "Fxn:self._set_index_array()";
    "Fxn:__iter__" -> "Fxn:data_gen.flow(...):";
    "Fxn:__next__" -> "Fxn:self.next(*args,";
    "class:NumpyArrayIterator(Iterator):" -> "Fxn:__init__";
    "class:NumpyArrayIterator(Iterator):" -> "Fxn:_get_batches_of_transformed_samples";
    "class:NumpyArrayIterator(Iterator):" -> "Fxn:next";
    "class:NumpyArrayIterator(Iterator):" -> "Fxn:_iter_valid_files";
    "class:NumpyArrayIterator(Iterator):" -> "Fxn:_recursive_list";
    "class:NumpyArrayIterator(Iterator):" -> "Fxn:_count_valid_files_in_directory";
    "class:NumpyArrayIterator(Iterator):" -> "Fxn:_list_valid_filenames_in_directory";
    "Fxn:__init__" -> "Fxn:len(x)";
    "Fxn:__init__" -> "Fxn:len(y):";
    "Fxn:__init__" -> "Fxn:ValueError('`x`";
    "Fxn:__init__" -> "Fxn:np.asarray(y).shape))";
    "Fxn:__init__" -> "Fxn:ValueError('Invalid";
    "Fxn:__init__" -> "Fxn:int(len(x)";
    "Fxn:__init__" -> "Fxn:K.image_data_format()";
    "Fxn:__init__" -> "Fxn:np.asarray(x,";
    "Fxn:__init__" -> "Fxn:dtype=K.floatx())";
    "Fxn:__init__" -> "Fxn:ValueError('Input";
    "Fxn:__init__" -> "Fxn:warnings.warn('NumpyArrayIterator";
    "Fxn:__init__" -> "Fxn:'(channels";
    "Fxn:__init__" -> "Fxn:str(channels_axis)";
    "Fxn:__init__" -> "Fxn:str(channels_axis)";
    "Fxn:__init__" -> "Fxn:str(self.x.shape)";
    "Fxn:__init__" -> "Fxn:str(self.x.shape[channels_axis])";
    "Fxn:__init__" -> "Fxn:np.asarray(y)";
    "Fxn:__init__" -> "Fxn:super(NumpyArrayIterator,";
    "Fxn:__init__" -> "Fxn:self).__init__(x.shape[0],";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:np.zeros(tuple([len(index_array)]";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:list(self.x.shape)[1:]),";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:dtype=K.floatx())";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:enumerate(index_array):";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:self.image_data_generator.preprocessing_function(x)";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:self.image_data_generator.random_transform(x.astype(K.floatx()))";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:self.image_data_generator.standardize(x)";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:enumerate(index_array):";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:array_to_img(batch_x[i],";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:'{prefix}_{index}_{hash}.{format}'.format(prefix=self.save_prefix,";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:hash=np.random.randint(1e4),";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:img.save(os.path.join(self.save_to_dir,";
    "Fxn:next" -> "Fxn:next(self.index_generator)";
    "Fxn:next" -> "Fxn:self._get_batches_of_transformed_samples(index_array)";
    "Fxn:_recursive_list" -> "Fxn:sorted(os.walk(subpath,";
    "Fxn:_recursive_list" -> "Fxn:_recursive_list(directory):";
    "Fxn:_recursive_list" -> "Fxn:sorted(files):";
    "Fxn:_recursive_list" -> "Fxn:fname.lower().endswith('.tiff'):";
    "Fxn:_recursive_list" -> "Fxn:warnings.warn('Using";
    "Fxn:_recursive_list" -> "Fxn:fname.lower().endswith('.'";
    "Fxn:_count_valid_files_in_directory" -> "Fxn:`(0.2,";
    "Fxn:_count_valid_files_in_directory" -> "Fxn:`segment=(0.6,";
    "Fxn:_count_valid_files_in_directory" -> "Fxn:len(list(_iter_valid_files(directory,";
    "Fxn:_count_valid_files_in_directory" -> "Fxn:int(split[0]";
    "Fxn:_count_valid_files_in_directory" -> "Fxn:int(split[1]";
    "class:DirectoryIterator(Iterator):" -> "Fxn:__init__";
    "class:DirectoryIterator(Iterator):" -> "Fxn:_get_batches_of_transformed_samples";
    "class:DirectoryIterator(Iterator):" -> "Fxn:next";
    "Fxn:__init__" -> "Fxn:target_size=(256,";
    "Fxn:__init__" -> "Fxn:K.image_data_format()";
    "Fxn:__init__" -> "Fxn:tuple(target_size)";
    "Fxn:__init__" -> "Fxn:ValueError('Invalid";
    "Fxn:__init__" -> "Fxn:ValueError('Invalid";
    "Fxn:__init__" -> "Fxn:ValueError('Invalid";
    "Fxn:__init__" -> "Fxn:sorted(os.listdir(directory)):";
    "Fxn:__init__" -> "Fxn:os.path.isdir(os.path.join(directory,";
    "Fxn:__init__" -> "Fxn:classes.append(subdir)";
    "Fxn:__init__" -> "Fxn:len(classes)";
    "Fxn:__init__" -> "Fxn:dict(zip(classes,";
    "Fxn:__init__" -> "Fxn:range(len(classes))))";
    "Fxn:__init__" -> "Fxn:multiprocessing.pool.ThreadPool()";
    "Fxn:__init__" -> "Fxn:partial(_count_valid_files_in_directory,";
    "Fxn:__init__" -> "Fxn:sum(pool.map(function_partial,";
    "Fxn:__init__" -> "Fxn:print('Found";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:np.zeros((len(index_array),)";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:dtype=K.floatx())";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:enumerate(index_array):";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:load_img(os.path.join(self.directory,";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:self.image_data_generator.preprocessing_function(img)";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:ValueError(";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:{}'.format(";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:".join(_PIL_INTERPOLATION_METHODS.keys())))";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:img.resize(width_height_tuple,";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:img_to_array(img,";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:self.image_data_generator.random_transform(x)";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:self.image_data_generator.standardize(x)";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:enumerate(index_array):";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:array_to_img(batch_x[i],";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:'{prefix}_{index}_{hash}.{format}'.format(prefix=self.save_prefix,";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:hash=np.random.randint(1e7),";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:img.save(os.path.join(self.save_to_dir,";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:batch_x.copy()";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:self.classes[index_array].astype(K.floatx())";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:np.zeros((len(batch_x),";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:dtype=K.floatx())";
    "Fxn:_get_batches_of_transformed_samples" -> "Fxn:enumerate(self.classes[index_array]):";
    "Fxn:next" -> "Fxn:next(self.index_generator)";
    "Fxn:next" -> "Fxn:self._get_batches_of_transformed_samples(index_array)";
    "/keras/preprocessing/sequence.py" -> "Import:absolute_import";
    "/keras/preprocessing/sequence.py" -> "Import:division";
    "/keras/preprocessing/sequence.py" -> "Import:print_function";
    "/keras/preprocessing/sequence.py" -> "Import:numpy";
    "/keras/preprocessing/sequence.py" -> "Import:random";
    "/keras/preprocessing/sequence.py" -> "Import:range";
    "/keras/preprocessing/sequence.py" -> "Import:Sequence";
    "/keras/preprocessing/sequence.py" -> "Fxn:pad_sequences";
    "/keras/preprocessing/sequence.py" -> "Fxn:make_sampling_table";
    "/keras/preprocessing/sequence.py" -> "Fxn:skipgrams";
    "/keras/preprocessing/sequence.py" -> "Fxn:_remove_long_seq";
    "/keras/preprocessing/sequence.py" -> "class:TimeseriesGenerator(Sequence):";
    "/keras/preprocessing/sequence.py" -> "Import:TimeseriesGenerator";
    "/keras/preprocessing/sequence.py" -> "Import:numpy";
    "class:TimeseriesGenerator(Sequence):" -> "Fxn:__init__";
    "class:TimeseriesGenerator(Sequence):" -> "Fxn:__len__";
    "class:TimeseriesGenerator(Sequence):" -> "Fxn:_empty_batch";
    "class:TimeseriesGenerator(Sequence):" -> "Fxn:__getitem__";
    "Fxn:__init__" -> "Fxn:len(data)";
    "Fxn:__len__" -> "Fxn:int(np.ceil(";
    "Fxn:_empty_batch" -> "Fxn:samples_shape.extend(self.data.shape[1:])";
    "Fxn:_empty_batch" -> "Fxn:targets_shape.extend(self.targets.shape[1:])";
    "Fxn:_empty_batch" -> "Fxn:np.empty(samples_shape),";
    "Fxn:_empty_batch" -> "Fxn:np.empty(targets_shape)";
    "Fxn:__getitem__" -> "Fxn:np.random.randint(";
    "Fxn:__getitem__" -> "Fxn:np.arange(i,";
    "Fxn:__getitem__" -> "Fxn:min(i";
    "Fxn:__getitem__" -> "Fxn:self._empty_batch(len(rows))";
    "Fxn:__getitem__" -> "Fxn:enumerate(rows):";
    "Fxn:__getitem__" -> "Fxn:range(rows[j]";
    "/keras/preprocessing/text.py" -> "Import:absolute_import";
    "/keras/preprocessing/text.py" -> "Import:division";
    "/keras/preprocessing/text.py" -> "Import:print_function";
    "/keras/preprocessing/text.py" -> "Import:string";
    "/keras/preprocessing/text.py" -> "Import:sys";
    "/keras/preprocessing/text.py" -> "Import:warnings";
    "/keras/preprocessing/text.py" -> "Import:OrderedDict";
    "/keras/preprocessing/text.py" -> "Import:md5";
    "/keras/preprocessing/text.py" -> "Import:numpy";
    "/keras/preprocessing/text.py" -> "Import:range";
    "/keras/preprocessing/text.py" -> "Import:zip";
    "/keras/preprocessing/text.py" -> "Fxn:text_to_word_sequence";
    "/keras/preprocessing/text.py" -> "Fxn:one_hot";
    "/keras/preprocessing/text.py" -> "Fxn:hashing_trick";
    "/keras/preprocessing/text.py" -> "class:Tokenizer(object):";
    "class:Tokenizer(object):" -> "Fxn:__init__";
    "class:Tokenizer(object):" -> "Fxn:fit_on_texts";
    "class:Tokenizer(object):" -> "Fxn:fit_on_sequences";
    "class:Tokenizer(object):" -> "Fxn:texts_to_sequences";
    "class:Tokenizer(object):" -> "Fxn:texts_to_sequences_generator";
    "class:Tokenizer(object):" -> "Fxn:texts_to_matrix";
    "class:Tokenizer(object):" -> "Fxn:sequences_to_matrix";
    "Fxn:__init__" -> "Fxn:filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',";
    "Fxn:__init__" -> "Fxn:warnings.warn('The";
    "Fxn:__init__" -> "Fxn:kwargs.pop('nb_words')";
    "Fxn:__init__" -> "Fxn:TypeError('Unrecognized";
    "Fxn:__init__" -> "Fxn:str(kwargs))";
    "Fxn:__init__" -> "Fxn:OrderedDict()";
    "Fxn:fit_on_texts" -> "Fxn:isinstance(text,";
    "Fxn:fit_on_texts" -> "Fxn:text_to_word_sequence(text,";
    "Fxn:fit_on_texts" -> "Fxn:set(seq):";
    "Fxn:fit_on_texts" -> "Fxn:list(self.word_counts.items())";
    "Fxn:fit_on_texts" -> "Fxn:wcounts.sort(key=lambda";
    "Fxn:fit_on_texts" -> "Fxn:dict(list(zip(sorted_voc,";
    "Fxn:fit_on_texts" -> "Fxn:list(range(1,";
    "Fxn:fit_on_texts" -> "Fxn:len(sorted_voc)";
    "Fxn:fit_on_texts" -> "Fxn:self.word_index.get(self.oov_token)";
    "Fxn:fit_on_texts" -> "Fxn:len(self.word_index)";
    "Fxn:fit_on_texts" -> "Fxn:list(self.word_docs.items()):";
    "Fxn:fit_on_sequences" -> "Fxn:len(sequences)";
    "Fxn:fit_on_sequences" -> "Fxn:set(seq)";
    "Fxn:texts_to_sequences" -> "Fxn:self.texts_to_sequences_generator(texts):";
    "Fxn:texts_to_sequences" -> "Fxn:res.append(vect)";
    "Fxn:texts_to_sequences_generator" -> "Fxn:isinstance(text,";
    "Fxn:texts_to_sequences_generator" -> "Fxn:text_to_word_sequence(text,";
    "Fxn:texts_to_sequences_generator" -> "Fxn:self.word_index.get(w)";
    "Fxn:texts_to_sequences_generator" -> "Fxn:vect.append(i)";
    "Fxn:texts_to_sequences_generator" -> "Fxn:self.word_index.get(self.oov_token)";
    "Fxn:texts_to_sequences_generator" -> "Fxn:vect.append(i)";
    "Fxn:texts_to_matrix" -> "Fxn:self.texts_to_sequences(texts)";
    "Fxn:texts_to_matrix" -> "Fxn:self.sequences_to_matrix(sequences,";
    "Fxn:sequences_to_matrix" -> "Fxn:len(self.word_index)";
    "Fxn:sequences_to_matrix" -> "Fxn:ValueError('Specify";
    "Fxn:sequences_to_matrix" -> "Fxn:ValueError('Fit";
    "Fxn:sequences_to_matrix" -> "Fxn:np.zeros((len(sequences),";
    "Fxn:sequences_to_matrix" -> "Fxn:enumerate(sequences):";
    "Fxn:sequences_to_matrix" -> "Fxn:list(counts.items()):";
    "Fxn:sequences_to_matrix" -> "Fxn:len(seq)";
    "Fxn:sequences_to_matrix" -> "Fxn:np.log(c)";
    "Fxn:sequences_to_matrix" -> "Fxn:np.log(1";
    "Fxn:sequences_to_matrix" -> "Fxn:self.index_docs.get(j,";
    "Fxn:sequences_to_matrix" -> "Fxn:ValueError('Unknown";
    "/keras/utils/conv_utils.py" -> "Import:absolute_import";
    "/keras/utils/conv_utils.py" -> "Import:division";
    "/keras/utils/conv_utils.py" -> "Import:print_function";
    "/keras/utils/conv_utils.py" -> "Import:range";
    "/keras/utils/conv_utils.py" -> "Import:numpy";
    "/keras/utils/conv_utils.py" -> "Import:backend";
    "/keras/utils/conv_utils.py" -> "Fxn:normalize_tuple";
    "/keras/utils/conv_utils.py" -> "Fxn:normalize_data_format";
    "/keras/utils/conv_utils.py" -> "Fxn:normalize_padding";
    "/keras/utils/conv_utils.py" -> "Fxn:convert_kernel";
    "/keras/utils/conv_utils.py" -> "Fxn:conv_output_length";
    "/keras/utils/conv_utils.py" -> "Fxn:conv_input_length";
    "/keras/utils/conv_utils.py" -> "Fxn:deconv_length";
    "/keras/utils/data_utils.py" -> "Import:absolute_import";
    "/keras/utils/data_utils.py" -> "Import:division";
    "/keras/utils/data_utils.py" -> "Import:print_function";
    "/keras/utils/data_utils.py" -> "Import:hashlib";
    "/keras/utils/data_utils.py" -> "Import:multiprocessing";
    "/keras/utils/data_utils.py" -> "Import:import";
    "/keras/utils/data_utils.py" -> "Import:random";
    "/keras/utils/data_utils.py" -> "Import:shutil";
    "/keras/utils/data_utils.py" -> "Import:sys";
    "/keras/utils/data_utils.py" -> "Import:tarfile";
    "/keras/utils/data_utils.py" -> "Import:threading";
    "/keras/utils/data_utils.py" -> "Import:time";
    "/keras/utils/data_utils.py" -> "Import:traceback";
    "/keras/utils/data_utils.py" -> "Import:zipfile";
    "/keras/utils/data_utils.py" -> "Import:abstractmethod";
    "/keras/utils/data_utils.py" -> "Import:closing";
    "/keras/utils/data_utils.py" -> "Import:ThreadPool";
    "/keras/utils/data_utils.py" -> "Import:numpy";
    "/keras/utils/data_utils.py" -> "Import:six";
    "/keras/utils/data_utils.py" -> "Import:HTTPError";
    "/keras/utils/data_utils.py" -> "Import:URLError";
    "/keras/utils/data_utils.py" -> "Import:urlopen";
    "/keras/utils/data_utils.py" -> "Import:queue";
    "/keras/utils/data_utils.py" -> "Import:Queue";
    "/keras/utils/data_utils.py" -> "Import:Progbar";
    "/keras/utils/data_utils.py" -> "Fxn:urlretrieve";
    "/keras/utils/data_utils.py" -> "Fxn:chunk_read";
    "/keras/utils/data_utils.py" -> "Import:urlretrieve";
    "/keras/utils/data_utils.py" -> "Fxn:_extract_archive";
    "/keras/utils/data_utils.py" -> "Fxn:get_file";
    "/keras/utils/data_utils.py" -> "class:ProgressTracker(object):";
    "/keras/utils/data_utils.py" -> "Import:_hash_file";
    "/keras/utils/data_utils.py" -> "class:Sequence(object):";
    "/keras/utils/data_utils.py" -> "Import:imread";
    "/keras/utils/data_utils.py" -> "Import:resize";
    "/keras/utils/data_utils.py" -> "Import:numpy";
    "/keras/utils/data_utils.py" -> "class:CIFAR10Sequence(Sequence):";
    "/keras/utils/data_utils.py" -> "class:SequenceEnqueuer(object):";
    "/keras/utils/data_utils.py" -> "class:OrderedEnqueuer(SequenceEnqueuer):";
    "/keras/utils/data_utils.py" -> "class:GeneratorEnqueuer(SequenceEnqueuer):";
    "class:ProgressTracker(object):" -> "Fxn:dl_progress";
    "class:ProgressTracker(object):" -> "Fxn:_hash_file";
    "class:ProgressTracker(object):" -> "Fxn:validate_file";
    "Fxn:dl_progress" -> "Fxn:Progbar(total_size)";
    "Fxn:dl_progress" -> "Fxn:ProgressTracker.progbar.update(count";
    "Fxn:dl_progress" -> "Fxn:urlretrieve(origin,";
    "Fxn:dl_progress" -> "Fxn:Exception(error_msg.format(origin,";
    "Fxn:dl_progress" -> "Fxn:Exception(error_msg.format(origin,";
    "Fxn:dl_progress" -> "Fxn:os.path.exists(fpath):";
    "Fxn:dl_progress" -> "Fxn:os.remove(fpath)";
    "Fxn:dl_progress" -> "Fxn:os.path.exists(untar_fpath):";
    "Fxn:dl_progress" -> "Fxn:_extract_archive(fpath,";
    "Fxn:dl_progress" -> "Fxn:_extract_archive(fpath,";
    "Fxn:_hash_file" -> "Fxn:_hash_file('/path/to/file.zip')";
    "Fxn:_hash_file" -> "Fxn:len(hash)";
    "Fxn:_hash_file" -> "Fxn:hashlib.sha256()";
    "Fxn:_hash_file" -> "Fxn:hashlib.md5()";
    "Fxn:_hash_file" -> "Fxn:open(fpath,";
    "Fxn:_hash_file" -> "Fxn:iter(lambda:";
    "Fxn:_hash_file" -> "Fxn:fpath_file.read(chunk_size),";
    "Fxn:_hash_file" -> "Fxn:hasher.update(chunk)";
    "Fxn:_hash_file" -> "Fxn:hasher.hexdigest()";
    "Fxn:validate_file" -> "Fxn:len(file_hash)";
    "Fxn:validate_file" -> "Fxn:str(_hash_file(fpath,";
    "Fxn:validate_file" -> "Fxn:str(file_hash):";
    "class:CIFAR10Sequence(Sequence):" -> "Fxn:__init__";
    "class:CIFAR10Sequence(Sequence):" -> "Fxn:__len__";
    "class:CIFAR10Sequence(Sequence):" -> "Fxn:__getitem__";
    "class:CIFAR10Sequence(Sequence):" -> "Fxn:__getitem__";
    "class:CIFAR10Sequence(Sequence):" -> "Fxn:__len__";
    "class:CIFAR10Sequence(Sequence):" -> "Fxn:on_epoch_end";
    "class:CIFAR10Sequence(Sequence):" -> "Fxn:__iter__";
    "class:CIFAR10Sequence(Sequence):" -> "Fxn:init_pool";
    "class:CIFAR10Sequence(Sequence):" -> "Fxn:get_index";
    "Fxn:__len__" -> "Fxn:np.ceil(len(self.x)";
    "Fxn:__len__" -> "Fxn:float(self.batch_size))";
    "Fxn:__getitem__" -> "Fxn:self.batch_size:(idx";
    "Fxn:__getitem__" -> "Fxn:self.batch_size:(idx";
    "Fxn:__getitem__" -> "Fxn:np.array([";
    "Fxn:__getitem__" -> "Fxn:resize(imread(file_name),";
    "Fxn:__getitem__" -> "Fxn:np.array(batch_y)";
    "Fxn:__iter__" -> "Fxn:range(len(self))):";
    "class:SequenceEnqueuer(object):" -> "Fxn:is_running";
    "class:SequenceEnqueuer(object):" -> "Fxn:start";
    "class:SequenceEnqueuer(object):" -> "Fxn:stop";
    "class:SequenceEnqueuer(object):" -> "Fxn:get";
    "Fxn:start" -> "Fxn:`put()`).";
    "Fxn:stop" -> "Fxn:start().";
    "Fxn:stop" -> "Fxn:thread.join()";
    "Fxn:get" -> "Fxn:`(inputs,";
    "Fxn:get" -> "Fxn:`(inputs,";
    "class:OrderedEnqueuer(SequenceEnqueuer):" -> "Fxn:__init__";
    "class:OrderedEnqueuer(SequenceEnqueuer):" -> "Fxn:is_running";
    "class:OrderedEnqueuer(SequenceEnqueuer):" -> "Fxn:start";
    "class:OrderedEnqueuer(SequenceEnqueuer):" -> "Fxn:_wait_queue";
    "class:OrderedEnqueuer(SequenceEnqueuer):" -> "Fxn:_run";
    "class:OrderedEnqueuer(SequenceEnqueuer):" -> "Fxn:get";
    "class:OrderedEnqueuer(SequenceEnqueuer):" -> "Fxn:_send_sequence";
    "class:OrderedEnqueuer(SequenceEnqueuer):" -> "Fxn:stop";
    "Fxn:__init__" -> "Fxn:multiprocessing.Value('i',";
    "Fxn:__init__" -> "Fxn:isinstance(_SEQUENCE_COUNTER,";
    "Fxn:__init__" -> "Fxn:_SEQUENCE_COUNTER.get_lock():";
    "Fxn:is_running" -> "Fxn:self.stop_signal.is_set()";
    "Fxn:start" -> "Fxn:`put()`)";
    "Fxn:start" -> "Fxn:multiprocessing.Pool(workers,";
    "Fxn:start" -> "Fxn:initargs=(seqs,))";
    "Fxn:start" -> "Fxn:ThreadPool(workers)";
    "Fxn:start" -> "Fxn:queue.Queue(max_queue_size)";
    "Fxn:start" -> "Fxn:threading.Event()";
    "Fxn:start" -> "Fxn:threading.Thread(target=self._run)";
    "Fxn:start" -> "Fxn:self.run_thread.start()";
    "Fxn:_wait_queue" -> "Fxn:time.sleep(0.1)";
    "Fxn:_wait_queue" -> "Fxn:self.stop_signal.is_set():";
    "Fxn:_run" -> "Fxn:list(range(len(self.sequence)))";
    "Fxn:_run" -> "Fxn:self._send_sequence()";
    "Fxn:_run" -> "Fxn:random.shuffle(sequence)";
    "Fxn:_run" -> "Fxn:closing(self.executor_fn(_SHARED_SEQUENCES))";
    "Fxn:_run" -> "Fxn:self.stop_signal.is_set():";
    "Fxn:_run" -> "Fxn:self.queue.put(";
    "Fxn:_run" -> "Fxn:executor.apply_async(get_index,";
    "Fxn:_run" -> "Fxn:self._wait_queue()";
    "Fxn:_run" -> "Fxn:self.stop_signal.is_set():";
    "Fxn:_run" -> "Fxn:self.sequence.on_epoch_end()";
    "Fxn:_run" -> "Fxn:self._send_sequence()";
    "Fxn:get" -> "Fxn:`(inputs,";
    "Fxn:get" -> "Fxn:`(inputs,";
    "Fxn:get" -> "Fxn:self.is_running():";
    "Fxn:get" -> "Fxn:self.queue.get(block=True).get()";
    "Fxn:get" -> "Fxn:self.queue.task_done()";
    "Fxn:get" -> "Fxn:self.stop()";
    "Fxn:get" -> "Fxn:six.raise_from(StopIteration(e),";
    "Fxn:stop" -> "Fxn:`start()`.";
    "Fxn:stop" -> "Fxn:`thread.join()`";
    "Fxn:stop" -> "Fxn:self.stop_signal.set()";
    "Fxn:stop" -> "Fxn:self.queue.queue.clear()";
    "Fxn:stop" -> "Fxn:self.queue.not_full.notify()";
    "Fxn:stop" -> "Fxn:self.run_thread.join(timeout)";
    "class:GeneratorEnqueuer(SequenceEnqueuer):" -> "Fxn:__init__";
    "class:GeneratorEnqueuer(SequenceEnqueuer):" -> "Fxn:_data_generator_task";
    "class:GeneratorEnqueuer(SequenceEnqueuer):" -> "Fxn:start";
    "class:GeneratorEnqueuer(SequenceEnqueuer):" -> "Fxn:is_running";
    "class:GeneratorEnqueuer(SequenceEnqueuer):" -> "Fxn:stop";
    "class:GeneratorEnqueuer(SequenceEnqueuer):" -> "Fxn:get";
    "Fxn:__init__" -> "Fxn:ValueError('Using";
    "Fxn:_data_generator_task" -> "Fxn:self._stop_event.is_set():";
    "Fxn:_data_generator_task" -> "Fxn:self.queue.qsize()";
    "Fxn:_data_generator_task" -> "Fxn:next()";
    "Fxn:_data_generator_task" -> "Fxn:next(self._generator)";
    "Fxn:_data_generator_task" -> "Fxn:self.queue.put((True,";
    "Fxn:_data_generator_task" -> "Fxn:time.sleep(self.wait_time)";
    "Fxn:_data_generator_task" -> "Fxn:hasattr(e,";
    "Fxn:_data_generator_task" -> "Fxn:setattr(e,";
    "Fxn:_data_generator_task" -> "Fxn:sys.exc_info()[2])";
    "Fxn:_data_generator_task" -> "Fxn:self.queue.put((False,";
    "Fxn:_data_generator_task" -> "Fxn:self._stop_event.set()";
    "Fxn:_data_generator_task" -> "Fxn:self._stop_event.is_set():";
    "Fxn:_data_generator_task" -> "Fxn:self.queue.qsize()";
    "Fxn:_data_generator_task" -> "Fxn:next(self._generator)";
    "Fxn:_data_generator_task" -> "Fxn:self.queue.put((True,";
    "Fxn:_data_generator_task" -> "Fxn:time.sleep(self.wait_time)";
    "Fxn:_data_generator_task" -> "Fxn:traceback.print_exc()";
    "Fxn:_data_generator_task" -> "Fxn:setattr(e,";
    "Fxn:_data_generator_task" -> "Fxn:self.queue.put((False,";
    "Fxn:_data_generator_task" -> "Fxn:self._stop_event.set()";
    "Fxn:start" -> "Fxn:`put()`)";
    "Fxn:start" -> "Fxn:multiprocessing.Manager()";
    "Fxn:start" -> "Fxn:self._manager.Queue(maxsize=max_queue_size)";
    "Fxn:start" -> "Fxn:multiprocessing.Event()";
    "Fxn:start" -> "Fxn:next()";
    "Fxn:start" -> "Fxn:threading.Lock()";
    "Fxn:start" -> "Fxn:queue.Queue(maxsize=max_queue_size)";
    "Fxn:start" -> "Fxn:threading.Event()";
    "Fxn:start" -> "Fxn:range(workers):";
    "Fxn:start" -> "Fxn:np.random.seed(self.seed)";
    "Fxn:start" -> "Fxn:multiprocessing.Process(target=self._data_generator_task)";
    "Fxn:start" -> "Fxn:threading.Thread(target=self._data_generator_task)";
    "Fxn:start" -> "Fxn:self._threads.append(thread)";
    "Fxn:start" -> "Fxn:thread.start()";
    "Fxn:start" -> "Fxn:self.stop()";
    "Fxn:is_running" -> "Fxn:self._stop_event.is_set()";
    "Fxn:stop" -> "Fxn:`start()`.";
    "Fxn:stop" -> "Fxn:`thread.join()`.";
    "Fxn:stop" -> "Fxn:self.is_running():";
    "Fxn:stop" -> "Fxn:self._stop_event.set()";
    "Fxn:stop" -> "Fxn:thread.is_alive():";
    "Fxn:stop" -> "Fxn:thread.terminate()";
    "Fxn:stop" -> "Fxn:thread.is_alive()";
    "Fxn:stop" -> "Fxn:thread.join()";
    "Fxn:stop" -> "Fxn:thread.join(timeout)";
    "Fxn:stop" -> "Fxn:self._manager.shutdown()";
    "Fxn:get" -> "Fxn:`(inputs,";
    "Fxn:get" -> "Fxn:`(inputs,";
    "Fxn:get" -> "Fxn:self.is_running():";
    "Fxn:get" -> "Fxn:self.queue.empty():";
    "Fxn:get" -> "Fxn:self.queue.get()";
    "Fxn:get" -> "Fxn:six.reraise(value.__class__,";
    "Fxn:get" -> "Fxn:all([not";
    "Fxn:get" -> "Fxn:thread.is_alive()";
    "Fxn:get" -> "Fxn:self.queue.empty():";
    "Fxn:get" -> "Fxn:StopIteration()";
    "Fxn:get" -> "Fxn:time.sleep(self.wait_time)";
    "Fxn:get" -> "Fxn:self.queue.empty():";
    "Fxn:get" -> "Fxn:self.queue.get()";
    "Fxn:get" -> "Fxn:six.reraise(value.__class__,";
    "/keras/utils/generic_utils.py" -> "Import:absolute_import";
    "/keras/utils/generic_utils.py" -> "Import:division";
    "/keras/utils/generic_utils.py" -> "Import:print_function";
    "/keras/utils/generic_utils.py" -> "Import:binascii";
    "/keras/utils/generic_utils.py" -> "Import:numpy";
    "/keras/utils/generic_utils.py" -> "Import:time";
    "/keras/utils/generic_utils.py" -> "Import:sys";
    "/keras/utils/generic_utils.py" -> "Import:six";
    "/keras/utils/generic_utils.py" -> "Import:marshal";
    "/keras/utils/generic_utils.py" -> "Import:types";
    "/keras/utils/generic_utils.py" -> "Import:inspect";
    "/keras/utils/generic_utils.py" -> "Import:codecs";
    "/keras/utils/generic_utils.py" -> "Import:collections";
    "/keras/utils/generic_utils.py" -> "class:CustomObjectScope(object):";
    "/keras/utils/generic_utils.py" -> "class:Progbar(object):";
    "class:CustomObjectScope(object):" -> "Fxn:__init__";
    "class:CustomObjectScope(object):" -> "Fxn:__enter__";
    "class:CustomObjectScope(object):" -> "Fxn:__exit__";
    "class:CustomObjectScope(object):" -> "Fxn:custom_object_scope";
    "class:CustomObjectScope(object):" -> "Fxn:get_custom_objects";
    "class:CustomObjectScope(object):" -> "Fxn:serialize_keras_object";
    "class:CustomObjectScope(object):" -> "Fxn:deserialize_keras_object";
    "class:CustomObjectScope(object):" -> "Fxn:func_dump";
    "class:CustomObjectScope(object):" -> "Fxn:func_load";
    "class:CustomObjectScope(object):" -> "Fxn:ensure_value_to_cell";
    "class:CustomObjectScope(object):" -> "Fxn:dummy_fn";
    "class:CustomObjectScope(object):" -> "Fxn:has_arg";
    "Fxn:__enter__" -> "Fxn:_GLOBAL_CUSTOM_OBJECTS.copy()";
    "Fxn:__enter__" -> "Fxn:_GLOBAL_CUSTOM_OBJECTS.update(objects)";
    "Fxn:__exit__" -> "Fxn:_GLOBAL_CUSTOM_OBJECTS.clear()";
    "Fxn:__exit__" -> "Fxn:_GLOBAL_CUSTOM_OBJECTS.update(self.backup)";
    "Fxn:custom_object_scope" -> "Fxn:custom_object_scope({'MyObject':MyObject}):";
    "Fxn:custom_object_scope" -> "Fxn:Dense(...,";
    "Fxn:get_custom_objects" -> "Fxn:get_custom_objects().clear()";
    "Fxn:get_custom_objects" -> "Fxn:get_custom_objects()['MyObject']";
    "Fxn:serialize_keras_object" -> "Fxn:hasattr(instance,";
    "Fxn:serialize_keras_object" -> "Fxn:instance.get_config()";
    "Fxn:serialize_keras_object" -> "Fxn:hasattr(instance,";
    "Fxn:serialize_keras_object" -> "Fxn:ValueError('Cannot";
    "Fxn:deserialize_keras_object" -> "Fxn:isinstance(identifier,";
    "Fxn:deserialize_keras_object" -> "Fxn:ValueError('Improper";
    "Fxn:deserialize_keras_object" -> "Fxn:str(config))";
    "Fxn:deserialize_keras_object" -> "Fxn:module_objects.get(class_name)";
    "Fxn:deserialize_keras_object" -> "Fxn:ValueError('Unknown";
    "Fxn:deserialize_keras_object" -> "Fxn:hasattr(cls,";
    "Fxn:deserialize_keras_object" -> "Fxn:has_arg(cls.from_config,";
    "Fxn:deserialize_keras_object" -> "Fxn:cls.from_config(config['config'],";
    "Fxn:deserialize_keras_object" -> "Fxn:custom_objects=dict(list(_GLOBAL_CUSTOM_OBJECTS.items())";
    "Fxn:deserialize_keras_object" -> "Fxn:list(custom_objects.items())))";
    "Fxn:deserialize_keras_object" -> "Fxn:CustomObjectScope(custom_objects):";
    "Fxn:deserialize_keras_object" -> "Fxn:cls.from_config(config['config'])";
    "Fxn:deserialize_keras_object" -> "Fxn:CustomObjectScope(custom_objects):";
    "Fxn:deserialize_keras_object" -> "Fxn:cls(**config['config'])";
    "Fxn:deserialize_keras_object" -> "Fxn:isinstance(identifier,";
    "Fxn:deserialize_keras_object" -> "Fxn:custom_objects.get(function_name)";
    "Fxn:deserialize_keras_object" -> "Fxn:module_objects.get(function_name)";
    "Fxn:deserialize_keras_object" -> "Fxn:ValueError('Unknown";
    "Fxn:deserialize_keras_object" -> "Fxn:ValueError('Could";
    "Fxn:func_dump" -> "Fxn:`(code,";
    "Fxn:func_dump" -> "Fxn:marshal.dumps(func.__code__)";
    "Fxn:func_dump" -> "Fxn:codecs.encode(raw_code,";
    "Fxn:func_dump" -> "Fxn:'base64').decode('ascii')";
    "Fxn:func_dump" -> "Fxn:tuple(c.cell_contents";
    "Fxn:func_load" -> "Fxn:isinstance(code,";
    "Fxn:func_load" -> "Fxn:isinstance(defaults,";
    "Fxn:func_load" -> "Fxn:tuple(defaults)";
    "Fxn:dummy_fn" -> "Fxn:isinstance(value,";
    "Fxn:dummy_fn" -> "Fxn:type(cell_value)):";
    "Fxn:dummy_fn" -> "Fxn:tuple(ensure_value_to_cell(_)";
    "Fxn:dummy_fn" -> "Fxn:codecs.decode(code.encode('ascii'),";
    "Fxn:dummy_fn" -> "Fxn:marshal.loads(raw_code)";
    "Fxn:dummy_fn" -> "Fxn:code.encode('raw_unicode_escape')";
    "Fxn:dummy_fn" -> "Fxn:marshal.loads(raw_code)";
    "Fxn:dummy_fn" -> "Fxn:globals()";
    "Fxn:dummy_fn" -> "Fxn:python_types.FunctionType(code,";
    "Fxn:has_arg" -> "Fxn:inspect.getargspec(fn)";
    "Fxn:has_arg" -> "Fxn:inspect.getfullargspec(fn)";
    "Fxn:has_arg" -> "Fxn:inspect.signature(fn)";
    "Fxn:has_arg" -> "Fxn:signature.parameters.get(name)";
    "Fxn:has_arg" -> "Fxn:signature.parameters.values():";
    "class:Progbar(object):" -> "Fxn:__init__";
    "class:Progbar(object):" -> "Fxn:update";
    "class:Progbar(object):" -> "Fxn:add";
    "Fxn:__init__" -> "Fxn:set(stateful_metrics)";
    "Fxn:__init__" -> "Fxn:set()";
    "Fxn:__init__" -> "Fxn:sys.stdout.isatty())";
    "Fxn:__init__" -> "Fxn:collections.OrderedDict()";
    "Fxn:__init__" -> "Fxn:time.time()";
    "Fxn:update" -> "Fxn:`(name,";
    "Fxn:update" -> "Fxn:time.time()";
    "Fxn:update" -> "Fxn:sys.stdout.write('\b'";
    "Fxn:update" -> "Fxn:sys.stdout.write('\r')";
    "Fxn:update" -> "Fxn:sys.stdout.write('\n')";
    "Fxn:update" -> "Fxn:int(np.floor(np.log10(self.target)))";
    "Fxn:update" -> "Fxn:float(current)";
    "Fxn:update" -> "Fxn:int(self.width";
    "Fxn:update" -> "Fxn:len(bar)";
    "Fxn:update" -> "Fxn:sys.stdout.write(bar)";
    "Fxn:update" -> "Fxn:isinstance(self._values[k],";
    "Fxn:update" -> "Fxn:np.mean(";
    "Fxn:update" -> "Fxn:max(1,";
    "Fxn:update" -> "Fxn:abs(avg)";
    "Fxn:update" -> "Fxn:len(info)";
    "Fxn:update" -> "Fxn:sys.stdout.write(info)";
    "Fxn:update" -> "Fxn:sys.stdout.flush()";
    "Fxn:update" -> "Fxn:np.mean(";
    "Fxn:update" -> "Fxn:max(1,";
    "Fxn:update" -> "Fxn:sys.stdout.write(info)";
    "Fxn:update" -> "Fxn:sys.stdout.flush()";
    "Fxn:add" -> "Fxn:self.update(self._seen_so_far";
    "/keras/utils/io_utils.py" -> "Import:absolute_import";
    "/keras/utils/io_utils.py" -> "Import:division";
    "/keras/utils/io_utils.py" -> "Import:print_function";
    "/keras/utils/io_utils.py" -> "Import:numpy";
    "/keras/utils/io_utils.py" -> "Import:defaultdict";
    "/keras/utils/io_utils.py" -> "Import:six";
    "/keras/utils/io_utils.py" -> "Import:h5py";
    "/keras/utils/io_utils.py" -> "class:HDF5Matrix(object):";
    "class:HDF5Matrix(object):" -> "Fxn:__init__";
    "class:HDF5Matrix(object):" -> "Fxn:__len__";
    "class:HDF5Matrix(object):" -> "Fxn:__getitem__";
    "class:HDF5Matrix(object):" -> "Fxn:shape";
    "class:HDF5Matrix(object):" -> "Fxn:dtype";
    "class:HDF5Matrix(object):" -> "Fxn:ndim";
    "class:HDF5Matrix(object):" -> "Fxn:size";
    "class:HDF5Matrix(object):" -> "Fxn:ask_to_proceed_with_overwrite";
    "Fxn:__init__" -> "Fxn:ImportError('The";
    "Fxn:__init__" -> "Fxn:list(self.refs.keys()):";
    "Fxn:__init__" -> "Fxn:h5py.File(datapath)";
    "Fxn:__getitem__" -> "Fxn:isinstance(key,";
    "Fxn:__getitem__" -> "Fxn:slice(start";
    "Fxn:__getitem__" -> "Fxn:isinstance(key,";
    "Fxn:__getitem__" -> "Fxn:isinstance(key,";
    "Fxn:__getitem__" -> "Fxn:np.max(key)";
    "Fxn:__getitem__" -> "Fxn:key).tolist()";
    "Fxn:__getitem__" -> "Fxn:isinstance(key,";
    "Fxn:__getitem__" -> "Fxn:max(key)";
    "Fxn:__getitem__" -> "Fxn:self.normalizer(self.data[idx])";
    "Fxn:size" -> "Fxn:np.prod(self.shape)";
    "Fxn:ask_to_proceed_with_overwrite" -> "Fxn:six.moves.input('[WARNING]";
    "Fxn:ask_to_proceed_with_overwrite" -> "Fxn:six.moves.input('Enter";
    "Fxn:ask_to_proceed_with_overwrite" -> "Fxn:'(cancel).').strip().lower()";
    "Fxn:ask_to_proceed_with_overwrite" -> "Fxn:print('[TIP]";
    "/keras/utils/layer_utils.py" -> "Import:absolute_import";
    "/keras/utils/layer_utils.py" -> "Import:division";
    "/keras/utils/layer_utils.py" -> "Import:print_function";
    "/keras/utils/layer_utils.py" -> "Import:convert_kernel";
    "/keras/utils/layer_utils.py" -> "Import:backend";
    "/keras/utils/layer_utils.py" -> "Import:numpy";
    "/keras/utils/layer_utils.py" -> "Fxn:count_params";
    "/keras/utils/layer_utils.py" -> "Fxn:print_summary";
    "/keras/utils/layer_utils.py" -> "Fxn:print_row";
    "/keras/utils/layer_utils.py" -> "Fxn:print_layer_summary";
    "/keras/utils/layer_utils.py" -> "Fxn:print_layer_summary_with_connections";
    "/keras/utils/layer_utils.py" -> "Fxn:convert_all_kernels_in_model";
    "/keras/utils/layer_utils.py" -> "Fxn:convert_dense_weights_data_format";
    "/keras/utils/multi_gpu_utils.py" -> "Import:absolute_import";
    "/keras/utils/multi_gpu_utils.py" -> "Import:division";
    "/keras/utils/multi_gpu_utils.py" -> "Import:print_function";
    "/keras/utils/multi_gpu_utils.py" -> "Import:concatenate";
    "/keras/utils/multi_gpu_utils.py" -> "Import:backend";
    "/keras/utils/multi_gpu_utils.py" -> "Import:Lambda";
    "/keras/utils/multi_gpu_utils.py" -> "Import:Model";
    "/keras/utils/multi_gpu_utils.py" -> "Fxn:_get_available_devices";
    "/keras/utils/multi_gpu_utils.py" -> "Fxn:_normalize_device_name";
    "/keras/utils/multi_gpu_utils.py" -> "Fxn:multi_gpu_model";
    "/keras/utils/multi_gpu_utils.py" -> "Import:tensorflow";
    "/keras/utils/multi_gpu_utils.py" -> "Import:Xception";
    "/keras/utils/multi_gpu_utils.py" -> "Import:multi_gpu_model";
    "/keras/utils/multi_gpu_utils.py" -> "Import:numpy";
    "/keras/utils/multi_gpu_utils.py" -> "Import:tensorflow";
    "/keras/utils/multi_gpu_utils.py" -> "Fxn:get_slice";
    "/keras/utils/np_utils.py" -> "Import:absolute_import";
    "/keras/utils/np_utils.py" -> "Import:division";
    "/keras/utils/np_utils.py" -> "Import:print_function";
    "/keras/utils/np_utils.py" -> "Import:numpy";
    "/keras/utils/np_utils.py" -> "Fxn:to_categorical";
    "/keras/utils/np_utils.py" -> "Fxn:normalize";
    "/keras/utils/test_utils.py" -> "Import:absolute_import";
    "/keras/utils/test_utils.py" -> "Import:division";
    "/keras/utils/test_utils.py" -> "Import:print_function";
    "/keras/utils/test_utils.py" -> "Import:numpy";
    "/keras/utils/test_utils.py" -> "Import:assert_allclose";
    "/keras/utils/test_utils.py" -> "Import:six";
    "/keras/utils/test_utils.py" -> "Import:has_arg";
    "/keras/utils/test_utils.py" -> "Import:Model,";
    "/keras/utils/test_utils.py" -> "Import:Sequential";
    "/keras/utils/test_utils.py" -> "Import:model_from_json";
    "/keras/utils/test_utils.py" -> "Import:backend";
    "/keras/utils/test_utils.py" -> "Fxn:get_test_data";
    "/keras/utils/test_utils.py" -> "Fxn:layer_test";
    "/keras/utils/test_utils.py" -> "Fxn:keras_test";
    "/keras/utils/test_utils.py" -> "Fxn:wrapper";
    "/keras/utils/vis_utils.py" -> "Import:absolute_import";
    "/keras/utils/vis_utils.py" -> "Import:division";
    "/keras/utils/vis_utils.py" -> "Import:print_function";
    "/keras/utils/vis_utils.py" -> "Import:try:";
    "/keras/utils/vis_utils.py" -> "Import:pydot_ng";
    "/keras/utils/vis_utils.py" -> "Import:pydotplus";
    "/keras/utils/vis_utils.py" -> "Import:pydot";
    "/keras/utils/vis_utils.py" -> "Fxn:_check_pydot";
    "/keras/utils/vis_utils.py" -> "Import:pydot.";
    "/keras/utils/vis_utils.py" -> "Fxn:model_to_dot";
    "/keras/utils/vis_utils.py" -> "Import:Wrapper";
    "/keras/utils/vis_utils.py" -> "Import:Sequential";
    "/keras/utils/vis_utils.py" -> "Fxn:plot_model";
    "/keras/utils/__init__.py" -> "Import:absolute_import";
    "/keras/utils/__init__.py" -> "Import:np_utils";
    "/keras/utils/__init__.py" -> "Import:generic_utils";
    "/keras/utils/__init__.py" -> "Import:data_utils";
    "/keras/utils/__init__.py" -> "Import:io_utils";
    "/keras/utils/__init__.py" -> "Import:conv_utils";
    "/keras/utils/__init__.py" -> "Import:HDF5Matrix";
    "/keras/utils/__init__.py" -> "Import:get_file";
    "/keras/utils/__init__.py" -> "Import:Sequence";
    "/keras/utils/__init__.py" -> "Import:GeneratorEnqueuer";
    "/keras/utils/__init__.py" -> "Import:OrderedEnqueuer";
    "/keras/utils/__init__.py" -> "Import:CustomObjectScope";
    "/keras/utils/__init__.py" -> "Import:custom_object_scope";
    "/keras/utils/__init__.py" -> "Import:get_custom_objects";
    "/keras/utils/__init__.py" -> "Import:serialize_keras_object";
    "/keras/utils/__init__.py" -> "Import:deserialize_keras_object";
    "/keras/utils/__init__.py" -> "Import:Progbar";
    "/keras/utils/__init__.py" -> "Import:convert_all_kernels_in_model";
    "/keras/utils/__init__.py" -> "Import:print_summary";
    "/keras/utils/__init__.py" -> "Import:plot_model";
    "/keras/utils/__init__.py" -> "Import:to_categorical";
    "/keras/utils/__init__.py" -> "Import:normalize";
    "/keras/utils/__init__.py" -> "Import:multi_gpu_model";
    "/keras/wrappers/scikit_learn.py" -> "Import:absolute_import";
    "/keras/wrappers/scikit_learn.py" -> "Import:division";
    "/keras/wrappers/scikit_learn.py" -> "Import:print_function";
    "/keras/wrappers/scikit_learn.py" -> "Import:copy";
    "/keras/wrappers/scikit_learn.py" -> "Import:types";
    "/keras/wrappers/scikit_learn.py" -> "Import:numpy";
    "/keras/wrappers/scikit_learn.py" -> "Import:to_categorical";
    "/keras/wrappers/scikit_learn.py" -> "Import:has_arg";
    "/keras/wrappers/scikit_learn.py" -> "Import:Sequential";
    "/keras/wrappers/scikit_learn.py" -> "class:BaseWrapper(object):";
    "/keras/wrappers/scikit_learn.py" -> "class:KerasClassifier(BaseWrapper):";
    "/keras/wrappers/scikit_learn.py" -> "class:KerasRegressor(BaseWrapper):";
    "class:BaseWrapper(object):" -> "Fxn:__init__";
    "class:BaseWrapper(object):" -> "Fxn:check_params";
    "class:BaseWrapper(object):" -> "Fxn:get_params";
    "class:BaseWrapper(object):" -> "Fxn:set_params";
    "class:BaseWrapper(object):" -> "Fxn:fit";
    "class:BaseWrapper(object):" -> "Fxn:filter_sk_params";
    "Fxn:__init__" -> "Fxn:self.check_params(sk_params)";
    "Fxn:check_params" -> "Fxn:legal_params_fns.append(self.__call__)";
    "Fxn:check_params" -> "Fxn:isinstance(self.build_fn,";
    "Fxn:check_params" -> "Fxn:isinstance(self.build_fn,";
    "Fxn:check_params" -> "Fxn:legal_params_fns.append(self.build_fn.__call__)";
    "Fxn:check_params" -> "Fxn:legal_params_fns.append(self.build_fn)";
    "Fxn:check_params" -> "Fxn:has_arg(fn,";
    "Fxn:check_params" -> "Fxn:ValueError(";
    "Fxn:check_params" -> "Fxn:parameter'.format(params_name))";
    "Fxn:get_params" -> "Fxn:copy.deepcopy(self.sk_params)";
    "Fxn:get_params" -> "Fxn:res.update({'build_fn':";
    "Fxn:set_params" -> "Fxn:self.check_params(params)";
    "Fxn:set_params" -> "Fxn:self.sk_params.update(params)";
    "Fxn:fit" -> "Fxn:`(x,";
    "Fxn:fit" -> "Fxn:`(n_samples,";
    "Fxn:fit" -> "Fxn:`(n_samples,)`";
    "Fxn:fit" -> "Fxn:`(n_samples,";
    "Fxn:fit" -> "Fxn:self.__call__(**self.filter_sk_params(self.__call__))";
    "Fxn:fit" -> "Fxn:isinstance(self.build_fn,";
    "Fxn:fit" -> "Fxn:isinstance(self.build_fn,";
    "Fxn:fit" -> "Fxn:self.build_fn(";
    "Fxn:fit" -> "Fxn:**self.filter_sk_params(self.build_fn.__call__))";
    "Fxn:fit" -> "Fxn:self.build_fn(**self.filter_sk_params(self.build_fn))";
    "Fxn:fit" -> "Fxn:hasattr(loss_name,";
    "Fxn:fit" -> "Fxn:len(y.shape)";
    "Fxn:fit" -> "Fxn:to_categorical(y)";
    "Fxn:fit" -> "Fxn:copy.deepcopy(self.filter_sk_params(Sequential.fit))";
    "Fxn:fit" -> "Fxn:fit_args.update(kwargs)";
    "Fxn:fit" -> "Fxn:self.model.fit(x,";
    "Fxn:filter_sk_params" -> "Fxn:self.sk_params.items():";
    "Fxn:filter_sk_params" -> "Fxn:has_arg(fn,";
    "Fxn:filter_sk_params" -> "Fxn:res.update({name:";
    "Fxn:filter_sk_params" -> "Fxn:res.update(override)";
    "class:KerasClassifier(BaseWrapper):" -> "Fxn:fit";
    "class:KerasClassifier(BaseWrapper):" -> "Fxn:predict";
    "class:KerasClassifier(BaseWrapper):" -> "Fxn:predict_proba";
    "class:KerasClassifier(BaseWrapper):" -> "Fxn:score";
    "Fxn:fit" -> "Fxn:`(x,";
    "Fxn:fit" -> "Fxn:`(n_samples,";
    "Fxn:fit" -> "Fxn:`(n_samples,)`";
    "Fxn:fit" -> "Fxn:`(n_samples,";
    "Fxn:fit" -> "Fxn:np.array(y)";
    "Fxn:fit" -> "Fxn:len(y.shape)";
    "Fxn:fit" -> "Fxn:np.arange(y.shape[1])";
    "Fxn:fit" -> "Fxn:len(y.shape)";
    "Fxn:fit" -> "Fxn:np.unique(y)";
    "Fxn:fit" -> "Fxn:np.searchsorted(self.classes_,";
    "Fxn:fit" -> "Fxn:ValueError('Invalid";
    "Fxn:fit" -> "Fxn:str(y.shape))";
    "Fxn:fit" -> "Fxn:len(self.classes_)";
    "Fxn:fit" -> "Fxn:super(KerasClassifier,";
    "Fxn:fit" -> "Fxn:self).fit(x,";
    "Fxn:score" -> "Fxn:`(n_samples,";
    "Fxn:score" -> "Fxn:`(n_samples,)`";
    "Fxn:score" -> "Fxn:`(n_samples,";
    "Fxn:score" -> "Fxn:`.compile()`";
    "Fxn:score" -> "Fxn:np.searchsorted(self.classes_,";
    "Fxn:score" -> "Fxn:self.filter_sk_params(Sequential.evaluate,";
    "Fxn:score" -> "Fxn:hasattr(loss_name,";
    "Fxn:score" -> "Fxn:len(y.shape)";
    "Fxn:score" -> "Fxn:to_categorical(y)";
    "Fxn:score" -> "Fxn:self.model.evaluate(x,";
    "Fxn:score" -> "Fxn:isinstance(outputs,";
    "Fxn:score" -> "Fxn:zip(self.model.metrics_names,";
    "Fxn:score" -> "Fxn:ValueError('The";
    "Fxn:score" -> "Fxn:`model.compile()`";
    "class:KerasRegressor(BaseWrapper):" -> "Fxn:predict";
    "class:KerasRegressor(BaseWrapper):" -> "Fxn:score";
    "Fxn:predict" -> "Fxn:`(n_samples,";
    "Fxn:predict" -> "Fxn:`(n_samples,)`";
    "Fxn:predict" -> "Fxn:self.filter_sk_params(Sequential.predict,";
    "Fxn:predict" -> "Fxn:np.squeeze(self.model.predict(x,";
    "Fxn:score" -> "Fxn:`(n_samples,";
    "Fxn:score" -> "Fxn:`(n_samples,)`";
    "Fxn:score" -> "Fxn:self.filter_sk_params(Sequential.evaluate,";
    "Fxn:score" -> "Fxn:self.model.evaluate(x,";
    "Fxn:score" -> "Fxn:isinstance(loss,";
    "/tests/test_documentation.py" -> "Import:importlib";
    "/tests/test_documentation.py" -> "Import:inspect";
    "/tests/test_documentation.py" -> "Import:import";
    "/tests/test_documentation.py" -> "Import:sys";
    "/tests/test_documentation.py" -> "Import:compress";
    "/tests/test_documentation.py" -> "Import:pytest";
    "/tests/test_documentation.py" -> "Fxn:handle_class";
    "/tests/test_documentation.py" -> "Fxn:handle_function";
    "/tests/test_documentation.py" -> "Fxn:assert_doc_style";
    "/tests/test_documentation.py" -> "Fxn:assert_function_style";
    "/tests/test_documentation.py" -> "Fxn:assert_blank_before";
    "/tests/test_documentation.py" -> "Fxn:is_accepted";
    "/tests/test_documentation.py" -> "Fxn:member_too_small";
    "/tests/test_documentation.py" -> "Fxn:assert_args_presence";
    "/tests/test_documentation.py" -> "Fxn:handle_method";
    "/tests/test_documentation.py" -> "Fxn:handle_module";
    "/tests/test_documentation.py" -> "Fxn:test_doc";
    "/tests/test_dynamic_trainability.py" -> "Import:absolute_import";
    "/tests/test_dynamic_trainability.py" -> "Import:print_function";
    "/tests/test_dynamic_trainability.py" -> "Import:pytest";
    "/tests/test_dynamic_trainability.py" -> "Import:keras_test";
    "/tests/test_dynamic_trainability.py" -> "Import:Model,";
    "/tests/test_dynamic_trainability.py" -> "Import:Dense,";
    "/tests/test_dynamic_trainability.py" -> "Fxn:test_layer_trainability_switch";
    "/tests/test_dynamic_trainability.py" -> "Fxn:test_model_trainability_switch";
    "/tests/test_dynamic_trainability.py" -> "Fxn:test_nested_model_trainability";
    "/tests/test_loss_masking.py" -> "Import:numpy";
    "/tests/test_loss_masking.py" -> "Import:pytest";
    "/tests/test_loss_masking.py" -> "Import:Sequential";
    "/tests/test_loss_masking.py" -> "Import:_weighted_masked_objective";
    "/tests/test_loss_masking.py" -> "Import:TimeDistributed,";
    "/tests/test_loss_masking.py" -> "Import:keras_test";
    "/tests/test_loss_masking.py" -> "Import:losses";
    "/tests/test_loss_masking.py" -> "Import:backend";
    "/tests/test_loss_masking.py" -> "Fxn:test_masking";
    "/tests/test_loss_masking.py" -> "Fxn:test_loss_masking";
    "/tests/test_loss_weighting.py" -> "Import:absolute_import";
    "/tests/test_loss_weighting.py" -> "Import:print_function";
    "/tests/test_loss_weighting.py" -> "Import:pytest";
    "/tests/test_loss_weighting.py" -> "Import:numpy";
    "/tests/test_loss_weighting.py" -> "Import:backend";
    "/tests/test_loss_weighting.py" -> "Import:get_test_data";
    "/tests/test_loss_weighting.py" -> "Import:Sequential,";
    "/tests/test_loss_weighting.py" -> "Import:Dense,";
    "/tests/test_loss_weighting.py" -> "Import:np_utils";
    "/tests/test_loss_weighting.py" -> "Import:keras_test";
    "/tests/test_loss_weighting.py" -> "Import:assert_almost_equal,";
    "/tests/test_loss_weighting.py" -> "Fxn:_get_test_data";
    "/tests/test_loss_weighting.py" -> "Fxn:create_sequential_model";
    "/tests/test_loss_weighting.py" -> "Fxn:create_temporal_sequential_model";
    "/tests/test_loss_weighting.py" -> "Fxn:test_sequential_class_weights";
    "/tests/test_loss_weighting.py" -> "Fxn:test_sequential_sample_weights";
    "/tests/test_loss_weighting.py" -> "Fxn:test_sequential_temporal_sample_weights";
    "/tests/test_loss_weighting.py" -> "Fxn:test_weighted_metrics_with_sample_weight";
    "/tests/test_loss_weighting.py" -> "Fxn:test_weighted_metrics_with_no_sample_weight";
    "/tests/test_loss_weighting.py" -> "Fxn:test_weighted_metrics_with_weighted_accuracy_metric";
    "/tests/test_loss_weighting.py" -> "Fxn:test_weighted_metrics_with_multiple_outputs";
    "/tests/test_loss_weighting.py" -> "Fxn:test_class_weight_wrong_classes";
    "/tests/test_model_saving.py" -> "Import:pytest";
    "/tests/test_model_saving.py" -> "Import:import";
    "/tests/test_model_saving.py" -> "Import:h5py";
    "/tests/test_model_saving.py" -> "Import:tempfile";
    "/tests/test_model_saving.py" -> "Import:numpy";
    "/tests/test_model_saving.py" -> "Import:assert_allclose";
    "/tests/test_model_saving.py" -> "Import:assert_raises";
    "/tests/test_model_saving.py" -> "Import:backend";
    "/tests/test_model_saving.py" -> "Import:Model,";
    "/tests/test_model_saving.py" -> "Import:Dense,";
    "/tests/test_model_saving.py" -> "Import:Conv2D,";
    "/tests/test_model_saving.py" -> "Import:Input";
    "/tests/test_model_saving.py" -> "Import:optimizers";
    "/tests/test_model_saving.py" -> "Import:losses";
    "/tests/test_model_saving.py" -> "Import:metrics";
    "/tests/test_model_saving.py" -> "Import:keras_test";
    "/tests/test_model_saving.py" -> "Import:save_model,";
    "/tests/test_model_saving.py" -> "Fxn:test_sequential_model_saving";
    "/tests/test_model_saving.py" -> "Fxn:test_sequential_model_saving_2";
    "/tests/test_model_saving.py" -> "Fxn:test_functional_model_saving";
    "/tests/test_model_saving.py" -> "Fxn:test_saving_multiple_metrics_outputs";
    "/tests/test_model_saving.py" -> "Fxn:test_saving_without_compilation";
    "/tests/test_model_saving.py" -> "Fxn:test_saving_right_after_compilation";
    "/tests/test_model_saving.py" -> "Fxn:test_saving_unused_layers_is_ok";
    "/tests/test_model_saving.py" -> "Fxn:test_loading_weights_by_name_and_reshape";
    "/tests/test_model_saving.py" -> "Fxn:test_loading_weights_by_name_2";
    "/tests/test_model_saving.py" -> "Fxn:test_loading_weights_by_name_skip_mismatch";
    "/tests/test_model_saving.py" -> "Fxn:square_fn";
    "/tests/test_model_saving.py" -> "Fxn:test_saving_lambda_custom_objects";
    "/tests/test_model_saving.py" -> "Fxn:test_saving_lambda_numpy_array_arguments";
    "/tests/test_model_saving.py" -> "Fxn:test_saving_custom_activation_function";
    "/tests/test_model_saving.py" -> "Fxn:test_saving_model_with_long_layer_names";
    "/tests/test_model_saving.py" -> "Fxn:test_saving_model_with_long_weights_names";
    "/tests/test_model_saving.py" -> "Fxn:test_saving_recurrent_layer_with_init_state";
    "/tests/test_model_saving.py" -> "Fxn:test_saving_recurrent_layer_without_bias";
    "/tests/test_multiprocessing.py" -> "Import:print_function";
    "/tests/test_multiprocessing.py" -> "Import:import";
    "/tests/test_multiprocessing.py" -> "Import:threading";
    "/tests/test_multiprocessing.py" -> "Import:pytest";
    "/tests/test_multiprocessing.py" -> "Import:numpy";
    "/tests/test_multiprocessing.py" -> "Import:Sequential";
    "/tests/test_multiprocessing.py" -> "Import:Dense";
    "/tests/test_multiprocessing.py" -> "Import:keras_test";
    "/tests/test_multiprocessing.py" -> "Import:Sequence";
    "/tests/test_multiprocessing.py" -> "class:DummySequence(Sequence):";
    "class:DummySequence(Sequence):" -> "Fxn:__getitem__";
    "class:DummySequence(Sequence):" -> "Fxn:__len__";
    "class:DummySequence(Sequence):" -> "Fxn:in_tmpdir";
    "class:DummySequence(Sequence):" -> "Fxn:test_multiprocessing_training";
    "class:DummySequence(Sequence):" -> "Fxn:custom_generator";
    "class:DummySequence(Sequence):" -> "Fxn:invalid_generator";
    "class:DummySequence(Sequence):" -> "Fxn:test_multiprocessing_training_from_file";
    "class:DummySequence(Sequence):" -> "Fxn:custom_generator";
    "class:DummySequence(Sequence):" -> "Fxn:test_multiprocessing_predicting";
    "class:DummySequence(Sequence):" -> "Fxn:custom_generator";
    "class:DummySequence(Sequence):" -> "Fxn:test_multiprocessing_evaluating";
    "class:DummySequence(Sequence):" -> "Fxn:custom_generator";
    "class:DummySequence(Sequence):" -> "Fxn:test_multiprocessing_fit_error";
    "class:DummySequence(Sequence):" -> "Fxn:custom_generator";
    "class:DummySequence(Sequence):" -> "Fxn:test_multiprocessing_evaluate_error";
    "class:DummySequence(Sequence):" -> "Fxn:custom_generator";
    "class:DummySequence(Sequence):" -> "Fxn:test_multiprocessing_predict_error";
    "class:DummySequence(Sequence):" -> "Fxn:custom_generator";
    "Fxn:__getitem__" -> "Fxn:np.zeros([10,";
    "Fxn:__getitem__" -> "Fxn:np.ones([10])";
    "Fxn:in_tmpdir" -> "Fxn:tmpdir.as_cwd():";
    "Fxn:in_tmpdir" -> "Fxn:tmpdir.listdir()";
    "Fxn:test_multiprocessing_training" -> "Fxn:np.random.randint(0,";
    "Fxn:test_multiprocessing_training" -> "Fxn:np.random.randint(0,";
    "Fxn:test_multiprocessing_training" -> "Fxn:np.random.random(50)";
    "Fxn:custom_generator" -> "Fxn:np.random.randint(0,";
    "Fxn:custom_generator" -> "Fxn:Sequential()";
    "Fxn:custom_generator" -> "Fxn:model.add(Dense(1,";
    "Fxn:custom_generator" -> "Fxn:input_shape=(2,";
    "Fxn:custom_generator" -> "Fxn:model.compile(loss='mse',";
    "Fxn:custom_generator" -> "Fxn:`fit_generator()`";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:`fit_generator()`";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(custom_generator(True),";
    "Fxn:custom_generator" -> "Fxn:validation_data=(arr_data[:10],";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(custom_generator(True),";
    "Fxn:custom_generator" -> "Fxn:validation_data=(arr_data[:10],";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(custom_generator(True),";
    "Fxn:custom_generator" -> "Fxn:validation_data=(arr_data[:10],";
    "Fxn:custom_generator" -> "Fxn:`fit_generator()`";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(custom_generator(True),";
    "Fxn:custom_generator" -> "Fxn:validation_data=custom_generator(True),";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(custom_generator(True),";
    "Fxn:custom_generator" -> "Fxn:validation_data=custom_generator(True),";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(custom_generator(True),";
    "Fxn:custom_generator" -> "Fxn:validation_data=custom_generator(True),";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(custom_generator(True),";
    "Fxn:custom_generator" -> "Fxn:validation_data=custom_generator(True),";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(custom_generator(True),";
    "Fxn:custom_generator" -> "Fxn:validation_data=custom_generator(True),";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(DummySequence(),";
    "Fxn:custom_generator" -> "Fxn:validation_data=custom_generator(True),";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(DummySequence(),";
    "Fxn:custom_generator" -> "Fxn:validation_data=custom_generator(True),";
    "Fxn:invalid_generator" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:invalid_generator" -> "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:invalid_generator" -> "Fxn:validation_data=custom_generator(),";
    "Fxn:invalid_generator" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:invalid_generator" -> "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:invalid_generator" -> "Fxn:validation_data=(arr_data[:10],";
    "Fxn:invalid_generator" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:invalid_generator" -> "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:invalid_generator" -> "Fxn:validation_data=invalid_generator(),";
    "Fxn:test_multiprocessing_training_from_file" -> "Fxn:np.random.randint(0,";
    "Fxn:test_multiprocessing_training_from_file" -> "Fxn:np.random.randint(0,";
    "Fxn:test_multiprocessing_training_from_file" -> "Fxn:np.savez('data.npz',";
    "Fxn:custom_generator" -> "Fxn:np.load('data.npz')";
    "Fxn:custom_generator" -> "Fxn:np.random.randint(0,";
    "Fxn:custom_generator" -> "Fxn:Sequential()";
    "Fxn:custom_generator" -> "Fxn:model.add(Dense(1,";
    "Fxn:custom_generator" -> "Fxn:input_shape=(2,";
    "Fxn:custom_generator" -> "Fxn:model.compile(loss='mse',";
    "Fxn:custom_generator" -> "Fxn:`fit_generator()`";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:`fit_generator()`";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:os.remove('data.npz')";
    "Fxn:test_multiprocessing_predicting" -> "Fxn:np.random.randint(0,";
    "Fxn:custom_generator" -> "Fxn:np.random.randint(0,";
    "Fxn:custom_generator" -> "Fxn:Sequential()";
    "Fxn:custom_generator" -> "Fxn:model.add(Dense(1,";
    "Fxn:custom_generator" -> "Fxn:input_shape=(2,";
    "Fxn:custom_generator" -> "Fxn:model.compile(loss='mse',";
    "Fxn:custom_generator" -> "Fxn:`predict_generator()`";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:custom_generator" -> "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:`predict_generator()`";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:custom_generator" -> "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:test_multiprocessing_evaluating" -> "Fxn:np.random.randint(0,";
    "Fxn:test_multiprocessing_evaluating" -> "Fxn:np.random.randint(0,";
    "Fxn:custom_generator" -> "Fxn:np.random.randint(0,";
    "Fxn:custom_generator" -> "Fxn:Sequential()";
    "Fxn:custom_generator" -> "Fxn:model.add(Dense(1,";
    "Fxn:custom_generator" -> "Fxn:input_shape=(2,";
    "Fxn:custom_generator" -> "Fxn:model.compile(loss='mse',";
    "Fxn:custom_generator" -> "Fxn:`evaluate_generator()`";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:custom_generator" -> "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:`evaluate_generator()`";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:custom_generator" -> "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:test_multiprocessing_fit_error" -> "Fxn:np.random.randint(0,";
    "Fxn:test_multiprocessing_fit_error" -> "Fxn:np.random.randint(0,";
    "Fxn:custom_generator" -> "Fxn:range(good_batches):";
    "Fxn:custom_generator" -> "Fxn:np.random.randint(0,";
    "Fxn:custom_generator" -> "Fxn:Sequential()";
    "Fxn:custom_generator" -> "Fxn:model.add(Dense(1,";
    "Fxn:custom_generator" -> "Fxn:input_shape=(2,";
    "Fxn:custom_generator" -> "Fxn:model.compile(loss='mse',";
    "Fxn:custom_generator" -> "Fxn:`fit_generator()`";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(RuntimeError):";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(RuntimeError):";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:`fit_generator()`";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(RuntimeError):";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(RuntimeError):";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(RuntimeError):";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(RuntimeError):";
    "Fxn:custom_generator" -> "Fxn:model.fit_generator(custom_generator(),";
    "Fxn:test_multiprocessing_evaluate_error" -> "Fxn:np.random.randint(0,";
    "Fxn:test_multiprocessing_evaluate_error" -> "Fxn:np.random.randint(0,";
    "Fxn:custom_generator" -> "Fxn:range(good_batches):";
    "Fxn:custom_generator" -> "Fxn:np.random.randint(0,";
    "Fxn:custom_generator" -> "Fxn:Sequential()";
    "Fxn:custom_generator" -> "Fxn:model.add(Dense(1,";
    "Fxn:custom_generator" -> "Fxn:input_shape=(2,";
    "Fxn:custom_generator" -> "Fxn:model.compile(loss='mse',";
    "Fxn:custom_generator" -> "Fxn:`evaluate_generator()`";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:custom_generator" -> "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(RuntimeError):";
    "Fxn:custom_generator" -> "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(RuntimeError):";
    "Fxn:custom_generator" -> "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:`evaluate_generator()`";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:custom_generator" -> "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(RuntimeError):";
    "Fxn:custom_generator" -> "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(RuntimeError):";
    "Fxn:custom_generator" -> "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(RuntimeError):";
    "Fxn:custom_generator" -> "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(RuntimeError):";
    "Fxn:custom_generator" -> "Fxn:model.evaluate_generator(custom_generator(),";
    "Fxn:test_multiprocessing_predict_error" -> "Fxn:np.random.randint(0,";
    "Fxn:custom_generator" -> "Fxn:range(good_batches):";
    "Fxn:custom_generator" -> "Fxn:np.random.randint(0,";
    "Fxn:custom_generator" -> "Fxn:Sequential()";
    "Fxn:custom_generator" -> "Fxn:model.add(Dense(1,";
    "Fxn:custom_generator" -> "Fxn:input_shape=(2,";
    "Fxn:custom_generator" -> "Fxn:model.compile(loss='mse',";
    "Fxn:custom_generator" -> "Fxn:`predict_generator()`";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:custom_generator" -> "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(RuntimeError):";
    "Fxn:custom_generator" -> "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(RuntimeError):";
    "Fxn:custom_generator" -> "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:`predict_generator()`";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:custom_generator" -> "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(RuntimeError):";
    "Fxn:custom_generator" -> "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(RuntimeError):";
    "Fxn:custom_generator" -> "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(RuntimeError):";
    "Fxn:custom_generator" -> "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:pytest.raises(RuntimeError):";
    "Fxn:custom_generator" -> "Fxn:model.predict_generator(custom_generator(),";
    "Fxn:custom_generator" -> "Fxn:pytest.main([__file__])";
    "/tests/integration_tests/test_datasets.py" -> "Import:print_function";
    "/tests/integration_tests/test_datasets.py" -> "Import:pytest";
    "/tests/integration_tests/test_datasets.py" -> "Import:time";
    "/tests/integration_tests/test_datasets.py" -> "Import:random";
    "/tests/integration_tests/test_datasets.py" -> "Import:cifar10";
    "/tests/integration_tests/test_datasets.py" -> "Import:cifar100";
    "/tests/integration_tests/test_datasets.py" -> "Import:reuters";
    "/tests/integration_tests/test_datasets.py" -> "Import:imdb";
    "/tests/integration_tests/test_datasets.py" -> "Import:mnist";
    "/tests/integration_tests/test_datasets.py" -> "Import:boston_housing";
    "/tests/integration_tests/test_datasets.py" -> "Import:fashion_mnist";
    "/tests/integration_tests/test_datasets.py" -> "Fxn:test_cifar";
    "/tests/integration_tests/test_datasets.py" -> "Fxn:test_reuters";
    "/tests/integration_tests/test_datasets.py" -> "Fxn:test_mnist";
    "/tests/integration_tests/test_datasets.py" -> "Fxn:test_imdb";
    "/tests/integration_tests/test_datasets.py" -> "Fxn:test_boston_housing";
    "/tests/integration_tests/test_datasets.py" -> "Fxn:test_fashion_mnist";
    "/tests/integration_tests/test_image_data_tasks.py" -> "Import:print_function";
    "/tests/integration_tests/test_image_data_tasks.py" -> "Import:numpy";
    "/tests/integration_tests/test_image_data_tasks.py" -> "Import:pytest";
    "/tests/integration_tests/test_image_data_tasks.py" -> "Import:get_test_data,";
    "/tests/integration_tests/test_image_data_tasks.py" -> "Import:Sequential";
    "/tests/integration_tests/test_image_data_tasks.py" -> "Import:layers";
    "/tests/integration_tests/test_image_data_tasks.py" -> "Import:to_categorical";
    "/tests/integration_tests/test_image_data_tasks.py" -> "Fxn:test_image_classification";
    "/tests/integration_tests/test_temporal_data_tasks.py" -> "Import:print_function";
    "/tests/integration_tests/test_temporal_data_tasks.py" -> "Import:numpy";
    "/tests/integration_tests/test_temporal_data_tasks.py" -> "Import:pytest";
    "/tests/integration_tests/test_temporal_data_tasks.py" -> "Import:string";
    "/tests/integration_tests/test_temporal_data_tasks.py" -> "Import:get_test_data,";
    "/tests/integration_tests/test_temporal_data_tasks.py" -> "Import:to_categorical";
    "/tests/integration_tests/test_temporal_data_tasks.py" -> "Import:Sequential";
    "/tests/integration_tests/test_temporal_data_tasks.py" -> "Import:layers,";
    "/tests/integration_tests/test_temporal_data_tasks.py" -> "Import:keras.backend";
    "/tests/integration_tests/test_temporal_data_tasks.py" -> "Import:keras";
    "/tests/integration_tests/test_temporal_data_tasks.py" -> "Fxn:test_temporal_classification";
    "/tests/integration_tests/test_temporal_data_tasks.py" -> "Fxn:test_temporal_classification_functional";
    "/tests/integration_tests/test_temporal_data_tasks.py" -> "Fxn:test_temporal_regression";
    "/tests/integration_tests/test_temporal_data_tasks.py" -> "Fxn:test_3d_to_3d";
    "/tests/integration_tests/test_temporal_data_tasks.py" -> "Fxn:test_stacked_lstm_char_prediction";
    "/tests/integration_tests/test_temporal_data_tasks.py" -> "Fxn:test_masked_temporal";
    "/tests/integration_tests/test_temporal_data_tasks.py" -> "Fxn:test_embedding_with_clipnorm";
    "/tests/integration_tests/test_vector_data_tasks.py" -> "Import:print_function";
    "/tests/integration_tests/test_vector_data_tasks.py" -> "Import:pytest";
    "/tests/integration_tests/test_vector_data_tasks.py" -> "Import:get_test_data,";
    "/tests/integration_tests/test_vector_data_tasks.py" -> "Import:Sequential";
    "/tests/integration_tests/test_vector_data_tasks.py" -> "Import:layers";
    "/tests/integration_tests/test_vector_data_tasks.py" -> "Import:keras";
    "/tests/integration_tests/test_vector_data_tasks.py" -> "Import:to_categorical";
    "/tests/integration_tests/test_vector_data_tasks.py" -> "Fxn:test_vector_classification";
    "/tests/integration_tests/test_vector_data_tasks.py" -> "Fxn:test_vector_classification_functional";
    "/tests/integration_tests/test_vector_data_tasks.py" -> "Fxn:test_vector_regression";
    "/tests/keras/activations_test.py" -> "Import:pytest";
    "/tests/keras/activations_test.py" -> "Import:numpy";
    "/tests/keras/activations_test.py" -> "Import:assert_allclose";
    "/tests/keras/activations_test.py" -> "Import:backend";
    "/tests/keras/activations_test.py" -> "Import:activations";
    "/tests/keras/activations_test.py" -> "Import:Dense";
    "/tests/keras/activations_test.py" -> "Fxn:get_standard_values";
    "/tests/keras/activations_test.py" -> "Fxn:test_serialization";
    "/tests/keras/activations_test.py" -> "Fxn:test_get_fn";
    "/tests/keras/activations_test.py" -> "Fxn:test_softmax_valid";
    "/tests/keras/activations_test.py" -> "Fxn:softmax";
    "/tests/keras/activations_test.py" -> "Fxn:test_softmax_invalid";
    "/tests/keras/activations_test.py" -> "Fxn:test_time_distributed_softmax";
    "/tests/keras/activations_test.py" -> "Fxn:test_softplus";
    "/tests/keras/activations_test.py" -> "Fxn:softplus";
    "/tests/keras/activations_test.py" -> "Fxn:test_softsign";
    "/tests/keras/activations_test.py" -> "Fxn:softsign";
    "/tests/keras/activations_test.py" -> "Fxn:test_sigmoid";
    "/tests/keras/activations_test.py" -> "Fxn:ref_sigmoid";
    "/tests/keras/activations_test.py" -> "Fxn:test_hard_sigmoid";
    "/tests/keras/activations_test.py" -> "Fxn:ref_hard_sigmoid";
    "/tests/keras/activations_test.py" -> "Fxn:test_relu";
    "/tests/keras/activations_test.py" -> "Fxn:test_elu";
    "/tests/keras/activations_test.py" -> "Fxn:test_selu";
    "/tests/keras/activations_test.py" -> "Fxn:test_tanh";
    "/tests/keras/activations_test.py" -> "Fxn:test_linear";
    "/tests/keras/constraints_test.py" -> "Import:pytest";
    "/tests/keras/constraints_test.py" -> "Import:numpy";
    "/tests/keras/constraints_test.py" -> "Import:assert_allclose";
    "/tests/keras/constraints_test.py" -> "Import:backend";
    "/tests/keras/constraints_test.py" -> "Import:constraints";
    "/tests/keras/constraints_test.py" -> "Import:keras_test";
    "/tests/keras/constraints_test.py" -> "Fxn:get_test_values";
    "/tests/keras/constraints_test.py" -> "Fxn:get_example_array";
    "/tests/keras/constraints_test.py" -> "Fxn:test_serialization";
    "/tests/keras/constraints_test.py" -> "Fxn:test_max_norm";
    "/tests/keras/constraints_test.py" -> "Fxn:test_non_neg";
    "/tests/keras/constraints_test.py" -> "Fxn:test_unit_norm";
    "/tests/keras/constraints_test.py" -> "Fxn:test_min_max_norm";
    "/tests/keras/initializers_test.py" -> "Import:pytest";
    "/tests/keras/initializers_test.py" -> "Import:numpy";
    "/tests/keras/initializers_test.py" -> "Import:initializers";
    "/tests/keras/initializers_test.py" -> "Import:backend";
    "/tests/keras/initializers_test.py" -> "Fxn:_runner";
    "/tests/keras/initializers_test.py" -> "Fxn:test_uniform";
    "/tests/keras/initializers_test.py" -> "Fxn:test_normal";
    "/tests/keras/initializers_test.py" -> "Fxn:test_truncated_normal";
    "/tests/keras/initializers_test.py" -> "Fxn:test_constant";
    "/tests/keras/initializers_test.py" -> "Fxn:test_lecun_uniform";
    "/tests/keras/initializers_test.py" -> "Fxn:test_glorot_uniform";
    "/tests/keras/initializers_test.py" -> "Fxn:test_he_uniform";
    "/tests/keras/initializers_test.py" -> "Fxn:test_glorot_normal";
    "/tests/keras/initializers_test.py" -> "Fxn:test_he_normal";
    "/tests/keras/initializers_test.py" -> "Fxn:test_lecun_normal";
    "/tests/keras/initializers_test.py" -> "Fxn:test_orthogonal";
    "/tests/keras/initializers_test.py" -> "Fxn:test_identity";
    "/tests/keras/initializers_test.py" -> "Fxn:test_zero";
    "/tests/keras/initializers_test.py" -> "Fxn:test_one";
    "/tests/keras/losses_test.py" -> "Import:pytest";
    "/tests/keras/losses_test.py" -> "Import:numpy";
    "/tests/keras/losses_test.py" -> "Import:keras";
    "/tests/keras/losses_test.py" -> "Import:losses";
    "/tests/keras/losses_test.py" -> "Import:backend";
    "/tests/keras/losses_test.py" -> "Import:custom_object_scope";
    "/tests/keras/losses_test.py" -> "Fxn:test_objective_shapes_3d";
    "/tests/keras/losses_test.py" -> "Fxn:test_objective_shapes_2d";
    "/tests/keras/losses_test.py" -> "Fxn:test_cce_one_hot";
    "/tests/keras/losses_test.py" -> "Fxn:test_categorical_hinge";
    "/tests/keras/losses_test.py" -> "Fxn:test_sparse_categorical_crossentropy";
    "/tests/keras/losses_test.py" -> "Fxn:test_sparse_categorical_crossentropy_4d";
    "/tests/keras/losses_test.py" -> "Fxn:__init__";
    "/tests/keras/losses_test.py" -> "Fxn:__call__";
    "/tests/keras/losses_test.py" -> "Fxn:get_config";
    "/tests/keras/losses_test.py" -> "Fxn:test_serializing_loss_class";
    "/tests/keras/losses_test.py" -> "Fxn:test_serializing_model_with_loss_class";
    "/tests/keras/metrics_test.py" -> "Import:pytest";
    "/tests/keras/metrics_test.py" -> "Import:numpy";
    "/tests/keras/metrics_test.py" -> "Import:keras";
    "/tests/keras/metrics_test.py" -> "Import:metrics";
    "/tests/keras/metrics_test.py" -> "Import:backend";
    "/tests/keras/metrics_test.py" -> "Import:keras_test";
    "/tests/keras/metrics_test.py" -> "Fxn:test_metrics";
    "/tests/keras/metrics_test.py" -> "Fxn:test_sparse_metrics";
    "/tests/keras/metrics_test.py" -> "Fxn:test_serialize";
    "/tests/keras/metrics_test.py" -> "Fxn:__init__";
    "/tests/keras/metrics_test.py" -> "Fxn:test_invalid_get";
    "/tests/keras/metrics_test.py" -> "Fxn:test_top_k_categorical_accuracy";
    "/tests/keras/metrics_test.py" -> "Fxn:test_sparse_top_k_categorical_accuracy";
    "/tests/keras/metrics_test.py" -> "Fxn:test_stateful_metrics";
    "/tests/keras/metrics_test.py" -> "class:BinaryTruePositives(keras.layers.Layer):";
    "class:BinaryTruePositives(keras.layers.Layer):" -> "Fxn:__init__";
    "class:BinaryTruePositives(keras.layers.Layer):" -> "Fxn:reset_states";
    "class:BinaryTruePositives(keras.layers.Layer):" -> "Fxn:__call__";
    "class:BinaryTruePositives(keras.layers.Layer):" -> "Fxn:ref_true_pos";
    "Fxn:__init__" -> "Fxn:super(BinaryTruePositives,";
    "Fxn:__init__" -> "Fxn:self).__init__(name=name,";
    "Fxn:__init__" -> "Fxn:K.variable(value=0,";
    "Fxn:reset_states" -> "Fxn:K.set_value(self.true_positives,";
    "Fxn:__call__" -> "Fxn:K.cast(y_true,";
    "Fxn:__call__" -> "Fxn:K.cast(K.round(y_pred),";
    "Fxn:__call__" -> "Fxn:K.cast(K.equal(y_pred,";
    "Fxn:__call__" -> "Fxn:K.cast(K.sum(correct_preds";
    "Fxn:__call__" -> "Fxn:self.add_update(K.update_add(self.true_positives,";
    "Fxn:__call__" -> "Fxn:BinaryTruePositives()";
    "Fxn:__call__" -> "Fxn:metrics.serialize(metric_fn)";
    "Fxn:__call__" -> "Fxn:metrics.deserialize(";
    "Fxn:__call__" -> "Fxn:keras.Input(shape=(2,))";
    "Fxn:__call__" -> "Fxn:keras.layers.Dense(1,";
    "Fxn:__call__" -> "Fxn:activation='sigmoid')(inputs)";
    "Fxn:__call__" -> "Fxn:keras.Model(inputs,";
    "Fxn:__call__" -> "Fxn:model.compile(optimizer='sgd',";
    "Fxn:__call__" -> "Fxn:np.random.random((samples,";
    "Fxn:__call__" -> "Fxn:np.random.randint(2,";
    "Fxn:__call__" -> "Fxn:size=(samples,";
    "Fxn:__call__" -> "Fxn:model.fit(x,";
    "Fxn:__call__" -> "Fxn:model.evaluate(x,";
    "Fxn:__call__" -> "Fxn:model.predict(x)";
    "Fxn:ref_true_pos" -> "Fxn:np.sum(np.logical_and(y_pred";
    "Fxn:ref_true_pos" -> "Fxn:np.testing.assert_allclose(outs[2],";
    "Fxn:ref_true_pos" -> "Fxn:ref_true_pos(y,";
    "Fxn:ref_true_pos" -> "Fxn:pytest.main([__file__])";
    "/tests/keras/optimizers_test.py" -> "Import:print_function";
    "/tests/keras/optimizers_test.py" -> "Import:pytest";
    "/tests/keras/optimizers_test.py" -> "Import:numpy";
    "/tests/keras/optimizers_test.py" -> "Import:assert_allclose";
    "/tests/keras/optimizers_test.py" -> "Import:test_utils";
    "/tests/keras/optimizers_test.py" -> "Import:optimizers,";
    "/tests/keras/optimizers_test.py" -> "Import:Sequential,";
    "/tests/keras/optimizers_test.py" -> "Import:Dense,";
    "/tests/keras/optimizers_test.py" -> "Import:keras_test";
    "/tests/keras/optimizers_test.py" -> "Import:to_categorical";
    "/tests/keras/optimizers_test.py" -> "Import:backend";
    "/tests/keras/optimizers_test.py" -> "Fxn:get_test_data";
    "/tests/keras/optimizers_test.py" -> "Fxn:_test_optimizer";
    "/tests/keras/optimizers_test.py" -> "Fxn:_test_no_grad";
    "/tests/keras/optimizers_test.py" -> "Fxn:test_sgd";
    "/tests/keras/optimizers_test.py" -> "Fxn:test_rmsprop";
    "/tests/keras/optimizers_test.py" -> "Fxn:test_adagrad";
    "/tests/keras/optimizers_test.py" -> "Fxn:test_adadelta";
    "/tests/keras/optimizers_test.py" -> "Fxn:test_adam";
    "/tests/keras/optimizers_test.py" -> "Fxn:test_adamax";
    "/tests/keras/optimizers_test.py" -> "Fxn:test_nadam";
    "/tests/keras/optimizers_test.py" -> "Fxn:test_adam_amsgrad";
    "/tests/keras/optimizers_test.py" -> "Fxn:test_clipnorm";
    "/tests/keras/optimizers_test.py" -> "Fxn:test_clipvalue";
    "/tests/keras/optimizers_test.py" -> "Fxn:test_tfoptimizer";
    "/tests/keras/optimizers_test.py" -> "Import:constraints";
    "/tests/keras/optimizers_test.py" -> "Import:train";
    "/tests/keras/regularizers_test.py" -> "Import:pytest";
    "/tests/keras/regularizers_test.py" -> "Import:Sequential,";
    "/tests/keras/regularizers_test.py" -> "Import:Dense,";
    "/tests/keras/regularizers_test.py" -> "Import:np_utils";
    "/tests/keras/regularizers_test.py" -> "Import:test_utils";
    "/tests/keras/regularizers_test.py" -> "Import:regularizers";
    "/tests/keras/regularizers_test.py" -> "Import:backend";
    "/tests/keras/regularizers_test.py" -> "Fxn:get_data";
    "/tests/keras/regularizers_test.py" -> "Fxn:create_model";
    "/tests/keras/regularizers_test.py" -> "Fxn:create_multi_input_model_from";
    "/tests/keras/regularizers_test.py" -> "Fxn:test_kernel_regularization";
    "/tests/keras/regularizers_test.py" -> "Fxn:test_activity_regularization";
    "/tests/keras/regularizers_test.py" -> "Fxn:test_regularization_shared_layer";
    "/tests/keras/regularizers_test.py" -> "Fxn:test_regularization_shared_model";
    "/tests/keras/regularizers_test.py" -> "Fxn:test_regularization_shared_layer_in_different_models";
    "/tests/keras/test_callbacks.py" -> "Import:import";
    "/tests/keras/test_callbacks.py" -> "Import:multiprocessing";
    "/tests/keras/test_callbacks.py" -> "Import:numpy";
    "/tests/keras/test_callbacks.py" -> "Import:pytest";
    "/tests/keras/test_callbacks.py" -> "Import:reader";
    "/tests/keras/test_callbacks.py" -> "Import:Sniffer";
    "/tests/keras/test_callbacks.py" -> "Import:shutil";
    "/tests/keras/test_callbacks.py" -> "Import:optimizers";
    "/tests/keras/test_callbacks.py" -> "Import:initializers";
    "/tests/keras/test_callbacks.py" -> "Import:callbacks";
    "/tests/keras/test_callbacks.py" -> "Import:Sequential,";
    "/tests/keras/test_callbacks.py" -> "Import:Input,";
    "/tests/keras/test_callbacks.py" -> "Import:Conv2D";
    "/tests/keras/test_callbacks.py" -> "Import:MaxPooling2D,";
    "/tests/keras/test_callbacks.py" -> "Import:get_test_data";
    "/tests/keras/test_callbacks.py" -> "Import:keras_test";
    "/tests/keras/test_callbacks.py" -> "Import:backend";
    "/tests/keras/test_callbacks.py" -> "Import:np_utils";
    "/tests/keras/test_callbacks.py" -> "Import:patch";
    "/tests/keras/test_callbacks.py" -> "Import:patch";
    "/tests/keras/test_callbacks.py" -> "Fxn:test_TerminateOnNaN";
    "/tests/keras/test_callbacks.py" -> "Fxn:data_generator";
    "/tests/keras/test_callbacks.py" -> "Fxn:test_stop_training_csv";
    "/tests/keras/test_callbacks.py" -> "Fxn:data_generator";
    "/tests/keras/test_callbacks.py" -> "Fxn:test_ModelCheckpoint";
    "/tests/keras/test_callbacks.py" -> "Fxn:test_EarlyStopping";
    "/tests/keras/test_callbacks.py" -> "Fxn:test_EarlyStopping_reuse";
    "/tests/keras/test_callbacks.py" -> "Fxn:test_EarlyStopping_patience";
    "/tests/keras/test_callbacks.py" -> "class:DummyModel(object):";
    "/tests/keras/test_callbacks.py" -> "Import:open(filepath)";
    "/tests/keras/test_callbacks.py" -> "Import:shutil";
    "class:DummyModel(object):" -> "Fxn:__init__";
    "class:DummyModel(object):" -> "Fxn:test_LearningRateScheduler";
    "class:DummyModel(object):" -> "Fxn:test_ReduceLROnPlateau";
    "class:DummyModel(object):" -> "Fxn:make_model";
    "class:DummyModel(object):" -> "Fxn:test_CSVLogger";
    "class:DummyModel(object):" -> "Fxn:make_model";
    "class:DummyModel(object):" -> "Fxn:test_TensorBoard";
    "class:DummyModel(object):" -> "Fxn:data_generator";
    "class:DummyModel(object):" -> "Fxn:callbacks_factory";
    "class:DummyModel(object):" -> "Fxn:test_TensorBoard_histogram_freq_must_have_validation_data";
    "class:DummyModel(object):" -> "Fxn:data_generator";
    "class:DummyModel(object):" -> "Fxn:callbacks_factory";
    "class:DummyModel(object):" -> "Fxn:test_TensorBoard_multi_input_output";
    "class:DummyModel(object):" -> "Fxn:data_generator";
    "class:DummyModel(object):" -> "Fxn:callbacks_factory";
    "class:DummyModel(object):" -> "Fxn:test_TensorBoard_convnet";
    "class:DummyModel(object):" -> "Fxn:test_CallbackValData";
    "class:DummyModel(object):" -> "Fxn:data_generator";
    "class:DummyModel(object):" -> "Fxn:test_LambdaCallback";
    "class:DummyModel(object):" -> "Fxn:f";
    "class:DummyModel(object):" -> "Fxn:test_TensorBoard_with_ReduceLROnPlateau";
    "class:DummyModel(object):" -> "Fxn:tests_RemoteMonitor";
    "Fxn:__init__" -> "Fxn:callbacks.EarlyStopping(monitor='val_loss',";
    "Fxn:__init__" -> "Fxn:DummyModel()";
    "Fxn:__init__" -> "Fxn:early_stop.on_train_begin()";
    "Fxn:__init__" -> "Fxn:range(len(losses)):";
    "Fxn:__init__" -> "Fxn:early_stop.on_epoch_end(epoch,";
    "Fxn:test_LearningRateScheduler" -> "Fxn:np.random.seed(1337)";
    "Fxn:test_LearningRateScheduler" -> "Fxn:get_test_data(num_train=train_samples,";
    "Fxn:test_LearningRateScheduler" -> "Fxn:input_shape=(input_dim,),";
    "Fxn:test_LearningRateScheduler" -> "Fxn:np_utils.to_categorical(y_test)";
    "Fxn:test_LearningRateScheduler" -> "Fxn:np_utils.to_categorical(y_train)";
    "Fxn:test_LearningRateScheduler" -> "Fxn:Sequential()";
    "Fxn:test_LearningRateScheduler" -> "Fxn:model.add(Dense(num_hidden,";
    "Fxn:test_LearningRateScheduler" -> "Fxn:model.add(Dense(num_classes,";
    "Fxn:test_LearningRateScheduler" -> "Fxn:model.compile(loss='categorical_crossentropy',";
    "Fxn:test_LearningRateScheduler" -> "Fxn:[callbacks.LearningRateScheduler(lambda";
    "Fxn:test_LearningRateScheduler" -> "Fxn:model.fit(X_train,";
    "Fxn:test_LearningRateScheduler" -> "Fxn:validation_data=(X_test,";
    "Fxn:test_LearningRateScheduler" -> "Fxn:K.epsilon()";
    "Fxn:test_ReduceLROnPlateau" -> "Fxn:np.random.seed(1337)";
    "Fxn:test_ReduceLROnPlateau" -> "Fxn:get_test_data(num_train=train_samples,";
    "Fxn:test_ReduceLROnPlateau" -> "Fxn:input_shape=(input_dim,),";
    "Fxn:test_ReduceLROnPlateau" -> "Fxn:np_utils.to_categorical(y_test)";
    "Fxn:test_ReduceLROnPlateau" -> "Fxn:np_utils.to_categorical(y_train)";
    "Fxn:make_model" -> "Fxn:np.random.seed(1337)";
    "Fxn:make_model" -> "Fxn:Sequential()";
    "Fxn:make_model" -> "Fxn:model.add(Dense(num_hidden,";
    "Fxn:make_model" -> "Fxn:model.add(Dense(num_classes,";
    "Fxn:make_model" -> "Fxn:model.compile(loss='categorical_crossentropy',";
    "Fxn:make_model" -> "Fxn:optimizer=optimizers.SGD(lr=0.1),";
    "Fxn:make_model" -> "Fxn:make_model()";
    "Fxn:make_model" -> "Fxn:[callbacks.ReduceLROnPlateau(monitor='val_loss',";
    "Fxn:make_model" -> "Fxn:model.fit(X_train,";
    "Fxn:make_model" -> "Fxn:validation_data=(X_test,";
    "Fxn:make_model" -> "Fxn:np.allclose(float(K.get_value(model.optimizer.lr)),";
    "Fxn:make_model" -> "Fxn:atol=K.epsilon())";
    "Fxn:make_model" -> "Fxn:make_model()";
    "Fxn:make_model" -> "Fxn:[callbacks.ReduceLROnPlateau(monitor='val_loss',";
    "Fxn:make_model" -> "Fxn:model.fit(X_train,";
    "Fxn:make_model" -> "Fxn:validation_data=(X_test,";
    "Fxn:make_model" -> "Fxn:np.allclose(float(K.get_value(model.optimizer.lr)),";
    "Fxn:make_model" -> "Fxn:atol=K.epsilon())";
    "Fxn:test_CSVLogger" -> "Fxn:np.random.seed(1337)";
    "Fxn:test_CSVLogger" -> "Fxn:str(tmpdir";
    "Fxn:test_CSVLogger" -> "Fxn:get_test_data(num_train=train_samples,";
    "Fxn:test_CSVLogger" -> "Fxn:input_shape=(input_dim,),";
    "Fxn:test_CSVLogger" -> "Fxn:np_utils.to_categorical(y_test)";
    "Fxn:test_CSVLogger" -> "Fxn:np_utils.to_categorical(y_train)";
    "Fxn:make_model" -> "Fxn:np.random.seed(1337)";
    "Fxn:make_model" -> "Fxn:Sequential()";
    "Fxn:make_model" -> "Fxn:model.add(Dense(num_hidden,";
    "Fxn:make_model" -> "Fxn:model.add(Dense(num_classes,";
    "Fxn:make_model" -> "Fxn:model.compile(loss='categorical_crossentropy',";
    "Fxn:make_model" -> "Fxn:optimizer=optimizers.SGD(lr=0.1),";
    "Fxn:make_model" -> "Fxn:make_model()";
    "Fxn:make_model" -> "Fxn:[callbacks.CSVLogger(filepath,";
    "Fxn:make_model" -> "Fxn:model.fit(X_train,";
    "Fxn:make_model" -> "Fxn:validation_data=(X_test,";
    "Fxn:make_model" -> "Fxn:os.path.isfile(filepath)";
    "Fxn:make_model" -> "Fxn:open(filepath)";
    "Fxn:make_model" -> "Fxn:Sniffer().sniff(csvfile.read())";
    "Fxn:make_model" -> "Fxn:make_model()";
    "Fxn:make_model" -> "Fxn:[callbacks.CSVLogger(filepath,";
    "Fxn:make_model" -> "Fxn:model.fit(X_train,";
    "Fxn:make_model" -> "Fxn:validation_data=(X_test,";
    "Fxn:make_model" -> "Fxn:model.fit(X_train,";
    "Fxn:make_model" -> "Fxn:validation_data=(X_test,";
    "Fxn:make_model" -> "Fxn:open(filepath)";
    "Fxn:make_model" -> "Fxn:".join(csvfile.readlines())";
    "Fxn:make_model" -> "Fxn:len(re.findall('epoch',";
    "Fxn:make_model" -> "Fxn:os.remove(filepath)";
    "Fxn:make_model" -> "Fxn:tmpdir.listdir()";
    "Fxn:test_TensorBoard" -> "Fxn:np.random.seed(np.random.randint(1,";
    "Fxn:test_TensorBoard" -> "Fxn:str(tmpdir";
    "Fxn:test_TensorBoard" -> "Fxn:get_test_data(";
    "Fxn:test_TensorBoard" -> "Fxn:input_shape=(input_dim,),";
    "Fxn:test_TensorBoard" -> "Fxn:np_utils.to_categorical(y_test)";
    "Fxn:test_TensorBoard" -> "Fxn:np_utils.to_categorical(y_train)";
    "Fxn:data_generator" -> "Fxn:len(X_train)";
    "Fxn:data_generator" -> "Fxn:len(X_test)";
    "Fxn:data_generator" -> "Fxn:Input((input_dim,))";
    "Fxn:data_generator" -> "Fxn:Dense(num_hidden,";
    "Fxn:data_generator" -> "Fxn:activation='relu')(inp)";
    "Fxn:data_generator" -> "Fxn:Dropout(0.1)(hidden)";
    "Fxn:data_generator" -> "Fxn:Dense(num_classes,";
    "Fxn:data_generator" -> "Fxn:activation='softmax')(hidden)";
    "Fxn:data_generator" -> "Fxn:Model(inputs=inp,";
    "Fxn:data_generator" -> "Fxn:model.compile(loss='categorical_crossentropy',";
    "Fxn:callbacks_factory" -> "Fxn:[callbacks.TensorBoard(log_dir=filepath,";
    "Fxn:callbacks_factory" -> "Fxn:model.fit(X_train,";
    "Fxn:callbacks_factory" -> "Fxn:callbacks=callbacks_factory(histogram_freq=0),";
    "Fxn:callbacks_factory" -> "Fxn:model.fit(X_train,";
    "Fxn:callbacks_factory" -> "Fxn:validation_data=(X_test,";
    "Fxn:callbacks_factory" -> "Fxn:callbacks=callbacks_factory(histogram_freq=0),";
    "Fxn:callbacks_factory" -> "Fxn:model.fit_generator(data_generator(True),";
    "Fxn:callbacks_factory" -> "Fxn:len(X_train),";
    "Fxn:callbacks_factory" -> "Fxn:callbacks=callbacks_factory(histogram_freq=0))";
    "Fxn:callbacks_factory" -> "Fxn:model.fit_generator(data_generator(True),";
    "Fxn:callbacks_factory" -> "Fxn:len(X_train),";
    "Fxn:callbacks_factory" -> "Fxn:validation_data=(X_test,";
    "Fxn:callbacks_factory" -> "Fxn:callbacks=callbacks_factory(histogram_freq=1))";
    "Fxn:callbacks_factory" -> "Fxn:os.path.isdir(filepath)";
    "Fxn:callbacks_factory" -> "Fxn:shutil.rmtree(filepath)";
    "Fxn:callbacks_factory" -> "Fxn:tmpdir.listdir()";
    "Fxn:callbacks_factory" -> "Fxn:@pytest.mark.skipif((K.backend()";
    "Fxn:test_TensorBoard_histogram_freq_must_have_validation_data" -> "Fxn:np.random.seed(np.random.randint(1,";
    "Fxn:test_TensorBoard_histogram_freq_must_have_validation_data" -> "Fxn:str(tmpdir";
    "Fxn:test_TensorBoard_histogram_freq_must_have_validation_data" -> "Fxn:get_test_data(";
    "Fxn:test_TensorBoard_histogram_freq_must_have_validation_data" -> "Fxn:input_shape=(input_dim,),";
    "Fxn:test_TensorBoard_histogram_freq_must_have_validation_data" -> "Fxn:np_utils.to_categorical(y_test)";
    "Fxn:test_TensorBoard_histogram_freq_must_have_validation_data" -> "Fxn:np_utils.to_categorical(y_train)";
    "Fxn:data_generator" -> "Fxn:len(X_train)";
    "Fxn:data_generator" -> "Fxn:len(X_test)";
    "Fxn:data_generator" -> "Fxn:Input((input_dim,))";
    "Fxn:data_generator" -> "Fxn:Dense(num_hidden,";
    "Fxn:data_generator" -> "Fxn:activation='relu')(inp)";
    "Fxn:data_generator" -> "Fxn:Dropout(0.1)(hidden)";
    "Fxn:data_generator" -> "Fxn:Dense(num_classes,";
    "Fxn:data_generator" -> "Fxn:activation='softmax')(hidden)";
    "Fxn:data_generator" -> "Fxn:Model(inputs=inp,";
    "Fxn:data_generator" -> "Fxn:model.compile(loss='categorical_crossentropy',";
    "Fxn:callbacks_factory" -> "Fxn:[callbacks.TensorBoard(log_dir=filepath,";
    "Fxn:callbacks_factory" -> "Fxn:pytest.raises(ValueError)";
    "Fxn:callbacks_factory" -> "Fxn:model.fit(X_train,";
    "Fxn:callbacks_factory" -> "Fxn:callbacks=callbacks_factory(histogram_freq=1),";
    "Fxn:callbacks_factory" -> "Fxn:str(raised_exception.value)";
    "Fxn:callbacks_factory" -> "Fxn:pytest.raises(ValueError)";
    "Fxn:callbacks_factory" -> "Fxn:model.fit_generator(data_generator(True),";
    "Fxn:callbacks_factory" -> "Fxn:len(X_train),";
    "Fxn:callbacks_factory" -> "Fxn:callbacks=callbacks_factory(histogram_freq=1))";
    "Fxn:callbacks_factory" -> "Fxn:str(raised_exception.value)";
    "Fxn:callbacks_factory" -> "Fxn:pytest.raises(ValueError)";
    "Fxn:callbacks_factory" -> "Fxn:model.fit_generator(data_generator(True),";
    "Fxn:callbacks_factory" -> "Fxn:len(X_train),";
    "Fxn:callbacks_factory" -> "Fxn:validation_data=data_generator(False),";
    "Fxn:callbacks_factory" -> "Fxn:callbacks=callbacks_factory(histogram_freq=1))";
    "Fxn:callbacks_factory" -> "Fxn:str(raised_exception.value)";
    "Fxn:test_TensorBoard_multi_input_output" -> "Fxn:np.random.seed(np.random.randint(1,";
    "Fxn:test_TensorBoard_multi_input_output" -> "Fxn:str(tmpdir";
    "Fxn:test_TensorBoard_multi_input_output" -> "Fxn:get_test_data(";
    "Fxn:test_TensorBoard_multi_input_output" -> "Fxn:input_shape=(input_dim,),";
    "Fxn:test_TensorBoard_multi_input_output" -> "Fxn:np_utils.to_categorical(y_test)";
    "Fxn:test_TensorBoard_multi_input_output" -> "Fxn:np_utils.to_categorical(y_train)";
    "Fxn:data_generator" -> "Fxn:len(X_train)";
    "Fxn:data_generator" -> "Fxn:len(X_test)";
    "Fxn:data_generator" -> "Fxn:Input((input_dim,))";
    "Fxn:data_generator" -> "Fxn:Input((input_dim,))";
    "Fxn:data_generator" -> "Fxn:add([inp1,";
    "Fxn:data_generator" -> "Fxn:Dense(num_hidden,";
    "Fxn:data_generator" -> "Fxn:activation='relu')(inp)";
    "Fxn:data_generator" -> "Fxn:Dropout(0.1)(hidden)";
    "Fxn:data_generator" -> "Fxn:Dense(num_classes,";
    "Fxn:data_generator" -> "Fxn:activation='softmax')(hidden)";
    "Fxn:data_generator" -> "Fxn:Dense(num_classes,";
    "Fxn:data_generator" -> "Fxn:activation='softmax')(hidden)";
    "Fxn:data_generator" -> "Fxn:Model(inputs=[inp1,";
    "Fxn:data_generator" -> "Fxn:model.compile(loss='categorical_crossentropy',";
    "Fxn:callbacks_factory" -> "Fxn:[callbacks.TensorBoard(log_dir=filepath,";
    "Fxn:callbacks_factory" -> "Fxn:model.fit([X_train]";
    "Fxn:callbacks_factory" -> "Fxn:callbacks=callbacks_factory(histogram_freq=0),";
    "Fxn:callbacks_factory" -> "Fxn:model.fit([X_train]";
    "Fxn:callbacks_factory" -> "Fxn:validation_data=([X_test]";
    "Fxn:callbacks_factory" -> "Fxn:callbacks=callbacks_factory(histogram_freq=1),";
    "Fxn:callbacks_factory" -> "Fxn:model.fit_generator(data_generator(True),";
    "Fxn:callbacks_factory" -> "Fxn:len(X_train),";
    "Fxn:callbacks_factory" -> "Fxn:callbacks=callbacks_factory(histogram_freq=0))";
    "Fxn:callbacks_factory" -> "Fxn:model.fit_generator(data_generator(True),";
    "Fxn:callbacks_factory" -> "Fxn:len(X_train),";
    "Fxn:callbacks_factory" -> "Fxn:validation_data=([X_test]";
    "Fxn:callbacks_factory" -> "Fxn:callbacks=callbacks_factory(histogram_freq=1))";
    "Fxn:callbacks_factory" -> "Fxn:os.path.isdir(filepath)";
    "Fxn:callbacks_factory" -> "Fxn:shutil.rmtree(filepath)";
    "Fxn:callbacks_factory" -> "Fxn:tmpdir.listdir()";
    "Fxn:test_TensorBoard_convnet" -> "Fxn:np.random.seed(np.random.randint(1,";
    "Fxn:test_TensorBoard_convnet" -> "Fxn:str(tmpdir";
    "Fxn:test_TensorBoard_convnet" -> "Fxn:get_test_data(num_train=500,";
    "Fxn:test_TensorBoard_convnet" -> "Fxn:np_utils.to_categorical(y_train)";
    "Fxn:test_TensorBoard_convnet" -> "Fxn:np_utils.to_categorical(y_test)";
    "Fxn:test_TensorBoard_convnet" -> "Fxn:Sequential([";
    "Fxn:test_TensorBoard_convnet" -> "Fxn:Conv2D(filters=8,";
    "Fxn:test_TensorBoard_convnet" -> "Fxn:MaxPooling2D(pool_size=2),";
    "Fxn:test_TensorBoard_convnet" -> "Fxn:Conv2D(filters=4,";
    "Fxn:test_TensorBoard_convnet" -> "Fxn:kernel_size=(3,";
    "Fxn:test_TensorBoard_convnet" -> "Fxn:GlobalAveragePooling2D(),";
    "Fxn:test_TensorBoard_convnet" -> "Fxn:Dense(num_classes,";
    "Fxn:test_TensorBoard_convnet" -> "Fxn:model.compile(loss='categorical_crossentropy',";
    "Fxn:test_TensorBoard_convnet" -> "Fxn:callbacks.TensorBoard(log_dir=filepath,";
    "Fxn:test_TensorBoard_convnet" -> "Fxn:model.summary()";
    "Fxn:test_TensorBoard_convnet" -> "Fxn:model.fit(x_train,";
    "Fxn:test_TensorBoard_convnet" -> "Fxn:validation_data=(x_test,";
    "Fxn:test_TensorBoard_convnet" -> "Fxn:os.path.isdir(filepath)";
    "Fxn:test_TensorBoard_convnet" -> "Fxn:shutil.rmtree(filepath)";
    "Fxn:test_TensorBoard_convnet" -> "Fxn:tmpdir.listdir()";
    "Fxn:test_CallbackValData" -> "Fxn:np.random.seed(1337)";
    "Fxn:test_CallbackValData" -> "Fxn:get_test_data(num_train=train_samples,";
    "Fxn:test_CallbackValData" -> "Fxn:input_shape=(input_dim,),";
    "Fxn:test_CallbackValData" -> "Fxn:np_utils.to_categorical(y_test)";
    "Fxn:test_CallbackValData" -> "Fxn:np_utils.to_categorical(y_train)";
    "Fxn:test_CallbackValData" -> "Fxn:Sequential()";
    "Fxn:test_CallbackValData" -> "Fxn:model.add(Dense(num_hidden,";
    "Fxn:test_CallbackValData" -> "Fxn:model.add(Dense(num_classes,";
    "Fxn:test_CallbackValData" -> "Fxn:model.compile(loss='categorical_crossentropy',";
    "Fxn:test_CallbackValData" -> "Fxn:callbacks.LambdaCallback(on_train_end=lambda";
    "Fxn:test_CallbackValData" -> "Fxn:model.fit(X_train,";
    "Fxn:test_CallbackValData" -> "Fxn:validation_data=(X_test,";
    "Fxn:data_generator" -> "Fxn:len(X_train)";
    "Fxn:data_generator" -> "Fxn:len(X_test)";
    "Fxn:data_generator" -> "Fxn:callbacks.LambdaCallback(on_train_end=lambda";
    "Fxn:data_generator" -> "Fxn:model.fit_generator(data_generator(True),";
    "Fxn:data_generator" -> "Fxn:len(X_train),";
    "Fxn:data_generator" -> "Fxn:validation_data=(X_test,";
    "Fxn:data_generator" -> "Fxn:len(cbk.validation_data)";
    "Fxn:data_generator" -> "Fxn:len(cbk2.validation_data)";
    "Fxn:test_LambdaCallback" -> "Fxn:np.random.seed(1337)";
    "Fxn:test_LambdaCallback" -> "Fxn:get_test_data(num_train=train_samples,";
    "Fxn:test_LambdaCallback" -> "Fxn:input_shape=(input_dim,),";
    "Fxn:test_LambdaCallback" -> "Fxn:np_utils.to_categorical(y_test)";
    "Fxn:test_LambdaCallback" -> "Fxn:np_utils.to_categorical(y_train)";
    "Fxn:test_LambdaCallback" -> "Fxn:Sequential()";
    "Fxn:test_LambdaCallback" -> "Fxn:model.add(Dense(num_hidden,";
    "Fxn:test_LambdaCallback" -> "Fxn:model.add(Dense(num_classes,";
    "Fxn:test_LambdaCallback" -> "Fxn:model.compile(loss='categorical_crossentropy',";
    "Fxn:f" -> "Fxn:multiprocessing.Process(target=f)";
    "Fxn:f" -> "Fxn:p.start()";
    "Fxn:f" -> "Fxn:callbacks.LambdaCallback(on_train_end=lambda";
    "Fxn:f" -> "Fxn:p.terminate())";
    "Fxn:f" -> "Fxn:model.fit(X_train,";
    "Fxn:f" -> "Fxn:validation_data=(X_test,";
    "Fxn:f" -> "Fxn:p.join()";
    "Fxn:f" -> "Fxn:p.is_alive()";
    "Fxn:test_TensorBoard_with_ReduceLROnPlateau" -> "Fxn:np.random.seed(np.random.randint(1,";
    "Fxn:test_TensorBoard_with_ReduceLROnPlateau" -> "Fxn:str(tmpdir";
    "Fxn:test_TensorBoard_with_ReduceLROnPlateau" -> "Fxn:get_test_data(num_train=train_samples,";
    "Fxn:test_TensorBoard_with_ReduceLROnPlateau" -> "Fxn:input_shape=(input_dim,),";
    "Fxn:test_TensorBoard_with_ReduceLROnPlateau" -> "Fxn:np_utils.to_categorical(y_test)";
    "Fxn:test_TensorBoard_with_ReduceLROnPlateau" -> "Fxn:np_utils.to_categorical(y_train)";
    "Fxn:test_TensorBoard_with_ReduceLROnPlateau" -> "Fxn:Sequential()";
    "Fxn:test_TensorBoard_with_ReduceLROnPlateau" -> "Fxn:model.add(Dense(num_hidden,";
    "Fxn:test_TensorBoard_with_ReduceLROnPlateau" -> "Fxn:model.add(Dense(num_classes,";
    "Fxn:test_TensorBoard_with_ReduceLROnPlateau" -> "Fxn:model.compile(loss='binary_crossentropy',";
    "Fxn:test_TensorBoard_with_ReduceLROnPlateau" -> "Fxn:callbacks.ReduceLROnPlateau(";
    "Fxn:test_TensorBoard_with_ReduceLROnPlateau" -> "Fxn:callbacks.TensorBoard(";
    "Fxn:test_TensorBoard_with_ReduceLROnPlateau" -> "Fxn:model.fit(X_train,";
    "Fxn:test_TensorBoard_with_ReduceLROnPlateau" -> "Fxn:validation_data=(X_test,";
    "Fxn:test_TensorBoard_with_ReduceLROnPlateau" -> "Fxn:os.path.isdir(filepath)";
    "Fxn:test_TensorBoard_with_ReduceLROnPlateau" -> "Fxn:shutil.rmtree(filepath)";
    "Fxn:test_TensorBoard_with_ReduceLROnPlateau" -> "Fxn:tmpdir.listdir()";
    "Fxn:tests_RemoteMonitor" -> "Fxn:get_test_data(num_train=train_samples,";
    "Fxn:tests_RemoteMonitor" -> "Fxn:input_shape=(input_dim,),";
    "Fxn:tests_RemoteMonitor" -> "Fxn:np_utils.to_categorical(y_test)";
    "Fxn:tests_RemoteMonitor" -> "Fxn:np_utils.to_categorical(y_train)";
    "Fxn:tests_RemoteMonitor" -> "Fxn:Sequential()";
    "Fxn:tests_RemoteMonitor" -> "Fxn:model.add(Dense(num_hidden,";
    "Fxn:tests_RemoteMonitor" -> "Fxn:model.add(Dense(num_classes,";
    "Fxn:tests_RemoteMonitor" -> "Fxn:model.compile(loss='categorical_crossentropy',";
    "Fxn:tests_RemoteMonitor" -> "Fxn:[callbacks.RemoteMonitor()]";
    "Fxn:tests_RemoteMonitor" -> "Fxn:patch('requests.post'):";
    "Fxn:tests_RemoteMonitor" -> "Fxn:model.fit(X_train,";
    "Fxn:tests_RemoteMonitor" -> "Fxn:validation_data=(X_test,";
    "Fxn:tests_RemoteMonitor" -> "Fxn:pytest.main([__file__])";
    "/tests/keras/test_sequential_model.py" -> "Import:absolute_import";
    "/tests/keras/test_sequential_model.py" -> "Import:print_function";
    "/tests/keras/test_sequential_model.py" -> "Import:pytest";
    "/tests/keras/test_sequential_model.py" -> "Import:import";
    "/tests/keras/test_sequential_model.py" -> "Import:numpy";
    "/tests/keras/test_sequential_model.py" -> "Import:assert_allclose";
    "/tests/keras/test_sequential_model.py" -> "Import:backend";
    "/tests/keras/test_sequential_model.py" -> "Import:keras";
    "/tests/keras/test_sequential_model.py" -> "Import:Sequential";
    "/tests/keras/test_sequential_model.py" -> "Import:Dense,";
    "/tests/keras/test_sequential_model.py" -> "Import:np_utils";
    "/tests/keras/test_sequential_model.py" -> "Import:get_test_data,";
    "/tests/keras/test_sequential_model.py" -> "Import:model_from_json,";
    "/tests/keras/test_sequential_model.py" -> "Import:losses";
    "/tests/keras/test_sequential_model.py" -> "Import:_make_batches";
    "/tests/keras/test_sequential_model.py" -> "Fxn:in_tmpdir";
    "/tests/keras/test_sequential_model.py" -> "Fxn:test_sequential_pop";
    "/tests/keras/test_sequential_model.py" -> "Fxn:_get_test_data";
    "/tests/keras/test_sequential_model.py" -> "Fxn:test_sequential_fit_generator";
    "/tests/keras/test_sequential_model.py" -> "Fxn:data_generator";
    "/tests/keras/test_sequential_model.py" -> "Fxn:test_sequential";
    "/tests/keras/test_sequential_model.py" -> "Fxn:data_generator";
    "/tests/keras/test_sequential_model.py" -> "Fxn:test_nested_sequential";
    "/tests/keras/test_sequential_model.py" -> "Fxn:test_sequential_count_params";
    "/tests/keras/test_sequential_model.py" -> "Fxn:test_nested_sequential_trainability";
    "/tests/keras/test_sequential_model.py" -> "Fxn:test_rebuild_model";
    "/tests/keras/test_sequential_model.py" -> "Fxn:test_clone_functional_model";
    "/tests/keras/test_sequential_model.py" -> "Fxn:test_clone_sequential_model";
    "/tests/keras/test_sequential_model.py" -> "Fxn:test_sequential_update_disabling";
    "/tests/keras/applications/applications_test.py" -> "Import:pytest";
    "/tests/keras/applications/applications_test.py" -> "Import:random";
    "/tests/keras/applications/applications_test.py" -> "Import:multiprocessing";
    "/tests/keras/applications/applications_test.py" -> "Import:Process,";
    "/tests/keras/applications/applications_test.py" -> "Import:keras_test";
    "/tests/keras/applications/applications_test.py" -> "Import:layer_test";
    "/tests/keras/applications/applications_test.py" -> "Import:Sequential";
    "/tests/keras/applications/applications_test.py" -> "Import:applications";
    "/tests/keras/applications/applications_test.py" -> "Import:backend";
    "/tests/keras/applications/applications_test.py" -> "Fxn:_get_output_shape";
    "/tests/keras/applications/applications_test.py" -> "Fxn:target";
    "/tests/keras/applications/applications_test.py" -> "Fxn:_test_application_basic";
    "/tests/keras/applications/applications_test.py" -> "Fxn:_test_application_notop";
    "/tests/keras/applications/applications_test.py" -> "Fxn:_test_application_variable_input_channels";
    "/tests/keras/applications/applications_test.py" -> "Fxn:_test_app_pooling";
    "/tests/keras/applications/applications_test.py" -> "Fxn:test_resnet50";
    "/tests/keras/applications/applications_test.py" -> "Fxn:test_vgg";
    "/tests/keras/applications/applications_test.py" -> "Fxn:test_xception";
    "/tests/keras/applications/applications_test.py" -> "Fxn:test_inceptionv3";
    "/tests/keras/applications/applications_test.py" -> "Fxn:test_inceptionresnetv2";
    "/tests/keras/applications/applications_test.py" -> "Fxn:test_mobilenet";
    "/tests/keras/applications/applications_test.py" -> "Fxn:test_densenet";
    "/tests/keras/applications/applications_test.py" -> "Fxn:test_nasnet";
    "/tests/keras/applications/imagenet_utils_test.py" -> "Import:pytest";
    "/tests/keras/applications/imagenet_utils_test.py" -> "Import:numpy";
    "/tests/keras/applications/imagenet_utils_test.py" -> "Import:assert_allclose";
    "/tests/keras/applications/imagenet_utils_test.py" -> "Import:imagenet_utils";
    "/tests/keras/applications/imagenet_utils_test.py" -> "Import:Model";
    "/tests/keras/applications/imagenet_utils_test.py" -> "Import:Input,";
    "/tests/keras/applications/imagenet_utils_test.py" -> "Fxn:test_preprocess_input";
    "/tests/keras/applications/imagenet_utils_test.py" -> "Fxn:test_preprocess_input_symbolic";
    "/tests/keras/applications/imagenet_utils_test.py" -> "Fxn:test_decode_predictions";
    "/tests/keras/applications/imagenet_utils_test.py" -> "Fxn:test_obtain_input_shape";
    "/tests/keras/backend/backend_test.py" -> "Import:pytest";
    "/tests/keras/backend/backend_test.py" -> "Import:assert_allclose";
    "/tests/keras/backend/backend_test.py" -> "Import:numpy";
    "/tests/keras/backend/backend_test.py" -> "Import:scipy.signal";
    "/tests/keras/backend/backend_test.py" -> "Import:scipy.sparse";
    "/tests/keras/backend/backend_test.py" -> "Import:warnings";
    "/tests/keras/backend/backend_test.py" -> "Import:keras_test";
    "/tests/keras/backend/backend_test.py" -> "Import:backend";
    "/tests/keras/backend/backend_test.py" -> "Import:floatx,";
    "/tests/keras/backend/backend_test.py" -> "Import:convert_kernel";
    "/tests/keras/backend/backend_test.py" -> "Import:cntk_backend";
    "/tests/keras/backend/backend_test.py" -> "Import:CNTK";
    "/tests/keras/backend/backend_test.py" -> "Import:tensorflow_backend";
    "/tests/keras/backend/backend_test.py" -> "Import:TensorFlow";
    "/tests/keras/backend/backend_test.py" -> "Import:theano_backend";
    "/tests/keras/backend/backend_test.py" -> "Import:Theano";
    "/tests/keras/backend/backend_test.py" -> "Fxn:check_dtype";
    "/tests/keras/backend/backend_test.py" -> "Fxn:cntk_func_single_tensor";
    "/tests/keras/backend/backend_test.py" -> "Fxn:cntk_func_two_tensor";
    "/tests/keras/backend/backend_test.py" -> "Fxn:cntk_func_three_tensor";
    "/tests/keras/backend/backend_test.py" -> "Fxn:parse_shape_or_val";
    "/tests/keras/backend/backend_test.py" -> "Fxn:assert_list_pairwise";
    "/tests/keras/backend/backend_test.py" -> "Fxn:assert_list_with_ref";
    "/tests/keras/backend/backend_test.py" -> "Fxn:assert_list_keras_shape";
    "/tests/keras/backend/backend_test.py" -> "Fxn:check_single_tensor_operation";
    "/tests/keras/backend/backend_test.py" -> "Fxn:check_two_tensor_operation";
    "/tests/keras/backend/backend_test.py" -> "Fxn:check_composed_tensor_operations";
    "/tests/keras/backend/backend_test.py" -> "Fxn:normalize_ref_conv";
    "/tests/keras/backend/backend_test.py" -> "Fxn:wrapper";
    "/tests/keras/backend/backend_test.py" -> "Fxn:ref_conv";
    "/tests/keras/backend/backend_test.py" -> "Fxn:ref_depthwise_conv";
    "/tests/keras/backend/backend_test.py" -> "Fxn:ref_separable_conv";
    "/tests/keras/backend/backend_test.py" -> "Fxn:ref_pool";
    "/tests/keras/backend/backend_test.py" -> "Fxn:ref_rnn";
    "/tests/keras/backend/backend_test.py" -> "class:TestBackend(object):";
    "class:TestBackend(object):" -> "Fxn:test_is_keras_tensor";
    "class:TestBackend(object):" -> "Fxn:test_set_learning_phase";
    "class:TestBackend(object):" -> "Fxn:test_eye";
    "class:TestBackend(object):" -> "Fxn:test_linear_operations";
    "class:TestBackend(object):" -> "Fxn:test_random_variables";
    "class:TestBackend(object):" -> "Fxn:test_batch_dot_shape";
    "class:TestBackend(object):" -> "Fxn:test_shape_operations";
    "class:TestBackend(object):" -> "Fxn:test_none_shape_operations";
    "class:TestBackend(object):" -> "Fxn:test_repeat_elements";
    "class:TestBackend(object):" -> "Fxn:test_tile";
    "class:TestBackend(object):" -> "Fxn:test_gather";
    "class:TestBackend(object):" -> "Fxn:test_value_manipulation";
    "class:TestBackend(object):" -> "Fxn:test_elementwise_operations";
    "class:TestBackend(object):" -> "Fxn:test_gradient";
    "class:TestBackend(object):" -> "Fxn:test_stop_gradient";
    "class:TestBackend(object):" -> "Fxn:test_function";
    "class:TestBackend(object):" -> "Fxn:test_function_tf_fetches";
    "class:TestBackend(object):" -> "Fxn:test_function_tf_feed_dict";
    "class:TestBackend(object):" -> "Fxn:test_rnn";
    "class:TestBackend(object):" -> "Fxn:rnn_fn";
    "class:TestBackend(object):" -> "Fxn:test_rnn_no_states";
    "class:TestBackend(object):" -> "Fxn:rnn_fn";
    "class:TestBackend(object):" -> "Fxn:legacy_test_rnn";
    "class:TestBackend(object):" -> "Fxn:rnn_step_fn";
    "class:TestBackend(object):" -> "Fxn:step_function";
    "class:TestBackend(object):" -> "Fxn:legacy_test_rnn_no_states";
    "class:TestBackend(object):" -> "Fxn:rnn_step_fn";
    "class:TestBackend(object):" -> "Fxn:step_function";
    "class:TestBackend(object):" -> "Fxn:test_logsumexp";
    "class:TestBackend(object):" -> "Fxn:test_logsumexp_optim";
    "class:TestBackend(object):" -> "Fxn:test_switch";
    "class:TestBackend(object):" -> "Fxn:test_dropout";
    "class:TestBackend(object):" -> "Fxn:test_nn_operations";
    "class:TestBackend(object):" -> "Fxn:test_in_top_k";
    "class:TestBackend(object):" -> "Fxn:test_conv";
    "class:TestBackend(object):" -> "Fxn:test_depthwise_conv";
    "class:TestBackend(object):" -> "Fxn:test_pool";
    "class:TestBackend(object):" -> "Fxn:legacy_test_conv1d";
    "class:TestBackend(object):" -> "Fxn:legacy_test_conv2d";
    "class:TestBackend(object):" -> "Fxn:legacy_test_depthwise_conv_2d";
    "class:TestBackend(object):" -> "Fxn:legacy_test_conv3d";
    "class:TestBackend(object):" -> "Fxn:test_separable_conv2d";
    "class:TestBackend(object):" -> "Fxn:legacy_test_pool2d";
    "class:TestBackend(object):" -> "Fxn:legacy_test_pool3d";
    "class:TestBackend(object):" -> "Fxn:test_random_normal";
    "class:TestBackend(object):" -> "Fxn:test_random_uniform";
    "class:TestBackend(object):" -> "Fxn:test_random_binomial";
    "class:TestBackend(object):" -> "Fxn:test_conv_invalid_use";
    "class:TestBackend(object):" -> "Fxn:test_pooling_invalid_use";
    "class:TestBackend(object):" -> "Fxn:test_resize_images";
    "class:TestBackend(object):" -> "Fxn:test_resize_volumes";
    "class:TestBackend(object):" -> "Fxn:test_temporal_padding";
    "class:TestBackend(object):" -> "Fxn:test_spatial_2d_padding";
    "class:TestBackend(object):" -> "Fxn:test_spatial_3d_padding";
    "class:TestBackend(object):" -> "Fxn:test_bias_add";
    "class:TestBackend(object):" -> "Fxn:test_batchnorm";
    "class:TestBackend(object):" -> "Fxn:test_ctc";
    "class:TestBackend(object):" -> "Fxn:test_ctc_decode_greedy";
    "class:TestBackend(object):" -> "Fxn:test_ctc_decode_beam_search";
    "class:TestBackend(object):" -> "Fxn:test_one_hot";
    "class:TestBackend(object):" -> "Fxn:test_sparse_dot";
    "class:TestBackend(object):" -> "Fxn:test_sparse_concat";
    "class:TestBackend(object):" -> "Fxn:test_map";
    "class:TestBackend(object):" -> "Fxn:test_foldl";
    "class:TestBackend(object):" -> "Fxn:test_foldr";
    "class:TestBackend(object):" -> "Fxn:test_arange";
    "class:TestBackend(object):" -> "Fxn:test_in_train_phase";
    "class:TestBackend(object):" -> "Fxn:test_setfloatx_incorrect_values";
    "class:TestBackend(object):" -> "Fxn:test_setfloatx_correct_values";
    "class:TestBackend(object):" -> "Fxn:test_set_floatx";
    "class:TestBackend(object):" -> "Fxn:test_variable_support_bool_dtype";
    "Fxn:test_is_keras_tensor" -> "Fxn:np.array([1,";
    "Fxn:test_is_keras_tensor" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_is_keras_tensor" -> "Fxn:k.is_keras_tensor(np_var)";
    "Fxn:test_is_keras_tensor" -> "Fxn:k.variable(np_var)";
    "Fxn:test_is_keras_tensor" -> "Fxn:k.is_keras_tensor(keras_var)";
    "Fxn:test_is_keras_tensor" -> "Fxn:k.placeholder(shape=(2,";
    "Fxn:test_is_keras_tensor" -> "Fxn:k.is_keras_tensor(keras_placeholder)";
    "Fxn:test_set_learning_phase" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_set_learning_phase" -> "Fxn:k.set_learning_phase(2)";
    "Fxn:test_eye" -> "Fxn:[k.eval(k.eye(3))";
    "Fxn:test_eye" -> "Fxn:assert_list_pairwise(z_list)";
    "Fxn:test_linear_operations" -> "Fxn:check_two_tensor_operation('dot',";
    "Fxn:test_linear_operations" -> "Fxn:check_two_tensor_operation('dot',";
    "Fxn:test_linear_operations" -> "Fxn:check_two_tensor_operation('batch_dot',";
    "Fxn:test_linear_operations" -> "Fxn:axes=(2,";
    "Fxn:test_linear_operations" -> "Fxn:check_two_tensor_operation('batch_dot',";
    "Fxn:test_linear_operations" -> "Fxn:axes=(2,";
    "Fxn:test_linear_operations" -> "Fxn:check_two_tensor_operation('batch_dot',";
    "Fxn:test_linear_operations" -> "Fxn:axes=(1,";
    "Fxn:test_linear_operations" -> "Fxn:check_two_tensor_operation('batch_dot',";
    "Fxn:test_linear_operations" -> "Fxn:check_two_tensor_operation('batch_dot',";
    "Fxn:test_linear_operations" -> "Fxn:axes=(1,";
    "Fxn:test_linear_operations" -> "Fxn:check_single_tensor_operation('transpose',";
    "Fxn:test_linear_operations" -> "Fxn:check_single_tensor_operation('reverse',";
    "Fxn:test_linear_operations" -> "Fxn:check_single_tensor_operation('reverse',";
    "Fxn:test_linear_operations" -> "Fxn:axes=(1,";
    "Fxn:test_random_variables" -> "Fxn:check_single_tensor_operation('random_uniform_variable',";
    "Fxn:test_random_variables" -> "Fxn:check_single_tensor_operation('random_normal_variable',";
    "Fxn:test_random_variables" -> "Fxn:@pytest.mark.skipif(K.backend()";
    "Fxn:test_batch_dot_shape" -> "Fxn:K.ones(shape=(32,";
    "Fxn:test_batch_dot_shape" -> "Fxn:K.ones(shape=(32,";
    "Fxn:test_batch_dot_shape" -> "Fxn:K.batch_dot(x_batch,";
    "Fxn:test_batch_dot_shape" -> "Fxn:assert_allclose(K.eval(xy_batch_dot),";
    "Fxn:test_batch_dot_shape" -> "Fxn:np.ones((32,";
    "Fxn:test_batch_dot_shape" -> "Fxn:K.batch_dot(x_batch,";
    "Fxn:test_batch_dot_shape" -> "Fxn:assert_allclose(K.eval(xy_batch_dot),";
    "Fxn:test_batch_dot_shape" -> "Fxn:np.ones((20,";
    "Fxn:test_batch_dot_shape" -> "Fxn:K.ones(shape=(32,";
    "Fxn:test_batch_dot_shape" -> "Fxn:K.ones(shape=(20,";
    "Fxn:test_batch_dot_shape" -> "Fxn:K.batch_dot(x_batch,";
    "Fxn:test_batch_dot_shape" -> "Fxn:axes=(0,";
    "Fxn:test_batch_dot_shape" -> "Fxn:assert_allclose(K.eval(xy_batch_dot),";
    "Fxn:test_batch_dot_shape" -> "Fxn:np.ones((20,";
    "Fxn:test_batch_dot_shape" -> "Fxn:K.batch_dot(x_batch,";
    "Fxn:test_batch_dot_shape" -> "Fxn:axes=(1,";
    "Fxn:test_batch_dot_shape" -> "Fxn:assert_allclose(K.eval(xy_batch_dot),";
    "Fxn:test_batch_dot_shape" -> "Fxn:np.ones((32,";
    "Fxn:test_shape_operations" -> "Fxn:check_two_tensor_operation('concatenate',";
    "Fxn:test_shape_operations" -> "Fxn:check_single_tensor_operation('reshape',";
    "Fxn:test_shape_operations" -> "Fxn:shape=(8,";
    "Fxn:test_shape_operations" -> "Fxn:check_single_tensor_operation('permute_dimensions',";
    "Fxn:test_shape_operations" -> "Fxn:pattern=(2,";
    "Fxn:test_shape_operations" -> "Fxn:check_single_tensor_operation('repeat',";
    "Fxn:test_shape_operations" -> "Fxn:check_single_tensor_operation('flatten',";
    "Fxn:test_shape_operations" -> "Fxn:check_single_tensor_operation('batch_flatten',";
    "Fxn:test_shape_operations" -> "Fxn:check_single_tensor_operation('expand_dims',";
    "Fxn:test_shape_operations" -> "Fxn:check_single_tensor_operation('expand_dims',";
    "Fxn:test_shape_operations" -> "Fxn:check_single_tensor_operation('squeeze',";
    "Fxn:test_shape_operations" -> "Fxn:check_single_tensor_operation('squeeze',";
    "Fxn:test_shape_operations" -> "Fxn:check_composed_tensor_operations('reshape',";
    "Fxn:test_none_shape_operations" -> "Fxn:K.backend()";
    "Fxn:test_none_shape_operations" -> "Fxn:KTH.placeholder((3,";
    "Fxn:test_none_shape_operations" -> "Fxn:KTH.batch_flatten(x)";
    "Fxn:test_none_shape_operations" -> "Fxn:hasattr(y,";
    "Fxn:test_none_shape_operations" -> "Fxn:KTH.flatten(x)";
    "Fxn:test_none_shape_operations" -> "Fxn:hasattr(y,";
    "Fxn:test_repeat_elements" -> "Fxn:np.arange(2,";
    "Fxn:test_repeat_elements" -> "Fxn:np.arange(np.prod(shape)).reshape(shape)";
    "Fxn:test_repeat_elements" -> "Fxn:range(ndims):";
    "Fxn:test_repeat_elements" -> "Fxn:np.repeat(arr,";
    "Fxn:test_repeat_elements" -> "Fxn:check_single_tensor_operation('repeat_elements',";
    "Fxn:test_repeat_elements" -> "Fxn:K.backend()";
    "Fxn:test_repeat_elements" -> "Fxn:list(shape)";
    "Fxn:test_repeat_elements" -> "Fxn:K.placeholder(shape=shape)";
    "Fxn:test_repeat_elements" -> "Fxn:K.repeat_elements(x,";
    "Fxn:test_repeat_elements" -> "Fxn:tuple(shape)";
    "Fxn:test_repeat_elements" -> "Fxn:K.int_shape(y)";
    "Fxn:test_tile" -> "Fxn:np.arange(np.prod(shape)).reshape(shape)";
    "Fxn:test_tile" -> "Fxn:check_single_tensor_operation('tile',";
    "Fxn:test_tile" -> "Fxn:check_single_tensor_operation('tile',";
    "Fxn:test_tile" -> "Fxn:K.backend()";
    "Fxn:test_tile" -> "Fxn:K.placeholder(shape=(None,";
    "Fxn:test_tile" -> "Fxn:K.tile(x,";
    "Fxn:test_tile" -> "Fxn:K.tile(x,";
    "Fxn:test_gather" -> "Fxn:np.arange(np.prod(shape)).reshape(shape)";
    "Fxn:test_gather" -> "Fxn:[k.eval(k.gather(k.variable(ref),";
    "Fxn:test_gather" -> "Fxn:k.variable(inds,";
    "Fxn:test_gather" -> "Fxn:assert_list_pairwise(z_list)";
    "Fxn:test_gather" -> "Fxn:assert_list_keras_shape(z_list)";
    "Fxn:test_gather" -> "Fxn:K.backend()";
    "Fxn:test_gather" -> "Fxn:K.placeholder(shape=(None,";
    "Fxn:test_gather" -> "Fxn:K.placeholder(shape=(5,";
    "Fxn:test_gather" -> "Fxn:K.gather(x,";
    "Fxn:test_value_manipulation" -> "Fxn:np.random.random((4,";
    "Fxn:test_value_manipulation" -> "Fxn:[getattr(k,";
    "Fxn:test_value_manipulation" -> "Fxn:function_name)(k.variable(val))";
    "Fxn:test_value_manipulation" -> "Fxn:assert_list_pairwise(v_list)";
    "Fxn:test_value_manipulation" -> "Fxn:assert_list_pairwise(v_list,";
    "Fxn:test_value_manipulation" -> "Fxn:check_single_tensor_operation('print_tensor',";
    "Fxn:test_value_manipulation" -> "Fxn:check_single_tensor_operation('print_tensor',";
    "Fxn:test_value_manipulation" -> "Fxn:check_single_tensor_operation('print_tensor',";
    "Fxn:test_value_manipulation" -> "Fxn:check_single_tensor_operation('print_tensor',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('max',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('max',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('min',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('min',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('min',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('mean',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('mean',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('mean',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('mean',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('std',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('std',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('std',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('prod',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('prod',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('prod',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('cumsum',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('cumsum',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('cumprod',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('cumprod',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('any',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('any',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('all',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('all',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('argmax',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('argmax',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('argmin',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('argmin',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('square',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('abs',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('sqrt',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('exp',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('log',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('round',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('sign',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('pow',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_single_tensor_operation('clip',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_two_tensor_operation('equal',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_two_tensor_operation('not_equal',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_two_tensor_operation('greater',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_two_tensor_operation('greater_equal',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_two_tensor_operation('less',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_two_tensor_operation('less_equal',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_two_tensor_operation('maximum',";
    "Fxn:test_elementwise_operations" -> "Fxn:check_two_tensor_operation('minimum',";
    "Fxn:test_gradient" -> "Fxn:np.random.random((4,";
    "Fxn:test_gradient" -> "Fxn:[k.variable(val)";
    "Fxn:test_gradient" -> "Fxn:zip(x_list,";
    "Fxn:test_gradient" -> "Fxn:k.exp(x)";
    "Fxn:test_gradient" -> "Fxn:k.sum(exp)";
    "Fxn:test_gradient" -> "Fxn:k.stop_gradient(loss)";
    "Fxn:test_gradient" -> "Fxn:k.gradients(loss,";
    "Fxn:test_gradient" -> "Fxn:k.gradients(loss";
    "Fxn:test_gradient" -> "Fxn:z_list.append(k.eval(grad[0]))";
    "Fxn:test_gradient" -> "Fxn:zero_list.append(k.eval(zero_grad[0]))";
    "Fxn:test_gradient" -> "Fxn:assert_list_pairwise(z_list)";
    "Fxn:test_gradient" -> "Fxn:assert_list_pairwise(zero_list)";
    "Fxn:test_gradient" -> "Fxn:range(len(z_list)):";
    "Fxn:test_gradient" -> "Fxn:assert_allclose(zero_list[i],";
    "Fxn:test_stop_gradient" -> "Fxn:np.random.random((4,";
    "Fxn:test_stop_gradient" -> "Fxn:k.variable(val)";
    "Fxn:test_stop_gradient" -> "Fxn:k.square(a)";
    "Fxn:test_stop_gradient" -> "Fxn:k.stop_gradient([a,";
    "Fxn:test_stop_gradient" -> "Fxn:k.stop_gradient(b)";
    "Fxn:test_function" -> "Fxn:np.random.random((4,";
    "Fxn:test_function" -> "Fxn:np.random.random((4,";
    "Fxn:test_function" -> "Fxn:k.variable(val)";
    "Fxn:test_function" -> "Fxn:x_list.append(x)";
    "Fxn:test_function" -> "Fxn:k.placeholder(ndim=2)";
    "Fxn:test_function" -> "Fxn:k.square(x)";
    "Fxn:test_function" -> "Fxn:k.function([y],";
    "Fxn:test_function" -> "Fxn:updates=[(x,";
    "Fxn:test_function" -> "Fxn:f_list.append(f)";
    "Fxn:test_function" -> "Fxn:[f([input_val])[0]";
    "Fxn:test_function" -> "Fxn:assert_list_pairwise(function_outputs_list)";
    "Fxn:test_function" -> "Fxn:[k.get_value(x)";
    "Fxn:test_function" -> "Fxn:zip(x_list,";
    "Fxn:test_function" -> "Fxn:assert_list_pairwise(new_val_list)";
    "Fxn:test_function_tf_fetches" -> "Fxn:tf.Session().run()";
    "Fxn:test_function_tf_fetches" -> "Fxn:KTF.function()";
    "Fxn:test_function_tf_fetches" -> "Fxn:KTF.function().";
    "Fxn:test_function_tf_fetches" -> "Fxn:KTF.variable(0.)";
    "Fxn:test_function_tf_fetches" -> "Fxn:KTF.variable(0.)";
    "Fxn:test_function_tf_fetches" -> "Fxn:KTF.placeholder(shape=())";
    "Fxn:test_function_tf_fetches" -> "Fxn:KTF.placeholder(shape=())";
    "Fxn:test_function_tf_fetches" -> "Fxn:KTF.function(inputs=[x_placeholder,";
    "Fxn:test_function_tf_fetches" -> "Fxn:updates=[(x,";
    "Fxn:test_function_tf_fetches" -> "Fxn:fetches=[KTF.update(y,";
    "Fxn:test_function_tf_fetches" -> "Fxn:f([10.,";
    "Fxn:test_function_tf_fetches" -> "Fxn:KTF.get_session().run(fetches=[x,";
    "Fxn:test_function_tf_feed_dict" -> "Fxn:`tf.Session().run()`";
    "Fxn:test_function_tf_feed_dict" -> "Fxn:KTF.variable(0.)";
    "Fxn:test_function_tf_feed_dict" -> "Fxn:KTF.variable(0.)";
    "Fxn:test_function_tf_feed_dict" -> "Fxn:KTF.placeholder(shape=())";
    "Fxn:test_function_tf_feed_dict" -> "Fxn:KTF.placeholder(shape=())";
    "Fxn:test_function_tf_feed_dict" -> "Fxn:KTF.function(inputs=[x_placeholder],";
    "Fxn:test_function_tf_feed_dict" -> "Fxn:updates=[(x,";
    "Fxn:test_function_tf_feed_dict" -> "Fxn:fetches=[KTF.update(y,";
    "Fxn:test_function_tf_feed_dict" -> "Fxn:f([10.])";
    "Fxn:test_function_tf_feed_dict" -> "Fxn:KTF.get_session().run(fetches=[x,";
    "Fxn:test_function_tf_feed_dict" -> "Fxn:K.function()";
    "Fxn:test_function_tf_feed_dict" -> "Fxn:f([20.])";
    "Fxn:test_function_tf_feed_dict" -> "Fxn:KTF.get_session().run(fetches=[x,";
    "Fxn:test_rnn" -> "Fxn:parse_shape_or_val((num_samples,";
    "Fxn:test_rnn" -> "Fxn:parse_shape_or_val((num_samples,";
    "Fxn:test_rnn" -> "Fxn:parse_shape_or_val((input_dim,";
    "Fxn:test_rnn" -> "Fxn:parse_shape_or_val((output_dim,";
    "Fxn:test_rnn" -> "Fxn:np.random.randint(2,";
    "Fxn:test_rnn" -> "Fxn:size=(num_samples,";
    "Fxn:test_rnn" -> "Fxn:K.variable(x)";
    "Fxn:test_rnn" -> "Fxn:[K.variable(h0)]";
    "Fxn:test_rnn" -> "Fxn:K.variable(wi)";
    "Fxn:test_rnn" -> "Fxn:K.variable(wh)";
    "Fxn:test_rnn" -> "Fxn:K.variable(mask)";
    "Fxn:rnn_fn" -> "Fxn:len(h_k)";
    "Fxn:rnn_fn" -> "Fxn:K.dot(x_k,";
    "Fxn:rnn_fn" -> "Fxn:K.dot(h_k[0],";
    "Fxn:rnn_fn" -> "Fxn:enumerate(kwargs_list):";
    "Fxn:rnn_fn" -> "Fxn:ref_rnn(x,";
    "Fxn:rnn_fn" -> "Fxn:K.rnn(rnn_fn,";
    "Fxn:rnn_fn" -> "Fxn:len(h2)";
    "Fxn:rnn_fn" -> "Fxn:K.eval(last_y2)";
    "Fxn:rnn_fn" -> "Fxn:K.eval(y2)";
    "Fxn:rnn_fn" -> "Fxn:K.eval(h2[0])";
    "Fxn:rnn_fn" -> "Fxn:np.expand_dims(mask[:,";
    "Fxn:rnn_fn" -> "Fxn:np.expand_dims(mask[:,";
    "Fxn:rnn_fn" -> "Fxn:np.expand_dims(mask,";
    "Fxn:rnn_fn" -> "Fxn:np.expand_dims(mask,";
    "Fxn:rnn_fn" -> "Fxn:np.expand_dims(mask[:,";
    "Fxn:rnn_fn" -> "Fxn:np.expand_dims(mask[:,";
    "Fxn:rnn_fn" -> "Fxn:last_output_list.append(last_y2)";
    "Fxn:rnn_fn" -> "Fxn:outputs_list.append(y2)";
    "Fxn:rnn_fn" -> "Fxn:state_list.append(h2)";
    "Fxn:rnn_fn" -> "Fxn:assert_allclose(last_y1,";
    "Fxn:rnn_fn" -> "Fxn:assert_allclose(y1,";
    "Fxn:rnn_fn" -> "Fxn:assert_allclose(h1,";
    "Fxn:rnn_fn" -> "Fxn:assert_allclose(last_output_list[i";
    "Fxn:rnn_fn" -> "Fxn:assert_allclose(outputs_list[i";
    "Fxn:rnn_fn" -> "Fxn:assert_allclose(state_list[i";
    "Fxn:test_rnn_no_states" -> "Fxn:parse_shape_or_val((32,";
    "Fxn:test_rnn_no_states" -> "Fxn:parse_shape_or_val((input_dim,";
    "Fxn:test_rnn_no_states" -> "Fxn:K.variable(x)";
    "Fxn:test_rnn_no_states" -> "Fxn:K.variable(wi)";
    "Fxn:rnn_fn" -> "Fxn:len(h_k)";
    "Fxn:rnn_fn" -> "Fxn:K.dot(x_k,";
    "Fxn:rnn_fn" -> "Fxn:ref_rnn(x,";
    "Fxn:rnn_fn" -> "Fxn:K.rnn(rnn_fn,";
    "Fxn:rnn_fn" -> "Fxn:len(h2)";
    "Fxn:rnn_fn" -> "Fxn:K.eval(last_y2)";
    "Fxn:rnn_fn" -> "Fxn:K.eval(y2)";
    "Fxn:rnn_fn" -> "Fxn:assert_allclose(last_y1,";
    "Fxn:rnn_fn" -> "Fxn:assert_allclose(y1,";
    "Fxn:legacy_test_rnn" -> "Fxn:np.random.random((num_samples,";
    "Fxn:legacy_test_rnn" -> "Fxn:input_dim)).astype(np.float32)";
    "Fxn:legacy_test_rnn" -> "Fxn:np.random.random((num_samples,";
    "Fxn:legacy_test_rnn" -> "Fxn:output_dim)).astype(np.float32)";
    "Fxn:legacy_test_rnn" -> "Fxn:np.random.random((input_dim,";
    "Fxn:legacy_test_rnn" -> "Fxn:output_dim)).astype(np.float32)";
    "Fxn:legacy_test_rnn" -> "Fxn:np.random.random((output_dim,";
    "Fxn:legacy_test_rnn" -> "Fxn:output_dim)).astype(np.float32)";
    "Fxn:legacy_test_rnn" -> "Fxn:np.random.randint(2,";
    "Fxn:legacy_test_rnn" -> "Fxn:size=(num_samples,";
    "Fxn:rnn_step_fn" -> "Fxn:k.variable(W_i_val)";
    "Fxn:rnn_step_fn" -> "Fxn:k.variable(W_o_val)";
    "Fxn:step_function" -> "Fxn:len(states)";
    "Fxn:step_function" -> "Fxn:k.dot(x,";
    "Fxn:step_function" -> "Fxn:k.dot(prev_output,";
    "Fxn:step_function" -> "Fxn:rnn_step_fn(k)";
    "Fxn:step_function" -> "Fxn:k.variable(input_val)";
    "Fxn:step_function" -> "Fxn:[k.variable(init_state_val)]";
    "Fxn:step_function" -> "Fxn:k.variable(np_mask)";
    "Fxn:step_function" -> "Fxn:enumerate(kwargs_list):";
    "Fxn:step_function" -> "Fxn:k.rnn(rnn_fn,";
    "Fxn:step_function" -> "Fxn:last_output_list[i].append(k.eval(last_output))";
    "Fxn:step_function" -> "Fxn:outputs_list[i].append(k.eval(outputs))";
    "Fxn:step_function" -> "Fxn:len(new_states)";
    "Fxn:step_function" -> "Fxn:state_list[i].append(k.eval(new_states[0]))";
    "Fxn:step_function" -> "Fxn:assert_list_pairwise(last_output_list[0],";
    "Fxn:step_function" -> "Fxn:assert_list_pairwise(outputs_list[0],";
    "Fxn:step_function" -> "Fxn:assert_list_pairwise(state_list[0],";
    "Fxn:step_function" -> "Fxn:assert_list_pairwise(last_output_list[2],";
    "Fxn:step_function" -> "Fxn:assert_list_pairwise(outputs_list[2],";
    "Fxn:step_function" -> "Fxn:assert_list_pairwise(state_list[2],";
    "Fxn:step_function" -> "Fxn:zip(last_output_list[0],";
    "Fxn:step_function" -> "Fxn:assert_allclose(l,";
    "Fxn:step_function" -> "Fxn:zip(outputs_list[0],";
    "Fxn:step_function" -> "Fxn:assert_allclose(o,";
    "Fxn:step_function" -> "Fxn:zip(state_list[0],";
    "Fxn:step_function" -> "Fxn:assert_allclose(s,";
    "Fxn:step_function" -> "Fxn:zip(last_output_list[2],";
    "Fxn:step_function" -> "Fxn:assert_allclose(b_l,";
    "Fxn:step_function" -> "Fxn:zip(outputs_list[2],";
    "Fxn:step_function" -> "Fxn:assert_allclose(b_o,";
    "Fxn:step_function" -> "Fxn:zip(state_list[2],";
    "Fxn:step_function" -> "Fxn:assert_allclose(b_s,";
    "Fxn:step_function" -> "Fxn:zip(last_output_list[4],";
    "Fxn:step_function" -> "Fxn:np.expand_dims(np_mask[:,";
    "Fxn:step_function" -> "Fxn:np.expand_dims(np_mask[:,";
    "Fxn:step_function" -> "Fxn:assert_allclose(m_l,";
    "Fxn:step_function" -> "Fxn:zip(outputs_list[4],";
    "Fxn:step_function" -> "Fxn:np.expand_dims(np_mask,";
    "Fxn:step_function" -> "Fxn:np.expand_dims(np_mask,";
    "Fxn:step_function" -> "Fxn:assert_allclose(m_o,";
    "Fxn:step_function" -> "Fxn:zip(state_list[4],";
    "Fxn:step_function" -> "Fxn:assert_allclose(m_s,";
    "Fxn:legacy_test_rnn_no_states" -> "Fxn:np.random.random((32,";
    "Fxn:legacy_test_rnn_no_states" -> "Fxn:np.random.random((input_dim,";
    "Fxn:rnn_step_fn" -> "Fxn:k.variable(W_i_val)";
    "Fxn:step_function" -> "Fxn:len(states)";
    "Fxn:step_function" -> "Fxn:k.dot(x,";
    "Fxn:step_function" -> "Fxn:rnn_step_fn(k)";
    "Fxn:step_function" -> "Fxn:k.variable(input_val)";
    "Fxn:step_function" -> "Fxn:k.rnn(rnn_fn,";
    "Fxn:step_function" -> "Fxn:last_output_list.append(k.eval(last_output))";
    "Fxn:step_function" -> "Fxn:outputs_list.append(k.eval(outputs))";
    "Fxn:step_function" -> "Fxn:len(new_states)";
    "Fxn:step_function" -> "Fxn:assert_list_pairwise(last_output_list,";
    "Fxn:step_function" -> "Fxn:assert_list_pairwise(outputs_list,";
    "Fxn:step_function" -> "Fxn:@pytest.mark.parametrize('x_np,axis,keepdims',";
    "Fxn:test_logsumexp" -> "Fxn:k.variable(x_np)";
    "Fxn:test_logsumexp" -> "Fxn:assert_allclose(k.eval(k.logsumexp(x,";
    "Fxn:test_logsumexp" -> "Fxn:np.log(np.sum(np.exp(x_np),";
    "Fxn:test_logsumexp_optim" -> "Fxn:np.array([1e+4,";
    "Fxn:test_logsumexp_optim" -> "Fxn:assert_allclose(k.eval(k.logsumexp(k.variable(x_np),";
    "Fxn:test_switch" -> "Fxn:np.random.random()";
    "Fxn:test_switch" -> "Fxn:k.variable(val)";
    "Fxn:test_switch" -> "Fxn:k.switch(k.greater_equal(x,";
    "Fxn:test_switch" -> "Fxn:z_list.append(k.eval(x))";
    "Fxn:test_switch" -> "Fxn:assert_list_pairwise(z_list)";
    "Fxn:test_switch" -> "Fxn:shapes.append([(4,";
    "Fxn:test_switch" -> "Fxn:shapes.append([(4,";
    "Fxn:test_switch" -> "Fxn:shapes.append([(4,),";
    "Fxn:test_switch" -> "Fxn:list(map(np.random.random,";
    "Fxn:test_switch" -> "Fxn:map(k.variable,";
    "Fxn:test_switch" -> "Fxn:k.greater_equal(x,";
    "Fxn:test_switch" -> "Fxn:z_list.append(k.eval(k.switch(cond,";
    "Fxn:test_switch" -> "Fxn:assert_list_pairwise(z_list)";
    "Fxn:test_dropout" -> "Fxn:np.random.random((100,";
    "Fxn:test_dropout" -> "Fxn:[k.eval(k.dropout(k.variable(val),";
    "Fxn:test_dropout" -> "Fxn:assert_list_pairwise(z_list,";
    "Fxn:test_dropout" -> "Fxn:range(len(z_list)";
    "Fxn:test_dropout" -> "Fxn:np.abs(z_list[i].mean()";
    "Fxn:test_dropout" -> "Fxn:1].mean())";
    "Fxn:test_dropout" -> "Fxn:[k.eval(k.dropout(k.variable(val),";
    "Fxn:test_dropout" -> "Fxn:noise_shape=list(val.shape)))";
    "Fxn:test_dropout" -> "Fxn:assert_list_pairwise(z_list,";
    "Fxn:test_dropout" -> "Fxn:range(len(z_list)";
    "Fxn:test_dropout" -> "Fxn:np.abs(z_list[i].mean()";
    "Fxn:test_dropout" -> "Fxn:1].mean())";
    "Fxn:test_dropout" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_dropout" -> "Fxn:k.dropout(k.variable(val),";
    "Fxn:test_nn_operations" -> "Fxn:check_single_tensor_operation('relu',";
    "Fxn:test_nn_operations" -> "Fxn:check_single_tensor_operation('softplus',";
    "Fxn:test_nn_operations" -> "Fxn:check_single_tensor_operation('elu',";
    "Fxn:test_nn_operations" -> "Fxn:check_single_tensor_operation('sigmoid',";
    "Fxn:test_nn_operations" -> "Fxn:check_single_tensor_operation('hard_sigmoid',";
    "Fxn:test_nn_operations" -> "Fxn:check_single_tensor_operation('tanh',";
    "Fxn:test_nn_operations" -> "Fxn:check_single_tensor_operation('softmax',";
    "Fxn:test_nn_operations" -> "Fxn:check_single_tensor_operation('softmax',";
    "Fxn:test_nn_operations" -> "Fxn:check_two_tensor_operation('binary_crossentropy',";
    "Fxn:test_nn_operations" -> "Fxn:check_two_tensor_operation('categorical_crossentropy',";
    "Fxn:test_nn_operations" -> "Fxn:np.asarray([[0.26157712,";
    "Fxn:test_nn_operations" -> "Fxn:np.asarray([[0.46221867,";
    "Fxn:test_nn_operations" -> "Fxn:check_two_tensor_operation('categorical_crossentropy',";
    "Fxn:test_nn_operations" -> "Fxn:check_two_tensor_operation('binary_crossentropy',";
    "Fxn:test_nn_operations" -> "Fxn:check_two_tensor_operation('categorical_crossentropy',";
    "Fxn:test_nn_operations" -> "Fxn:check_single_tensor_operation('l2_normalize',";
    "Fxn:test_nn_operations" -> "Fxn:check_single_tensor_operation('l2_normalize',";
    "Fxn:test_in_top_k" -> "Fxn:np.random.random((batch_size,";
    "Fxn:test_in_top_k" -> "Fxn:num_classes)).astype('float32')";
    "Fxn:test_in_top_k" -> "Fxn:np.random.randint(num_classes,";
    "Fxn:test_in_top_k" -> "Fxn:range(num_classes";
    "Fxn:test_in_top_k" -> "Fxn:[b.eval(b.in_top_k(b.variable(predictions,";
    "Fxn:test_in_top_k" -> "Fxn:b.variable(targets,";
    "Fxn:test_in_top_k" -> "Fxn:assert_list_pairwise(z_list)";
    "Fxn:test_in_top_k" -> "Fxn:range(batch_size):";
    "Fxn:test_in_top_k" -> "Fxn:np.random.choice(num_classes,";
    "Fxn:test_in_top_k" -> "Fxn:np.zeros(batch_size,";
    "Fxn:test_in_top_k" -> "Fxn:range(1,";
    "Fxn:test_in_top_k" -> "Fxn:[b.eval(b.in_top_k(b.variable(predictions,";
    "Fxn:test_in_top_k" -> "Fxn:b.variable(targets,";
    "Fxn:test_in_top_k" -> "Fxn:assert_list_pairwise(z_list)";
    "Fxn:test_in_top_k" -> "Fxn:@pytest.mark.parametrize('op,input_shape,kernel_shape,padding,data_format',";
    "Fxn:test_conv" -> "Fxn:K.backend()";
    "Fxn:test_conv" -> "Fxn:parse_shape_or_val(input_shape)";
    "Fxn:test_conv" -> "Fxn:parse_shape_or_val(kernel_shape)";
    "Fxn:test_conv" -> "Fxn:ref_conv(x,";
    "Fxn:test_conv" -> "Fxn:check_two_tensor_operation(";
    "Fxn:test_conv" -> "Fxn:assert_allclose(y1,";
    "Fxn:test_conv" -> "Fxn:@pytest.mark.parametrize('op,input_shape,kernel_shape,padding,data_format',";
    "Fxn:test_depthwise_conv" -> "Fxn:K.backend()";
    "Fxn:test_depthwise_conv" -> "Fxn:parse_shape_or_val(input_shape)";
    "Fxn:test_depthwise_conv" -> "Fxn:parse_shape_or_val(kernel_shape)";
    "Fxn:test_depthwise_conv" -> "Fxn:ref_depthwise_conv(x,";
    "Fxn:test_depthwise_conv" -> "Fxn:check_two_tensor_operation(";
    "Fxn:test_depthwise_conv" -> "Fxn:assert_allclose(y1,";
    "Fxn:test_depthwise_conv" -> "Fxn:@pytest.mark.parametrize('op,input_shape,pool_size,strides,padding,data_format,pool_mode',";
    "Fxn:test_pool" -> "Fxn:K.backend()";
    "Fxn:test_pool" -> "Fxn:parse_shape_or_val(input_shape)";
    "Fxn:test_pool" -> "Fxn:ref_pool(x,";
    "Fxn:test_pool" -> "Fxn:check_single_tensor_operation(";
    "Fxn:test_pool" -> "Fxn:assert_allclose(y1,";
    "Fxn:legacy_test_conv1d" -> "Fxn:check_two_tensor_operation('conv1d',";
    "Fxn:legacy_test_conv2d" -> "Fxn:check_two_tensor_operation('conv2d',";
    "Fxn:legacy_test_depthwise_conv_2d" -> "Fxn:check_two_tensor_operation('depthwise_conv2d',";
    "Fxn:legacy_test_conv3d" -> "Fxn:check_two_tensor_operation('conv3d',";
    "Fxn:legacy_test_conv3d" -> "Fxn:@pytest.mark.skipif(K.backend()";
    "Fxn:legacy_test_conv3d" -> "Fxn:@pytest.mark.parametrize('op,input_shape,kernel_shape,depth_multiplier,padding,data_format',";
    "Fxn:test_separable_conv2d" -> "Fxn:parse_shape_or_val(input_shape)";
    "Fxn:test_separable_conv2d" -> "Fxn:parse_shape_or_val(kernel_shape";
    "Fxn:test_separable_conv2d" -> "Fxn:parse_shape_or_val((1,";
    "Fxn:test_separable_conv2d" -> "Fxn:ref_separable_conv(x,";
    "Fxn:test_separable_conv2d" -> "Fxn:K.backend()";
    "Fxn:test_separable_conv2d" -> "Fxn:cntk_func_three_tensor(";
    "Fxn:test_separable_conv2d" -> "Fxn:data_format=data_format)([x])[0]";
    "Fxn:test_separable_conv2d" -> "Fxn:K.eval(getattr(K,";
    "Fxn:test_separable_conv2d" -> "Fxn:op)(";
    "Fxn:test_separable_conv2d" -> "Fxn:K.variable(x),";
    "Fxn:test_separable_conv2d" -> "Fxn:K.variable(depthwise),";
    "Fxn:test_separable_conv2d" -> "Fxn:K.variable(pointwise),";
    "Fxn:test_separable_conv2d" -> "Fxn:assert_allclose(y1,";
    "Fxn:legacy_test_pool2d" -> "Fxn:check_single_tensor_operation('pool2d',";
    "Fxn:legacy_test_pool2d" -> "Fxn:pool_size=(2,";
    "Fxn:legacy_test_pool2d" -> "Fxn:strides=(1,";
    "Fxn:legacy_test_pool2d" -> "Fxn:check_single_tensor_operation('pool2d',";
    "Fxn:legacy_test_pool2d" -> "Fxn:pool_size=(2,";
    "Fxn:legacy_test_pool2d" -> "Fxn:strides=(1,";
    "Fxn:legacy_test_pool2d" -> "Fxn:check_single_tensor_operation('pool2d',";
    "Fxn:legacy_test_pool2d" -> "Fxn:pool_size=(2,";
    "Fxn:legacy_test_pool2d" -> "Fxn:strides=(1,";
    "Fxn:legacy_test_pool2d" -> "Fxn:check_single_tensor_operation('pool2d',";
    "Fxn:legacy_test_pool2d" -> "Fxn:pool_size=(2,";
    "Fxn:legacy_test_pool2d" -> "Fxn:strides=(1,";
    "Fxn:legacy_test_pool2d" -> "Fxn:check_single_tensor_operation('pool2d',";
    "Fxn:legacy_test_pool2d" -> "Fxn:pool_size=(3,";
    "Fxn:legacy_test_pool2d" -> "Fxn:strides=(1,";
    "Fxn:legacy_test_pool3d" -> "Fxn:check_single_tensor_operation('pool3d',";
    "Fxn:legacy_test_pool3d" -> "Fxn:pool_size=(2,";
    "Fxn:legacy_test_pool3d" -> "Fxn:strides=(1,";
    "Fxn:legacy_test_pool3d" -> "Fxn:check_single_tensor_operation('pool3d',";
    "Fxn:legacy_test_pool3d" -> "Fxn:pool_size=(2,";
    "Fxn:legacy_test_pool3d" -> "Fxn:strides=(1,";
    "Fxn:legacy_test_pool3d" -> "Fxn:check_single_tensor_operation('pool3d',";
    "Fxn:legacy_test_pool3d" -> "Fxn:pool_size=(2,";
    "Fxn:legacy_test_pool3d" -> "Fxn:strides=(1,";
    "Fxn:legacy_test_pool3d" -> "Fxn:check_single_tensor_operation('pool3d',";
    "Fxn:legacy_test_pool3d" -> "Fxn:pool_size=(2,";
    "Fxn:legacy_test_pool3d" -> "Fxn:strides=(1,";
    "Fxn:legacy_test_pool3d" -> "Fxn:check_single_tensor_operation('pool3d',";
    "Fxn:legacy_test_pool3d" -> "Fxn:pool_size=(3,";
    "Fxn:legacy_test_pool3d" -> "Fxn:strides=(1,";
    "Fxn:test_random_normal" -> "Fxn:k.eval(k.random_normal((300,";
    "Fxn:test_random_normal" -> "Fxn:np.abs(np.mean(rand)";
    "Fxn:test_random_normal" -> "Fxn:np.abs(np.std(rand)";
    "Fxn:test_random_uniform" -> "Fxn:k.eval(k.random_uniform((200,";
    "Fxn:test_random_uniform" -> "Fxn:np.abs(np.mean(rand))";
    "Fxn:test_random_uniform" -> "Fxn:np.max(rand)";
    "Fxn:test_random_uniform" -> "Fxn:np.min(rand)";
    "Fxn:test_random_binomial" -> "Fxn:k.eval(k.random_binomial((200,";
    "Fxn:test_random_binomial" -> "Fxn:np.abs(np.mean(rand)";
    "Fxn:test_random_binomial" -> "Fxn:np.max(rand)";
    "Fxn:test_random_binomial" -> "Fxn:np.min(rand)";
    "Fxn:test_conv_invalid_use" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_conv_invalid_use" -> "Fxn:k.conv1d(k.variable(np.ones((4,";
    "Fxn:test_conv_invalid_use" -> "Fxn:k.variable(np.ones((3,";
    "Fxn:test_conv_invalid_use" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_conv_invalid_use" -> "Fxn:k.conv2d(k.variable(np.ones((2,";
    "Fxn:test_conv_invalid_use" -> "Fxn:k.variable(np.ones((2,";
    "Fxn:test_conv_invalid_use" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_conv_invalid_use" -> "Fxn:k.conv3d(k.variable(np.ones((2,";
    "Fxn:test_conv_invalid_use" -> "Fxn:k.variable(np.ones((2,";
    "Fxn:test_conv_invalid_use" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_conv_invalid_use" -> "Fxn:k.separable_conv2d(k.variable(np.ones((2,";
    "Fxn:test_conv_invalid_use" -> "Fxn:k.variable(np.ones((2,";
    "Fxn:test_conv_invalid_use" -> "Fxn:k.variable(np.ones((1,";
    "Fxn:test_conv_invalid_use" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_conv_invalid_use" -> "Fxn:k.depthwise_conv2d(k.variable(np.ones((2,";
    "Fxn:test_conv_invalid_use" -> "Fxn:k.variable(np.ones((2,";
    "Fxn:test_pooling_invalid_use" -> "Fxn:zip([(5,";
    "Fxn:test_pooling_invalid_use" -> "Fxn:[(2,";
    "Fxn:test_pooling_invalid_use" -> "Fxn:k.variable(np.random.random(input_shape))";
    "Fxn:test_pooling_invalid_use" -> "Fxn:len(pool_size)";
    "Fxn:test_pooling_invalid_use" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_pooling_invalid_use" -> "Fxn:k.pool2d(x,";
    "Fxn:test_pooling_invalid_use" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_pooling_invalid_use" -> "Fxn:k.pool2d(x,";
    "Fxn:test_pooling_invalid_use" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_pooling_invalid_use" -> "Fxn:k.pool2d(x,";
    "Fxn:test_pooling_invalid_use" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_pooling_invalid_use" -> "Fxn:k.pool3d(x,";
    "Fxn:test_pooling_invalid_use" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_pooling_invalid_use" -> "Fxn:k.pool3d(x,";
    "Fxn:test_pooling_invalid_use" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_pooling_invalid_use" -> "Fxn:k.pool3d(x,";
    "Fxn:test_resize_images" -> "Fxn:check_single_tensor_operation('resize_images',";
    "Fxn:test_resize_images" -> "Fxn:np.random.random(x_shape)";
    "Fxn:test_resize_images" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_resize_images" -> "Fxn:k.resize_images(k.variable(xval),";
    "Fxn:test_resize_volumes" -> "Fxn:check_single_tensor_operation('resize_volumes',";
    "Fxn:test_resize_volumes" -> "Fxn:np.random.random(x_shape)";
    "Fxn:test_resize_volumes" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_resize_volumes" -> "Fxn:k.resize_volumes(k.variable(xval),";
    "Fxn:test_temporal_padding" -> "Fxn:check_single_tensor_operation('temporal_padding',";
    "Fxn:test_temporal_padding" -> "Fxn:check_single_tensor_operation('temporal_padding',";
    "Fxn:test_temporal_padding" -> "Fxn:padding=(1,";
    "Fxn:test_spatial_2d_padding" -> "Fxn:check_single_tensor_operation('spatial_2d_padding',";
    "Fxn:test_spatial_2d_padding" -> "Fxn:np.random.random(x_shape)";
    "Fxn:test_spatial_2d_padding" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_spatial_2d_padding" -> "Fxn:k.spatial_2d_padding(k.variable(xval),";
    "Fxn:test_spatial_3d_padding" -> "Fxn:check_single_tensor_operation('spatial_3d_padding',";
    "Fxn:test_spatial_3d_padding" -> "Fxn:np.random.random(x_shape)";
    "Fxn:test_spatial_3d_padding" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_spatial_3d_padding" -> "Fxn:k.spatial_3d_padding(k.variable(xval),";
    "Fxn:test_bias_add" -> "Fxn:[(),";
    "Fxn:test_bias_add" -> "Fxn:check_two_tensor_operation('bias_add',";
    "Fxn:test_bias_add" -> "Fxn:check_two_tensor_operation('bias_add',";
    "Fxn:test_bias_add" -> "Fxn:k.variable(np.random.random(x_shape))";
    "Fxn:test_bias_add" -> "Fxn:k.variable(np.random.random(bias_shape))";
    "Fxn:test_bias_add" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_bias_add" -> "Fxn:k.bias_add(x,";
    "Fxn:test_batchnorm" -> "Fxn:np.random.random(x_shape).astype(np.float32)";
    "Fxn:test_batchnorm" -> "Fxn:KTH.variable(x_val)";
    "Fxn:test_batchnorm" -> "Fxn:KTF.variable(x_val)";
    "Fxn:test_batchnorm" -> "Fxn:KC.placeholder(x_shape)";
    "Fxn:test_batchnorm" -> "Fxn:KTH.normalize_batch_in_training(xth,";
    "Fxn:test_batchnorm" -> "Fxn:KTF.normalize_batch_in_training(xtf,";
    "Fxn:test_batchnorm" -> "Fxn:KC.normalize_batch_in_training(xc,";
    "Fxn:test_batchnorm" -> "Fxn:KTH.eval(zth)";
    "Fxn:test_batchnorm" -> "Fxn:KTF.eval(ztf)";
    "Fxn:test_batchnorm" -> "Fxn:KC.function([xc],";
    "Fxn:test_batchnorm" -> "Fxn:[zc])([x_val])[0]";
    "Fxn:test_batchnorm" -> "Fxn:@pytest.mark.skipif(K.backend()";
    "Fxn:test_ctc" -> "Fxn:K.backend()";
    "Fxn:test_ctc" -> "Fxn:np.expand_dims(np.asarray([5,";
    "Fxn:test_ctc" -> "Fxn:np.expand_dims(np.asarray([5,";
    "Fxn:test_ctc" -> "Fxn:np.asarray([[0,";
    "Fxn:test_ctc" -> "Fxn:np.asarray(";
    "Fxn:test_ctc" -> "Fxn:K.variable(labels,";
    "Fxn:test_ctc" -> "Fxn:K.variable(inputs,";
    "Fxn:test_ctc" -> "Fxn:K.variable(input_lens,";
    "Fxn:test_ctc" -> "Fxn:K.variable(label_lens,";
    "Fxn:test_ctc" -> "Fxn:K.eval(K.ctc_batch_cost(k_labels,";
    "Fxn:test_ctc" -> "Fxn:assert_allclose(res[0,";
    "Fxn:test_ctc" -> "Fxn:K.backend()";
    "Fxn:test_ctc_decode_greedy" -> "Fxn:np.asarray(";
    "Fxn:test_ctc_decode_greedy" -> "Fxn:np.log(input_prob_matrix_0)";
    "Fxn:test_ctc_decode_greedy" -> "Fxn:np.asarray(";
    "Fxn:test_ctc_decode_greedy" -> "Fxn:[np.vstack([input_prob_matrix_0[t,";
    "Fxn:test_ctc_decode_greedy" -> "Fxn:range(max_time_steps)]";
    "Fxn:test_ctc_decode_greedy" -> "Fxn:KTF.variable(np.asarray(inputs).transpose((1,";
    "Fxn:test_ctc_decode_greedy" -> "Fxn:KTF.variable(np.array([seq_len_0,";
    "Fxn:test_ctc_decode_greedy" -> "Fxn:np.array([";
    "Fxn:test_ctc_decode_greedy" -> "Fxn:np.sum(-np.log([1.0,";
    "Fxn:test_ctc_decode_greedy" -> "Fxn:np.sum(-np.log([0.9,";
    "Fxn:test_ctc_decode_greedy" -> "Fxn:np.array([[0,";
    "Fxn:test_ctc_decode_greedy" -> "Fxn:KTF.ctc_decode(inputs,";
    "Fxn:test_ctc_decode_greedy" -> "Fxn:len(decode_pred_tf)";
    "Fxn:test_ctc_decode_greedy" -> "Fxn:KTF.eval(decode_pred_tf[0])";
    "Fxn:test_ctc_decode_greedy" -> "Fxn:KTF.eval(log_prob_pred_tf)";
    "Fxn:test_ctc_decode_greedy" -> "Fxn:np.alltrue(decode_truth";
    "Fxn:test_ctc_decode_greedy" -> "Fxn:np.allclose(log_prob_truth,";
    "Fxn:test_ctc_decode_beam_search" -> "Fxn:np.asarray(";
    "Fxn:test_ctc_decode_beam_search" -> "Fxn:range(seq_len_0)]";
    "Fxn:test_ctc_decode_beam_search" -> "Fxn:[np.zeros((1,";
    "Fxn:test_ctc_decode_beam_search" -> "Fxn:KTF.variable(np.asarray(inputs).transpose((1,";
    "Fxn:test_ctc_decode_beam_search" -> "Fxn:KTF.variable(np.array([seq_len_0],";
    "Fxn:test_ctc_decode_beam_search" -> "Fxn:np.array([";
    "Fxn:test_ctc_decode_beam_search" -> "Fxn:[np.array([1,";
    "Fxn:test_ctc_decode_beam_search" -> "Fxn:np.array([0,";
    "Fxn:test_ctc_decode_beam_search" -> "Fxn:KTF.ctc_decode(inputs,";
    "Fxn:test_ctc_decode_beam_search" -> "Fxn:len(decode_pred_tf)";
    "Fxn:test_ctc_decode_beam_search" -> "Fxn:KTF.eval(log_prob_pred_tf)";
    "Fxn:test_ctc_decode_beam_search" -> "Fxn:range(top_paths):";
    "Fxn:test_ctc_decode_beam_search" -> "Fxn:np.alltrue(decode_truth[i]";
    "Fxn:test_ctc_decode_beam_search" -> "Fxn:KTF.eval(decode_pred_tf[i]))";
    "Fxn:test_ctc_decode_beam_search" -> "Fxn:np.allclose(log_prob_truth,";
    "Fxn:test_one_hot" -> "Fxn:np.random.randint(0,";
    "Fxn:test_one_hot" -> "Fxn:size=(batch_size,";
    "Fxn:test_one_hot" -> "Fxn:np.eye(num_classes)[indices]";
    "Fxn:test_one_hot" -> "Fxn:k.eval(k.one_hot(k.variable(indices,";
    "Fxn:test_one_hot" -> "Fxn:np.all(koh";
    "Fxn:test_sparse_dot" -> "Fxn:np.array([0,";
    "Fxn:test_sparse_dot" -> "Fxn:np.array([0,";
    "Fxn:test_sparse_dot" -> "Fxn:np.array([4,";
    "Fxn:test_sparse_dot" -> "Fxn:sparse.csr_matrix((x_d,";
    "Fxn:test_sparse_dot" -> "Fxn:shape=(4,";
    "Fxn:test_sparse_dot" -> "Fxn:x_sparse.toarray()";
    "Fxn:test_sparse_dot" -> "Fxn:np.random.random((5,";
    "Fxn:test_sparse_dot" -> "Fxn:backends.append(KTH)";
    "Fxn:test_sparse_dot" -> "Fxn:k.variable(W)";
    "Fxn:test_sparse_dot" -> "Fxn:k.eval(k.dot(k.variable(x_sparse),";
    "Fxn:test_sparse_dot" -> "Fxn:k.eval(k.dot(k.variable(x_dense),";
    "Fxn:test_sparse_dot" -> "Fxn:assert_allclose(k_s,";
    "Fxn:test_sparse_concat" -> "Fxn:np.array([0,";
    "Fxn:test_sparse_concat" -> "Fxn:np.array([0,";
    "Fxn:test_sparse_concat" -> "Fxn:np.array([4,";
    "Fxn:test_sparse_concat" -> "Fxn:sparse.csr_matrix((x_d,";
    "Fxn:test_sparse_concat" -> "Fxn:shape=(4,";
    "Fxn:test_sparse_concat" -> "Fxn:np.array([0,";
    "Fxn:test_sparse_concat" -> "Fxn:np.array([0,";
    "Fxn:test_sparse_concat" -> "Fxn:np.array([4,";
    "Fxn:test_sparse_concat" -> "Fxn:sparse.csr_matrix((x_d,";
    "Fxn:test_sparse_concat" -> "Fxn:shape=(4,";
    "Fxn:test_sparse_concat" -> "Fxn:x_sparse_1.toarray()";
    "Fxn:test_sparse_concat" -> "Fxn:x_sparse_2.toarray()";
    "Fxn:test_sparse_concat" -> "Fxn:backends.append(KTH)";
    "Fxn:test_sparse_concat" -> "Fxn:k.concatenate([k.variable(x_sparse_1),";
    "Fxn:test_sparse_concat" -> "Fxn:k.variable(x_sparse_2)])";
    "Fxn:test_sparse_concat" -> "Fxn:k.is_sparse(k_s)";
    "Fxn:test_sparse_concat" -> "Fxn:k.eval(k_s)";
    "Fxn:test_sparse_concat" -> "Fxn:k.eval(k.concatenate([k.variable(x_dense_1),";
    "Fxn:test_sparse_concat" -> "Fxn:k.variable(x_dense_2)]))";
    "Fxn:test_sparse_concat" -> "Fxn:assert_allclose(k_s_d,";
    "Fxn:test_sparse_concat" -> "Fxn:@pytest.mark.skipif(K.backend()";
    "Fxn:test_map" -> "Fxn:np.random.rand(10,";
    "Fxn:test_map" -> "Fxn:3).astype(np.float32)";
    "Fxn:test_map" -> "Fxn:K.variable(x)";
    "Fxn:test_map" -> "Fxn:K.eval(K.map_fn(K.sum,";
    "Fxn:test_map" -> "Fxn:K.eval(K.map_fn(";
    "Fxn:test_map" -> "Fxn:K.sum(vx[i]),";
    "Fxn:test_map" -> "Fxn:K.arange(10),";
    "Fxn:test_map" -> "Fxn:dtype=K.floatx()";
    "Fxn:test_map" -> "Fxn:assert_allclose(x.sum(axis=1),";
    "Fxn:test_map" -> "Fxn:assert_allclose(kx,";
    "Fxn:test_map" -> "Fxn:@pytest.mark.skipif(K.backend()";
    "Fxn:test_foldl" -> "Fxn:np.random.rand(10,";
    "Fxn:test_foldl" -> "Fxn:3).astype(np.float32)";
    "Fxn:test_foldl" -> "Fxn:K.eval(K.foldl(lambda";
    "Fxn:test_foldl" -> "Fxn:K.variable(x)))";
    "Fxn:test_foldl" -> "Fxn:assert_allclose(x.sum(axis=0),";
    "Fxn:test_foldl" -> "Fxn:@pytest.mark.skipif(K.backend()";
    "Fxn:test_foldr" -> "Fxn:np.array([1e-20,";
    "Fxn:test_foldr" -> "Fxn:K.variable(x)";
    "Fxn:test_foldr" -> "Fxn:K.eval(K.foldl(lambda";
    "Fxn:test_foldr" -> "Fxn:K.eval(K.foldr(lambda";
    "Fxn:test_arange" -> "Fxn:k.arange(test_value)";
    "Fxn:test_arange" -> "Fxn:k.eval(t)";
    "Fxn:test_arange" -> "Fxn:np.array_equal(a,";
    "Fxn:test_arange" -> "Fxn:np.arange(test_value))";
    "Fxn:test_arange" -> "Fxn:dtype_list.append(k.dtype(t))";
    "Fxn:test_arange" -> "Fxn:a_list.append(a)";
    "Fxn:test_arange" -> "Fxn:range(len(a_list)";
    "Fxn:test_arange" -> "Fxn:np.array_equal(a_list[i],";
    "Fxn:test_arange" -> "Fxn:k.eval(k.arange(start,";
    "Fxn:test_arange" -> "Fxn:np.array_equal(a,";
    "Fxn:test_arange" -> "Fxn:np.arange(start,";
    "Fxn:test_arange" -> "Fxn:a_list.append(a)";
    "Fxn:test_arange" -> "Fxn:range(len(a_list)";
    "Fxn:test_arange" -> "Fxn:np.array_equal(a_list[i],";
    "Fxn:test_arange" -> "Fxn:k.arange(10,";
    "Fxn:test_arange" -> "Fxn:k.dtype(t)";
    "Fxn:test_arange" -> "Fxn:k.constant(1,";
    "Fxn:test_arange" -> "Fxn:k.arange(start)";
    "Fxn:test_arange" -> "Fxn:len(k.eval(t))";
    "Fxn:test_arange" -> "Fxn:k.constant(-1,";
    "Fxn:test_arange" -> "Fxn:k.arange(start)";
    "Fxn:test_arange" -> "Fxn:len(k.eval(t))";
    "Fxn:test_in_train_phase" -> "Fxn:check_two_tensor_operation('in_train_phase',";
    "Fxn:test_setfloatx_incorrect_values" -> "Fxn:floatx()";
    "Fxn:test_setfloatx_incorrect_values" -> "Fxn:floatx()";
    "Fxn:test_setfloatx_incorrect_values" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_setfloatx_incorrect_values" -> "Fxn:set_floatx(value)";
    "Fxn:test_setfloatx_incorrect_values" -> "Fxn:floatx()";
    "Fxn:test_setfloatx_incorrect_values" -> "Fxn:set_floatx(old_floatx)";
    "Fxn:test_setfloatx_correct_values" -> "Fxn:floatx()";
    "Fxn:test_setfloatx_correct_values" -> "Fxn:set_floatx(value)";
    "Fxn:test_setfloatx_correct_values" -> "Fxn:floatx()";
    "Fxn:test_setfloatx_correct_values" -> "Fxn:set_floatx(old_floatx)";
    "Fxn:test_setfloatx_correct_values" -> "Fxn:@pytest.mark.skipif((K.backend()";
    "Fxn:test_set_floatx" -> "Fxn:floatx()";
    "Fxn:test_set_floatx" -> "Fxn:set_floatx('float16')";
    "Fxn:test_set_floatx" -> "Fxn:variable([10])";
    "Fxn:test_set_floatx" -> "Fxn:check_dtype(var,";
    "Fxn:test_set_floatx" -> "Fxn:set_floatx('float64')";
    "Fxn:test_set_floatx" -> "Fxn:variable([10])";
    "Fxn:test_set_floatx" -> "Fxn:check_dtype(var,";
    "Fxn:test_set_floatx" -> "Fxn:set_floatx(old_floatx)";
    "Fxn:test_variable_support_bool_dtype" -> "Fxn:K.backend()";
    "Fxn:test_variable_support_bool_dtype" -> "Fxn:K.dtype(K.variable(1,";
    "Fxn:test_variable_support_bool_dtype" -> "Fxn:K.dtype(K.variable(False,";
    "Fxn:test_variable_support_bool_dtype" -> "Fxn:pytest.raises(TypeError):";
    "Fxn:test_variable_support_bool_dtype" -> "Fxn:K.variable('',";
    "Fxn:test_variable_support_bool_dtype" -> "Fxn:pytest.main([__file__])";
    "/tests/keras/engine/test_topology.py" -> "Import:pytest";
    "/tests/keras/engine/test_topology.py" -> "Import:json";
    "/tests/keras/engine/test_topology.py" -> "Import:numpy";
    "/tests/keras/engine/test_topology.py" -> "Import:assert_allclose";
    "/tests/keras/engine/test_topology.py" -> "Import:Dense,";
    "/tests/keras/engine/test_topology.py" -> "Import:layers";
    "/tests/keras/engine/test_topology.py" -> "Import:Input,";
    "/tests/keras/engine/test_topology.py" -> "Import:Model,";
    "/tests/keras/engine/test_topology.py" -> "Import:backend";
    "/tests/keras/engine/test_topology.py" -> "Import:model_from_json,";
    "/tests/keras/engine/test_topology.py" -> "Import:keras_test";
    "/tests/keras/engine/test_topology.py" -> "Fxn:test_get_updates_for";
    "/tests/keras/engine/test_topology.py" -> "Fxn:test_get_losses_for";
    "/tests/keras/engine/test_topology.py" -> "Fxn:test_trainable_weights";
    "/tests/keras/engine/test_topology.py" -> "Fxn:test_valid_compute_mask";
    "/tests/keras/engine/test_topology.py" -> "Fxn:test_invalid_compute_mask";
    "/tests/keras/engine/test_topology.py" -> "Fxn:test_get_layer";
    "/tests/keras/engine/test_topology.py" -> "Fxn:test_learning_phase";
    "/tests/keras/engine/test_topology.py" -> "Fxn:test_layer_call_arguments";
    "/tests/keras/engine/test_topology.py" -> "Fxn:test_node_construction";
    "/tests/keras/engine/test_topology.py" -> "Fxn:test_multi_input_layer";
    "/tests/keras/engine/test_topology.py" -> "Fxn:test_recursion";
    "/tests/keras/engine/test_topology.py" -> "Import:tensorflow";
    "/tests/keras/engine/test_topology.py" -> "Fxn:test_load_layers";
    "/tests/keras/engine/test_topology.py" -> "Import:ConvLSTM2D,";
    "/tests/keras/engine/test_topology.py" -> "Import:Model";
    "/tests/keras/engine/test_topology.py" -> "Fxn:convert_weights";
    "/tests/keras/engine/test_topology.py" -> "Fxn:test_preprocess_weights_for_loading";
    "/tests/keras/engine/test_topology.py" -> "Fxn:test_preprocess_weights_for_loading_for_model";
    "/tests/keras/engine/test_topology.py" -> "Fxn:test_preprocess_weights_for_loading_rnn_should_be_idempotent";
    "/tests/keras/engine/test_topology.py" -> "Fxn:test_preprocess_weights_for_loading_cudnn_rnn_should_be_idempotent";
    "/tests/keras/engine/test_topology.py" -> "Fxn:test_recursion_with_bn_and_loss";
    "/tests/keras/engine/test_topology.py" -> "Fxn:test_activity_regularization_with_model_composition";
    "/tests/keras/engine/test_topology.py" -> "Fxn:reg";
    "/tests/keras/engine/test_topology.py" -> "Fxn:test_shared_layer_depth_is_correct";
    "/tests/keras/engine/test_topology.py" -> "Import:Embedding,";
    "/tests/keras/engine/test_topology.py" -> "Import:Model";
    "/tests/keras/engine/test_topology.py" -> "Fxn:test_layer_sharing_at_heterogeneous_depth";
    "/tests/keras/engine/test_topology.py" -> "Fxn:test_layer_sharing_at_heterogeneous_depth_with_concat";
    "/tests/keras/engine/test_topology.py" -> "Fxn:test_multi_output_mask";
    "/tests/keras/engine/test_topology.py" -> "class:ArbitraryMultiOutputLayer(Layer):";
    "/tests/keras/engine/test_topology.py" -> "class:ArbitraryMultiInputLayer(Layer):";
    "class:ArbitraryMultiOutputLayer(Layer):" -> "Fxn:__init__";
    "class:ArbitraryMultiOutputLayer(Layer):" -> "Fxn:call";
    "class:ArbitraryMultiOutputLayer(Layer):" -> "Fxn:compute_output_shape";
    "Fxn:__init__" -> "Fxn:super(ArbitraryMultiOutputLayer,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:call" -> "Fxn:[K.abs(inputs),";
    "Fxn:call" -> "Fxn:K.abs(inputs)]";
    "Fxn:compute_output_shape" -> "Fxn:super(ArbitraryMultiOutputLayer,";
    "Fxn:compute_output_shape" -> "Fxn:self).compute_output_shape(input_shape)";
    "class:ArbitraryMultiInputLayer(Layer):" -> "Fxn:__init__";
    "class:ArbitraryMultiInputLayer(Layer):" -> "Fxn:call";
    "Fxn:__init__" -> "Fxn:super(ArbitraryMultiInputLayer,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:call" -> "Fxn:Input(shape=(16,";
    "Fxn:call" -> "Fxn:ArbitraryMultiOutputLayer()(input_layer)";
    "Fxn:call" -> "Fxn:ArbitraryMultiInputLayer()([x,";
    "Fxn:call" -> "Fxn:Model(inputs=input_layer,";
    "Fxn:call" -> "Fxn:K.int_shape(z)[1:]";
    "Fxn:call" -> "Fxn:pytest.main([__file__])";
    "/tests/keras/engine/test_training.py" -> "Import:pytest";
    "/tests/keras/engine/test_training.py" -> "Import:numpy";
    "/tests/keras/engine/test_training.py" -> "Import:pandas";
    "/tests/keras/engine/test_training.py" -> "Import:assert_allclose";
    "/tests/keras/engine/test_training.py" -> "Import:sys";
    "/tests/keras/engine/test_training.py" -> "Import:scipy.sparse";
    "/tests/keras/engine/test_training.py" -> "Import:keras";
    "/tests/keras/engine/test_training.py" -> "Import:losses";
    "/tests/keras/engine/test_training.py" -> "Import:Dense,";
    "/tests/keras/engine/test_training.py" -> "Import:Input";
    "/tests/keras/engine/test_training.py" -> "Import:Model";
    "/tests/keras/engine/test_training.py" -> "Import:_check_loss_and_target_compatibility";
    "/tests/keras/engine/test_training.py" -> "Import:_weighted_masked_objective";
    "/tests/keras/engine/test_training.py" -> "Import:_check_array_lengths";
    "/tests/keras/engine/test_training.py" -> "Import:_slice_arrays";
    "/tests/keras/engine/test_training.py" -> "Import:Sequential";
    "/tests/keras/engine/test_training.py" -> "Import:backend";
    "/tests/keras/engine/test_training.py" -> "Import:Sequence";
    "/tests/keras/engine/test_training.py" -> "Import:keras_test";
    "/tests/keras/engine/test_training.py" -> "Import:LambdaCallback";
    "/tests/keras/engine/test_training.py" -> "class:RandomSequence(Sequence):";
    "/tests/keras/engine/test_training.py" -> "Import:tensorflow";
    "/tests/keras/engine/test_training.py" -> "Import:tensorflow";
    "/tests/keras/engine/test_training.py" -> "Import:tensorflow";
    "class:RandomSequence(Sequence):" -> "Fxn:__init__";
    "class:RandomSequence(Sequence):" -> "Fxn:__len__";
    "class:RandomSequence(Sequence):" -> "Fxn:__getitem__";
    "class:RandomSequence(Sequence):" -> "Fxn:on_epoch_end";
    "class:RandomSequence(Sequence):" -> "Fxn:test_check_array_lengths";
    "class:RandomSequence(Sequence):" -> "Fxn:test_slice_arrays";
    "class:RandomSequence(Sequence):" -> "Fxn:test_weighted_masked_objective";
    "class:RandomSequence(Sequence):" -> "Fxn:mask_dummy";
    "class:RandomSequence(Sequence):" -> "Fxn:test_model_methods";
    "class:RandomSequence(Sequence):" -> "Fxn:on_epoch_begin";
    "class:RandomSequence(Sequence):" -> "Fxn:on_batch_begin";
    "class:RandomSequence(Sequence):" -> "Fxn:gen_data";
    "class:RandomSequence(Sequence):" -> "Fxn:mse";
    "class:RandomSequence(Sequence):" -> "Fxn:gen_data";
    "class:RandomSequence(Sequence):" -> "Fxn:gen_data";
    "class:RandomSequence(Sequence):" -> "Fxn:gen_data";
    "class:RandomSequence(Sequence):" -> "Fxn:expected_shape";
    "class:RandomSequence(Sequence):" -> "Fxn:test_warnings";
    "class:RandomSequence(Sequence):" -> "Fxn:gen_data";
    "class:RandomSequence(Sequence):" -> "Fxn:test_sparse_inputs_targets";
    "class:RandomSequence(Sequence):" -> "Fxn:test_sparse_placeholder_fit";
    "class:RandomSequence(Sequence):" -> "Fxn:test_trainable_argument";
    "class:RandomSequence(Sequence):" -> "Fxn:test_with_list_as_targets";
    "class:RandomSequence(Sequence):" -> "Fxn:test_check_not_failing";
    "class:RandomSequence(Sequence):" -> "Fxn:test_check_last_is_one";
    "class:RandomSequence(Sequence):" -> "Fxn:test_check_bad_shape";
    "class:RandomSequence(Sequence):" -> "Fxn:test_model_with_input_feed_tensor";
    "class:RandomSequence(Sequence):" -> "Fxn:test_model_with_partial_loss";
    "class:RandomSequence(Sequence):" -> "Fxn:test_model_with_external_loss";
    "class:RandomSequence(Sequence):" -> "Fxn:test_target_tensors";
    "class:RandomSequence(Sequence):" -> "Fxn:test_model_custom_target_tensors";
    "class:RandomSequence(Sequence):" -> "Fxn:test_trainable_weights_count_consistency";
    "class:RandomSequence(Sequence):" -> "Fxn:test_pandas_dataframe";
    "Fxn:__getitem__" -> "Fxn:[np.random.random((self.batch_size,";
    "Fxn:__getitem__" -> "Fxn:np.random.random((self.batch_size,";
    "Fxn:__getitem__" -> "Fxn:np.random.random((self.batch_size,";
    "Fxn:__getitem__" -> "Fxn:np.random.random((self.batch_size,";
    "Fxn:test_check_array_lengths" -> "Fxn:_check_array_lengths(None,";
    "Fxn:test_check_array_lengths" -> "Fxn:np.random.random((4,";
    "Fxn:test_check_array_lengths" -> "Fxn:_check_array_lengths(a_np,";
    "Fxn:test_check_array_lengths" -> "Fxn:_check_array_lengths([a_np,";
    "Fxn:test_check_array_lengths" -> "Fxn:_check_array_lengths([None],";
    "Fxn:test_check_array_lengths" -> "Fxn:np.random.random((3,";
    "Fxn:test_check_array_lengths" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_check_array_lengths" -> "Fxn:_check_array_lengths(a_np,";
    "Fxn:test_check_array_lengths" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_check_array_lengths" -> "Fxn:_check_array_lengths(a_np,";
    "Fxn:test_check_array_lengths" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_check_array_lengths" -> "Fxn:_check_array_lengths([a_np],";
    "Fxn:test_check_array_lengths" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_check_array_lengths" -> "Fxn:_check_array_lengths([a_np],";
    "Fxn:test_check_array_lengths" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_check_array_lengths" -> "Fxn:_check_array_lengths([a_np],";
    "Fxn:test_slice_arrays" -> "Fxn:np.random.random((10,";
    "Fxn:test_slice_arrays" -> "Fxn:_slice_arrays(None)";
    "Fxn:test_slice_arrays" -> "Fxn:_slice_arrays(input_a,";
    "Fxn:test_slice_arrays" -> "Fxn:_slice_arrays(input_a,";
    "Fxn:test_slice_arrays" -> "Fxn:_slice_arrays(input_a,";
    "Fxn:test_slice_arrays" -> "Fxn:_slice_arrays(input_a,";
    "Fxn:test_slice_arrays" -> "Fxn:_slice_arrays(input_a,";
    "Fxn:test_slice_arrays" -> "Fxn:_slice_arrays(input_a,";
    "Fxn:test_slice_arrays" -> "Fxn:_slice_arrays(input_a,";
    "Fxn:test_slice_arrays" -> "Fxn:_slice_arrays(input_a,";
    "Fxn:test_slice_arrays" -> "Fxn:_slice_arrays(input_a,";
    "Fxn:test_slice_arrays" -> "Fxn:_slice_arrays(input_a,";
    "Fxn:test_slice_arrays" -> "Fxn:_slice_arrays(input_a,";
    "Fxn:test_slice_arrays" -> "Fxn:_slice_arrays(input_a,";
    "Fxn:test_weighted_masked_objective" -> "Fxn:Input(shape=(3,),";
    "Fxn:mask_dummy" -> "Fxn:K.placeholder(y_true.shape)";
    "Fxn:mask_dummy" -> "Fxn:_weighted_masked_objective(losses.categorical_crossentropy)";
    "Fxn:mask_dummy" -> "Fxn:weighted_function(a,";
    "Fxn:test_model_methods" -> "Fxn:Input(shape=(3,),";
    "Fxn:test_model_methods" -> "Fxn:Input(shape=(3,),";
    "Fxn:test_model_methods" -> "Fxn:Dense(4,";
    "Fxn:test_model_methods" -> "Fxn:name='dense_1')(a)";
    "Fxn:test_model_methods" -> "Fxn:Dropout(0.5,";
    "Fxn:test_model_methods" -> "Fxn:dp(b)";
    "Fxn:test_model_methods" -> "Fxn:Model([a,";
    "Fxn:test_model_methods" -> "Fxn:np.random.random((10,";
    "Fxn:test_model_methods" -> "Fxn:np.random.random((10,";
    "Fxn:test_model_methods" -> "Fxn:np.random.random((10,";
    "Fxn:test_model_methods" -> "Fxn:np.random.random((10,";
    "Fxn:test_model_methods" -> "Fxn:pytest.raises(RuntimeError):";
    "Fxn:test_model_methods" -> "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:test_model_methods" -> "Fxn:model.compile(optimizer,";
    "Fxn:test_model_methods" -> "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:test_model_methods" -> "Fxn:model.train_on_batch({'input_a':";
    "Fxn:test_model_methods" -> "Fxn:model.train_on_batch({'input_a':";
    "Fxn:test_model_methods" -> "Fxn:model.fit([input_a_np,";
    "Fxn:test_model_methods" -> "Fxn:model.fit({'input_a':";
    "Fxn:test_model_methods" -> "Fxn:model.fit({'input_a':";
    "Fxn:test_model_methods" -> "Fxn:model.fit([input_a_np,";
    "Fxn:test_model_methods" -> "Fxn:model.fit({'input_a':";
    "Fxn:test_model_methods" -> "Fxn:model.fit([input_a_np,";
    "Fxn:test_model_methods" -> "Fxn:validation_data=([input_a_np,";
    "Fxn:test_model_methods" -> "Fxn:model.fit({'input_a':";
    "Fxn:test_model_methods" -> "Fxn:validation_data=({'input_a':";
    "Fxn:test_model_methods" -> "Fxn:model.fit({'input_a':";
    "Fxn:test_model_methods" -> "Fxn:validation_data=(";
    "Fxn:test_model_methods" -> "Fxn:model.test_on_batch([input_a_np,";
    "Fxn:test_model_methods" -> "Fxn:model.test_on_batch({'input_a':";
    "Fxn:test_model_methods" -> "Fxn:model.test_on_batch({'input_a':";
    "Fxn:test_model_methods" -> "Fxn:model.predict_on_batch([input_a_np,";
    "Fxn:test_model_methods" -> "Fxn:model.predict_on_batch({'input_a':";
    "Fxn:test_model_methods" -> "Fxn:np.random.random((10,";
    "Fxn:test_model_methods" -> "Fxn:np.random.random((10,";
    "Fxn:test_model_methods" -> "Fxn:np.random.random((10,";
    "Fxn:test_model_methods" -> "Fxn:np.random.random((10,";
    "Fxn:test_model_methods" -> "Fxn:model.evaluate([input_a_np,";
    "Fxn:test_model_methods" -> "Fxn:model.predict([input_a_np,";
    "Fxn:test_model_methods" -> "Fxn:np.random.random((10,";
    "Fxn:test_model_methods" -> "Fxn:np.random.random((10,";
    "Fxn:test_model_methods" -> "Fxn:np.random.random((10,";
    "Fxn:test_model_methods" -> "Fxn:np.random.random((10,";
    "Fxn:test_model_methods" -> "Fxn:np.random.random((10,))]";
    "Fxn:test_model_methods" -> "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:test_model_methods" -> "Fxn:model.test_on_batch([input_a_np,";
    "Fxn:test_model_methods" -> "Fxn:model.compile(optimizer,";
    "Fxn:test_model_methods" -> "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:test_model_methods" -> "Fxn:len(out)";
    "Fxn:test_model_methods" -> "Fxn:model.test_on_batch([input_a_np,";
    "Fxn:test_model_methods" -> "Fxn:len(out)";
    "Fxn:test_model_methods" -> "Fxn:model.compile(optimizer,";
    "Fxn:test_model_methods" -> "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:test_model_methods" -> "Fxn:len(out)";
    "Fxn:test_model_methods" -> "Fxn:model.test_on_batch([input_a_np,";
    "Fxn:test_model_methods" -> "Fxn:len(out)";
    "Fxn:test_model_methods" -> "Fxn:model.compile(optimizer,";
    "Fxn:test_model_methods" -> "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:test_model_methods" -> "Fxn:len(out)";
    "Fxn:test_model_methods" -> "Fxn:model.test_on_batch([input_a_np,";
    "Fxn:test_model_methods" -> "Fxn:len(out)";
    "Fxn:on_epoch_begin" -> "Fxn:trained_epochs.append(epoch)";
    "Fxn:on_batch_begin" -> "Fxn:trained_batches.append(batch)";
    "Fxn:on_batch_begin" -> "Fxn:LambdaCallback(on_epoch_begin=on_epoch_begin,";
    "Fxn:on_batch_begin" -> "Fxn:model.fit([input_a_np,";
    "Fxn:gen_data" -> "Fxn:np.random.random((batch_sz,";
    "Fxn:gen_data" -> "Fxn:[np.random.random((batch_sz,";
    "Fxn:gen_data" -> "Fxn:np.random.random((batch_sz,";
    "Fxn:gen_data" -> "Fxn:model.fit_generator(gen_data(4),";
    "Fxn:mse" -> "Fxn:K.mean(K.pow(y_true";
    "Fxn:mse" -> "Fxn:model.compile(optimizer,";
    "Fxn:mse" -> "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:mse" -> "Fxn:len(out)";
    "Fxn:mse" -> "Fxn:model.test_on_batch([input_a_np,";
    "Fxn:mse" -> "Fxn:len(out)";
    "Fxn:mse" -> "Fxn:np.random.random((10,";
    "Fxn:mse" -> "Fxn:np.random.random((10,";
    "Fxn:mse" -> "Fxn:np.random.random((10,";
    "Fxn:mse" -> "Fxn:np.random.random((10,";
    "Fxn:mse" -> "Fxn:model.fit([input_a_np,";
    "Fxn:mse" -> "Fxn:model.evaluate([input_a_np,";
    "Fxn:mse" -> "Fxn:model.predict([input_a_np,";
    "Fxn:mse" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:gen_data" -> "Fxn:np.asarray([]))";
    "Fxn:gen_data" -> "Fxn:model.evaluate_generator(gen_data(),";
    "Fxn:gen_data" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:gen_data" -> "Fxn:model.predict([None])";
    "Fxn:gen_data" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:gen_data" -> "Fxn:model.predict([input_a_np,";
    "Fxn:gen_data" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:gen_data" -> "Fxn:model.predict([None,";
    "Fxn:gen_data" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:gen_data" -> "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:gen_data" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:gen_data" -> "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:gen_data" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:gen_data" -> "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:gen_data" -> "Fxn:pytest.raises(TypeError):";
    "Fxn:gen_data" -> "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:gen_data" -> "Fxn:sample_weight=tuple(sample_weight))";
    "Fxn:gen_data" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:gen_data" -> "Fxn:model.fit([input_a_np,";
    "Fxn:gen_data" -> "Fxn:validation_data=([input_a_np,";
    "Fxn:gen_data" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:gen_data" -> "Fxn:model.compile(optimizer,";
    "Fxn:gen_data" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:gen_data" -> "Fxn:model.compile(optimizer,";
    "Fxn:gen_data" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:gen_data" -> "Fxn:model.compile(optimizer,";
    "Fxn:gen_data" -> "Fxn:pytest.raises(TypeError):";
    "Fxn:gen_data" -> "Fxn:model.compile(optimizer,";
    "Fxn:gen_data" -> "Fxn:loss_weights=(0.5,";
    "Fxn:gen_data" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:gen_data" -> "Fxn:model.compile(optimizer,";
    "Fxn:gen_data" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:gen_data" -> "Fxn:model.compile(optimizer,";
    "Fxn:gen_data" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:gen_data" -> "Fxn:model.compile(optimizer,";
    "Fxn:gen_data" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:gen_data" -> "Fxn:model.compile(optimizer,";
    "Fxn:gen_data" -> "Fxn:model.compile(optimizer,";
    "Fxn:gen_data" -> "Fxn:model.compile(optimizer,";
    "Fxn:gen_data" -> "Fxn:model.compile(optimizer,";
    "Fxn:gen_data" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:gen_data" -> "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:gen_data" -> "Fxn:np.random.random((10,";
    "Fxn:gen_data" -> "Fxn:model.compile(optimizer,";
    "Fxn:gen_data" -> "Fxn:model.compile(optimizer,";
    "Fxn:gen_data" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:gen_data" -> "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:gen_data" -> "Fxn:model.compile(optimizer,";
    "Fxn:gen_data" -> "Fxn:model.fit_generator(generator=RandomSequence(3),";
    "Fxn:gen_data" -> "Fxn:validation_data=RandomSequence(4),";
    "Fxn:gen_data" -> "Fxn:list(range(3))";
    "Fxn:gen_data" -> "Fxn:model.fit_generator(generator=RandomSequence(3),";
    "Fxn:gen_data" -> "Fxn:validation_data=RandomSequence(4),";
    "Fxn:gen_data" -> "Fxn:list(range(12))";
    "Fxn:gen_data" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:gen_data" -> "Fxn:np.asarray([]))";
    "Fxn:gen_data" -> "Fxn:model.fit_generator(generator=gen_data(),";
    "Fxn:gen_data" -> "Fxn:validation_data=gen_data(),";
    "Fxn:gen_data" -> "Fxn:np.random.random((1,";
    "Fxn:gen_data" -> "Fxn:[np.random.random((1,";
    "Fxn:gen_data" -> "Fxn:np.random.random((1,";
    "Fxn:gen_data" -> "Fxn:model.fit_generator(generator=gen_data(0),";
    "Fxn:gen_data" -> "Fxn:validation_data=gen_data(1),";
    "Fxn:gen_data" -> "Fxn:model.fit_generator(generator=RandomSequence(3),";
    "Fxn:gen_data" -> "Fxn:validation_data=gen_data(0),";
    "Fxn:expected_shape" -> "Fxn:expected_shape(batch_size,";
    "Fxn:expected_shape" -> "Fxn:model.predict_generator(RandomSequence(batch_size,";
    "Fxn:expected_shape" -> "Fxn:np.shape(out[0])";
    "Fxn:expected_shape" -> "Fxn:np.shape(out[1])";
    "Fxn:expected_shape" -> "Fxn:expected_shape(batch_size,";
    "Fxn:expected_shape" -> "Fxn:model.predict_generator(RandomSequence(batch_size,";
    "Fxn:expected_shape" -> "Fxn:np.shape(out[0])";
    "Fxn:expected_shape" -> "Fxn:np.shape(out[1])";
    "Fxn:expected_shape" -> "Fxn:Model([a,";
    "Fxn:expected_shape" -> "Fxn:single_output_model.compile(optimizer,";
    "Fxn:expected_shape" -> "Fxn:expected_shape(batch_size,";
    "Fxn:expected_shape" -> "Fxn:single_output_model.predict_generator(RandomSequence(batch_size,";
    "Fxn:expected_shape" -> "Fxn:np.shape(out)";
    "Fxn:expected_shape" -> "Fxn:expected_shape(batch_size,";
    "Fxn:expected_shape" -> "Fxn:single_output_model.predict_generator(RandomSequence(batch_size,";
    "Fxn:expected_shape" -> "Fxn:np.shape(out)";
    "Fxn:expected_shape" -> "Fxn:@pytest.mark.skipif(sys.version_info";
    "Fxn:test_warnings" -> "Fxn:Input(shape=(3,),";
    "Fxn:test_warnings" -> "Fxn:Input(shape=(3,),";
    "Fxn:test_warnings" -> "Fxn:Dense(4,";
    "Fxn:test_warnings" -> "Fxn:name='dense_1')(a)";
    "Fxn:test_warnings" -> "Fxn:Dropout(0.5,";
    "Fxn:test_warnings" -> "Fxn:dp(b)";
    "Fxn:test_warnings" -> "Fxn:Model([a,";
    "Fxn:test_warnings" -> "Fxn:model.compile(optimizer,";
    "Fxn:gen_data" -> "Fxn:np.random.random((batch_sz,";
    "Fxn:gen_data" -> "Fxn:[np.random.random((batch_sz,";
    "Fxn:gen_data" -> "Fxn:np.random.random((batch_sz,";
    "Fxn:gen_data" -> "Fxn:pytest.warns(Warning)";
    "Fxn:gen_data" -> "Fxn:model.fit_generator(gen_data(4),";
    "Fxn:gen_data" -> "Fxn:any(['Sequence'";
    "Fxn:gen_data" -> "Fxn:str(w_.message)";
    "Fxn:gen_data" -> "Fxn:pytest.warns(None)";
    "Fxn:gen_data" -> "Fxn:model.fit_generator(RandomSequence(3),";
    "Fxn:gen_data" -> "Fxn:all(['Sequence'";
    "Fxn:gen_data" -> "Fxn:str(w_.message)";
    "Fxn:test_sparse_inputs_targets" -> "Fxn:[sparse.random(6,";
    "Fxn:test_sparse_inputs_targets" -> "Fxn:density=0.25).tocsr()";
    "Fxn:test_sparse_inputs_targets" -> "Fxn:range(2)]";
    "Fxn:test_sparse_inputs_targets" -> "Fxn:[sparse.random(6,";
    "Fxn:test_sparse_inputs_targets" -> "Fxn:density=0.25).tocsr()";
    "Fxn:test_sparse_inputs_targets" -> "Fxn:range(3,";
    "Fxn:test_sparse_inputs_targets" -> "Fxn:Input(shape=(3,))";
    "Fxn:test_sparse_inputs_targets" -> "Fxn:Input(shape=(3,))";
    "Fxn:test_sparse_inputs_targets" -> "Fxn:Dropout(0.5,";
    "Fxn:test_sparse_inputs_targets" -> "Fxn:name='dropout')(in1)";
    "Fxn:test_sparse_inputs_targets" -> "Fxn:Dense(4,";
    "Fxn:test_sparse_inputs_targets" -> "Fxn:name='dense_1')(in2)";
    "Fxn:test_sparse_inputs_targets" -> "Fxn:Model([in1,";
    "Fxn:test_sparse_inputs_targets" -> "Fxn:model.predict(test_inputs,";
    "Fxn:test_sparse_inputs_targets" -> "Fxn:model.compile('rmsprop',";
    "Fxn:test_sparse_inputs_targets" -> "Fxn:model.fit(test_inputs,";
    "Fxn:test_sparse_inputs_targets" -> "Fxn:model.evaluate(test_inputs,";
    "Fxn:test_sparse_inputs_targets" -> "Fxn:@pytest.mark.skipif(K.backend()";
    "Fxn:test_sparse_placeholder_fit" -> "Fxn:[sparse.random(6,";
    "Fxn:test_sparse_placeholder_fit" -> "Fxn:density=0.25).tocsr()";
    "Fxn:test_sparse_placeholder_fit" -> "Fxn:range(2)]";
    "Fxn:test_sparse_placeholder_fit" -> "Fxn:[sparse.random(6,";
    "Fxn:test_sparse_placeholder_fit" -> "Fxn:density=0.25).tocsr()";
    "Fxn:test_sparse_placeholder_fit" -> "Fxn:range(3,";
    "Fxn:test_sparse_placeholder_fit" -> "Fxn:Input(shape=(3,))";
    "Fxn:test_sparse_placeholder_fit" -> "Fxn:Input(shape=(3,),";
    "Fxn:test_sparse_placeholder_fit" -> "Fxn:Dropout(0.5,";
    "Fxn:test_sparse_placeholder_fit" -> "Fxn:name='dropout')(in1)";
    "Fxn:test_sparse_placeholder_fit" -> "Fxn:Dense(4,";
    "Fxn:test_sparse_placeholder_fit" -> "Fxn:name='dense_1')(in2)";
    "Fxn:test_sparse_placeholder_fit" -> "Fxn:Model([in1,";
    "Fxn:test_sparse_placeholder_fit" -> "Fxn:model.predict(test_inputs,";
    "Fxn:test_sparse_placeholder_fit" -> "Fxn:model.compile('rmsprop',";
    "Fxn:test_sparse_placeholder_fit" -> "Fxn:model.fit(test_inputs,";
    "Fxn:test_sparse_placeholder_fit" -> "Fxn:model.evaluate(test_inputs,";
    "Fxn:test_trainable_argument" -> "Fxn:np.random.random((5,";
    "Fxn:test_trainable_argument" -> "Fxn:np.random.random((5,";
    "Fxn:test_trainable_argument" -> "Fxn:Sequential()";
    "Fxn:test_trainable_argument" -> "Fxn:model.add(Dense(2,";
    "Fxn:test_trainable_argument" -> "Fxn:model.compile('rmsprop',";
    "Fxn:test_trainable_argument" -> "Fxn:model.predict(x)";
    "Fxn:test_trainable_argument" -> "Fxn:model.train_on_batch(x,";
    "Fxn:test_trainable_argument" -> "Fxn:model.predict(x)";
    "Fxn:test_trainable_argument" -> "Fxn:assert_allclose(out,";
    "Fxn:test_trainable_argument" -> "Fxn:Input(shape=(3,))";
    "Fxn:test_trainable_argument" -> "Fxn:model(inputs)";
    "Fxn:test_trainable_argument" -> "Fxn:Model(inputs,";
    "Fxn:test_trainable_argument" -> "Fxn:model.compile('rmsprop',";
    "Fxn:test_trainable_argument" -> "Fxn:model.predict(x)";
    "Fxn:test_trainable_argument" -> "Fxn:model.train_on_batch(x,";
    "Fxn:test_trainable_argument" -> "Fxn:model.predict(x)";
    "Fxn:test_trainable_argument" -> "Fxn:assert_allclose(out,";
    "Fxn:test_with_list_as_targets" -> "Fxn:Sequential()";
    "Fxn:test_with_list_as_targets" -> "Fxn:model.add(Dense(1,";
    "Fxn:test_with_list_as_targets" -> "Fxn:model.compile('rmsprop',";
    "Fxn:test_with_list_as_targets" -> "Fxn:np.random.random((2,";
    "Fxn:test_with_list_as_targets" -> "Fxn:model.train_on_batch(x,";
    "Fxn:test_check_not_failing" -> "Fxn:np.random.random((2,";
    "Fxn:test_check_not_failing" -> "Fxn:_check_loss_and_target_compatibility([a],";
    "Fxn:test_check_not_failing" -> "Fxn:_check_loss_and_target_compatibility([a],";
    "Fxn:test_check_not_failing" -> "Fxn:[(2,";
    "Fxn:test_check_last_is_one" -> "Fxn:np.random.random((2,";
    "Fxn:test_check_last_is_one" -> "Fxn:pytest.raises(ValueError)";
    "Fxn:test_check_last_is_one" -> "Fxn:_check_loss_and_target_compatibility([a],";
    "Fxn:test_check_last_is_one" -> "Fxn:str(exc)";
    "Fxn:test_check_bad_shape" -> "Fxn:np.random.random((2,";
    "Fxn:test_check_bad_shape" -> "Fxn:pytest.raises(ValueError)";
    "Fxn:test_check_bad_shape" -> "Fxn:_check_loss_and_target_compatibility([a],";
    "Fxn:test_check_bad_shape" -> "Fxn:[(2,";
    "Fxn:test_check_bad_shape" -> "Fxn:str(exc)";
    "Fxn:test_check_bad_shape" -> "Fxn:@pytest.mark.skipif(K.backend()";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:np.random.random((10,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:np.random.random((10,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:np.random.random((10,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:np.random.random((10,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:Input(tensor=tf.Variable(input_a_np,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:Input(shape=(3,),";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:Dense(4,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:name='dense_1')(a)";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:Dropout(0.5,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:dp(b)";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:Model([a,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.summary()";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.compile(optimizer,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.train_on_batch(input_b_np,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.train_on_batch({'input_b':";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.test_on_batch({'input_b':";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.predict_on_batch({'input_b':";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.fit({'input_b':";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.fit(input_b_np,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.evaluate({'input_b':";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.evaluate(input_b_np,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.predict({'input_b':";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.predict(input_b_np,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:len(out)";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:Input(tensor=tf.Variable(input_a_np,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:Dense(4,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:name='dense_1')(a)";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:Dropout(0.5,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:name='dropout')(a_2)";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:Model(a,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.summary()";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.compile(optimizer,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.train_on_batch(None,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.train_on_batch(None,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.test_on_batch(None,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.predict_on_batch(None)";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.train_on_batch([],";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.train_on_batch({},";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.fit(None,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.fit(None,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.evaluate(None,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.evaluate(None,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.predict(None,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.predict(None,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:Input(tensor=tf.Variable(input_a_np,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:Dense(4,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:name='dense_1')(a)";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:Model(a,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.summary()";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.compile(optimizer,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.train_on_batch(None,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.train_on_batch(None,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.test_on_batch(None,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.predict_on_batch(None)";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.train_on_batch([],";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.train_on_batch({},";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.fit(None,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.fit(None,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.evaluate(None,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.evaluate(None,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.predict(None,";
    "Fxn:test_model_with_input_feed_tensor" -> "Fxn:model.predict(None,";
    "Fxn:test_model_with_partial_loss" -> "Fxn:Input(shape=(3,),";
    "Fxn:test_model_with_partial_loss" -> "Fxn:Dense(4,";
    "Fxn:test_model_with_partial_loss" -> "Fxn:name='dense_1')(a)";
    "Fxn:test_model_with_partial_loss" -> "Fxn:Dropout(0.5,";
    "Fxn:test_model_with_partial_loss" -> "Fxn:dp(a_2)";
    "Fxn:test_model_with_partial_loss" -> "Fxn:Model(a,";
    "Fxn:test_model_with_partial_loss" -> "Fxn:model.compile(optimizer,";
    "Fxn:test_model_with_partial_loss" -> "Fxn:np.random.random((10,";
    "Fxn:test_model_with_partial_loss" -> "Fxn:np.random.random((10,";
    "Fxn:test_model_with_partial_loss" -> "Fxn:model.train_on_batch(input_a_np,";
    "Fxn:test_model_with_partial_loss" -> "Fxn:model.test_on_batch(input_a_np,";
    "Fxn:test_model_with_partial_loss" -> "Fxn:model.fit(input_a_np,";
    "Fxn:test_model_with_partial_loss" -> "Fxn:model.evaluate(input_a_np,";
    "Fxn:test_model_with_partial_loss" -> "Fxn:Input(shape=(3,),";
    "Fxn:test_model_with_partial_loss" -> "Fxn:Dense(4,";
    "Fxn:test_model_with_partial_loss" -> "Fxn:name='dense_1')(a)";
    "Fxn:test_model_with_partial_loss" -> "Fxn:Dense(4,";
    "Fxn:test_model_with_partial_loss" -> "Fxn:name='dense_2')(a_2)";
    "Fxn:test_model_with_partial_loss" -> "Fxn:Model(a,";
    "Fxn:test_model_with_partial_loss" -> "Fxn:model.compile(optimizer,";
    "Fxn:test_model_with_partial_loss" -> "Fxn:model.train_on_batch(input_a_np,";
    "Fxn:test_model_with_partial_loss" -> "Fxn:model.test_on_batch(input_a_np,";
    "Fxn:test_model_with_partial_loss" -> "Fxn:model.fit(input_a_np,";
    "Fxn:test_model_with_partial_loss" -> "Fxn:model.evaluate(input_a_np,";
    "Fxn:test_model_with_partial_loss" -> "Fxn:@pytest.mark.skipif((K.backend()";
    "Fxn:test_model_with_external_loss" -> "Fxn:Input(shape=(3,),";
    "Fxn:test_model_with_external_loss" -> "Fxn:Dense(4,";
    "Fxn:test_model_with_external_loss" -> "Fxn:bias_regularizer='l2')(a)";
    "Fxn:test_model_with_external_loss" -> "Fxn:Dropout(0.5,";
    "Fxn:test_model_with_external_loss" -> "Fxn:dp(a_2)";
    "Fxn:test_model_with_external_loss" -> "Fxn:Model(a,";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.compile(optimizer,";
    "Fxn:test_model_with_external_loss" -> "Fxn:np.random.random((10,";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.train_on_batch(input_a_np,";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.test_on_batch(input_a_np,";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.fit(input_a_np,";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.evaluate(input_a_np,";
    "Fxn:test_model_with_external_loss" -> "Fxn:Input(shape=(3,),";
    "Fxn:test_model_with_external_loss" -> "Fxn:Dense(4,";
    "Fxn:test_model_with_external_loss" -> "Fxn:name='dense_1')(a)";
    "Fxn:test_model_with_external_loss" -> "Fxn:Dense(4,";
    "Fxn:test_model_with_external_loss" -> "Fxn:name='dense_2')(a)";
    "Fxn:test_model_with_external_loss" -> "Fxn:Model(a,";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.add_loss(K.mean(a_3";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.compile(optimizer,";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.train_on_batch(input_a_np,";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.test_on_batch(input_a_np,";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.fit(input_a_np,";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.evaluate(input_a_np,";
    "Fxn:test_model_with_external_loss" -> "Fxn:K.backend()";
    "Fxn:test_model_with_external_loss" -> "Fxn:Input(tensor=tf.Variable(input_a_np,";
    "Fxn:test_model_with_external_loss" -> "Fxn:Dense(4,";
    "Fxn:test_model_with_external_loss" -> "Fxn:name='dense_1')(a)";
    "Fxn:test_model_with_external_loss" -> "Fxn:Dropout(0.5,";
    "Fxn:test_model_with_external_loss" -> "Fxn:name='dropout')(a_2)";
    "Fxn:test_model_with_external_loss" -> "Fxn:Model(a,";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.add_loss(K.mean(a_2))";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.train_on_batch(None,";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.test_on_batch(None,";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.predict_on_batch(None)";
    "Fxn:test_model_with_external_loss" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.fit(None,";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.fit(None,";
    "Fxn:test_model_with_external_loss" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.fit(None,";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.fit(None,";
    "Fxn:test_model_with_external_loss" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.evaluate(None,";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.evaluate(None,";
    "Fxn:test_model_with_external_loss" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.predict(None,";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.predict(None,";
    "Fxn:test_model_with_external_loss" -> "Fxn:Input(tensor=tf.Variable(input_a_np,";
    "Fxn:test_model_with_external_loss" -> "Fxn:Dense(4,";
    "Fxn:test_model_with_external_loss" -> "Fxn:name='dense_1')(a)";
    "Fxn:test_model_with_external_loss" -> "Fxn:Dropout(0.5,";
    "Fxn:test_model_with_external_loss" -> "Fxn:name='dropout')(a_1)";
    "Fxn:test_model_with_external_loss" -> "Fxn:Model(a,";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.add_loss(K.mean(a_2))";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.train_on_batch(None,";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.test_on_batch(None,";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.predict_on_batch(None)";
    "Fxn:test_model_with_external_loss" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.fit(None,";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.fit(None,";
    "Fxn:test_model_with_external_loss" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.fit(None,";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.fit(None,";
    "Fxn:test_model_with_external_loss" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.evaluate(None,";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.evaluate(None,";
    "Fxn:test_model_with_external_loss" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.predict(None,";
    "Fxn:test_model_with_external_loss" -> "Fxn:model.predict(None,";
    "Fxn:test_model_with_external_loss" -> "Fxn:len(out)";
    "Fxn:test_target_tensors" -> "Fxn:keras.models.Sequential()";
    "Fxn:test_target_tensors" -> "Fxn:model.add(keras.layers.Dense(4,";
    "Fxn:test_target_tensors" -> "Fxn:input_shape=(4,),";
    "Fxn:test_target_tensors" -> "Fxn:np.random.random((10,";
    "Fxn:test_target_tensors" -> "Fxn:np.random.random((10,";
    "Fxn:test_target_tensors" -> "Fxn:keras.backend.variable(target_val)";
    "Fxn:test_target_tensors" -> "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:test_target_tensors" -> "Fxn:model.train_on_batch(input_val,";
    "Fxn:test_target_tensors" -> "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:test_target_tensors" -> "Fxn:model.train_on_batch(input_val,";
    "Fxn:test_target_tensors" -> "Fxn:pytest.raises(TypeError):";
    "Fxn:test_target_tensors" -> "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:test_target_tensors" -> "Fxn:target_tensors=set())";
    "Fxn:test_target_tensors" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_target_tensors" -> "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:test_target_tensors" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_target_tensors" -> "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:test_target_tensors" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_target_tensors" -> "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:test_target_tensors" -> "Fxn:model.train_on_batch(input_val,";
    "Fxn:test_target_tensors" -> "Fxn:np.random.random((10,";
    "Fxn:test_target_tensors" -> "Fxn:np.random.random((10,";
    "Fxn:test_target_tensors" -> "Fxn:np.random.random((10,";
    "Fxn:test_target_tensors" -> "Fxn:keras.backend.variable(target_val_a)";
    "Fxn:test_target_tensors" -> "Fxn:keras.backend.variable(target_val_b)";
    "Fxn:test_target_tensors" -> "Fxn:keras.layers.Input(shape=(4,))";
    "Fxn:test_target_tensors" -> "Fxn:keras.layers.Dense(4,";
    "Fxn:test_target_tensors" -> "Fxn:name='dense_a')(inputs)";
    "Fxn:test_target_tensors" -> "Fxn:keras.layers.Dense(4,";
    "Fxn:test_target_tensors" -> "Fxn:name='dense_b')(inputs)";
    "Fxn:test_target_tensors" -> "Fxn:keras.models.Model(inputs,";
    "Fxn:test_target_tensors" -> "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:test_target_tensors" -> "Fxn:model.train_on_batch(input_val,";
    "Fxn:test_target_tensors" -> "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:test_target_tensors" -> "Fxn:model.train_on_batch(input_val,";
    "Fxn:test_target_tensors" -> "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:test_target_tensors" -> "Fxn:model.train_on_batch(input_val,";
    "Fxn:test_target_tensors" -> "Fxn:np.random.random((10,))})";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:Input(shape=(3,),";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:Input(shape=(3,),";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:Dense(4,";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:name='dense_1')(a)";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:Dropout(0.5,";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:dp(b)";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:K.placeholder([10,";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:K.placeholder([10,";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:K.placeholder([7,";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:Model([a,";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:model.compile(optimizer,";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:model.compile(optimizer,";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:np.random.random((10,";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:np.random.random((10,";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:np.random.random((10,";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:np.random.random((10,";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:np.random.random((10,";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:np.random.random((10,";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:model.compile(optimizer,";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:model.compile(optimizer,";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:np.random.random((10,";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:np.random.random((10,";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:K.backend()";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:tf.placeholder('float32',";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:shape=(None,";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:model.train_on_batch([input_a_np,";
    "Fxn:test_model_custom_target_tensors" -> "Fxn:@pytest.mark.skipif(sys.version_info";
    "Fxn:test_trainable_weights_count_consistency" -> "Fxn:.compile()";
    "Fxn:test_trainable_weights_count_consistency" -> "Fxn:Input(shape=(3,),";
    "Fxn:test_trainable_weights_count_consistency" -> "Fxn:Model(inputs=a,";
    "Fxn:test_trainable_weights_count_consistency" -> "Fxn:outputs=Dense(1)(a))";
    "Fxn:test_trainable_weights_count_consistency" -> "Fxn:Input(shape=(3,),";
    "Fxn:test_trainable_weights_count_consistency" -> "Fxn:model1(b)";
    "Fxn:test_trainable_weights_count_consistency" -> "Fxn:Model(inputs=b,";
    "Fxn:test_trainable_weights_count_consistency" -> "Fxn:outputs=Dense(1)(y))";
    "Fxn:test_trainable_weights_count_consistency" -> "Fxn:model2.compile(optimizer='adam',";
    "Fxn:test_trainable_weights_count_consistency" -> "Fxn:.summary()";
    "Fxn:test_trainable_weights_count_consistency" -> "Fxn:pytest.warns(UserWarning)";
    "Fxn:test_trainable_weights_count_consistency" -> "Fxn:model2.summary()";
    "Fxn:test_trainable_weights_count_consistency" -> "Fxn:any(['Discrepancy'";
    "Fxn:test_trainable_weights_count_consistency" -> "Fxn:str(w_.message)";
    "Fxn:test_trainable_weights_count_consistency" -> "Fxn:.fit()";
    "Fxn:test_trainable_weights_count_consistency" -> "Fxn:pytest.warns(UserWarning)";
    "Fxn:test_trainable_weights_count_consistency" -> "Fxn:model2.fit(x=np.zeros((5,";
    "Fxn:test_trainable_weights_count_consistency" -> "Fxn:y=np.zeros((5,";
    "Fxn:test_trainable_weights_count_consistency" -> "Fxn:any(['Discrepancy'";
    "Fxn:test_trainable_weights_count_consistency" -> "Fxn:str(w_.message)";
    "Fxn:test_trainable_weights_count_consistency" -> "Fxn:model2.compile(optimizer='adam',";
    "Fxn:test_trainable_weights_count_consistency" -> "Fxn:pytest.warns(None)";
    "Fxn:test_trainable_weights_count_consistency" -> "Fxn:model2.summary()";
    "Fxn:test_trainable_weights_count_consistency" -> "Fxn:len(w)";
    "Fxn:test_trainable_weights_count_consistency" -> "Fxn:.compile()";
    "Fxn:test_pandas_dataframe" -> "Fxn:Input(shape=(3,),";
    "Fxn:test_pandas_dataframe" -> "Fxn:Input(shape=(3,),";
    "Fxn:test_pandas_dataframe" -> "Fxn:Dense(4,";
    "Fxn:test_pandas_dataframe" -> "Fxn:name='dense_1')(input_a)";
    "Fxn:test_pandas_dataframe" -> "Fxn:Dense(3,";
    "Fxn:test_pandas_dataframe" -> "Fxn:name='desne_2')(input_b)";
    "Fxn:test_pandas_dataframe" -> "Fxn:Model(inputs=input_a,";
    "Fxn:test_pandas_dataframe" -> "Fxn:Model(inputs=[input_a,";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_1.compile(optimizer=optimizer,";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_2.compile(optimizer=optimizer,";
    "Fxn:test_pandas_dataframe" -> "Fxn:pd.DataFrame(np.random.random((10,";
    "Fxn:test_pandas_dataframe" -> "Fxn:pd.DataFrame(np.random.random((10,";
    "Fxn:test_pandas_dataframe" -> "Fxn:pd.DataFrame(np.random.random((10,";
    "Fxn:test_pandas_dataframe" -> "Fxn:pd.DataFrame(np.random.random((10,";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_1.fit(input_a_df,";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_2.fit([input_a_df,";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_1.fit([input_a_df],";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_1.fit({'input_a':";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_2.fit({'input_a':";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_1.predict(input_a_df)";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_2.predict([input_a_df,";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_1.predict([input_a_df])";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_1.predict({'input_a':";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_2.predict({'input_a':";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_1.predict_on_batch(input_a_df)";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_2.predict_on_batch([input_a_df,";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_1.predict_on_batch([input_a_df])";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_1.predict_on_batch({'input_a':";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_2.predict_on_batch({'input_a':";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_1.evaluate(input_a_df,";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_2.evaluate([input_a_df,";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_1.evaluate([input_a_df],";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_1.evaluate({'input_a':";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_2.evaluate({'input_a':";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_1.train_on_batch(input_a_df,";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_2.train_on_batch([input_a_df,";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_1.train_on_batch([input_a_df],";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_1.train_on_batch({'input_a':";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_2.train_on_batch({'input_a':";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_1.test_on_batch(input_a_df,";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_2.test_on_batch([input_a_df,";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_1.test_on_batch([input_a_df],";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_1.test_on_batch({'input_a':";
    "Fxn:test_pandas_dataframe" -> "Fxn:model_2.test_on_batch({'input_a':";
    "Fxn:test_pandas_dataframe" -> "Fxn:pytest.main([__file__])";
    "/tests/keras/layers/advanced_activations_test.py" -> "Import:pytest";
    "/tests/keras/layers/advanced_activations_test.py" -> "Import:layer_test";
    "/tests/keras/layers/advanced_activations_test.py" -> "Import:keras_test";
    "/tests/keras/layers/advanced_activations_test.py" -> "Import:layers";
    "/tests/keras/layers/advanced_activations_test.py" -> "Fxn:test_leaky_relu";
    "/tests/keras/layers/advanced_activations_test.py" -> "Fxn:test_prelu";
    "/tests/keras/layers/advanced_activations_test.py" -> "Fxn:test_prelu_share";
    "/tests/keras/layers/advanced_activations_test.py" -> "Fxn:test_elu";
    "/tests/keras/layers/advanced_activations_test.py" -> "Fxn:test_thresholded_relu";
    "/tests/keras/layers/advanced_activations_test.py" -> "Fxn:test_softmax";
    "/tests/keras/layers/convolutional_recurrent_test.py" -> "Import:pytest";
    "/tests/keras/layers/convolutional_recurrent_test.py" -> "Import:numpy";
    "/tests/keras/layers/convolutional_recurrent_test.py" -> "Import:assert_allclose";
    "/tests/keras/layers/convolutional_recurrent_test.py" -> "Import:backend";
    "/tests/keras/layers/convolutional_recurrent_test.py" -> "Import:Sequential,";
    "/tests/keras/layers/convolutional_recurrent_test.py" -> "Import:convolutional_recurrent,";
    "/tests/keras/layers/convolutional_recurrent_test.py" -> "Import:layer_test";
    "/tests/keras/layers/convolutional_recurrent_test.py" -> "Import:regularizers";
    "/tests/keras/layers/convolutional_recurrent_test.py" -> "Fxn:test_convolutional_recurrent";
    "/tests/keras/layers/convolutional_test.py" -> "Import:pytest";
    "/tests/keras/layers/convolutional_test.py" -> "Import:numpy";
    "/tests/keras/layers/convolutional_test.py" -> "Import:assert_allclose";
    "/tests/keras/layers/convolutional_test.py" -> "Import:layer_test";
    "/tests/keras/layers/convolutional_test.py" -> "Import:keras_test";
    "/tests/keras/layers/convolutional_test.py" -> "Import:backend";
    "/tests/keras/layers/convolutional_test.py" -> "Import:InputLayer";
    "/tests/keras/layers/convolutional_test.py" -> "Import:convolutional";
    "/tests/keras/layers/convolutional_test.py" -> "Import:pooling";
    "/tests/keras/layers/convolutional_test.py" -> "Import:Sequential";
    "/tests/keras/layers/convolutional_test.py" -> "Fxn:test_causal_dilated_conv";
    "/tests/keras/layers/convolutional_test.py" -> "Fxn:test_conv_1d";
    "/tests/keras/layers/convolutional_test.py" -> "Fxn:test_maxpooling_1d";
    "/tests/keras/layers/convolutional_test.py" -> "Fxn:test_averagepooling_1d";
    "/tests/keras/layers/convolutional_test.py" -> "Fxn:test_convolution_2d";
    "/tests/keras/layers/convolutional_test.py" -> "Fxn:test_conv2d_transpose";
    "/tests/keras/layers/convolutional_test.py" -> "Fxn:test_separable_conv_1d";
    "/tests/keras/layers/convolutional_test.py" -> "Fxn:test_separable_conv_2d";
    "/tests/keras/layers/convolutional_test.py" -> "Fxn:test_depthwise_conv_2d";
    "/tests/keras/layers/convolutional_test.py" -> "Fxn:test_globalpooling_1d";
    "/tests/keras/layers/convolutional_test.py" -> "Fxn:test_globalpooling_2d";
    "/tests/keras/layers/convolutional_test.py" -> "Fxn:test_globalpooling_3d";
    "/tests/keras/layers/convolutional_test.py" -> "Fxn:test_maxpooling_2d";
    "/tests/keras/layers/convolutional_test.py" -> "Fxn:test_averagepooling_2d";
    "/tests/keras/layers/convolutional_test.py" -> "Fxn:test_convolution_3d";
    "/tests/keras/layers/convolutional_test.py" -> "Fxn:test_conv3d_transpose";
    "/tests/keras/layers/convolutional_test.py" -> "Fxn:test_maxpooling_3d";
    "/tests/keras/layers/convolutional_test.py" -> "Fxn:test_averagepooling_3d";
    "/tests/keras/layers/convolutional_test.py" -> "Fxn:test_zero_padding_1d";
    "/tests/keras/layers/convolutional_test.py" -> "Fxn:test_zero_padding_2d";
    "/tests/keras/layers/convolutional_test.py" -> "Fxn:test_zero_padding_3d";
    "/tests/keras/layers/convolutional_test.py" -> "Fxn:test_upsampling_1d";
    "/tests/keras/layers/convolutional_test.py" -> "Fxn:test_upsampling_2d";
    "/tests/keras/layers/convolutional_test.py" -> "Fxn:test_upsampling_3d";
    "/tests/keras/layers/convolutional_test.py" -> "Fxn:test_cropping_1d";
    "/tests/keras/layers/convolutional_test.py" -> "Fxn:test_cropping_2d";
    "/tests/keras/layers/convolutional_test.py" -> "Fxn:test_cropping_3d";
    "/tests/keras/layers/core_test.py" -> "Import:pytest";
    "/tests/keras/layers/core_test.py" -> "Import:numpy";
    "/tests/keras/layers/core_test.py" -> "Import:assert_allclose";
    "/tests/keras/layers/core_test.py" -> "Import:backend";
    "/tests/keras/layers/core_test.py" -> "Import:layers";
    "/tests/keras/layers/core_test.py" -> "Import:Model";
    "/tests/keras/layers/core_test.py" -> "Import:layer_test";
    "/tests/keras/layers/core_test.py" -> "Import:keras_test";
    "/tests/keras/layers/core_test.py" -> "Import:regularizers";
    "/tests/keras/layers/core_test.py" -> "Import:constraints";
    "/tests/keras/layers/core_test.py" -> "Import:deserialize";
    "/tests/keras/layers/core_test.py" -> "Fxn:test_masking";
    "/tests/keras/layers/core_test.py" -> "Fxn:test_dropout";
    "/tests/keras/layers/core_test.py" -> "Fxn:test_activation";
    "/tests/keras/layers/core_test.py" -> "Fxn:test_reshape";
    "/tests/keras/layers/core_test.py" -> "Fxn:test_permute";
    "/tests/keras/layers/core_test.py" -> "Fxn:test_flatten";
    "/tests/keras/layers/core_test.py" -> "Fxn:test_repeat_vector";
    "/tests/keras/layers/core_test.py" -> "Fxn:test_lambda";
    "/tests/keras/layers/core_test.py" -> "Fxn:antirectifier";
    "/tests/keras/layers/core_test.py" -> "Fxn:antirectifier_output_shape";
    "/tests/keras/layers/core_test.py" -> "Fxn:test_multiple_outputs";
    "/tests/keras/layers/core_test.py" -> "Fxn:func";
    "/tests/keras/layers/core_test.py" -> "Fxn:output_shape";
    "/tests/keras/layers/core_test.py" -> "Fxn:mask";
    "/tests/keras/layers/core_test.py" -> "Fxn:test_multiple_outputs_no_mask";
    "/tests/keras/layers/core_test.py" -> "Fxn:func";
    "/tests/keras/layers/core_test.py" -> "Fxn:output_shape";
    "/tests/keras/layers/core_test.py" -> "Fxn:f";
    "/tests/keras/layers/core_test.py" -> "Fxn:f";
    "/tests/keras/layers/core_test.py" -> "Fxn:f_shape";
    "/tests/keras/layers/core_test.py" -> "Fxn:test_dense";
    "/tests/keras/layers/core_test.py" -> "Fxn:test_activity_regularization";
    "/tests/keras/layers/cudnn_recurrent_test.py" -> "Import:pytest";
    "/tests/keras/layers/cudnn_recurrent_test.py" -> "Import:numpy";
    "/tests/keras/layers/cudnn_recurrent_test.py" -> "Import:assert_allclose";
    "/tests/keras/layers/cudnn_recurrent_test.py" -> "Import:keras";
    "/tests/keras/layers/cudnn_recurrent_test.py" -> "Import:layer_test";
    "/tests/keras/layers/cudnn_recurrent_test.py" -> "Import:keras_test";
    "/tests/keras/layers/cudnn_recurrent_test.py" -> "Import:time";
    "/tests/keras/layers/cudnn_recurrent_test.py" -> "Fxn:test_cudnn_rnn_canonical_to_params_lstm";
    "/tests/keras/layers/cudnn_recurrent_test.py" -> "Fxn:test_cudnn_rnn_canonical_to_params_gru";
    "/tests/keras/layers/cudnn_recurrent_test.py" -> "Fxn:test_cudnn_rnn_timing";
    "/tests/keras/layers/cudnn_recurrent_test.py" -> "Fxn:test_cudnn_rnn_basics";
    "/tests/keras/layers/cudnn_recurrent_test.py" -> "Fxn:test_trainability";
    "/tests/keras/layers/cudnn_recurrent_test.py" -> "Fxn:test_regularizer";
    "/tests/keras/layers/cudnn_recurrent_test.py" -> "Fxn:test_return_state";
    "/tests/keras/layers/cudnn_recurrent_test.py" -> "Fxn:test_specify_initial_state_keras_tensor";
    "/tests/keras/layers/cudnn_recurrent_test.py" -> "Fxn:test_statefulness";
    "/tests/keras/layers/cudnn_recurrent_test.py" -> "Fxn:test_load_weights_between_noncudnn_rnn";
    "/tests/keras/layers/cudnn_recurrent_test.py" -> "Fxn:convert_weights";
    "/tests/keras/layers/cudnn_recurrent_test.py" -> "Fxn:test_cudnnrnn_bidirectional";
    "/tests/keras/layers/cudnn_recurrent_test.py" -> "Fxn:test_preprocess_weights_for_loading_gru_incompatible";
    "/tests/keras/layers/cudnn_recurrent_test.py" -> "Fxn:gru";
    "/tests/keras/layers/cudnn_recurrent_test.py" -> "Fxn:initialize_weights";
    "/tests/keras/layers/cudnn_recurrent_test.py" -> "Fxn:assert_not_compatible";
    "/tests/keras/layers/embeddings_test.py" -> "Import:pytest";
    "/tests/keras/layers/embeddings_test.py" -> "Import:layer_test,";
    "/tests/keras/layers/embeddings_test.py" -> "Import:Embedding";
    "/tests/keras/layers/embeddings_test.py" -> "Import:keras.backend";
    "/tests/keras/layers/embeddings_test.py" -> "Fxn:test_embedding";
    "/tests/keras/layers/local_test.py" -> "Import:pytest";
    "/tests/keras/layers/local_test.py" -> "Import:layer_test";
    "/tests/keras/layers/local_test.py" -> "Import:keras_test";
    "/tests/keras/layers/local_test.py" -> "Import:local";
    "/tests/keras/layers/local_test.py" -> "Fxn:test_locallyconnected_1d";
    "/tests/keras/layers/local_test.py" -> "Fxn:test_locallyconnected_2d";
    "/tests/keras/layers/merge_test.py" -> "Import:pytest";
    "/tests/keras/layers/merge_test.py" -> "Import:numpy";
    "/tests/keras/layers/merge_test.py" -> "Import:assert_allclose";
    "/tests/keras/layers/merge_test.py" -> "Import:layers";
    "/tests/keras/layers/merge_test.py" -> "Import:models";
    "/tests/keras/layers/merge_test.py" -> "Import:backend";
    "/tests/keras/layers/merge_test.py" -> "Import:layer_test";
    "/tests/keras/layers/merge_test.py" -> "Import:keras_test";
    "/tests/keras/layers/merge_test.py" -> "Import:merge";
    "/tests/keras/layers/merge_test.py" -> "Fxn:test_merge_add";
    "/tests/keras/layers/merge_test.py" -> "Fxn:test_merge_subtract";
    "/tests/keras/layers/merge_test.py" -> "Fxn:test_merge_multiply";
    "/tests/keras/layers/merge_test.py" -> "Fxn:test_merge_average";
    "/tests/keras/layers/merge_test.py" -> "Fxn:test_merge_maximum";
    "/tests/keras/layers/merge_test.py" -> "Fxn:test_merge_minimum";
    "/tests/keras/layers/merge_test.py" -> "Fxn:test_merge_concatenate";
    "/tests/keras/layers/merge_test.py" -> "Fxn:test_merge_dot";
    "/tests/keras/layers/merge_test.py" -> "Fxn:test_merge_broadcast";
    "/tests/keras/layers/noise_test.py" -> "Import:pytest";
    "/tests/keras/layers/noise_test.py" -> "Import:layer_test";
    "/tests/keras/layers/noise_test.py" -> "Import:keras_test";
    "/tests/keras/layers/noise_test.py" -> "Import:noise";
    "/tests/keras/layers/noise_test.py" -> "Import:backend";
    "/tests/keras/layers/noise_test.py" -> "Fxn:test_GaussianNoise";
    "/tests/keras/layers/noise_test.py" -> "Fxn:test_GaussianDropout";
    "/tests/keras/layers/noise_test.py" -> "Fxn:test_AlphaDropout";
    "/tests/keras/layers/normalization_test.py" -> "Import:pytest";
    "/tests/keras/layers/normalization_test.py" -> "Import:numpy";
    "/tests/keras/layers/normalization_test.py" -> "Import:assert_allclose";
    "/tests/keras/layers/normalization_test.py" -> "Import:Input";
    "/tests/keras/layers/normalization_test.py" -> "Import:regularizers";
    "/tests/keras/layers/normalization_test.py" -> "Import:layer_test,";
    "/tests/keras/layers/normalization_test.py" -> "Import:normalization";
    "/tests/keras/layers/normalization_test.py" -> "Import:Sequential,";
    "/tests/keras/layers/normalization_test.py" -> "Import:backend";
    "/tests/keras/layers/normalization_test.py" -> "Fxn:test_basic_batchnorm";
    "/tests/keras/layers/normalization_test.py" -> "Fxn:test_batchnorm_correctness_1d";
    "/tests/keras/layers/normalization_test.py" -> "Fxn:test_batchnorm_correctness_2d";
    "/tests/keras/layers/normalization_test.py" -> "Fxn:test_batchnorm_training_argument";
    "/tests/keras/layers/normalization_test.py" -> "Fxn:test_batchnorm_mode_twice";
    "/tests/keras/layers/normalization_test.py" -> "Fxn:test_batchnorm_convnet";
    "/tests/keras/layers/normalization_test.py" -> "Fxn:test_batchnorm_convnet_no_center_no_scale";
    "/tests/keras/layers/normalization_test.py" -> "Fxn:test_shared_batchnorm";
    "/tests/keras/layers/normalization_test.py" -> "Fxn:test_that_trainable_disables_updates";
    "/tests/keras/layers/recurrent_test.py" -> "Import:pytest";
    "/tests/keras/layers/recurrent_test.py" -> "Import:numpy";
    "/tests/keras/layers/recurrent_test.py" -> "Import:assert_allclose";
    "/tests/keras/layers/recurrent_test.py" -> "Import:keras";
    "/tests/keras/layers/recurrent_test.py" -> "Import:layer_test";
    "/tests/keras/layers/recurrent_test.py" -> "Import:keras_test";
    "/tests/keras/layers/recurrent_test.py" -> "Import:recurrent";
    "/tests/keras/layers/recurrent_test.py" -> "Import:embeddings";
    "/tests/keras/layers/recurrent_test.py" -> "Import:Sequential";
    "/tests/keras/layers/recurrent_test.py" -> "Import:Model";
    "/tests/keras/layers/recurrent_test.py" -> "Import:Input";
    "/tests/keras/layers/recurrent_test.py" -> "Import:Masking";
    "/tests/keras/layers/recurrent_test.py" -> "Import:regularizers";
    "/tests/keras/layers/recurrent_test.py" -> "Import:backend";
    "/tests/keras/layers/recurrent_test.py" -> "Fxn:rnn_test";
    "/tests/keras/layers/recurrent_test.py" -> "Fxn:rnn_cell_test";
    "/tests/keras/layers/recurrent_test.py" -> "Fxn:test_return_sequences";
    "/tests/keras/layers/recurrent_test.py" -> "Fxn:test_dynamic_behavior";
    "/tests/keras/layers/recurrent_test.py" -> "Fxn:test_stateful_invalid_use";
    "/tests/keras/layers/recurrent_test.py" -> "Fxn:test_dropout";
    "/tests/keras/layers/recurrent_test.py" -> "Fxn:test_statefulness";
    "/tests/keras/layers/recurrent_test.py" -> "Fxn:test_masking_correctness";
    "/tests/keras/layers/recurrent_test.py" -> "Fxn:test_implementation_mode";
    "/tests/keras/layers/recurrent_test.py" -> "Fxn:test_regularizer";
    "/tests/keras/layers/recurrent_test.py" -> "Fxn:test_trainability";
    "/tests/keras/layers/recurrent_test.py" -> "Fxn:test_masking_layer";
    "/tests/keras/layers/recurrent_test.py" -> "Fxn:test_from_config";
    "/tests/keras/layers/recurrent_test.py" -> "Fxn:test_specify_initial_state_keras_tensor";
    "/tests/keras/layers/recurrent_test.py" -> "Fxn:test_specify_initial_state_non_keras_tensor";
    "/tests/keras/layers/recurrent_test.py" -> "Fxn:test_reset_states_with_values";
    "/tests/keras/layers/recurrent_test.py" -> "Fxn:test_initial_states_as_other_inputs";
    "/tests/keras/layers/recurrent_test.py" -> "Fxn:test_specify_state_with_masking";
    "/tests/keras/layers/recurrent_test.py" -> "Fxn:test_return_state";
    "/tests/keras/layers/recurrent_test.py" -> "Fxn:test_state_reuse";
    "/tests/keras/layers/recurrent_test.py" -> "Fxn:test_state_reuse_with_dropout";
    "/tests/keras/layers/recurrent_test.py" -> "Fxn:test_minimal_rnn_cell_non_layer";
    "/tests/keras/layers/recurrent_test.py" -> "class:MinimalRNNCell(object):";
    "/tests/keras/layers/recurrent_test.py" -> "class:MinimalRNNCell(object):";
    "/tests/keras/layers/recurrent_test.py" -> "class:MinimalRNNCell(keras.layers.Layer):";
    "/tests/keras/layers/recurrent_test.py" -> "class:RNNCellWithConstants(keras.layers.Layer):";
    "/tests/keras/layers/recurrent_test.py" -> "class:RNNCellWithConstants(keras.layers.Layer):";
    "class:MinimalRNNCell(object):" -> "Fxn:__init__";
    "class:MinimalRNNCell(object):" -> "Fxn:call";
    "class:MinimalRNNCell(object):" -> "Fxn:test_minimal_rnn_cell_non_layer_multiple_states";
    "Fxn:__init__" -> "Fxn:keras.backend.variable(";
    "Fxn:__init__" -> "Fxn:np.random.random((input_dim,";
    "Fxn:call" -> "Fxn:keras.backend.dot(inputs,";
    "Fxn:call" -> "Fxn:MinimalRNNCell(32,";
    "Fxn:call" -> "Fxn:keras.Input((None,";
    "Fxn:call" -> "Fxn:recurrent.RNN(cell)";
    "Fxn:call" -> "Fxn:layer(x)";
    "Fxn:call" -> "Fxn:keras.models.Model(x,";
    "Fxn:call" -> "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:call" -> "Fxn:model.train_on_batch(np.zeros((6,";
    "Fxn:call" -> "Fxn:np.zeros((6,";
    "Fxn:call" -> "Fxn:[MinimalRNNCell(8,";
    "Fxn:call" -> "Fxn:MinimalRNNCell(32,";
    "Fxn:call" -> "Fxn:MinimalRNNCell(32,";
    "Fxn:call" -> "Fxn:recurrent.RNN(cells)";
    "Fxn:call" -> "Fxn:layer(x)";
    "Fxn:call" -> "Fxn:keras.models.Model(x,";
    "Fxn:call" -> "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:call" -> "Fxn:model.train_on_batch(np.zeros((6,";
    "Fxn:call" -> "Fxn:np.zeros((6,";
    "class:MinimalRNNCell(object):" -> "Fxn:__init__";
    "class:MinimalRNNCell(object):" -> "Fxn:call";
    "class:MinimalRNNCell(object):" -> "Fxn:test_minimal_rnn_cell_layer";
    "Fxn:__init__" -> "Fxn:keras.backend.variable(";
    "Fxn:__init__" -> "Fxn:np.random.random((input_dim,";
    "Fxn:call" -> "Fxn:keras.backend.dot(inputs,";
    "Fxn:call" -> "Fxn:MinimalRNNCell(32,";
    "Fxn:call" -> "Fxn:keras.Input((None,";
    "Fxn:call" -> "Fxn:recurrent.RNN(cell)";
    "Fxn:call" -> "Fxn:layer(x)";
    "Fxn:call" -> "Fxn:keras.models.Model(x,";
    "Fxn:call" -> "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:call" -> "Fxn:model.train_on_batch(np.zeros((6,";
    "Fxn:call" -> "Fxn:np.zeros((6,";
    "Fxn:call" -> "Fxn:[MinimalRNNCell(8,";
    "Fxn:call" -> "Fxn:MinimalRNNCell(16,";
    "Fxn:call" -> "Fxn:MinimalRNNCell(32,";
    "Fxn:call" -> "Fxn:recurrent.RNN(cells)";
    "Fxn:call" -> "Fxn:layer(x)";
    "Fxn:call" -> "Fxn:keras.models.Model(x,";
    "Fxn:call" -> "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:call" -> "Fxn:model.train_on_batch(np.zeros((6,";
    "Fxn:call" -> "Fxn:np.zeros((6,";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:__init__";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:build";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:call";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:get_config";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:test_builtin_rnn_cell_layer";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:test_stacked_rnn_dropout";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:test_stacked_rnn_attributes";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:test_stacked_rnn_compute_output_shape";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:test_batch_size_equal_one";
    "class:MinimalRNNCell(keras.layers.Layer):" -> "Fxn:test_rnn_cell_with_constants_layer";
    "Fxn:__init__" -> "Fxn:super(MinimalRNNCell,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:build" -> "Fxn:len(input_shape)";
    "Fxn:build" -> "Fxn:self.add_weight(shape=(input_shape[-1],";
    "Fxn:build" -> "Fxn:self.add_weight(";
    "Fxn:build" -> "Fxn:shape=(self.units,";
    "Fxn:call" -> "Fxn:keras.backend.dot(inputs,";
    "Fxn:call" -> "Fxn:keras.backend.dot(prev_output,";
    "Fxn:get_config" -> "Fxn:super(MinimalRNNCell,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "Fxn:get_config" -> "Fxn:keras.Input((None,";
    "Fxn:get_config" -> "Fxn:MinimalRNNCell(32)";
    "Fxn:get_config" -> "Fxn:recurrent.RNN(cell)";
    "Fxn:get_config" -> "Fxn:layer(x)";
    "Fxn:get_config" -> "Fxn:keras.models.Model(x,";
    "Fxn:get_config" -> "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:get_config" -> "Fxn:model.train_on_batch(np.zeros((6,";
    "Fxn:get_config" -> "Fxn:np.zeros((6,";
    "Fxn:get_config" -> "Fxn:np.random.random((6,";
    "Fxn:get_config" -> "Fxn:model.predict(x_np)";
    "Fxn:get_config" -> "Fxn:model.get_weights()";
    "Fxn:get_config" -> "Fxn:layer.get_config()";
    "Fxn:get_config" -> "Fxn:keras.utils.CustomObjectScope({'MinimalRNNCell':";
    "Fxn:get_config" -> "Fxn:recurrent.RNN.from_config(config)";
    "Fxn:get_config" -> "Fxn:layer(x)";
    "Fxn:get_config" -> "Fxn:keras.models.Model(x,";
    "Fxn:get_config" -> "Fxn:model.set_weights(weights)";
    "Fxn:get_config" -> "Fxn:model.predict(x_np)";
    "Fxn:get_config" -> "Fxn:assert_allclose(y_np,";
    "Fxn:get_config" -> "Fxn:[MinimalRNNCell(8),";
    "Fxn:get_config" -> "Fxn:MinimalRNNCell(12),";
    "Fxn:get_config" -> "Fxn:MinimalRNNCell(32)]";
    "Fxn:get_config" -> "Fxn:recurrent.RNN(cells)";
    "Fxn:get_config" -> "Fxn:layer(x)";
    "Fxn:get_config" -> "Fxn:keras.models.Model(x,";
    "Fxn:get_config" -> "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:get_config" -> "Fxn:model.train_on_batch(np.zeros((6,";
    "Fxn:get_config" -> "Fxn:np.zeros((6,";
    "Fxn:get_config" -> "Fxn:np.random.random((6,";
    "Fxn:get_config" -> "Fxn:model.predict(x_np)";
    "Fxn:get_config" -> "Fxn:model.get_weights()";
    "Fxn:get_config" -> "Fxn:layer.get_config()";
    "Fxn:get_config" -> "Fxn:keras.utils.CustomObjectScope({'MinimalRNNCell':";
    "Fxn:get_config" -> "Fxn:recurrent.RNN.from_config(config)";
    "Fxn:get_config" -> "Fxn:layer(x)";
    "Fxn:get_config" -> "Fxn:keras.models.Model(x,";
    "Fxn:get_config" -> "Fxn:model.set_weights(weights)";
    "Fxn:get_config" -> "Fxn:model.predict(x_np)";
    "Fxn:get_config" -> "Fxn:assert_allclose(y_np,";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:keras.Input((None,";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:cell_class(32)";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:recurrent.RNN(cell)";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:layer(x)";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:keras.models.Model(x,";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:model.train_on_batch(np.zeros((6,";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:np.zeros((6,";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:np.random.random((6,";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:model.predict(x_np)";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:model.get_weights()";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:layer.get_config()";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:recurrent.RNN.from_config(config)";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:layer(x)";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:keras.models.Model(x,";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:model.set_weights(weights)";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:model.predict(x_np)";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:assert_allclose(y_np,";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:[cell_class(8),";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:cell_class(12),";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:cell_class(32)]";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:recurrent.RNN(cells)";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:layer(x)";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:keras.models.Model(x,";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:model.train_on_batch(np.zeros((6,";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:np.zeros((6,";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:np.random.random((6,";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:model.predict(x_np)";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:model.get_weights()";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:layer.get_config()";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:recurrent.RNN.from_config(config)";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:layer(x)";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:keras.models.Model(x,";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:model.set_weights(weights)";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:model.predict(x_np)";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:assert_allclose(y_np,";
    "Fxn:test_builtin_rnn_cell_layer" -> "Fxn:@pytest.mark.skipif((K.backend()";
    "Fxn:test_stacked_rnn_dropout" -> "Fxn:[recurrent.LSTMCell(3,";
    "Fxn:test_stacked_rnn_dropout" -> "Fxn:recurrent.LSTMCell(3,";
    "Fxn:test_stacked_rnn_dropout" -> "Fxn:recurrent.RNN(cells)";
    "Fxn:test_stacked_rnn_dropout" -> "Fxn:keras.Input((None,";
    "Fxn:test_stacked_rnn_dropout" -> "Fxn:layer(x)";
    "Fxn:test_stacked_rnn_dropout" -> "Fxn:keras.models.Model(x,";
    "Fxn:test_stacked_rnn_dropout" -> "Fxn:model.compile('sgd',";
    "Fxn:test_stacked_rnn_dropout" -> "Fxn:np.random.random((6,";
    "Fxn:test_stacked_rnn_dropout" -> "Fxn:np.random.random((6,";
    "Fxn:test_stacked_rnn_dropout" -> "Fxn:model.train_on_batch(x_np,";
    "Fxn:test_stacked_rnn_attributes" -> "Fxn:[recurrent.LSTMCell(3),";
    "Fxn:test_stacked_rnn_attributes" -> "Fxn:recurrent.LSTMCell(3,";
    "Fxn:test_stacked_rnn_attributes" -> "Fxn:recurrent.RNN(cells)";
    "Fxn:test_stacked_rnn_attributes" -> "Fxn:layer.build((None,";
    "Fxn:test_stacked_rnn_attributes" -> "Fxn:len(layer.losses)";
    "Fxn:test_stacked_rnn_attributes" -> "Fxn:len(layer.trainable_weights)";
    "Fxn:test_stacked_rnn_attributes" -> "Fxn:len(layer.trainable_weights)";
    "Fxn:test_stacked_rnn_attributes" -> "Fxn:len(layer.non_trainable_weights)";
    "Fxn:test_stacked_rnn_attributes" -> "Fxn:keras.Input((None,";
    "Fxn:test_stacked_rnn_attributes" -> "Fxn:K.sum(x)";
    "Fxn:test_stacked_rnn_attributes" -> "Fxn:cells[0].add_loss(y,";
    "Fxn:test_stacked_rnn_attributes" -> "Fxn:layer.get_losses_for(x)";
    "Fxn:test_stacked_rnn_compute_output_shape" -> "Fxn:[recurrent.LSTMCell(3),";
    "Fxn:test_stacked_rnn_compute_output_shape" -> "Fxn:recurrent.LSTMCell(6)]";
    "Fxn:test_stacked_rnn_compute_output_shape" -> "Fxn:recurrent.RNN(cells,";
    "Fxn:test_stacked_rnn_compute_output_shape" -> "Fxn:layer.compute_output_shape((None,";
    "Fxn:test_stacked_rnn_compute_output_shape" -> "Fxn:[(None,";
    "Fxn:test_batch_size_equal_one" -> "Fxn:Input(batch_shape=(1,";
    "Fxn:test_batch_size_equal_one" -> "Fxn:layer_class(units)";
    "Fxn:test_batch_size_equal_one" -> "Fxn:layer(inputs)";
    "Fxn:test_batch_size_equal_one" -> "Fxn:Model(inputs,";
    "Fxn:test_batch_size_equal_one" -> "Fxn:model.compile('sgd',";
    "Fxn:test_batch_size_equal_one" -> "Fxn:np.random.random((1,";
    "Fxn:test_batch_size_equal_one" -> "Fxn:np.random.random((1,";
    "Fxn:test_batch_size_equal_one" -> "Fxn:model.train_on_batch(x,";
    "class:RNNCellWithConstants(keras.layers.Layer):" -> "Fxn:__init__";
    "class:RNNCellWithConstants(keras.layers.Layer):" -> "Fxn:build";
    "class:RNNCellWithConstants(keras.layers.Layer):" -> "Fxn:call";
    "class:RNNCellWithConstants(keras.layers.Layer):" -> "Fxn:get_config";
    "class:RNNCellWithConstants(keras.layers.Layer):" -> "Fxn:test_rnn_cell_with_constants_layer_passing_initial_state";
    "Fxn:__init__" -> "Fxn:super(RNNCellWithConstants,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:build" -> "Fxn:isinstance(input_shape,";
    "Fxn:build" -> "Fxn:TypeError('expects";
    "Fxn:build" -> "Fxn:self.add_weight(";
    "Fxn:build" -> "Fxn:shape=(input_shape[-1],";
    "Fxn:build" -> "Fxn:self.add_weight(";
    "Fxn:build" -> "Fxn:shape=(self.units,";
    "Fxn:build" -> "Fxn:self.add_weight(";
    "Fxn:build" -> "Fxn:shape=(constant_shape[-1],";
    "Fxn:call" -> "Fxn:keras.backend.dot(inputs,";
    "Fxn:call" -> "Fxn:keras.backend.dot(prev_output,";
    "Fxn:call" -> "Fxn:keras.backend.dot(constant,";
    "Fxn:get_config" -> "Fxn:super(RNNCellWithConstants,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "Fxn:get_config" -> "Fxn:keras.Input((None,";
    "Fxn:get_config" -> "Fxn:keras.Input((3,))";
    "Fxn:get_config" -> "Fxn:RNNCellWithConstants(32)";
    "Fxn:get_config" -> "Fxn:recurrent.RNN(cell)";
    "Fxn:get_config" -> "Fxn:layer(x,";
    "Fxn:get_config" -> "Fxn:keras.models.Model([x,";
    "Fxn:get_config" -> "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:get_config" -> "Fxn:model.train_on_batch(";
    "Fxn:get_config" -> "Fxn:[np.zeros((6,";
    "Fxn:get_config" -> "Fxn:np.zeros((6,";
    "Fxn:get_config" -> "Fxn:np.zeros((6,";
    "Fxn:get_config" -> "Fxn:np.random.random((6,";
    "Fxn:get_config" -> "Fxn:np.random.random((6,";
    "Fxn:get_config" -> "Fxn:model.predict([x_np,";
    "Fxn:get_config" -> "Fxn:model.get_weights()";
    "Fxn:get_config" -> "Fxn:layer.get_config()";
    "Fxn:get_config" -> "Fxn:keras.utils.CustomObjectScope(custom_objects):";
    "Fxn:get_config" -> "Fxn:recurrent.RNN.from_config(config.copy())";
    "Fxn:get_config" -> "Fxn:layer(x,";
    "Fxn:get_config" -> "Fxn:keras.models.Model([x,";
    "Fxn:get_config" -> "Fxn:model.set_weights(weights)";
    "Fxn:get_config" -> "Fxn:model.predict([x_np,";
    "Fxn:get_config" -> "Fxn:assert_allclose(y_np,";
    "Fxn:get_config" -> "Fxn:keras.utils.CustomObjectScope(custom_objects):";
    "Fxn:get_config" -> "Fxn:recurrent.RNN.from_config(config.copy())";
    "Fxn:get_config" -> "Fxn:layer([x,";
    "Fxn:get_config" -> "Fxn:keras.models.Model([x,";
    "Fxn:get_config" -> "Fxn:model.set_weights(weights)";
    "Fxn:get_config" -> "Fxn:model.predict([x_np,";
    "Fxn:get_config" -> "Fxn:assert_allclose(y_np,";
    "Fxn:get_config" -> "Fxn:[recurrent.GRUCell(8),";
    "Fxn:get_config" -> "Fxn:RNNCellWithConstants(12),";
    "Fxn:get_config" -> "Fxn:RNNCellWithConstants(32)]";
    "Fxn:get_config" -> "Fxn:recurrent.RNN(cells)";
    "Fxn:get_config" -> "Fxn:layer(x,";
    "Fxn:get_config" -> "Fxn:keras.models.Model([x,";
    "Fxn:get_config" -> "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:get_config" -> "Fxn:model.train_on_batch(";
    "Fxn:get_config" -> "Fxn:[np.zeros((6,";
    "Fxn:get_config" -> "Fxn:np.zeros((6,";
    "Fxn:get_config" -> "Fxn:np.zeros((6,";
    "Fxn:get_config" -> "Fxn:np.random.random((6,";
    "Fxn:get_config" -> "Fxn:np.random.random((6,";
    "Fxn:get_config" -> "Fxn:model.predict([x_np,";
    "Fxn:get_config" -> "Fxn:model.get_weights()";
    "Fxn:get_config" -> "Fxn:layer.get_config()";
    "Fxn:get_config" -> "Fxn:keras.utils.CustomObjectScope(custom_objects):";
    "Fxn:get_config" -> "Fxn:recurrent.RNN.from_config(config.copy())";
    "Fxn:get_config" -> "Fxn:layer(x,";
    "Fxn:get_config" -> "Fxn:keras.models.Model([x,";
    "Fxn:get_config" -> "Fxn:model.set_weights(weights)";
    "Fxn:get_config" -> "Fxn:model.predict([x_np,";
    "Fxn:get_config" -> "Fxn:assert_allclose(y_np,";
    "class:RNNCellWithConstants(keras.layers.Layer):" -> "Fxn:__init__";
    "class:RNNCellWithConstants(keras.layers.Layer):" -> "Fxn:build";
    "class:RNNCellWithConstants(keras.layers.Layer):" -> "Fxn:call";
    "class:RNNCellWithConstants(keras.layers.Layer):" -> "Fxn:get_config";
    "Fxn:__init__" -> "Fxn:super(RNNCellWithConstants,";
    "Fxn:__init__" -> "Fxn:self).__init__(**kwargs)";
    "Fxn:build" -> "Fxn:isinstance(input_shape,";
    "Fxn:build" -> "Fxn:TypeError('expects";
    "Fxn:build" -> "Fxn:self.add_weight(";
    "Fxn:build" -> "Fxn:shape=(input_shape[-1],";
    "Fxn:build" -> "Fxn:self.add_weight(";
    "Fxn:build" -> "Fxn:shape=(self.units,";
    "Fxn:build" -> "Fxn:self.add_weight(";
    "Fxn:build" -> "Fxn:shape=(constant_shape[-1],";
    "Fxn:call" -> "Fxn:keras.backend.dot(inputs,";
    "Fxn:call" -> "Fxn:keras.backend.dot(prev_output,";
    "Fxn:call" -> "Fxn:keras.backend.dot(constant,";
    "Fxn:get_config" -> "Fxn:super(RNNCellWithConstants,";
    "Fxn:get_config" -> "Fxn:self).get_config()";
    "Fxn:get_config" -> "Fxn:dict(list(base_config.items())";
    "Fxn:get_config" -> "Fxn:list(config.items()))";
    "Fxn:get_config" -> "Fxn:keras.Input((None,";
    "Fxn:get_config" -> "Fxn:keras.Input((3,))";
    "Fxn:get_config" -> "Fxn:keras.Input((32,))";
    "Fxn:get_config" -> "Fxn:RNNCellWithConstants(32)";
    "Fxn:get_config" -> "Fxn:recurrent.RNN(cell)";
    "Fxn:get_config" -> "Fxn:layer(x,";
    "Fxn:get_config" -> "Fxn:keras.models.Model([x,";
    "Fxn:get_config" -> "Fxn:model.compile(optimizer='rmsprop',";
    "Fxn:get_config" -> "Fxn:model.train_on_batch(";
    "Fxn:get_config" -> "Fxn:[np.zeros((6,";
    "Fxn:get_config" -> "Fxn:np.zeros((6,";
    "Fxn:get_config" -> "Fxn:np.zeros((6,";
    "Fxn:get_config" -> "Fxn:np.zeros((6,";
    "Fxn:get_config" -> "Fxn:np.random.random((6,";
    "Fxn:get_config" -> "Fxn:np.random.random((6,";
    "Fxn:get_config" -> "Fxn:np.random.random((6,";
    "Fxn:get_config" -> "Fxn:model.predict([x_np,";
    "Fxn:get_config" -> "Fxn:model.get_weights()";
    "Fxn:get_config" -> "Fxn:layer.get_config()";
    "Fxn:get_config" -> "Fxn:keras.utils.CustomObjectScope(custom_objects):";
    "Fxn:get_config" -> "Fxn:recurrent.RNN.from_config(config.copy())";
    "Fxn:get_config" -> "Fxn:layer(x,";
    "Fxn:get_config" -> "Fxn:keras.models.Model([x,";
    "Fxn:get_config" -> "Fxn:model.set_weights(weights)";
    "Fxn:get_config" -> "Fxn:model.predict([x_np,";
    "Fxn:get_config" -> "Fxn:assert_allclose(y_np,";
    "Fxn:get_config" -> "Fxn:model.predict([x_np,";
    "Fxn:get_config" -> "Fxn:pytest.raises(AssertionError):";
    "Fxn:get_config" -> "Fxn:assert_allclose(y_np,";
    "Fxn:get_config" -> "Fxn:keras.utils.CustomObjectScope(custom_objects):";
    "Fxn:get_config" -> "Fxn:recurrent.RNN.from_config(config.copy())";
    "Fxn:get_config" -> "Fxn:layer([x,";
    "Fxn:get_config" -> "Fxn:keras.models.Model([x,";
    "Fxn:get_config" -> "Fxn:model.set_weights(weights)";
    "Fxn:get_config" -> "Fxn:model.predict([x_np,";
    "Fxn:get_config" -> "Fxn:assert_allclose(y_np,";
    "Fxn:get_config" -> "Fxn:pytest.main([__file__])";
    "/tests/keras/layers/wrappers_test.py" -> "Import:pytest";
    "/tests/keras/layers/wrappers_test.py" -> "Import:numpy";
    "/tests/keras/layers/wrappers_test.py" -> "Import:assert_allclose";
    "/tests/keras/layers/wrappers_test.py" -> "Import:keras_test";
    "/tests/keras/layers/wrappers_test.py" -> "Import:wrappers,";
    "/tests/keras/layers/wrappers_test.py" -> "Import:layers";
    "/tests/keras/layers/wrappers_test.py" -> "Import:Sequential,";
    "/tests/keras/layers/wrappers_test.py" -> "Import:backend";
    "/tests/keras/layers/wrappers_test.py" -> "Import:_object_list_uid,";
    "/tests/keras/layers/wrappers_test.py" -> "Fxn:test_TimeDistributed";
    "/tests/keras/layers/wrappers_test.py" -> "Fxn:test_TimeDistributed_learning_phase";
    "/tests/keras/layers/wrappers_test.py" -> "Fxn:test_TimeDistributed_trainable";
    "/tests/keras/layers/wrappers_test.py" -> "Fxn:test_regularizers";
    "/tests/keras/layers/wrappers_test.py" -> "Fxn:test_Bidirectional";
    "/tests/keras/layers/wrappers_test.py" -> "Fxn:test_Bidirectional_merged_value";
    "/tests/keras/layers/wrappers_test.py" -> "Fxn:test_Bidirectional_dropout";
    "/tests/keras/layers/wrappers_test.py" -> "Fxn:test_Bidirectional_state_reuse";
    "/tests/keras/layers/wrappers_test.py" -> "Fxn:test_Bidirectional_trainable";
    "/tests/keras/legacy/interface_test.py" -> "Import:pytest";
    "/tests/keras/legacy/interface_test.py" -> "Import:json";
    "/tests/keras/legacy/interface_test.py" -> "Import:keras_test";
    "/tests/keras/legacy/interface_test.py" -> "Import:keras";
    "/tests/keras/legacy/interface_test.py" -> "Import:numpy";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_dense_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_dropout_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_embedding_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_maxpooling1d_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_avgpooling1d_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_prelu_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_gaussiannoise_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_lstm_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_simplernn_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_gru_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_gaussiandropout_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_maxpooling2d_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_avgpooling2d_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_maxpooling3d_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_avgpooling3d_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_global_maxpooling2d_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_global_avgpooling2d_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_global_maxpooling3d_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_global_avgpooling3d_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_upsampling1d_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_upsampling2d_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_upsampling3d_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_conv2d_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_deconv2d_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_conv1d_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_separable_conv2d_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_conv3d_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_convlstm2d_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_batchnorm_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_atrousconv1d_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_atrousconv2d_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_zeropadding2d_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_zeropadding3d_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_cropping2d_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_cropping3d_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_generator_methods_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:train_generator";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:val_generator";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:pred_generator";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_spatialdropout1d_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_spatialdropout2d_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_spatialdropout3d_legacy_interface";
    "/tests/keras/legacy/interface_test.py" -> "Fxn:test_optimizer_get_updates_legacy_interface";
    "/tests/keras/legacy/layers_test.py" -> "Import:pytest";
    "/tests/keras/legacy/layers_test.py" -> "Import:keras_test";
    "/tests/keras/legacy/layers_test.py" -> "Import:layer_test";
    "/tests/keras/legacy/layers_test.py" -> "Import:layers";
    "/tests/keras/legacy/layers_test.py" -> "Import:layers";
    "/tests/keras/legacy/layers_test.py" -> "Import:models";
    "/tests/keras/legacy/layers_test.py" -> "Import:regularizers";
    "/tests/keras/legacy/layers_test.py" -> "Import:constraints";
    "/tests/keras/legacy/layers_test.py" -> "Import:backend";
    "/tests/keras/legacy/layers_test.py" -> "Import:numpy";
    "/tests/keras/legacy/layers_test.py" -> "Fxn:test_highway";
    "/tests/keras/legacy/layers_test.py" -> "Fxn:test_maxout_dense";
    "/tests/keras/legacy/layers_test.py" -> "Fxn:test_merge";
    "/tests/keras/legacy/layers_test.py" -> "Fxn:fn_mode";
    "/tests/keras/legacy/layers_test.py" -> "Fxn:fn_output_shape";
    "/tests/keras/legacy/layers_test.py" -> "Fxn:fn_output_mask";
    "/tests/keras/legacy/layers_test.py" -> "Fxn:fn_mode";
    "/tests/keras/legacy/layers_test.py" -> "Fxn:test_merge_mask_2d";
    "/tests/keras/legacy/layers_test.py" -> "Fxn:test_merge_mask_3d";
    "/tests/keras/legacy/layers_test.py" -> "Fxn:test_sequential_regression";
    "/tests/keras/legacy/models_test.py" -> "Import:absolute_import";
    "/tests/keras/legacy/models_test.py" -> "Import:print_function";
    "/tests/keras/legacy/models_test.py" -> "Import:pytest";
    "/tests/keras/legacy/models_test.py" -> "Import:import";
    "/tests/keras/legacy/models_test.py" -> "Import:numpy";
    "/tests/keras/legacy/models_test.py" -> "Import:Sequential";
    "/tests/keras/legacy/models_test.py" -> "Import:Dense,";
    "/tests/keras/legacy/models_test.py" -> "Import:Merge";
    "/tests/keras/legacy/models_test.py" -> "Import:np_utils";
    "/tests/keras/legacy/models_test.py" -> "Import:get_test_data,";
    "/tests/keras/legacy/models_test.py" -> "Import:model_from_json,";
    "/tests/keras/legacy/models_test.py" -> "Fxn:in_tmpdir";
    "/tests/keras/legacy/models_test.py" -> "Fxn:_get_test_data";
    "/tests/keras/legacy/models_test.py" -> "Fxn:test_merge_sum";
    "/tests/keras/legacy/models_test.py" -> "Fxn:test_merge_dot";
    "/tests/keras/legacy/models_test.py" -> "Fxn:test_merge_concat";
    "/tests/keras/legacy/models_test.py" -> "Fxn:test_merge_recursivity";
    "/tests/keras/legacy/models_test.py" -> "Fxn:test_merge_overlap";
    "/tests/keras/preprocessing/image_test.py" -> "Import:pytest";
    "/tests/keras/preprocessing/image_test.py" -> "Import:image";
    "/tests/keras/preprocessing/image_test.py" -> "Import:Image";
    "/tests/keras/preprocessing/image_test.py" -> "Import:numpy";
    "/tests/keras/preprocessing/image_test.py" -> "Import:import";
    "/tests/keras/preprocessing/image_test.py" -> "Import:tempfile";
    "/tests/keras/preprocessing/image_test.py" -> "Import:shutil";
    "/tests/keras/preprocessing/image_test.py" -> "class:TestImage(object):";
    "class:TestImage(object):" -> "Fxn:setup_class";
    "class:TestImage(object):" -> "Fxn:teardown_class";
    "class:TestImage(object):" -> "Fxn:test_image_data_generator";
    "class:TestImage(object):" -> "Fxn:test_image_data_generator_with_validation_split";
    "class:TestImage(object):" -> "Fxn:test_image_data_generator_with_split_value_error";
    "class:TestImage(object):" -> "Fxn:test_image_data_generator_invalid_data";
    "class:TestImage(object):" -> "Fxn:test_image_data_generator_fit";
    "class:TestImage(object):" -> "Fxn:test_directory_iterator";
    "class:TestImage(object):" -> "Fxn:preprocess_test";
    "class:TestImage(object):" -> "Fxn:test_directory_iterator_class_mode_input";
    "class:TestImage(object):" -> "Fxn:test_directory_iterator_with_validation_split";
    "class:TestImage(object):" -> "Fxn:test_img_utils";
    "class:TestImage(object):" -> "Fxn:test_random_transforms";
    "class:TestImage(object):" -> "Fxn:test_batch_standardize";
    "class:TestImage(object):" -> "Fxn:test_load_img";
    "Fxn:setup_class" -> "Fxn:range(8):";
    "Fxn:setup_class" -> "Fxn:np.random.rand(cls.img_w,";
    "Fxn:setup_class" -> "Fxn:np.random.rand(cls.img_w,";
    "Fxn:setup_class" -> "Fxn:np.random.rand(cls.img_w,";
    "Fxn:setup_class" -> "Fxn:Image.fromarray(imarray.astype('uint8')).convert('RGB')";
    "Fxn:setup_class" -> "Fxn:rgb_images.append(im)";
    "Fxn:setup_class" -> "Fxn:np.random.rand(cls.img_w,";
    "Fxn:setup_class" -> "Fxn:Image.fromarray(imarray.astype('uint8').squeeze()).convert('L')";
    "Fxn:setup_class" -> "Fxn:gray_images.append(im)";
    "Fxn:test_image_data_generator" -> "Fxn:img_list.append(image.img_to_array(im)[None,";
    "Fxn:test_image_data_generator" -> "Fxn:np.vstack(img_list)";
    "Fxn:test_image_data_generator" -> "Fxn:image.ImageDataGenerator(";
    "Fxn:test_image_data_generator" -> "Fxn:brightness_range=(1,";
    "Fxn:test_image_data_generator" -> "Fxn:generator.fit(images,";
    "Fxn:test_image_data_generator" -> "Fxn:generator.flow(images,";
    "Fxn:test_image_data_generator" -> "Fxn:np.arange(images.shape[0]),";
    "Fxn:test_image_data_generator" -> "Fxn:save_to_dir=str(tmpdir),";
    "Fxn:test_image_data_generator" -> "Fxn:list(y)";
    "Fxn:test_image_data_generator" -> "Fxn:generator.flow(images,";
    "Fxn:test_image_data_generator" -> "Fxn:np.arange(images.shape[0]),";
    "Fxn:test_image_data_generator" -> "Fxn:save_to_dir=str(tmpdir),";
    "Fxn:test_image_data_generator" -> "Fxn:list(y)";
    "Fxn:test_image_data_generator" -> "Fxn:generator.flow(images,";
    "Fxn:test_image_data_generator" -> "Fxn:np.arange(images.shape[0]),";
    "Fxn:test_image_data_generator" -> "Fxn:save_to_dir=str(tmpdir),";
    "Fxn:test_image_data_generator" -> "Fxn:len(seq)";
    "Fxn:test_image_data_generator" -> "Fxn:list(y)";
    "Fxn:test_image_data_generator" -> "Fxn:generator.flow(images,";
    "Fxn:test_image_data_generator" -> "Fxn:np.arange(images.shape[0]),";
    "Fxn:test_image_data_generator" -> "Fxn:save_to_dir=str(tmpdir),";
    "Fxn:test_image_data_generator" -> "Fxn:list(y)";
    "Fxn:test_image_data_generator" -> "Fxn:seq.on_epoch_end()";
    "Fxn:test_image_data_generator" -> "Fxn:list(y)";
    "Fxn:test_image_data_generator" -> "Fxn:list(y2)";
    "Fxn:test_image_data_generator_with_validation_split" -> "Fxn:img_list.append(image.img_to_array(im)[None,";
    "Fxn:test_image_data_generator_with_validation_split" -> "Fxn:np.vstack(img_list)";
    "Fxn:test_image_data_generator_with_validation_split" -> "Fxn:image.ImageDataGenerator(validation_split=0.5)";
    "Fxn:test_image_data_generator_with_validation_split" -> "Fxn:generator.flow(images,";
    "Fxn:test_image_data_generator_with_validation_split" -> "Fxn:np.arange(images.shape[0]),";
    "Fxn:test_image_data_generator_with_validation_split" -> "Fxn:list(y)";
    "Fxn:test_image_data_generator_with_validation_split" -> "Fxn:generator.flow(images,";
    "Fxn:test_image_data_generator_with_validation_split" -> "Fxn:np.arange(images.shape[0]),";
    "Fxn:test_image_data_generator_with_validation_split" -> "Fxn:list(y2)";
    "Fxn:test_image_data_generator_with_validation_split" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_image_data_generator_with_validation_split" -> "Fxn:generator.flow(images,";
    "Fxn:test_image_data_generator_with_validation_split" -> "Fxn:np.arange(images.shape[0]),";
    "Fxn:test_image_data_generator_with_split_value_error" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_image_data_generator_with_split_value_error" -> "Fxn:image.ImageDataGenerator(validation_split=5)";
    "Fxn:test_image_data_generator_invalid_data" -> "Fxn:image.ImageDataGenerator(";
    "Fxn:test_image_data_generator_invalid_data" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_image_data_generator_invalid_data" -> "Fxn:np.random.random((3,";
    "Fxn:test_image_data_generator_invalid_data" -> "Fxn:generator.fit(x)";
    "Fxn:test_image_data_generator_invalid_data" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_image_data_generator_invalid_data" -> "Fxn:np.random.random((32,";
    "Fxn:test_image_data_generator_invalid_data" -> "Fxn:generator.flow(np.arange(x.shape[0]))";
    "Fxn:test_image_data_generator_fit" -> "Fxn:image.ImageDataGenerator(";
    "Fxn:test_image_data_generator_fit" -> "Fxn:zoom_range=(0.2,";
    "Fxn:test_image_data_generator_fit" -> "Fxn:np.random.random((32,";
    "Fxn:test_image_data_generator_fit" -> "Fxn:generator.fit(x)";
    "Fxn:test_image_data_generator_fit" -> "Fxn:np.random.random((32,";
    "Fxn:test_image_data_generator_fit" -> "Fxn:generator.fit(x)";
    "Fxn:test_image_data_generator_fit" -> "Fxn:np.random.random((32,";
    "Fxn:test_image_data_generator_fit" -> "Fxn:generator.fit(x)";
    "Fxn:test_image_data_generator_fit" -> "Fxn:image.ImageDataGenerator(";
    "Fxn:test_image_data_generator_fit" -> "Fxn:np.random.random((32,";
    "Fxn:test_image_data_generator_fit" -> "Fxn:generator.fit(x)";
    "Fxn:test_image_data_generator_fit" -> "Fxn:np.random.random((32,";
    "Fxn:test_image_data_generator_fit" -> "Fxn:generator.fit(x)";
    "Fxn:test_image_data_generator_fit" -> "Fxn:np.random.random((32,";
    "Fxn:test_image_data_generator_fit" -> "Fxn:generator.fit(x)";
    "Fxn:test_directory_iterator" -> "Fxn:range(num_classes):";
    "Fxn:test_directory_iterator" -> "Fxn:'class-{}'.format(cl)";
    "Fxn:test_directory_iterator" -> "Fxn:os.path.join(class_directory,";
    "Fxn:test_directory_iterator" -> "Fxn:os.path.join(class_directory,";
    "Fxn:test_directory_iterator" -> "Fxn:os.path.join(class_directory,";
    "Fxn:test_directory_iterator" -> "Fxn:tmpdir.join(path).mkdir()";
    "Fxn:test_directory_iterator" -> "Fxn:paths.append(classpaths)";
    "Fxn:preprocess_test" -> "Fxn:img.resize((1,";
    "Fxn:preprocess_test" -> "Fxn:image.ImageDataGenerator(preprocessing_function=preprocess_test)";
    "Fxn:preprocess_test" -> "Fxn:generator.flow_from_directory(str(tmpdir),";
    "Fxn:preprocess_test" -> "Fxn:target_size=(26,";
    "Fxn:preprocess_test" -> "Fxn:image.load_img(os.path.join(dir_seq.directory,";
    "Fxn:preprocess_test" -> "Fxn:preprocess_test(test_x1)";
    "Fxn:preprocess_test" -> "Fxn:test_x1.resize((26,";
    "Fxn:preprocess_test" -> "Fxn:image.img_to_array(test_x1)";
    "Fxn:preprocess_test" -> "Fxn:dir_seq.image_data_generator.random_transform(test_x1)";
    "Fxn:preprocess_test" -> "Fxn:dir_seq.image_data_generator.standardize(test_x1)";
    "Fxn:test_directory_iterator_class_mode_input" -> "Fxn:tmpdir.join('class-1').mkdir()";
    "Fxn:test_directory_iterator_class_mode_input" -> "Fxn:str(tmpdir";
    "Fxn:test_directory_iterator_class_mode_input" -> "Fxn:'image-{}.jpg'.format(count))";
    "Fxn:test_directory_iterator_class_mode_input" -> "Fxn:im.save(filename)";
    "Fxn:test_directory_iterator_class_mode_input" -> "Fxn:image.ImageDataGenerator()";
    "Fxn:test_directory_iterator_class_mode_input" -> "Fxn:generator.flow_from_directory(str(tmpdir),";
    "Fxn:test_directory_iterator_class_mode_input" -> "Fxn:next(dir_iterator)";
    "Fxn:test_directory_iterator_class_mode_input" -> "Fxn:assert(batch[0].shape";
    "Fxn:test_directory_iterator_class_mode_input" -> "Fxn:assert(input_img[0][0][0]";
    "Fxn:test_directory_iterator_class_mode_input" -> "Fxn:@pytest.mark.parametrize('validation_split,num_training',";
    "Fxn:test_directory_iterator_with_validation_split" -> "Fxn:tempfile.mkdtemp(prefix='test_images')";
    "Fxn:test_directory_iterator_with_validation_split" -> "Fxn:range(num_classes):";
    "Fxn:test_directory_iterator_with_validation_split" -> "Fxn:'class-{}'.format(cl)";
    "Fxn:test_directory_iterator_with_validation_split" -> "Fxn:os.path.join(class_directory,";
    "Fxn:test_directory_iterator_with_validation_split" -> "Fxn:os.path.join(class_directory,";
    "Fxn:test_directory_iterator_with_validation_split" -> "Fxn:os.path.join(class_directory,";
    "Fxn:test_directory_iterator_with_validation_split" -> "Fxn:os.mkdir(os.path.join(tmp_folder,";
    "Fxn:test_directory_iterator_with_validation_split" -> "Fxn:paths.append(classpaths)";
    "Fxn:test_img_utils" -> "Fxn:np.random.random((3,";
    "Fxn:test_img_utils" -> "Fxn:image.array_to_img(x,";
    "Fxn:test_img_utils" -> "Fxn:image.img_to_array(img,";
    "Fxn:test_img_utils" -> "Fxn:np.random.random((1,";
    "Fxn:test_img_utils" -> "Fxn:image.array_to_img(x,";
    "Fxn:test_img_utils" -> "Fxn:image.img_to_array(img,";
    "Fxn:test_img_utils" -> "Fxn:np.random.random((height,";
    "Fxn:test_img_utils" -> "Fxn:image.array_to_img(x,";
    "Fxn:test_img_utils" -> "Fxn:image.img_to_array(img,";
    "Fxn:test_img_utils" -> "Fxn:np.random.random((height,";
    "Fxn:test_img_utils" -> "Fxn:image.array_to_img(x,";
    "Fxn:test_img_utils" -> "Fxn:image.img_to_array(img,";
    "Fxn:test_img_utils" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_img_utils" -> "Fxn:np.random.random((height,";
    "Fxn:test_img_utils" -> "Fxn:image.array_to_img(x,";
    "Fxn:test_img_utils" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_img_utils" -> "Fxn:np.random.random((height,";
    "Fxn:test_img_utils" -> "Fxn:image.array_to_img(x,";
    "Fxn:test_img_utils" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_img_utils" -> "Fxn:np.random.random((height,";
    "Fxn:test_img_utils" -> "Fxn:image.array_to_img(x,";
    "Fxn:test_img_utils" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_img_utils" -> "Fxn:np.random.random((height,";
    "Fxn:test_img_utils" -> "Fxn:image.img_to_array(x,";
    "Fxn:test_img_utils" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_img_utils" -> "Fxn:np.random.random((height,";
    "Fxn:test_img_utils" -> "Fxn:image.img_to_array(x,";
    "Fxn:test_random_transforms" -> "Fxn:np.random.random((2,";
    "Fxn:test_random_transforms" -> "Fxn:image.random_rotation(x,";
    "Fxn:test_random_transforms" -> "Fxn:image.random_shift(x,";
    "Fxn:test_random_transforms" -> "Fxn:image.random_shear(x,";
    "Fxn:test_random_transforms" -> "Fxn:image.random_zoom(x,";
    "Fxn:test_random_transforms" -> "Fxn:image.random_channel_shift(x,";
    "Fxn:test_batch_standardize" -> "Fxn:img_list.append(image.img_to_array(im)[None,";
    "Fxn:test_batch_standardize" -> "Fxn:np.vstack(img_list)";
    "Fxn:test_batch_standardize" -> "Fxn:image.ImageDataGenerator(";
    "Fxn:test_batch_standardize" -> "Fxn:brightness_range=(1,";
    "Fxn:test_batch_standardize" -> "Fxn:generator.fit(images,";
    "Fxn:test_batch_standardize" -> "Fxn:np.copy(images)";
    "Fxn:test_batch_standardize" -> "Fxn:enumerate(transformed):";
    "Fxn:test_batch_standardize" -> "Fxn:generator.random_transform(im)";
    "Fxn:test_batch_standardize" -> "Fxn:generator.standardize(transformed)";
    "Fxn:test_load_img" -> "Fxn:str(tmpdir";
    "Fxn:test_load_img" -> "Fxn:np.array(255";
    "Fxn:test_load_img" -> "Fxn:np.random.rand(100,";
    "Fxn:test_load_img" -> "Fxn:image.array_to_img(original_im_array,";
    "Fxn:test_load_img" -> "Fxn:original_im.save(filename)";
    "Fxn:test_load_img" -> "Fxn:image.load_img(filename)";
    "Fxn:test_load_img" -> "Fxn:image.img_to_array(loaded_im)";
    "Fxn:test_load_img" -> "Fxn:np.all(loaded_im_array";
    "Fxn:test_load_img" -> "Fxn:image.load_img(filename,";
    "Fxn:test_load_img" -> "Fxn:image.img_to_array(loaded_im)";
    "Fxn:test_load_img" -> "Fxn:image.load_img(filename,";
    "Fxn:test_load_img" -> "Fxn:target_size=(100,";
    "Fxn:test_load_img" -> "Fxn:image.img_to_array(loaded_im)";
    "Fxn:test_load_img" -> "Fxn:np.all(loaded_im_array";
    "Fxn:test_load_img" -> "Fxn:image.load_img(filename,";
    "Fxn:test_load_img" -> "Fxn:target_size=(100,";
    "Fxn:test_load_img" -> "Fxn:image.img_to_array(loaded_im)";
    "Fxn:test_load_img" -> "Fxn:image.load_img(filename,";
    "Fxn:test_load_img" -> "Fxn:target_size=(25,";
    "Fxn:test_load_img" -> "Fxn:image.img_to_array(loaded_im)";
    "Fxn:test_load_img" -> "Fxn:image.load_img(filename,";
    "Fxn:test_load_img" -> "Fxn:target_size=(25,";
    "Fxn:test_load_img" -> "Fxn:image.img_to_array(loaded_im)";
    "Fxn:test_load_img" -> "Fxn:image.load_img(filename,";
    "Fxn:test_load_img" -> "Fxn:target_size=(25,";
    "Fxn:test_load_img" -> "Fxn:image.img_to_array(loaded_im_nearest)";
    "Fxn:test_load_img" -> "Fxn:np.any(loaded_im_array_nearest";
    "Fxn:test_load_img" -> "Fxn:image.load_img(filename,";
    "Fxn:test_load_img" -> "Fxn:pytest.raises(ValueError):";
    "Fxn:test_load_img" -> "Fxn:image.load_img(filename,";
    "Fxn:test_load_img" -> "Fxn:target_size=(25,";
    "Fxn:test_load_img" -> "Fxn:pytest.main([__file__])";
    "/tests/keras/preprocessing/sequence_test.py" -> "Import:numpy";
    "/tests/keras/preprocessing/sequence_test.py" -> "Import:assert_allclose";
    "/tests/keras/preprocessing/sequence_test.py" -> "Import:pytest";
    "/tests/keras/preprocessing/sequence_test.py" -> "Import:pad_sequences";
    "/tests/keras/preprocessing/sequence_test.py" -> "Import:make_sampling_table";
    "/tests/keras/preprocessing/sequence_test.py" -> "Import:skipgrams";
    "/tests/keras/preprocessing/sequence_test.py" -> "Import:_remove_long_seq";
    "/tests/keras/preprocessing/sequence_test.py" -> "Import:TimeseriesGenerator";
    "/tests/keras/preprocessing/sequence_test.py" -> "Fxn:test_pad_sequences";
    "/tests/keras/preprocessing/sequence_test.py" -> "Fxn:test_pad_sequences_vector";
    "/tests/keras/preprocessing/sequence_test.py" -> "Fxn:test_make_sampling_table";
    "/tests/keras/preprocessing/sequence_test.py" -> "Fxn:test_skipgrams";
    "/tests/keras/preprocessing/sequence_test.py" -> "Fxn:test_remove_long_seq";
    "/tests/keras/preprocessing/sequence_test.py" -> "Fxn:test_TimeseriesGenerator";
    "/tests/keras/preprocessing/text_test.py" -> "Import:numpy";
    "/tests/keras/preprocessing/text_test.py" -> "Import:pytest";
    "/tests/keras/preprocessing/text_test.py" -> "Import:Tokenizer,";
    "/tests/keras/preprocessing/text_test.py" -> "Fxn:test_one_hot";
    "/tests/keras/preprocessing/text_test.py" -> "Fxn:test_hashing_trick_hash";
    "/tests/keras/preprocessing/text_test.py" -> "Fxn:test_hashing_trick_md5";
    "/tests/keras/preprocessing/text_test.py" -> "Fxn:test_tokenizer";
    "/tests/keras/preprocessing/text_test.py" -> "Fxn:test_sequential_fit";
    "/tests/keras/preprocessing/text_test.py" -> "Fxn:test_text_to_word_sequence";
    "/tests/keras/preprocessing/text_test.py" -> "Fxn:test_text_to_word_sequence_multichar_split";
    "/tests/keras/preprocessing/text_test.py" -> "Fxn:test_text_to_word_sequence_unicode";
    "/tests/keras/preprocessing/text_test.py" -> "Fxn:test_text_to_word_sequence_unicode_multichar_split";
    "/tests/keras/preprocessing/text_test.py" -> "Fxn:test_tokenizer_unicode";
    "/tests/keras/preprocessing/text_test.py" -> "Fxn:test_tokenizer_oov_flag";
    "/tests/keras/utils/conv_utils_test.py" -> "Import:pytest";
    "/tests/keras/utils/conv_utils_test.py" -> "Import:numpy";
    "/tests/keras/utils/conv_utils_test.py" -> "Import:conv_utils";
    "/tests/keras/utils/conv_utils_test.py" -> "Fxn:test_normalize_tuple";
    "/tests/keras/utils/conv_utils_test.py" -> "Fxn:test_invalid_data_format";
    "/tests/keras/utils/conv_utils_test.py" -> "Fxn:test_invalid_padding";
    "/tests/keras/utils/conv_utils_test.py" -> "Fxn:test_invalid_convert_kernel";
    "/tests/keras/utils/conv_utils_test.py" -> "Fxn:test_conv_output_length";
    "/tests/keras/utils/conv_utils_test.py" -> "Fxn:test_conv_input_length";
    "/tests/keras/utils/conv_utils_test.py" -> "Fxn:test_deconv_length";
    "/tests/keras/utils/data_utils_test.py" -> "Import:import";
    "/tests/keras/utils/data_utils_test.py" -> "Import:sys";
    "/tests/keras/utils/data_utils_test.py" -> "Import:tarfile";
    "/tests/keras/utils/data_utils_test.py" -> "Import:threading";
    "/tests/keras/utils/data_utils_test.py" -> "Import:zipfile";
    "/tests/keras/utils/data_utils_test.py" -> "Import:cycle";
    "/tests/keras/utils/data_utils_test.py" -> "Import:multiprocessing";
    "/tests/keras/utils/data_utils_test.py" -> "Import:numpy";
    "/tests/keras/utils/data_utils_test.py" -> "Import:pytest";
    "/tests/keras/utils/data_utils_test.py" -> "Import:six";
    "/tests/keras/utils/data_utils_test.py" -> "Import:urljoin";
    "/tests/keras/utils/data_utils_test.py" -> "Import:pathname2url";
    "/tests/keras/utils/data_utils_test.py" -> "Import:GeneratorEnqueuer";
    "/tests/keras/utils/data_utils_test.py" -> "Import:OrderedEnqueuer";
    "/tests/keras/utils/data_utils_test.py" -> "Import:Sequence";
    "/tests/keras/utils/data_utils_test.py" -> "Import:_hash_file";
    "/tests/keras/utils/data_utils_test.py" -> "Import:get_file";
    "/tests/keras/utils/data_utils_test.py" -> "Import:validate_file";
    "/tests/keras/utils/data_utils_test.py" -> "Fxn:next";
    "/tests/keras/utils/data_utils_test.py" -> "Fxn:use_spawn";
    "/tests/keras/utils/data_utils_test.py" -> "Fxn:wrapper";
    "/tests/keras/utils/data_utils_test.py" -> "Fxn:in_tmpdir";
    "/tests/keras/utils/data_utils_test.py" -> "Fxn:test_data_utils";
    "/tests/keras/utils/data_utils_test.py" -> "Fxn:__init__";
    "/tests/keras/utils/data_utils_test.py" -> "Fxn:__iter__";
    "/tests/keras/utils/data_utils_test.py" -> "Fxn:__next__";
    "/tests/keras/utils/data_utils_test.py" -> "Fxn:next";
    "/tests/keras/utils/data_utils_test.py" -> "Fxn:threadsafe_generator";
    "/tests/keras/utils/data_utils_test.py" -> "Fxn:g";
    "/tests/keras/utils/data_utils_test.py" -> "class:DummySequence(Sequence):";
    "/tests/keras/utils/data_utils_test.py" -> "class:FaultSequence(Sequence):";
    "class:DummySequence(Sequence):" -> "Fxn:__init__";
    "class:DummySequence(Sequence):" -> "Fxn:__getitem__";
    "class:DummySequence(Sequence):" -> "Fxn:__len__";
    "class:DummySequence(Sequence):" -> "Fxn:on_epoch_end";
    "Fxn:__getitem__" -> "Fxn:np.ones(self.shape,";
    "class:FaultSequence(Sequence):" -> "Fxn:__getitem__";
    "class:FaultSequence(Sequence):" -> "Fxn:__len__";
    "class:FaultSequence(Sequence):" -> "Fxn:on_epoch_end";
    "class:FaultSequence(Sequence):" -> "Fxn:create_generator_from_sequence_threads";
    "class:FaultSequence(Sequence):" -> "Fxn:create_generator_from_sequence_pcs";
    "class:FaultSequence(Sequence):" -> "Fxn:test_generator_enqueuer_threads";
    "class:FaultSequence(Sequence):" -> "Fxn:test_generator_enqueuer_processes";
    "class:FaultSequence(Sequence):" -> "Fxn:test_generator_enqueuer_fail_threads";
    "class:FaultSequence(Sequence):" -> "Fxn:test_generator_enqueuer_fail_processes";
    "class:FaultSequence(Sequence):" -> "Fxn:test_ordered_enqueuer_threads";
    "class:FaultSequence(Sequence):" -> "Fxn:test_ordered_enqueuer_threads_not_ordered";
    "class:FaultSequence(Sequence):" -> "Fxn:test_ordered_enqueuer_processes";
    "class:FaultSequence(Sequence):" -> "Fxn:test_ordered_enqueuer_fail_threads";
    "class:FaultSequence(Sequence):" -> "Fxn:test_on_epoch_end_processes";
    "class:FaultSequence(Sequence):" -> "Fxn:test_context_switch";
    "class:FaultSequence(Sequence):" -> "Fxn:test_on_epoch_end_threads";
    "class:FaultSequence(Sequence):" -> "Fxn:test_ordered_enqueuer_fail_processes";
    "class:FaultSequence(Sequence):" -> "Fxn:create_finite_generator_from_sequence_threads";
    "class:FaultSequence(Sequence):" -> "Fxn:create_finite_generator_from_sequence_pcs";
    "class:FaultSequence(Sequence):" -> "Fxn:test_finite_generator_enqueuer_threads";
    "class:FaultSequence(Sequence):" -> "Fxn:test_finite_generator_enqueuer_processes";
    "Fxn:__getitem__" -> "Fxn:IndexError(item,";
    "Fxn:create_generator_from_sequence_threads" -> "Fxn:cycle(range(len(ds))):";
    "Fxn:create_generator_from_sequence_pcs" -> "Fxn:cycle(range(len(ds))):";
    "Fxn:test_generator_enqueuer_threads" -> "Fxn:GeneratorEnqueuer(create_generator_from_sequence_threads(";
    "Fxn:test_generator_enqueuer_threads" -> "Fxn:DummySequence([3,";
    "Fxn:test_generator_enqueuer_threads" -> "Fxn:enqueuer.start(3,";
    "Fxn:test_generator_enqueuer_threads" -> "Fxn:enqueuer.get()";
    "Fxn:test_generator_enqueuer_threads" -> "Fxn:range(100):";
    "Fxn:test_generator_enqueuer_threads" -> "Fxn:acc.append(int(next(gen_output)[0,";
    "Fxn:test_generator_enqueuer_threads" -> "Fxn:len(set(acc)";
    "Fxn:test_generator_enqueuer_threads" -> "Fxn:set(range(100)))";
    "Fxn:test_generator_enqueuer_threads" -> "Fxn:enqueuer.stop()";
    "Fxn:test_generator_enqueuer_processes" -> "Fxn:GeneratorEnqueuer(create_generator_from_sequence_pcs(";
    "Fxn:test_generator_enqueuer_processes" -> "Fxn:DummySequence([3,";
    "Fxn:test_generator_enqueuer_processes" -> "Fxn:enqueuer.start(3,";
    "Fxn:test_generator_enqueuer_processes" -> "Fxn:enqueuer.get()";
    "Fxn:test_generator_enqueuer_processes" -> "Fxn:range(100):";
    "Fxn:test_generator_enqueuer_processes" -> "Fxn:acc.append(int(next(gen_output)[0,";
    "Fxn:test_generator_enqueuer_processes" -> "Fxn:list(range(100)),";
    "Fxn:test_generator_enqueuer_processes" -> "Fxn:enqueuer.stop()";
    "Fxn:test_generator_enqueuer_fail_threads" -> "Fxn:GeneratorEnqueuer(create_generator_from_sequence_threads(";
    "Fxn:test_generator_enqueuer_fail_threads" -> "Fxn:FaultSequence()),";
    "Fxn:test_generator_enqueuer_fail_threads" -> "Fxn:enqueuer.start(3,";
    "Fxn:test_generator_enqueuer_fail_threads" -> "Fxn:enqueuer.get()";
    "Fxn:test_generator_enqueuer_fail_threads" -> "Fxn:pytest.raises(IndexError):";
    "Fxn:test_generator_enqueuer_fail_threads" -> "Fxn:next(gen_output)";
    "Fxn:test_generator_enqueuer_fail_processes" -> "Fxn:GeneratorEnqueuer(create_generator_from_sequence_pcs(";
    "Fxn:test_generator_enqueuer_fail_processes" -> "Fxn:FaultSequence()),";
    "Fxn:test_generator_enqueuer_fail_processes" -> "Fxn:enqueuer.start(3,";
    "Fxn:test_generator_enqueuer_fail_processes" -> "Fxn:enqueuer.get()";
    "Fxn:test_generator_enqueuer_fail_processes" -> "Fxn:pytest.raises(IndexError):";
    "Fxn:test_generator_enqueuer_fail_processes" -> "Fxn:next(gen_output)";
    "Fxn:test_ordered_enqueuer_threads" -> "Fxn:OrderedEnqueuer(DummySequence([3,";
    "Fxn:test_ordered_enqueuer_threads" -> "Fxn:enqueuer.start(3,";
    "Fxn:test_ordered_enqueuer_threads" -> "Fxn:enqueuer.get()";
    "Fxn:test_ordered_enqueuer_threads" -> "Fxn:range(100):";
    "Fxn:test_ordered_enqueuer_threads" -> "Fxn:acc.append(next(gen_output)[0,";
    "Fxn:test_ordered_enqueuer_threads" -> "Fxn:list(range(100)),";
    "Fxn:test_ordered_enqueuer_threads" -> "Fxn:enqueuer.stop()";
    "Fxn:test_ordered_enqueuer_threads_not_ordered" -> "Fxn:OrderedEnqueuer(DummySequence([3,";
    "Fxn:test_ordered_enqueuer_threads_not_ordered" -> "Fxn:enqueuer.start(3,";
    "Fxn:test_ordered_enqueuer_threads_not_ordered" -> "Fxn:enqueuer.get()";
    "Fxn:test_ordered_enqueuer_threads_not_ordered" -> "Fxn:range(100):";
    "Fxn:test_ordered_enqueuer_threads_not_ordered" -> "Fxn:acc.append(next(gen_output)[0,";
    "Fxn:test_ordered_enqueuer_threads_not_ordered" -> "Fxn:list(range(100)),";
    "Fxn:test_ordered_enqueuer_threads_not_ordered" -> "Fxn:enqueuer.stop()";
    "Fxn:test_ordered_enqueuer_processes" -> "Fxn:OrderedEnqueuer(DummySequence([3,";
    "Fxn:test_ordered_enqueuer_processes" -> "Fxn:enqueuer.start(3,";
    "Fxn:test_ordered_enqueuer_processes" -> "Fxn:enqueuer.get()";
    "Fxn:test_ordered_enqueuer_processes" -> "Fxn:range(100):";
    "Fxn:test_ordered_enqueuer_processes" -> "Fxn:acc.append(next(gen_output)[0,";
    "Fxn:test_ordered_enqueuer_processes" -> "Fxn:list(range(100)),";
    "Fxn:test_ordered_enqueuer_processes" -> "Fxn:enqueuer.stop()";
    "Fxn:test_ordered_enqueuer_fail_threads" -> "Fxn:OrderedEnqueuer(FaultSequence(),";
    "Fxn:test_ordered_enqueuer_fail_threads" -> "Fxn:enqueuer.start(3,";
    "Fxn:test_ordered_enqueuer_fail_threads" -> "Fxn:enqueuer.get()";
    "Fxn:test_ordered_enqueuer_fail_threads" -> "Fxn:pytest.raises(StopIteration):";
    "Fxn:test_ordered_enqueuer_fail_threads" -> "Fxn:next(gen_output)";
    "Fxn:test_on_epoch_end_processes" -> "Fxn:OrderedEnqueuer(DummySequence([3,";
    "Fxn:test_on_epoch_end_processes" -> "Fxn:enqueuer.start(3,";
    "Fxn:test_on_epoch_end_processes" -> "Fxn:enqueuer.get()";
    "Fxn:test_on_epoch_end_processes" -> "Fxn:range(200):";
    "Fxn:test_on_epoch_end_processes" -> "Fxn:acc.append(next(gen_output)[0,";
    "Fxn:test_on_epoch_end_processes" -> "Fxn:list([k";
    "Fxn:test_on_epoch_end_processes" -> "Fxn:range(100)]),";
    "Fxn:test_on_epoch_end_processes" -> "Fxn:enqueuer.stop()";
    "Fxn:test_context_switch" -> "Fxn:OrderedEnqueuer(DummySequence([3,";
    "Fxn:test_context_switch" -> "Fxn:OrderedEnqueuer(DummySequence([3,";
    "Fxn:test_context_switch" -> "Fxn:enqueuer.start(3,";
    "Fxn:test_context_switch" -> "Fxn:enqueuer2.start(3,";
    "Fxn:test_context_switch" -> "Fxn:enqueuer.get()";
    "Fxn:test_context_switch" -> "Fxn:enqueuer2.get()";
    "Fxn:test_context_switch" -> "Fxn:range(100):";
    "Fxn:test_context_switch" -> "Fxn:acc.append(next(gen_output)[0,";
    "Fxn:test_context_switch" -> "Fxn:range(100):";
    "Fxn:test_context_switch" -> "Fxn:acc.append(next(gen_output2)[0,";
    "Fxn:test_context_switch" -> "Fxn:next(gen_output)[0,";
    "Fxn:test_context_switch" -> "Fxn:next(gen_output)[0,";
    "Fxn:test_context_switch" -> "Fxn:next(gen_output2)[0,";
    "Fxn:test_context_switch" -> "Fxn:next(gen_output2)[0,";
    "Fxn:test_context_switch" -> "Fxn:enqueuer.stop()";
    "Fxn:test_context_switch" -> "Fxn:enqueuer2.stop()";
    "Fxn:test_on_epoch_end_threads" -> "Fxn:OrderedEnqueuer(DummySequence([3,";
    "Fxn:test_on_epoch_end_threads" -> "Fxn:enqueuer.start(3,";
    "Fxn:test_on_epoch_end_threads" -> "Fxn:enqueuer.get()";
    "Fxn:test_on_epoch_end_threads" -> "Fxn:range(100):";
    "Fxn:test_on_epoch_end_threads" -> "Fxn:acc.append(next(gen_output)[0,";
    "Fxn:test_on_epoch_end_threads" -> "Fxn:range(100):";
    "Fxn:test_on_epoch_end_threads" -> "Fxn:acc.append(next(gen_output)[0,";
    "Fxn:test_on_epoch_end_threads" -> "Fxn:list([k";
    "Fxn:test_on_epoch_end_threads" -> "Fxn:range(100)]),";
    "Fxn:test_on_epoch_end_threads" -> "Fxn:enqueuer.stop()";
    "Fxn:test_ordered_enqueuer_fail_processes" -> "Fxn:OrderedEnqueuer(FaultSequence(),";
    "Fxn:test_ordered_enqueuer_fail_processes" -> "Fxn:enqueuer.start(3,";
    "Fxn:test_ordered_enqueuer_fail_processes" -> "Fxn:enqueuer.get()";
    "Fxn:test_ordered_enqueuer_fail_processes" -> "Fxn:pytest.raises(StopIteration):";
    "Fxn:test_ordered_enqueuer_fail_processes" -> "Fxn:next(gen_output)";
    "Fxn:create_finite_generator_from_sequence_threads" -> "Fxn:range(len(ds)):";
    "Fxn:create_finite_generator_from_sequence_pcs" -> "Fxn:range(len(ds)):";
    "Fxn:test_finite_generator_enqueuer_threads" -> "Fxn:GeneratorEnqueuer(create_finite_generator_from_sequence_threads(";
    "Fxn:test_finite_generator_enqueuer_threads" -> "Fxn:DummySequence([3,";
    "Fxn:test_finite_generator_enqueuer_threads" -> "Fxn:enqueuer.start(3,";
    "Fxn:test_finite_generator_enqueuer_threads" -> "Fxn:enqueuer.get()";
    "Fxn:test_finite_generator_enqueuer_threads" -> "Fxn:acc.append(int(output[0,";
    "Fxn:test_finite_generator_enqueuer_threads" -> "Fxn:set(acc)";
    "Fxn:test_finite_generator_enqueuer_threads" -> "Fxn:set(range(100)),";
    "Fxn:test_finite_generator_enqueuer_threads" -> "Fxn:enqueuer.stop()";
    "Fxn:test_finite_generator_enqueuer_processes" -> "Fxn:GeneratorEnqueuer(create_finite_generator_from_sequence_pcs(";
    "Fxn:test_finite_generator_enqueuer_processes" -> "Fxn:DummySequence([3,";
    "Fxn:test_finite_generator_enqueuer_processes" -> "Fxn:enqueuer.start(3,";
    "Fxn:test_finite_generator_enqueuer_processes" -> "Fxn:enqueuer.get()";
    "Fxn:test_finite_generator_enqueuer_processes" -> "Fxn:acc.append(int(output[0,";
    "Fxn:test_finite_generator_enqueuer_processes" -> "Fxn:list(range(100)),";
    "Fxn:test_finite_generator_enqueuer_processes" -> "Fxn:enqueuer.stop()";
    "Fxn:test_finite_generator_enqueuer_processes" -> "Fxn:pytest.main([__file__])";
    "/tests/keras/utils/generic_utils_test.py" -> "Import:sys";
    "/tests/keras/utils/generic_utils_test.py" -> "Import:pytest";
    "/tests/keras/utils/generic_utils_test.py" -> "Import:numpy";
    "/tests/keras/utils/generic_utils_test.py" -> "Import:marshal";
    "/tests/keras/utils/generic_utils_test.py" -> "Import:custom_object_scope";
    "/tests/keras/utils/generic_utils_test.py" -> "Import:has_arg";
    "/tests/keras/utils/generic_utils_test.py" -> "Import:Progbar";
    "/tests/keras/utils/generic_utils_test.py" -> "Import:func_dump";
    "/tests/keras/utils/generic_utils_test.py" -> "Import:func_load";
    "/tests/keras/utils/generic_utils_test.py" -> "Import:keras_test";
    "/tests/keras/utils/generic_utils_test.py" -> "Import:activations";
    "/tests/keras/utils/generic_utils_test.py" -> "Import:regularizers";
    "/tests/keras/utils/generic_utils_test.py" -> "Fxn:test_progbar";
    "/tests/keras/utils/generic_utils_test.py" -> "Fxn:test_custom_objects_scope";
    "/tests/keras/utils/generic_utils_test.py" -> "Fxn:custom_fn";
    "/tests/keras/utils/generic_utils_test.py" -> "class:CustomClass(object):";
    "class:CustomClass(object):" -> "Fxn:test_has_arg";
    "class:CustomClass(object):" -> "Fxn:test_has_arg_positional_only";
    "class:CustomClass(object):" -> "Fxn:test_func_dump_and_load";
    "class:CustomClass(object):" -> "Fxn:test_func";
    "class:CustomClass(object):" -> "Fxn:get_test_func";
    "class:CustomClass(object):" -> "Fxn:test_func";
    "class:CustomClass(object):" -> "Fxn:test_func_dump_and_load_closure";
    "class:CustomClass(object):" -> "Fxn:test_func_dump_and_load_backwards_compat";
    "Fxn:test_has_arg" -> "Fxn:isinstance(fn,";
    "Fxn:test_has_arg" -> "Fxn:dict()";
    "Fxn:test_has_arg" -> "Fxn:exec('def";
    "Fxn:test_has_arg" -> "Fxn:pass'.format(fn),";
    "Fxn:test_has_arg" -> "Fxn:pytest.skip('Function";
    "Fxn:test_has_arg" -> "Fxn:context.pop('__builtins__',";
    "Fxn:test_has_arg" -> "Fxn:context.values()";
    "Fxn:test_has_arg" -> "Fxn:has_arg(fn,";
    "Fxn:test_has_arg" -> "Fxn:@pytest.mark.xfail(sys.version_info";
    "Fxn:test_has_arg_positional_only" -> "Fxn:has_arg(pow,";
    "Fxn:test_has_arg_positional_only" -> "Fxn:@pytest.mark.parametrize(";
    "Fxn:test_func" -> "Fxn:get_test_func()";
    "Fxn:test_func" -> "Fxn:Exception('Unknown";
    "Fxn:test_func" -> "Fxn:func_dump(test_func)";
    "Fxn:test_func" -> "Fxn:func_load(serialized)";
    "Fxn:test_func_dump_and_load_closure" -> "Fxn:func_dump(test_func)";
    "Fxn:test_func_dump_and_load_closure" -> "Fxn:func_load(serialized,";
    "Fxn:test_func_dump_and_load_closure" -> "Fxn:@pytest.mark.parametrize(";
    "Fxn:test_func_dump_and_load_backwards_compat" -> "Fxn:marshal.dumps(test_func.__code__).decode('raw_unicode_escape')";
    "Fxn:test_func_dump_and_load_backwards_compat" -> "Fxn:func_load(serialized,";
    "Fxn:test_func_dump_and_load_backwards_compat" -> "Fxn:pytest.main([__file__])";
    "/tests/keras/utils/io_utils_test.py" -> "Import:import";
    "/tests/keras/utils/io_utils_test.py" -> "Import:sys";
    "/tests/keras/utils/io_utils_test.py" -> "Import:pytest";
    "/tests/keras/utils/io_utils_test.py" -> "Import:Sequential";
    "/tests/keras/utils/io_utils_test.py" -> "Import:Dense";
    "/tests/keras/utils/io_utils_test.py" -> "Import:HDF5Matrix";
    "/tests/keras/utils/io_utils_test.py" -> "Import:ask_to_proceed_with_overwrite";
    "/tests/keras/utils/io_utils_test.py" -> "Import:numpy";
    "/tests/keras/utils/io_utils_test.py" -> "Import:six";
    "/tests/keras/utils/io_utils_test.py" -> "Import:warnings";
    "/tests/keras/utils/io_utils_test.py" -> "Import:h5py";
    "/tests/keras/utils/io_utils_test.py" -> "Import:patch";
    "/tests/keras/utils/io_utils_test.py" -> "Import:patch";
    "/tests/keras/utils/io_utils_test.py" -> "Fxn:in_tmpdir";
    "/tests/keras/utils/io_utils_test.py" -> "Fxn:create_dataset";
    "/tests/keras/utils/io_utils_test.py" -> "Fxn:test_io_utils";
    "/tests/keras/utils/io_utils_test.py" -> "Fxn:test_ask_to_proceed_with_overwrite";
    "/tests/keras/utils/layer_utils_test.py" -> "Import:pytest";
    "/tests/keras/utils/layer_utils_test.py" -> "Import:numpy";
    "/tests/keras/utils/layer_utils_test.py" -> "Import:assert_allclose";
    "/tests/keras/utils/layer_utils_test.py" -> "Import:backend";
    "/tests/keras/utils/layer_utils_test.py" -> "Import:Conv2D";
    "/tests/keras/utils/layer_utils_test.py" -> "Import:Dense";
    "/tests/keras/utils/layer_utils_test.py" -> "Import:Flatten";
    "/tests/keras/utils/layer_utils_test.py" -> "Import:Sequential";
    "/tests/keras/utils/layer_utils_test.py" -> "Import:layer_utils";
    "/tests/keras/utils/layer_utils_test.py" -> "Import:keras_test";
    "/tests/keras/utils/layer_utils_test.py" -> "Fxn:test_convert_weights";
    "/tests/keras/utils/layer_utils_test.py" -> "Fxn:get_model";
    "/tests/keras/utils/multi_gpu_test.py" -> "Import:print_function";
    "/tests/keras/utils/multi_gpu_test.py" -> "Import:keras";
    "/tests/keras/utils/multi_gpu_test.py" -> "Import:backend";
    "/tests/keras/utils/multi_gpu_test.py" -> "Import:multi_gpu_model";
    "/tests/keras/utils/multi_gpu_test.py" -> "Import:numpy";
    "/tests/keras/utils/multi_gpu_test.py" -> "Import:pytest";
    "/tests/keras/utils/multi_gpu_test.py" -> "Import:time";
    "/tests/keras/utils/multi_gpu_test.py" -> "Import:tensorflow";
    "/tests/keras/utils/multi_gpu_test.py" -> "Import:ImageDataGenerator";
    "/tests/keras/utils/multi_gpu_test.py" -> "Fxn:multi_gpu_test_simple_model";
    "/tests/keras/utils/multi_gpu_test.py" -> "Fxn:multi_gpu_test_multi_io_model";
    "/tests/keras/utils/multi_gpu_test.py" -> "Fxn:multi_gpu_test_invalid_devices";
    "/tests/keras/utils/multi_gpu_test.py" -> "Fxn:multi_gpu_application_np_array_benchmark";
    "/tests/keras/utils/multi_gpu_test.py" -> "Fxn:multi_gpu_application_folder_generator_benchmark";
    "/tests/keras/utils/np_utils_test.py" -> "Import:numpy";
    "/tests/keras/utils/np_utils_test.py" -> "Import:pytest";
    "/tests/keras/utils/np_utils_test.py" -> "Import:to_categorical";
    "/tests/keras/utils/np_utils_test.py" -> "Fxn:test_to_categorical";
    "/tests/keras/utils/vis_utils_test.py" -> "Import:pytest";
    "/tests/keras/utils/vis_utils_test.py" -> "Import:import";
    "/tests/keras/utils/vis_utils_test.py" -> "Import:sys";
    "/tests/keras/utils/vis_utils_test.py" -> "Import:numpy";
    "/tests/keras/utils/vis_utils_test.py" -> "Import:Conv2D";
    "/tests/keras/utils/vis_utils_test.py" -> "Import:Dense";
    "/tests/keras/utils/vis_utils_test.py" -> "Import:Flatten";
    "/tests/keras/utils/vis_utils_test.py" -> "Import:LSTM";
    "/tests/keras/utils/vis_utils_test.py" -> "Import:TimeDistributed";
    "/tests/keras/utils/vis_utils_test.py" -> "Import:Sequential";
    "/tests/keras/utils/vis_utils_test.py" -> "Import:vis_utils";
    "/tests/keras/utils/vis_utils_test.py" -> "Fxn:test_plot_model";
    "/tests/keras/wrappers/scikit_learn_test.py" -> "Import:pytest";
    "/tests/keras/wrappers/scikit_learn_test.py" -> "Import:numpy";
    "/tests/keras/wrappers/scikit_learn_test.py" -> "Import:get_test_data";
    "/tests/keras/wrappers/scikit_learn_test.py" -> "Import:Sequential";
    "/tests/keras/wrappers/scikit_learn_test.py" -> "Import:Dense,";
    "/tests/keras/wrappers/scikit_learn_test.py" -> "Import:KerasClassifier,";
    "/tests/keras/wrappers/scikit_learn_test.py" -> "Fxn:build_fn_clf";
    "/tests/keras/wrappers/scikit_learn_test.py" -> "Fxn:test_classify_build_fn";
    "/tests/keras/wrappers/scikit_learn_test.py" -> "Fxn:test_classify_class_build_fn";
    "/tests/keras/wrappers/scikit_learn_test.py" -> "class:ClassBuildFnClf(object):";
    "/tests/keras/wrappers/scikit_learn_test.py" -> "class:InheritClassBuildFnClf(KerasClassifier):";
    "/tests/keras/wrappers/scikit_learn_test.py" -> "class:ClassBuildFnReg(object):";
    "/tests/keras/wrappers/scikit_learn_test.py" -> "class:InheritClassBuildFnReg(KerasRegressor):";
    "/tests/keras/wrappers/scikit_learn_test.py" -> "Import:grid_search";
    "class:ClassBuildFnClf(object):" -> "Fxn:__call__";
    "class:ClassBuildFnClf(object):" -> "Fxn:test_classify_inherit_class_build_fn";
    "Fxn:__call__" -> "Fxn:build_fn_clf(hidden_dims)";
    "Fxn:__call__" -> "Fxn:KerasClassifier(";
    "Fxn:__call__" -> "Fxn:build_fn=ClassBuildFnClf(),";
    "Fxn:__call__" -> "Fxn:assert_classification_works(clf)";
    "Fxn:__call__" -> "Fxn:assert_string_classification_works(clf)";
    "class:InheritClassBuildFnClf(KerasClassifier):" -> "Fxn:__call__";
    "class:InheritClassBuildFnClf(KerasClassifier):" -> "Fxn:assert_classification_works";
    "class:InheritClassBuildFnClf(KerasClassifier):" -> "Fxn:assert_string_classification_works";
    "class:InheritClassBuildFnClf(KerasClassifier):" -> "Fxn:build_fn_reg";
    "class:InheritClassBuildFnClf(KerasClassifier):" -> "Fxn:test_regression_build_fn";
    "class:InheritClassBuildFnClf(KerasClassifier):" -> "Fxn:test_regression_class_build_fn";
    "Fxn:__call__" -> "Fxn:build_fn_clf(hidden_dims)";
    "Fxn:__call__" -> "Fxn:InheritClassBuildFnClf(";
    "Fxn:__call__" -> "Fxn:assert_classification_works(clf)";
    "Fxn:__call__" -> "Fxn:assert_string_classification_works(clf)";
    "Fxn:assert_classification_works" -> "Fxn:clf.fit(X_train,";
    "Fxn:assert_classification_works" -> "Fxn:sample_weight=np.ones(X_train.shape[0]),";
    "Fxn:assert_classification_works" -> "Fxn:clf.score(X_train,";
    "Fxn:assert_classification_works" -> "Fxn:np.isscalar(score)";
    "Fxn:assert_classification_works" -> "Fxn:np.isfinite(score)";
    "Fxn:assert_classification_works" -> "Fxn:clf.predict(X_test,";
    "Fxn:assert_classification_works" -> "Fxn:np.unique(preds):";
    "Fxn:assert_classification_works" -> "Fxn:range(num_classes)";
    "Fxn:assert_classification_works" -> "Fxn:clf.predict_proba(X_test,";
    "Fxn:assert_classification_works" -> "Fxn:np.allclose(np.sum(proba,";
    "Fxn:assert_classification_works" -> "Fxn:np.ones(num_test))";
    "Fxn:assert_string_classification_works" -> "Fxn:['cls{}'.format(x)";
    "Fxn:assert_string_classification_works" -> "Fxn:range(num_classes)]";
    "Fxn:assert_string_classification_works" -> "Fxn:np.array(string_classes)[y_train]";
    "Fxn:assert_string_classification_works" -> "Fxn:clf.fit(X_train,";
    "Fxn:assert_string_classification_works" -> "Fxn:clf.score(X_train,";
    "Fxn:assert_string_classification_works" -> "Fxn:np.isscalar(score)";
    "Fxn:assert_string_classification_works" -> "Fxn:np.isfinite(score)";
    "Fxn:assert_string_classification_works" -> "Fxn:clf.predict(X_test,";
    "Fxn:assert_string_classification_works" -> "Fxn:np.unique(preds):";
    "Fxn:assert_string_classification_works" -> "Fxn:clf.predict_proba(X_test,";
    "Fxn:assert_string_classification_works" -> "Fxn:np.allclose(np.sum(proba,";
    "Fxn:assert_string_classification_works" -> "Fxn:np.ones(num_test))";
    "Fxn:build_fn_reg" -> "Fxn:Sequential()";
    "Fxn:build_fn_reg" -> "Fxn:model.add(Dense(input_dim,";
    "Fxn:build_fn_reg" -> "Fxn:input_shape=(input_dim,)))";
    "Fxn:build_fn_reg" -> "Fxn:model.add(Activation('relu'))";
    "Fxn:build_fn_reg" -> "Fxn:model.add(Dense(hidden_dims))";
    "Fxn:build_fn_reg" -> "Fxn:model.add(Activation('relu'))";
    "Fxn:build_fn_reg" -> "Fxn:model.add(Dense(1))";
    "Fxn:build_fn_reg" -> "Fxn:model.add(Activation('linear'))";
    "Fxn:build_fn_reg" -> "Fxn:model.compile(optimizer='sgd',";
    "Fxn:test_regression_build_fn" -> "Fxn:KerasRegressor(";
    "Fxn:test_regression_build_fn" -> "Fxn:assert_regression_works(reg)";
    "class:ClassBuildFnReg(object):" -> "Fxn:__call__";
    "class:ClassBuildFnReg(object):" -> "Fxn:test_regression_inherit_class_build_fn";
    "Fxn:__call__" -> "Fxn:build_fn_reg(hidden_dims)";
    "Fxn:__call__" -> "Fxn:KerasRegressor(";
    "Fxn:__call__" -> "Fxn:build_fn=ClassBuildFnReg(),";
    "Fxn:__call__" -> "Fxn:assert_regression_works(reg)";
    "class:InheritClassBuildFnReg(KerasRegressor):" -> "Fxn:__call__";
    "class:InheritClassBuildFnReg(KerasRegressor):" -> "Fxn:assert_regression_works";
    "Fxn:__call__" -> "Fxn:build_fn_reg(hidden_dims)";
    "Fxn:__call__" -> "Fxn:InheritClassBuildFnReg(";
    "Fxn:__call__" -> "Fxn:assert_regression_works(reg)";
    "Fxn:assert_regression_works" -> "Fxn:reg.fit(X_train,";
    "Fxn:assert_regression_works" -> "Fxn:reg.score(X_train,";
    "Fxn:assert_regression_works" -> "Fxn:np.isscalar(score)";
    "Fxn:assert_regression_works" -> "Fxn:np.isfinite(score)";
    "Fxn:assert_regression_works" -> "Fxn:reg.predict(X_test,";
    "Fxn:assert_regression_works" -> "Fxn:pytest.main([__file__])";
    "Fxn:assert_regression_works" -> "Fxn:dict(hidden_dims";
    "Fxn:assert_regression_works" -> "Fxn:Inherit_class_build_fn_clf()";
    "Fxn:assert_regression_works" -> "Fxn:grid_search.GridSearchCV(classifier,";
    "Fxn:assert_regression_works" -> "Fxn:clf.fit(X_train,";
    "Fxn:assert_regression_works" -> "Fxn:dict(hidden_dims";
    "Fxn:assert_regression_works" -> "Fxn:Inherit_class_build_fn_reg()";
    "Fxn:assert_regression_works" -> "Fxn:grid_search.GridSearchCV(regressor,";
    "Fxn:assert_regression_works" -> "Fxn:reg.fit(X_train_reg,";
}
